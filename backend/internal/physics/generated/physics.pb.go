// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: physics.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShapeDescriptor_ShapeType int32

const (
	ShapeDescriptor_UNKNOWN ShapeDescriptor_ShapeType = 0
	ShapeDescriptor_SPHERE  ShapeDescriptor_ShapeType = 1
	ShapeDescriptor_BOX     ShapeDescriptor_ShapeType = 2
	ShapeDescriptor_TERRAIN ShapeDescriptor_ShapeType = 3
)

// Enum value maps for ShapeDescriptor_ShapeType.
var (
	ShapeDescriptor_ShapeType_name = map[int32]string{
		0: "UNKNOWN",
		1: "SPHERE",
		2: "BOX",
		3: "TERRAIN",
	}
	ShapeDescriptor_ShapeType_value = map[string]int32{
		"UNKNOWN": 0,
		"SPHERE":  1,
		"BOX":     2,
		"TERRAIN": 3,
	}
)

func (x ShapeDescriptor_ShapeType) Enum() *ShapeDescriptor_ShapeType {
	p := new(ShapeDescriptor_ShapeType)
	*p = x
	return p
}

func (x ShapeDescriptor_ShapeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShapeDescriptor_ShapeType) Descriptor() protoreflect.EnumDescriptor {
	return file_physics_proto_enumTypes[0].Descriptor()
}

func (ShapeDescriptor_ShapeType) Type() protoreflect.EnumType {
	return &file_physics_proto_enumTypes[0]
}

func (x ShapeDescriptor_ShapeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShapeDescriptor_ShapeType.Descriptor instead.
func (ShapeDescriptor_ShapeType) EnumDescriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{2, 0}
}

// Описание векторов и кватернионов
type Vector3 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float32                `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             float32                `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z             float32                `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector3) Reset() {
	*x = Vector3{}
	mi := &file_physics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector3) ProtoMessage() {}

func (x *Vector3) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector3.ProtoReflect.Descriptor instead.
func (*Vector3) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{0}
}

func (x *Vector3) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector3) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Vector3) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type Quaternion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float32                `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             float32                `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z             float32                `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	W             float32                `protobuf:"fixed32,4,opt,name=w,proto3" json:"w,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quaternion) Reset() {
	*x = Quaternion{}
	mi := &file_physics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quaternion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quaternion) ProtoMessage() {}

func (x *Quaternion) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quaternion.ProtoReflect.Descriptor instead.
func (*Quaternion) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{1}
}

func (x *Quaternion) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Quaternion) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Quaternion) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *Quaternion) GetW() float32 {
	if x != nil {
		return x.W
	}
	return 0
}

// Описание форм
type ShapeDescriptor struct {
	state protoimpl.MessageState    `protogen:"open.v1"`
	Type  ShapeDescriptor_ShapeType `protobuf:"varint,1,opt,name=type,proto3,enum=physics.ShapeDescriptor_ShapeType" json:"type,omitempty"`
	// Параметры для разных типов форм
	//
	// Types that are valid to be assigned to Shape:
	//
	//	*ShapeDescriptor_Sphere
	//	*ShapeDescriptor_Box
	//	*ShapeDescriptor_Terrain
	Shape         isShapeDescriptor_Shape `protobuf_oneof:"shape"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShapeDescriptor) Reset() {
	*x = ShapeDescriptor{}
	mi := &file_physics_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShapeDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapeDescriptor) ProtoMessage() {}

func (x *ShapeDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapeDescriptor.ProtoReflect.Descriptor instead.
func (*ShapeDescriptor) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{2}
}

func (x *ShapeDescriptor) GetType() ShapeDescriptor_ShapeType {
	if x != nil {
		return x.Type
	}
	return ShapeDescriptor_UNKNOWN
}

func (x *ShapeDescriptor) GetShape() isShapeDescriptor_Shape {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *ShapeDescriptor) GetSphere() *SphereData {
	if x != nil {
		if x, ok := x.Shape.(*ShapeDescriptor_Sphere); ok {
			return x.Sphere
		}
	}
	return nil
}

func (x *ShapeDescriptor) GetBox() *BoxData {
	if x != nil {
		if x, ok := x.Shape.(*ShapeDescriptor_Box); ok {
			return x.Box
		}
	}
	return nil
}

func (x *ShapeDescriptor) GetTerrain() *TerrainData {
	if x != nil {
		if x, ok := x.Shape.(*ShapeDescriptor_Terrain); ok {
			return x.Terrain
		}
	}
	return nil
}

type isShapeDescriptor_Shape interface {
	isShapeDescriptor_Shape()
}

type ShapeDescriptor_Sphere struct {
	Sphere *SphereData `protobuf:"bytes,10,opt,name=sphere,proto3,oneof"`
}

type ShapeDescriptor_Box struct {
	Box *BoxData `protobuf:"bytes,11,opt,name=box,proto3,oneof"`
}

type ShapeDescriptor_Terrain struct {
	Terrain *TerrainData `protobuf:"bytes,12,opt,name=terrain,proto3,oneof"`
}

func (*ShapeDescriptor_Sphere) isShapeDescriptor_Shape() {}

func (*ShapeDescriptor_Box) isShapeDescriptor_Shape() {}

func (*ShapeDescriptor_Terrain) isShapeDescriptor_Shape() {}

type SphereData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Radius        float32                `protobuf:"fixed32,1,opt,name=radius,proto3" json:"radius,omitempty"`
	Mass          float32                `protobuf:"fixed32,2,opt,name=mass,proto3" json:"mass,omitempty"`
	Color         string                 `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SphereData) Reset() {
	*x = SphereData{}
	mi := &file_physics_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SphereData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SphereData) ProtoMessage() {}

func (x *SphereData) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SphereData.ProtoReflect.Descriptor instead.
func (*SphereData) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{3}
}

func (x *SphereData) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *SphereData) GetMass() float32 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *SphereData) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type BoxData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Width         float32                `protobuf:"fixed32,1,opt,name=width,proto3" json:"width,omitempty"`
	Height        float32                `protobuf:"fixed32,2,opt,name=height,proto3" json:"height,omitempty"`
	Depth         float32                `protobuf:"fixed32,3,opt,name=depth,proto3" json:"depth,omitempty"`
	Mass          float32                `protobuf:"fixed32,4,opt,name=mass,proto3" json:"mass,omitempty"`
	Color         string                 `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoxData) Reset() {
	*x = BoxData{}
	mi := &file_physics_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoxData) ProtoMessage() {}

func (x *BoxData) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoxData.ProtoReflect.Descriptor instead.
func (*BoxData) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{4}
}

func (x *BoxData) GetWidth() float32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *BoxData) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BoxData) GetDepth() float32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *BoxData) GetMass() float32 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *BoxData) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type TerrainData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Width         int32                  `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Depth         int32                  `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
	Heightmap     []float32              `protobuf:"fixed32,3,rep,packed,name=heightmap,proto3" json:"heightmap,omitempty"`
	ScaleX        float32                `protobuf:"fixed32,4,opt,name=scale_x,json=scaleX,proto3" json:"scale_x,omitempty"`
	ScaleY        float32                `protobuf:"fixed32,5,opt,name=scale_y,json=scaleY,proto3" json:"scale_y,omitempty"`
	ScaleZ        float32                `protobuf:"fixed32,6,opt,name=scale_z,json=scaleZ,proto3" json:"scale_z,omitempty"`
	MinHeight     float32                `protobuf:"fixed32,7,opt,name=min_height,json=minHeight,proto3" json:"min_height,omitempty"`
	MaxHeight     float32                `protobuf:"fixed32,8,opt,name=max_height,json=maxHeight,proto3" json:"max_height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TerrainData) Reset() {
	*x = TerrainData{}
	mi := &file_physics_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerrainData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerrainData) ProtoMessage() {}

func (x *TerrainData) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerrainData.ProtoReflect.Descriptor instead.
func (*TerrainData) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{5}
}

func (x *TerrainData) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *TerrainData) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *TerrainData) GetHeightmap() []float32 {
	if x != nil {
		return x.Heightmap
	}
	return nil
}

func (x *TerrainData) GetScaleX() float32 {
	if x != nil {
		return x.ScaleX
	}
	return 0
}

func (x *TerrainData) GetScaleY() float32 {
	if x != nil {
		return x.ScaleY
	}
	return 0
}

func (x *TerrainData) GetScaleZ() float32 {
	if x != nil {
		return x.ScaleZ
	}
	return 0
}

func (x *TerrainData) GetMinHeight() float32 {
	if x != nil {
		return x.MinHeight
	}
	return 0
}

func (x *TerrainData) GetMaxHeight() float32 {
	if x != nil {
		return x.MaxHeight
	}
	return 0
}

// Конфигурация физики
type PhysicsConfigData struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	BaseImpulse                float32                `protobuf:"fixed32,1,opt,name=base_impulse,json=baseImpulse,proto3" json:"base_impulse,omitempty"`
	MaxImpulse                 float32                `protobuf:"fixed32,2,opt,name=max_impulse,json=maxImpulse,proto3" json:"max_impulse,omitempty"`
	DistanceMultiplier         float32                `protobuf:"fixed32,3,opt,name=distance_multiplier,json=distanceMultiplier,proto3" json:"distance_multiplier,omitempty"`
	ImpulseMultiplier          float32                `protobuf:"fixed32,4,opt,name=impulse_multiplier,json=impulseMultiplier,proto3" json:"impulse_multiplier,omitempty"`
	MaxSpeed                   float32                `protobuf:"fixed32,5,opt,name=max_speed,json=maxSpeed,proto3" json:"max_speed,omitempty"`
	Restitution                float32                `protobuf:"fixed32,6,opt,name=restitution,proto3" json:"restitution,omitempty"`
	MaxImpulseMagnitude        float32                `protobuf:"fixed32,7,opt,name=max_impulse_magnitude,json=maxImpulseMagnitude,proto3" json:"max_impulse_magnitude,omitempty"`
	TerrainRestitution         float32                `protobuf:"fixed32,8,opt,name=terrain_restitution,json=terrainRestitution,proto3" json:"terrain_restitution,omitempty"`
	ObjectRestitution          float32                `protobuf:"fixed32,9,opt,name=object_restitution,json=objectRestitution,proto3" json:"object_restitution,omitempty"`
	Friction                   float32                `protobuf:"fixed32,10,opt,name=friction,proto3" json:"friction,omitempty"`
	RollingFriction            float32                `protobuf:"fixed32,11,opt,name=rolling_friction,json=rollingFriction,proto3" json:"rolling_friction,omitempty"`
	LinearDamping              float32                `protobuf:"fixed32,12,opt,name=linear_damping,json=linearDamping,proto3" json:"linear_damping,omitempty"`
	AngularDamping             float32                `protobuf:"fixed32,13,opt,name=angular_damping,json=angularDamping,proto3" json:"angular_damping,omitempty"`
	CcdMotionThresholdFactor   float32                `protobuf:"fixed32,14,opt,name=ccd_motion_threshold_factor,json=ccdMotionThresholdFactor,proto3" json:"ccd_motion_threshold_factor,omitempty"`
	CcdSweptSphereRadiusFactor float32                `protobuf:"fixed32,15,opt,name=ccd_swept_sphere_radius_factor,json=ccdSweptSphereRadiusFactor,proto3" json:"ccd_swept_sphere_radius_factor,omitempty"`
	MinSpeedFactor             float32                `protobuf:"fixed32,16,opt,name=min_speed_factor,json=minSpeedFactor,proto3" json:"min_speed_factor,omitempty"`
	StepSimulationRate         float32                `protobuf:"fixed32,17,opt,name=step_simulation_rate,json=stepSimulationRate,proto3" json:"step_simulation_rate,omitempty"`
	CcdMotionThreshold         float32                `protobuf:"fixed32,18,opt,name=ccd_motion_threshold,json=ccdMotionThreshold,proto3" json:"ccd_motion_threshold,omitempty"`
	CcdSweptSphereRadius       float32                `protobuf:"fixed32,19,opt,name=ccd_swept_sphere_radius,json=ccdSweptSphereRadius,proto3" json:"ccd_swept_sphere_radius,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *PhysicsConfigData) Reset() {
	*x = PhysicsConfigData{}
	mi := &file_physics_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhysicsConfigData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicsConfigData) ProtoMessage() {}

func (x *PhysicsConfigData) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicsConfigData.ProtoReflect.Descriptor instead.
func (*PhysicsConfigData) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{6}
}

func (x *PhysicsConfigData) GetBaseImpulse() float32 {
	if x != nil {
		return x.BaseImpulse
	}
	return 0
}

func (x *PhysicsConfigData) GetMaxImpulse() float32 {
	if x != nil {
		return x.MaxImpulse
	}
	return 0
}

func (x *PhysicsConfigData) GetDistanceMultiplier() float32 {
	if x != nil {
		return x.DistanceMultiplier
	}
	return 0
}

func (x *PhysicsConfigData) GetImpulseMultiplier() float32 {
	if x != nil {
		return x.ImpulseMultiplier
	}
	return 0
}

func (x *PhysicsConfigData) GetMaxSpeed() float32 {
	if x != nil {
		return x.MaxSpeed
	}
	return 0
}

func (x *PhysicsConfigData) GetRestitution() float32 {
	if x != nil {
		return x.Restitution
	}
	return 0
}

func (x *PhysicsConfigData) GetMaxImpulseMagnitude() float32 {
	if x != nil {
		return x.MaxImpulseMagnitude
	}
	return 0
}

func (x *PhysicsConfigData) GetTerrainRestitution() float32 {
	if x != nil {
		return x.TerrainRestitution
	}
	return 0
}

func (x *PhysicsConfigData) GetObjectRestitution() float32 {
	if x != nil {
		return x.ObjectRestitution
	}
	return 0
}

func (x *PhysicsConfigData) GetFriction() float32 {
	if x != nil {
		return x.Friction
	}
	return 0
}

func (x *PhysicsConfigData) GetRollingFriction() float32 {
	if x != nil {
		return x.RollingFriction
	}
	return 0
}

func (x *PhysicsConfigData) GetLinearDamping() float32 {
	if x != nil {
		return x.LinearDamping
	}
	return 0
}

func (x *PhysicsConfigData) GetAngularDamping() float32 {
	if x != nil {
		return x.AngularDamping
	}
	return 0
}

func (x *PhysicsConfigData) GetCcdMotionThresholdFactor() float32 {
	if x != nil {
		return x.CcdMotionThresholdFactor
	}
	return 0
}

func (x *PhysicsConfigData) GetCcdSweptSphereRadiusFactor() float32 {
	if x != nil {
		return x.CcdSweptSphereRadiusFactor
	}
	return 0
}

func (x *PhysicsConfigData) GetMinSpeedFactor() float32 {
	if x != nil {
		return x.MinSpeedFactor
	}
	return 0
}

func (x *PhysicsConfigData) GetStepSimulationRate() float32 {
	if x != nil {
		return x.StepSimulationRate
	}
	return 0
}

func (x *PhysicsConfigData) GetCcdMotionThreshold() float32 {
	if x != nil {
		return x.CcdMotionThreshold
	}
	return 0
}

func (x *PhysicsConfigData) GetCcdSweptSphereRadius() float32 {
	if x != nil {
		return x.CcdSweptSphereRadius
	}
	return 0
}

// Сервисные сообщения
type CreateObjectRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Position        *Vector3               `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Rotation        *Quaternion            `protobuf:"bytes,3,opt,name=rotation,proto3" json:"rotation,omitempty"`
	Shape           *ShapeDescriptor       `protobuf:"bytes,4,opt,name=shape,proto3" json:"shape,omitempty"`
	Mass            float32                `protobuf:"fixed32,5,opt,name=mass,proto3" json:"mass,omitempty"`
	LinearVelocity  *Vector3               `protobuf:"bytes,6,opt,name=linear_velocity,json=linearVelocity,proto3" json:"linear_velocity,omitempty"`
	AngularVelocity *Vector3               `protobuf:"bytes,7,opt,name=angular_velocity,json=angularVelocity,proto3" json:"angular_velocity,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateObjectRequest) Reset() {
	*x = CreateObjectRequest{}
	mi := &file_physics_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateObjectRequest) ProtoMessage() {}

func (x *CreateObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateObjectRequest.ProtoReflect.Descriptor instead.
func (*CreateObjectRequest) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{7}
}

func (x *CreateObjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateObjectRequest) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CreateObjectRequest) GetRotation() *Quaternion {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *CreateObjectRequest) GetShape() *ShapeDescriptor {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *CreateObjectRequest) GetMass() float32 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *CreateObjectRequest) GetLinearVelocity() *Vector3 {
	if x != nil {
		return x.LinearVelocity
	}
	return nil
}

func (x *CreateObjectRequest) GetAngularVelocity() *Vector3 {
	if x != nil {
		return x.AngularVelocity
	}
	return nil
}

type CreateObjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateObjectResponse) Reset() {
	*x = CreateObjectResponse{}
	mi := &file_physics_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateObjectResponse) ProtoMessage() {}

func (x *CreateObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateObjectResponse.ProtoReflect.Descriptor instead.
func (*CreateObjectResponse) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{8}
}

func (x *CreateObjectResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreateObjectResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ApplyImpulseRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Impulse          *Vector3               `protobuf:"bytes,2,opt,name=impulse,proto3" json:"impulse,omitempty"`
	RelativePosition *Vector3               `protobuf:"bytes,3,opt,name=relative_position,json=relativePosition,proto3" json:"relative_position,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ApplyImpulseRequest) Reset() {
	*x = ApplyImpulseRequest{}
	mi := &file_physics_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyImpulseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyImpulseRequest) ProtoMessage() {}

func (x *ApplyImpulseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyImpulseRequest.ProtoReflect.Descriptor instead.
func (*ApplyImpulseRequest) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{9}
}

func (x *ApplyImpulseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApplyImpulseRequest) GetImpulse() *Vector3 {
	if x != nil {
		return x.Impulse
	}
	return nil
}

func (x *ApplyImpulseRequest) GetRelativePosition() *Vector3 {
	if x != nil {
		return x.RelativePosition
	}
	return nil
}

type ApplyImpulseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyImpulseResponse) Reset() {
	*x = ApplyImpulseResponse{}
	mi := &file_physics_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyImpulseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyImpulseResponse) ProtoMessage() {}

func (x *ApplyImpulseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyImpulseResponse.ProtoReflect.Descriptor instead.
func (*ApplyImpulseResponse) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{10}
}

func (x *ApplyImpulseResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ApplyImpulseResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ApplyTorqueRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Torque        *Vector3               `protobuf:"bytes,2,opt,name=torque,proto3" json:"torque,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyTorqueRequest) Reset() {
	*x = ApplyTorqueRequest{}
	mi := &file_physics_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyTorqueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyTorqueRequest) ProtoMessage() {}

func (x *ApplyTorqueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyTorqueRequest.ProtoReflect.Descriptor instead.
func (*ApplyTorqueRequest) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{11}
}

func (x *ApplyTorqueRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApplyTorqueRequest) GetTorque() *Vector3 {
	if x != nil {
		return x.Torque
	}
	return nil
}

type ApplyTorqueResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyTorqueResponse) Reset() {
	*x = ApplyTorqueResponse{}
	mi := &file_physics_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyTorqueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyTorqueResponse) ProtoMessage() {}

func (x *ApplyTorqueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyTorqueResponse.ProtoReflect.Descriptor instead.
func (*ApplyTorqueResponse) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{12}
}

func (x *ApplyTorqueResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// Добавляем недостающие сообщения для работы с обновлением объектов
type Position struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float32                `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             float32                `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z             float32                `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Position) Reset() {
	*x = Position{}
	mi := &file_physics_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{13}
}

func (x *Position) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Position) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Position) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type Rotation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float32                `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             float32                `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z             float32                `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	W             float32                `protobuf:"fixed32,4,opt,name=w,proto3" json:"w,omitempty"`
	Yaw           float32                `protobuf:"fixed32,5,opt,name=yaw,proto3" json:"yaw,omitempty"`
	Pitch         float32                `protobuf:"fixed32,6,opt,name=pitch,proto3" json:"pitch,omitempty"`
	Roll          float32                `protobuf:"fixed32,7,opt,name=roll,proto3" json:"roll,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Rotation) Reset() {
	*x = Rotation{}
	mi := &file_physics_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rotation) ProtoMessage() {}

func (x *Rotation) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rotation.ProtoReflect.Descriptor instead.
func (*Rotation) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{14}
}

func (x *Rotation) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Rotation) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Rotation) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *Rotation) GetW() float32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Rotation) GetYaw() float32 {
	if x != nil {
		return x.Yaw
	}
	return 0
}

func (x *Rotation) GetPitch() float32 {
	if x != nil {
		return x.Pitch
	}
	return 0
}

func (x *Rotation) GetRoll() float32 {
	if x != nil {
		return x.Roll
	}
	return 0
}

type Velocity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float32                `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             float32                `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z             float32                `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Velocity) Reset() {
	*x = Velocity{}
	mi := &file_physics_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Velocity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Velocity) ProtoMessage() {}

func (x *Velocity) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Velocity.ProtoReflect.Descriptor instead.
func (*Velocity) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{15}
}

func (x *Velocity) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Velocity) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Velocity) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type Object struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Position        *Position              `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Rotation        *Rotation              `protobuf:"bytes,3,opt,name=rotation,proto3" json:"rotation,omitempty"`
	LinearVelocity  *Velocity              `protobuf:"bytes,4,opt,name=linear_velocity,json=linearVelocity,proto3" json:"linear_velocity,omitempty"`
	AngularVelocity *Velocity              `protobuf:"bytes,5,opt,name=angular_velocity,json=angularVelocity,proto3" json:"angular_velocity,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Object) Reset() {
	*x = Object{}
	mi := &file_physics_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{16}
}

func (x *Object) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Object) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Object) GetRotation() *Rotation {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *Object) GetLinearVelocity() *Velocity {
	if x != nil {
		return x.LinearVelocity
	}
	return nil
}

func (x *Object) GetAngularVelocity() *Velocity {
	if x != nil {
		return x.AngularVelocity
	}
	return nil
}

type UpdateObjectRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Position        *Position              `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Rotation        *Rotation              `protobuf:"bytes,3,opt,name=rotation,proto3" json:"rotation,omitempty"`
	LinearVelocity  *Vector3               `protobuf:"bytes,4,opt,name=linear_velocity,json=linearVelocity,proto3" json:"linear_velocity,omitempty"`
	AngularVelocity *Vector3               `protobuf:"bytes,5,opt,name=angular_velocity,json=angularVelocity,proto3" json:"angular_velocity,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateObjectRequest) Reset() {
	*x = UpdateObjectRequest{}
	mi := &file_physics_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateObjectRequest) ProtoMessage() {}

func (x *UpdateObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateObjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateObjectRequest) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateObjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateObjectRequest) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *UpdateObjectRequest) GetRotation() *Rotation {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *UpdateObjectRequest) GetLinearVelocity() *Vector3 {
	if x != nil {
		return x.LinearVelocity
	}
	return nil
}

func (x *UpdateObjectRequest) GetAngularVelocity() *Vector3 {
	if x != nil {
		return x.AngularVelocity
	}
	return nil
}

type UpdateObjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateObjectResponse) Reset() {
	*x = UpdateObjectResponse{}
	mi := &file_physics_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateObjectResponse) ProtoMessage() {}

func (x *UpdateObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateObjectResponse.ProtoReflect.Descriptor instead.
func (*UpdateObjectResponse) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateObjectResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateObjectResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type StepSimulationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimeStep      float32                `protobuf:"fixed32,1,opt,name=time_step,json=timeStep,proto3" json:"time_step,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepSimulationRequest) Reset() {
	*x = StepSimulationRequest{}
	mi := &file_physics_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepSimulationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepSimulationRequest) ProtoMessage() {}

func (x *StepSimulationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepSimulationRequest.ProtoReflect.Descriptor instead.
func (*StepSimulationRequest) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{19}
}

func (x *StepSimulationRequest) GetTimeStep() float32 {
	if x != nil {
		return x.TimeStep
	}
	return 0
}

type StepSimulationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Objects       []*Object              `protobuf:"bytes,3,rep,name=objects,proto3" json:"objects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepSimulationResponse) Reset() {
	*x = StepSimulationResponse{}
	mi := &file_physics_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepSimulationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepSimulationResponse) ProtoMessage() {}

func (x *StepSimulationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepSimulationResponse.ProtoReflect.Descriptor instead.
func (*StepSimulationResponse) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{20}
}

func (x *StepSimulationResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StepSimulationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StepSimulationResponse) GetObjects() []*Object {
	if x != nil {
		return x.Objects
	}
	return nil
}

type ObjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObjectRequest) Reset() {
	*x = ObjectRequest{}
	mi := &file_physics_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectRequest) ProtoMessage() {}

func (x *ObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectRequest.ProtoReflect.Descriptor instead.
func (*ObjectRequest) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{21}
}

func (x *ObjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ObjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	X             float32                `protobuf:"fixed32,2,opt,name=x,proto3" json:"x,omitempty"`
	Y             float32                `protobuf:"fixed32,3,opt,name=y,proto3" json:"y,omitempty"`
	Z             float32                `protobuf:"fixed32,4,opt,name=z,proto3" json:"z,omitempty"`
	Qx            float32                `protobuf:"fixed32,5,opt,name=qx,proto3" json:"qx,omitempty"`
	Qy            float32                `protobuf:"fixed32,6,opt,name=qy,proto3" json:"qy,omitempty"`
	Qz            float32                `protobuf:"fixed32,7,opt,name=qz,proto3" json:"qz,omitempty"`
	Qw            float32                `protobuf:"fixed32,8,opt,name=qw,proto3" json:"qw,omitempty"`
	Vx            float32                `protobuf:"fixed32,9,opt,name=vx,proto3" json:"vx,omitempty"`
	Vy            float32                `protobuf:"fixed32,10,opt,name=vy,proto3" json:"vy,omitempty"`
	Vz            float32                `protobuf:"fixed32,11,opt,name=vz,proto3" json:"vz,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObjectResponse) Reset() {
	*x = ObjectResponse{}
	mi := &file_physics_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectResponse) ProtoMessage() {}

func (x *ObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectResponse.ProtoReflect.Descriptor instead.
func (*ObjectResponse) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{22}
}

func (x *ObjectResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ObjectResponse) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *ObjectResponse) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *ObjectResponse) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *ObjectResponse) GetQx() float32 {
	if x != nil {
		return x.Qx
	}
	return 0
}

func (x *ObjectResponse) GetQy() float32 {
	if x != nil {
		return x.Qy
	}
	return 0
}

func (x *ObjectResponse) GetQz() float32 {
	if x != nil {
		return x.Qz
	}
	return 0
}

func (x *ObjectResponse) GetQw() float32 {
	if x != nil {
		return x.Qw
	}
	return 0
}

func (x *ObjectResponse) GetVx() float32 {
	if x != nil {
		return x.Vx
	}
	return 0
}

func (x *ObjectResponse) GetVy() float32 {
	if x != nil {
		return x.Vy
	}
	return 0
}

func (x *ObjectResponse) GetVz() float32 {
	if x != nil {
		return x.Vz
	}
	return 0
}

type GetObjectStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetObjectStateRequest) Reset() {
	*x = GetObjectStateRequest{}
	mi := &file_physics_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetObjectStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectStateRequest) ProtoMessage() {}

func (x *GetObjectStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectStateRequest.ProtoReflect.Descriptor instead.
func (*GetObjectStateRequest) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{23}
}

func (x *GetObjectStateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ObjectState struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Position        *Vector3               `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Rotation        *Quaternion            `protobuf:"bytes,2,opt,name=rotation,proto3" json:"rotation,omitempty"`
	LinearVelocity  *Vector3               `protobuf:"bytes,3,opt,name=linear_velocity,json=linearVelocity,proto3" json:"linear_velocity,omitempty"`
	AngularVelocity *Vector3               `protobuf:"bytes,4,opt,name=angular_velocity,json=angularVelocity,proto3" json:"angular_velocity,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ObjectState) Reset() {
	*x = ObjectState{}
	mi := &file_physics_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectState) ProtoMessage() {}

func (x *ObjectState) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectState.ProtoReflect.Descriptor instead.
func (*ObjectState) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{24}
}

func (x *ObjectState) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *ObjectState) GetRotation() *Quaternion {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *ObjectState) GetLinearVelocity() *Vector3 {
	if x != nil {
		return x.LinearVelocity
	}
	return nil
}

func (x *ObjectState) GetAngularVelocity() *Vector3 {
	if x != nil {
		return x.AngularVelocity
	}
	return nil
}

type GetObjectStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	State         *ObjectState           `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetObjectStateResponse) Reset() {
	*x = GetObjectStateResponse{}
	mi := &file_physics_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetObjectStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectStateResponse) ProtoMessage() {}

func (x *GetObjectStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectStateResponse.ProtoReflect.Descriptor instead.
func (*GetObjectStateResponse) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{25}
}

func (x *GetObjectStateResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetObjectStateResponse) GetState() *ObjectState {
	if x != nil {
		return x.State
	}
	return nil
}

type GetPhysicsConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPhysicsConfigRequest) Reset() {
	*x = GetPhysicsConfigRequest{}
	mi := &file_physics_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPhysicsConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPhysicsConfigRequest) ProtoMessage() {}

func (x *GetPhysicsConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPhysicsConfigRequest.ProtoReflect.Descriptor instead.
func (*GetPhysicsConfigRequest) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{26}
}

type GetPhysicsConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Config        *PhysicsConfigData     `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPhysicsConfigResponse) Reset() {
	*x = GetPhysicsConfigResponse{}
	mi := &file_physics_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPhysicsConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPhysicsConfigResponse) ProtoMessage() {}

func (x *GetPhysicsConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPhysicsConfigResponse.ProtoReflect.Descriptor instead.
func (*GetPhysicsConfigResponse) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{27}
}

func (x *GetPhysicsConfigResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetPhysicsConfigResponse) GetConfig() *PhysicsConfigData {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetPhysicsConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *PhysicsConfigData     `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPhysicsConfigRequest) Reset() {
	*x = SetPhysicsConfigRequest{}
	mi := &file_physics_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPhysicsConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPhysicsConfigRequest) ProtoMessage() {}

func (x *SetPhysicsConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPhysicsConfigRequest.ProtoReflect.Descriptor instead.
func (*SetPhysicsConfigRequest) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{28}
}

func (x *SetPhysicsConfigRequest) GetConfig() *PhysicsConfigData {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetPhysicsConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPhysicsConfigResponse) Reset() {
	*x = SetPhysicsConfigResponse{}
	mi := &file_physics_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPhysicsConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPhysicsConfigResponse) ProtoMessage() {}

func (x *SetPhysicsConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPhysicsConfigResponse.ProtoReflect.Descriptor instead.
func (*SetPhysicsConfigResponse) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{29}
}

func (x *SetPhysicsConfigResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SetPhysicsConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_physics_proto protoreflect.FileDescriptor

var file_physics_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x22, 0x33, 0x0a, 0x07, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x33, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12,
	0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0x44, 0x0a,
	0x0a, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x77, 0x22, 0x95, 0x02, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x70, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x2d, 0x0a, 0x06, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x12, 0x24,
	0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x03, 0x62, 0x6f, 0x78, 0x12, 0x30, 0x0a, 0x07, 0x74, 0x65, 0x72, 0x72, 0x61, 0x69, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e,
	0x54, 0x65, 0x72, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x74,
	0x65, 0x72, 0x72, 0x61, 0x69, 0x6e, 0x22, 0x3a, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x70, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x50, 0x48, 0x45, 0x52, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x4f, 0x58, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x45, 0x52, 0x52, 0x41, 0x49, 0x4e,
	0x10, 0x03, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x22, 0x4e, 0x0a, 0x0a, 0x53,
	0x70, 0x68, 0x65, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x77, 0x0a, 0x07, 0x42,
	0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xe0, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x72, 0x72, 0x61, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x09, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x58, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x5f, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x59,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x7a, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5a, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d,
	0x69, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xe9, 0x06, 0x0a, 0x11, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f,
	0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x13, 0x6d, 0x61, 0x78, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x4d, 0x61, 0x67, 0x6e, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x65, 0x72, 0x72, 0x61, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x74, 0x65, 0x72, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x46, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x44, 0x61, 0x6d, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x64, 0x61,
	0x6d, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x61, 0x6e, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x44, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x63,
	0x63, 0x64, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x18, 0x63, 0x63, 0x64, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x1e, 0x63, 0x63,
	0x64, 0x5f, 0x73, 0x77, 0x65, 0x70, 0x74, 0x5f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x72,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x1a, 0x63, 0x63, 0x64, 0x53, 0x77, 0x65, 0x70, 0x74, 0x53, 0x70, 0x68, 0x65,
	0x72, 0x65, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x65, 0x70,
	0x5f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x73, 0x74, 0x65, 0x70, 0x53, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x63,
	0x64, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x63, 0x63, 0x64, 0x4d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x17,
	0x63, 0x63, 0x64, 0x5f, 0x73, 0x77, 0x65, 0x70, 0x74, 0x5f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65,
	0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x63,
	0x63, 0x64, 0x53, 0x77, 0x65, 0x70, 0x74, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x52, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x68,
	0x61, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x39,
	0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x10, 0x61, 0x6e, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x0f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x56, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x22, 0x48, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x90, 0x01, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x69, 0x6d, 0x70, 0x75,
	0x6c, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x07, 0x69, 0x6d, 0x70,
	0x75, 0x6c, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x33, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6d, 0x70, 0x75,
	0x6c, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4e, 0x0a,
	0x12, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x74, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x06, 0x74, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x22, 0x2d, 0x0a,
	0x13, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x34, 0x0a, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x01, 0x7a, 0x22, 0x7e, 0x0a, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x01, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x79, 0x61, 0x77, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x79, 0x61, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x74, 0x63,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x6c, 0x22, 0x34, 0x0a, 0x08, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x0c,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0xf0, 0x01, 0x0a, 0x06, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x6c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a,
	0x10, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x73, 0x2e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x61, 0x6e, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x22, 0xfb, 0x01, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x0e, 0x6c, 0x69,
	0x6e, 0x65, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x10,
	0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x0f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x22, 0x48, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x34, 0x0a, 0x15, 0x53, 0x74, 0x65, 0x70, 0x53, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x65, 0x70, 0x22, 0x75, 0x0a, 0x16, 0x53, 0x74, 0x65,
	0x70, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x22, 0x1f, 0x0a, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xc2, 0x01, 0x0a, 0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x02, 0x71, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x02, 0x71, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x7a, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x02, 0x71, 0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x71, 0x77, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x02, 0x71, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x78, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x02, 0x76, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x02, 0x76, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x7a, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x02, 0x76, 0x7a, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xe4, 0x01, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x33, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72,
	0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x10, 0x61, 0x6e, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x0f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x56, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x22, 0x5c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x66, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4d, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4c, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x50, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0xd0, 0x05, 0x0a, 0x07, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73,
	0x12, 0x4b, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1c, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x0c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x12, 0x1c, 0x2e,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6d, 0x70,
	0x75, 0x6c, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6d, 0x70, 0x75, 0x6c,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x54, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x2e, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73,
	0x2e, 0x53, 0x65, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2c, 0x5a, 0x2a, 0x78, 0x2d, 0x63, 0x65, 0x6c,
	0x6c, 0x73, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_physics_proto_rawDescOnce sync.Once
	file_physics_proto_rawDescData []byte
)

func file_physics_proto_rawDescGZIP() []byte {
	file_physics_proto_rawDescOnce.Do(func() {
		file_physics_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_physics_proto_rawDesc), len(file_physics_proto_rawDesc)))
	})
	return file_physics_proto_rawDescData
}

var file_physics_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_physics_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_physics_proto_goTypes = []any{
	(ShapeDescriptor_ShapeType)(0),   // 0: physics.ShapeDescriptor.ShapeType
	(*Vector3)(nil),                  // 1: physics.Vector3
	(*Quaternion)(nil),               // 2: physics.Quaternion
	(*ShapeDescriptor)(nil),          // 3: physics.ShapeDescriptor
	(*SphereData)(nil),               // 4: physics.SphereData
	(*BoxData)(nil),                  // 5: physics.BoxData
	(*TerrainData)(nil),              // 6: physics.TerrainData
	(*PhysicsConfigData)(nil),        // 7: physics.PhysicsConfigData
	(*CreateObjectRequest)(nil),      // 8: physics.CreateObjectRequest
	(*CreateObjectResponse)(nil),     // 9: physics.CreateObjectResponse
	(*ApplyImpulseRequest)(nil),      // 10: physics.ApplyImpulseRequest
	(*ApplyImpulseResponse)(nil),     // 11: physics.ApplyImpulseResponse
	(*ApplyTorqueRequest)(nil),       // 12: physics.ApplyTorqueRequest
	(*ApplyTorqueResponse)(nil),      // 13: physics.ApplyTorqueResponse
	(*Position)(nil),                 // 14: physics.Position
	(*Rotation)(nil),                 // 15: physics.Rotation
	(*Velocity)(nil),                 // 16: physics.Velocity
	(*Object)(nil),                   // 17: physics.Object
	(*UpdateObjectRequest)(nil),      // 18: physics.UpdateObjectRequest
	(*UpdateObjectResponse)(nil),     // 19: physics.UpdateObjectResponse
	(*StepSimulationRequest)(nil),    // 20: physics.StepSimulationRequest
	(*StepSimulationResponse)(nil),   // 21: physics.StepSimulationResponse
	(*ObjectRequest)(nil),            // 22: physics.ObjectRequest
	(*ObjectResponse)(nil),           // 23: physics.ObjectResponse
	(*GetObjectStateRequest)(nil),    // 24: physics.GetObjectStateRequest
	(*ObjectState)(nil),              // 25: physics.ObjectState
	(*GetObjectStateResponse)(nil),   // 26: physics.GetObjectStateResponse
	(*GetPhysicsConfigRequest)(nil),  // 27: physics.GetPhysicsConfigRequest
	(*GetPhysicsConfigResponse)(nil), // 28: physics.GetPhysicsConfigResponse
	(*SetPhysicsConfigRequest)(nil),  // 29: physics.SetPhysicsConfigRequest
	(*SetPhysicsConfigResponse)(nil), // 30: physics.SetPhysicsConfigResponse
}
var file_physics_proto_depIdxs = []int32{
	0,  // 0: physics.ShapeDescriptor.type:type_name -> physics.ShapeDescriptor.ShapeType
	4,  // 1: physics.ShapeDescriptor.sphere:type_name -> physics.SphereData
	5,  // 2: physics.ShapeDescriptor.box:type_name -> physics.BoxData
	6,  // 3: physics.ShapeDescriptor.terrain:type_name -> physics.TerrainData
	1,  // 4: physics.CreateObjectRequest.position:type_name -> physics.Vector3
	2,  // 5: physics.CreateObjectRequest.rotation:type_name -> physics.Quaternion
	3,  // 6: physics.CreateObjectRequest.shape:type_name -> physics.ShapeDescriptor
	1,  // 7: physics.CreateObjectRequest.linear_velocity:type_name -> physics.Vector3
	1,  // 8: physics.CreateObjectRequest.angular_velocity:type_name -> physics.Vector3
	1,  // 9: physics.ApplyImpulseRequest.impulse:type_name -> physics.Vector3
	1,  // 10: physics.ApplyImpulseRequest.relative_position:type_name -> physics.Vector3
	1,  // 11: physics.ApplyTorqueRequest.torque:type_name -> physics.Vector3
	14, // 12: physics.Object.position:type_name -> physics.Position
	15, // 13: physics.Object.rotation:type_name -> physics.Rotation
	16, // 14: physics.Object.linear_velocity:type_name -> physics.Velocity
	16, // 15: physics.Object.angular_velocity:type_name -> physics.Velocity
	14, // 16: physics.UpdateObjectRequest.position:type_name -> physics.Position
	15, // 17: physics.UpdateObjectRequest.rotation:type_name -> physics.Rotation
	1,  // 18: physics.UpdateObjectRequest.linear_velocity:type_name -> physics.Vector3
	1,  // 19: physics.UpdateObjectRequest.angular_velocity:type_name -> physics.Vector3
	17, // 20: physics.StepSimulationResponse.objects:type_name -> physics.Object
	1,  // 21: physics.ObjectState.position:type_name -> physics.Vector3
	2,  // 22: physics.ObjectState.rotation:type_name -> physics.Quaternion
	1,  // 23: physics.ObjectState.linear_velocity:type_name -> physics.Vector3
	1,  // 24: physics.ObjectState.angular_velocity:type_name -> physics.Vector3
	25, // 25: physics.GetObjectStateResponse.state:type_name -> physics.ObjectState
	7,  // 26: physics.GetPhysicsConfigResponse.config:type_name -> physics.PhysicsConfigData
	7,  // 27: physics.SetPhysicsConfigRequest.config:type_name -> physics.PhysicsConfigData
	8,  // 28: physics.Physics.CreateObject:input_type -> physics.CreateObjectRequest
	10, // 29: physics.Physics.ApplyImpulse:input_type -> physics.ApplyImpulseRequest
	12, // 30: physics.Physics.ApplyTorque:input_type -> physics.ApplyTorqueRequest
	24, // 31: physics.Physics.GetObjectState:input_type -> physics.GetObjectStateRequest
	27, // 32: physics.Physics.GetPhysicsConfig:input_type -> physics.GetPhysicsConfigRequest
	29, // 33: physics.Physics.SetPhysicsConfig:input_type -> physics.SetPhysicsConfigRequest
	18, // 34: physics.Physics.UpdateObject:input_type -> physics.UpdateObjectRequest
	20, // 35: physics.Physics.StepSimulation:input_type -> physics.StepSimulationRequest
	22, // 36: physics.Physics.GetObject:input_type -> physics.ObjectRequest
	9,  // 37: physics.Physics.CreateObject:output_type -> physics.CreateObjectResponse
	11, // 38: physics.Physics.ApplyImpulse:output_type -> physics.ApplyImpulseResponse
	13, // 39: physics.Physics.ApplyTorque:output_type -> physics.ApplyTorqueResponse
	26, // 40: physics.Physics.GetObjectState:output_type -> physics.GetObjectStateResponse
	28, // 41: physics.Physics.GetPhysicsConfig:output_type -> physics.GetPhysicsConfigResponse
	30, // 42: physics.Physics.SetPhysicsConfig:output_type -> physics.SetPhysicsConfigResponse
	19, // 43: physics.Physics.UpdateObject:output_type -> physics.UpdateObjectResponse
	21, // 44: physics.Physics.StepSimulation:output_type -> physics.StepSimulationResponse
	23, // 45: physics.Physics.GetObject:output_type -> physics.ObjectResponse
	37, // [37:46] is the sub-list for method output_type
	28, // [28:37] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_physics_proto_init() }
func file_physics_proto_init() {
	if File_physics_proto != nil {
		return
	}
	file_physics_proto_msgTypes[2].OneofWrappers = []any{
		(*ShapeDescriptor_Sphere)(nil),
		(*ShapeDescriptor_Box)(nil),
		(*ShapeDescriptor_Terrain)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_physics_proto_rawDesc), len(file_physics_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_physics_proto_goTypes,
		DependencyIndexes: file_physics_proto_depIdxs,
		EnumInfos:         file_physics_proto_enumTypes,
		MessageInfos:      file_physics_proto_msgTypes,
	}.Build()
	File_physics_proto = out.File
	file_physics_proto_goTypes = nil
	file_physics_proto_depIdxs = nil
}
