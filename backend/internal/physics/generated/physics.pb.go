// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: physics.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShapeDescriptor_ShapeType int32

const (
	ShapeDescriptor_UNKNOWN ShapeDescriptor_ShapeType = 0
	ShapeDescriptor_SPHERE  ShapeDescriptor_ShapeType = 1
	ShapeDescriptor_BOX     ShapeDescriptor_ShapeType = 2
	ShapeDescriptor_TERRAIN ShapeDescriptor_ShapeType = 3
)

// Enum value maps for ShapeDescriptor_ShapeType.
var (
	ShapeDescriptor_ShapeType_name = map[int32]string{
		0: "UNKNOWN",
		1: "SPHERE",
		2: "BOX",
		3: "TERRAIN",
	}
	ShapeDescriptor_ShapeType_value = map[string]int32{
		"UNKNOWN": 0,
		"SPHERE":  1,
		"BOX":     2,
		"TERRAIN": 3,
	}
)

func (x ShapeDescriptor_ShapeType) Enum() *ShapeDescriptor_ShapeType {
	p := new(ShapeDescriptor_ShapeType)
	*p = x
	return p
}

func (x ShapeDescriptor_ShapeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShapeDescriptor_ShapeType) Descriptor() protoreflect.EnumDescriptor {
	return file_physics_proto_enumTypes[0].Descriptor()
}

func (ShapeDescriptor_ShapeType) Type() protoreflect.EnumType {
	return &file_physics_proto_enumTypes[0]
}

func (x ShapeDescriptor_ShapeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShapeDescriptor_ShapeType.Descriptor instead.
func (ShapeDescriptor_ShapeType) EnumDescriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{2, 0}
}

// Описание векторов и кватернионов
type Vector3 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float32                `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             float32                `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z             float32                `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector3) Reset() {
	*x = Vector3{}
	mi := &file_physics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector3) ProtoMessage() {}

func (x *Vector3) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector3.ProtoReflect.Descriptor instead.
func (*Vector3) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{0}
}

func (x *Vector3) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector3) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Vector3) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type Quaternion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float32                `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             float32                `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z             float32                `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	W             float32                `protobuf:"fixed32,4,opt,name=w,proto3" json:"w,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quaternion) Reset() {
	*x = Quaternion{}
	mi := &file_physics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quaternion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quaternion) ProtoMessage() {}

func (x *Quaternion) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quaternion.ProtoReflect.Descriptor instead.
func (*Quaternion) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{1}
}

func (x *Quaternion) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Quaternion) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Quaternion) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *Quaternion) GetW() float32 {
	if x != nil {
		return x.W
	}
	return 0
}

// Описание форм
type ShapeDescriptor struct {
	state protoimpl.MessageState    `protogen:"open.v1"`
	Type  ShapeDescriptor_ShapeType `protobuf:"varint,1,opt,name=type,proto3,enum=physics.ShapeDescriptor_ShapeType" json:"type,omitempty"`
	// Параметры для разных типов форм
	//
	// Types that are valid to be assigned to Shape:
	//
	//	*ShapeDescriptor_Sphere
	//	*ShapeDescriptor_Box
	//	*ShapeDescriptor_Terrain
	Shape         isShapeDescriptor_Shape `protobuf_oneof:"shape"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShapeDescriptor) Reset() {
	*x = ShapeDescriptor{}
	mi := &file_physics_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShapeDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapeDescriptor) ProtoMessage() {}

func (x *ShapeDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapeDescriptor.ProtoReflect.Descriptor instead.
func (*ShapeDescriptor) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{2}
}

func (x *ShapeDescriptor) GetType() ShapeDescriptor_ShapeType {
	if x != nil {
		return x.Type
	}
	return ShapeDescriptor_UNKNOWN
}

func (x *ShapeDescriptor) GetShape() isShapeDescriptor_Shape {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *ShapeDescriptor) GetSphere() *SphereData {
	if x != nil {
		if x, ok := x.Shape.(*ShapeDescriptor_Sphere); ok {
			return x.Sphere
		}
	}
	return nil
}

func (x *ShapeDescriptor) GetBox() *BoxData {
	if x != nil {
		if x, ok := x.Shape.(*ShapeDescriptor_Box); ok {
			return x.Box
		}
	}
	return nil
}

func (x *ShapeDescriptor) GetTerrain() *TerrainData {
	if x != nil {
		if x, ok := x.Shape.(*ShapeDescriptor_Terrain); ok {
			return x.Terrain
		}
	}
	return nil
}

type isShapeDescriptor_Shape interface {
	isShapeDescriptor_Shape()
}

type ShapeDescriptor_Sphere struct {
	Sphere *SphereData `protobuf:"bytes,10,opt,name=sphere,proto3,oneof"`
}

type ShapeDescriptor_Box struct {
	Box *BoxData `protobuf:"bytes,11,opt,name=box,proto3,oneof"`
}

type ShapeDescriptor_Terrain struct {
	Terrain *TerrainData `protobuf:"bytes,12,opt,name=terrain,proto3,oneof"`
}

func (*ShapeDescriptor_Sphere) isShapeDescriptor_Shape() {}

func (*ShapeDescriptor_Box) isShapeDescriptor_Shape() {}

func (*ShapeDescriptor_Terrain) isShapeDescriptor_Shape() {}

type SphereData struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Radius float32                `protobuf:"fixed32,1,opt,name=radius,proto3" json:"radius,omitempty"`
	Mass   float32                `protobuf:"fixed32,2,opt,name=mass,proto3" json:"mass,omitempty"`
	Color  string                 `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	// Физические свойства объекта
	Restitution     float32 `protobuf:"fixed32,4,opt,name=restitution,proto3" json:"restitution,omitempty"`                                // Упругость (отскок)
	Friction        float32 `protobuf:"fixed32,5,opt,name=friction,proto3" json:"friction,omitempty"`                                      // Трение
	RollingFriction float32 `protobuf:"fixed32,6,opt,name=rolling_friction,json=rollingFriction,proto3" json:"rolling_friction,omitempty"` // Сопротивление качению
	LinearDamping   float32 `protobuf:"fixed32,7,opt,name=linear_damping,json=linearDamping,proto3" json:"linear_damping,omitempty"`       // Линейное затухание
	AngularDamping  float32 `protobuf:"fixed32,8,opt,name=angular_damping,json=angularDamping,proto3" json:"angular_damping,omitempty"`    // Угловое затухание
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SphereData) Reset() {
	*x = SphereData{}
	mi := &file_physics_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SphereData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SphereData) ProtoMessage() {}

func (x *SphereData) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SphereData.ProtoReflect.Descriptor instead.
func (*SphereData) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{3}
}

func (x *SphereData) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *SphereData) GetMass() float32 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *SphereData) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *SphereData) GetRestitution() float32 {
	if x != nil {
		return x.Restitution
	}
	return 0
}

func (x *SphereData) GetFriction() float32 {
	if x != nil {
		return x.Friction
	}
	return 0
}

func (x *SphereData) GetRollingFriction() float32 {
	if x != nil {
		return x.RollingFriction
	}
	return 0
}

func (x *SphereData) GetLinearDamping() float32 {
	if x != nil {
		return x.LinearDamping
	}
	return 0
}

func (x *SphereData) GetAngularDamping() float32 {
	if x != nil {
		return x.AngularDamping
	}
	return 0
}

type BoxData struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Width  float32                `protobuf:"fixed32,1,opt,name=width,proto3" json:"width,omitempty"`
	Height float32                `protobuf:"fixed32,2,opt,name=height,proto3" json:"height,omitempty"`
	Depth  float32                `protobuf:"fixed32,3,opt,name=depth,proto3" json:"depth,omitempty"`
	Mass   float32                `protobuf:"fixed32,4,opt,name=mass,proto3" json:"mass,omitempty"`
	Color  string                 `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	// Физические свойства объекта
	Restitution     float32 `protobuf:"fixed32,6,opt,name=restitution,proto3" json:"restitution,omitempty"`                                // Упругость (отскок)
	Friction        float32 `protobuf:"fixed32,7,opt,name=friction,proto3" json:"friction,omitempty"`                                      // Трение
	RollingFriction float32 `protobuf:"fixed32,8,opt,name=rolling_friction,json=rollingFriction,proto3" json:"rolling_friction,omitempty"` // Сопротивление качению
	LinearDamping   float32 `protobuf:"fixed32,9,opt,name=linear_damping,json=linearDamping,proto3" json:"linear_damping,omitempty"`       // Линейное затухание
	AngularDamping  float32 `protobuf:"fixed32,10,opt,name=angular_damping,json=angularDamping,proto3" json:"angular_damping,omitempty"`   // Угловое затухание
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BoxData) Reset() {
	*x = BoxData{}
	mi := &file_physics_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoxData) ProtoMessage() {}

func (x *BoxData) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoxData.ProtoReflect.Descriptor instead.
func (*BoxData) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{4}
}

func (x *BoxData) GetWidth() float32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *BoxData) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BoxData) GetDepth() float32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *BoxData) GetMass() float32 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *BoxData) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *BoxData) GetRestitution() float32 {
	if x != nil {
		return x.Restitution
	}
	return 0
}

func (x *BoxData) GetFriction() float32 {
	if x != nil {
		return x.Friction
	}
	return 0
}

func (x *BoxData) GetRollingFriction() float32 {
	if x != nil {
		return x.RollingFriction
	}
	return 0
}

func (x *BoxData) GetLinearDamping() float32 {
	if x != nil {
		return x.LinearDamping
	}
	return 0
}

func (x *BoxData) GetAngularDamping() float32 {
	if x != nil {
		return x.AngularDamping
	}
	return 0
}

type TerrainData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Width         int32                  `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Depth         int32                  `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
	Heightmap     []float32              `protobuf:"fixed32,3,rep,packed,name=heightmap,proto3" json:"heightmap,omitempty"`
	ScaleX        float32                `protobuf:"fixed32,4,opt,name=scale_x,json=scaleX,proto3" json:"scale_x,omitempty"`
	ScaleY        float32                `protobuf:"fixed32,5,opt,name=scale_y,json=scaleY,proto3" json:"scale_y,omitempty"`
	ScaleZ        float32                `protobuf:"fixed32,6,opt,name=scale_z,json=scaleZ,proto3" json:"scale_z,omitempty"`
	MinHeight     float32                `protobuf:"fixed32,7,opt,name=min_height,json=minHeight,proto3" json:"min_height,omitempty"`
	MaxHeight     float32                `protobuf:"fixed32,8,opt,name=max_height,json=maxHeight,proto3" json:"max_height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TerrainData) Reset() {
	*x = TerrainData{}
	mi := &file_physics_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TerrainData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerrainData) ProtoMessage() {}

func (x *TerrainData) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerrainData.ProtoReflect.Descriptor instead.
func (*TerrainData) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{5}
}

func (x *TerrainData) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *TerrainData) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *TerrainData) GetHeightmap() []float32 {
	if x != nil {
		return x.Heightmap
	}
	return nil
}

func (x *TerrainData) GetScaleX() float32 {
	if x != nil {
		return x.ScaleX
	}
	return 0
}

func (x *TerrainData) GetScaleY() float32 {
	if x != nil {
		return x.ScaleY
	}
	return 0
}

func (x *TerrainData) GetScaleZ() float32 {
	if x != nil {
		return x.ScaleZ
	}
	return 0
}

func (x *TerrainData) GetMinHeight() float32 {
	if x != nil {
		return x.MinHeight
	}
	return 0
}

func (x *TerrainData) GetMaxHeight() float32 {
	if x != nil {
		return x.MaxHeight
	}
	return 0
}

// Сервисные сообщения
type CreateObjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Position      *Vector3               `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Rotation      *Quaternion            `protobuf:"bytes,3,opt,name=rotation,proto3" json:"rotation,omitempty"`
	Shape         *ShapeDescriptor       `protobuf:"bytes,4,opt,name=shape,proto3" json:"shape,omitempty"`
	PhysicsConfig *PhysicsConfig         `protobuf:"bytes,5,opt,name=physics_config,json=physicsConfig,proto3" json:"physics_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateObjectRequest) Reset() {
	*x = CreateObjectRequest{}
	mi := &file_physics_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateObjectRequest) ProtoMessage() {}

func (x *CreateObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateObjectRequest.ProtoReflect.Descriptor instead.
func (*CreateObjectRequest) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{6}
}

func (x *CreateObjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateObjectRequest) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CreateObjectRequest) GetRotation() *Quaternion {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *CreateObjectRequest) GetShape() *ShapeDescriptor {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *CreateObjectRequest) GetPhysicsConfig() *PhysicsConfig {
	if x != nil {
		return x.PhysicsConfig
	}
	return nil
}

type CreateObjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateObjectResponse) Reset() {
	*x = CreateObjectResponse{}
	mi := &file_physics_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateObjectResponse) ProtoMessage() {}

func (x *CreateObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateObjectResponse.ProtoReflect.Descriptor instead.
func (*CreateObjectResponse) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{7}
}

func (x *CreateObjectResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ApplyImpulseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Impulse       *Vector3               `protobuf:"bytes,2,opt,name=impulse,proto3" json:"impulse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyImpulseRequest) Reset() {
	*x = ApplyImpulseRequest{}
	mi := &file_physics_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyImpulseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyImpulseRequest) ProtoMessage() {}

func (x *ApplyImpulseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyImpulseRequest.ProtoReflect.Descriptor instead.
func (*ApplyImpulseRequest) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{8}
}

func (x *ApplyImpulseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApplyImpulseRequest) GetImpulse() *Vector3 {
	if x != nil {
		return x.Impulse
	}
	return nil
}

type ApplyImpulseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyImpulseResponse) Reset() {
	*x = ApplyImpulseResponse{}
	mi := &file_physics_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyImpulseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyImpulseResponse) ProtoMessage() {}

func (x *ApplyImpulseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyImpulseResponse.ProtoReflect.Descriptor instead.
func (*ApplyImpulseResponse) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{9}
}

func (x *ApplyImpulseResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ApplyTorqueRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Torque        *Vector3               `protobuf:"bytes,2,opt,name=torque,proto3" json:"torque,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyTorqueRequest) Reset() {
	*x = ApplyTorqueRequest{}
	mi := &file_physics_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyTorqueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyTorqueRequest) ProtoMessage() {}

func (x *ApplyTorqueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyTorqueRequest.ProtoReflect.Descriptor instead.
func (*ApplyTorqueRequest) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{10}
}

func (x *ApplyTorqueRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApplyTorqueRequest) GetTorque() *Vector3 {
	if x != nil {
		return x.Torque
	}
	return nil
}

type ApplyTorqueResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyTorqueResponse) Reset() {
	*x = ApplyTorqueResponse{}
	mi := &file_physics_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyTorqueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyTorqueResponse) ProtoMessage() {}

func (x *ApplyTorqueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyTorqueResponse.ProtoReflect.Descriptor instead.
func (*ApplyTorqueResponse) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{11}
}

func (x *ApplyTorqueResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetObjectStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetObjectStateRequest) Reset() {
	*x = GetObjectStateRequest{}
	mi := &file_physics_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetObjectStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectStateRequest) ProtoMessage() {}

func (x *GetObjectStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectStateRequest.ProtoReflect.Descriptor instead.
func (*GetObjectStateRequest) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{12}
}

func (x *GetObjectStateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ObjectState struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Position        *Vector3               `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Rotation        *Quaternion            `protobuf:"bytes,2,opt,name=rotation,proto3" json:"rotation,omitempty"`
	LinearVelocity  *Vector3               `protobuf:"bytes,3,opt,name=linear_velocity,json=linearVelocity,proto3" json:"linear_velocity,omitempty"`
	AngularVelocity *Vector3               `protobuf:"bytes,4,opt,name=angular_velocity,json=angularVelocity,proto3" json:"angular_velocity,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ObjectState) Reset() {
	*x = ObjectState{}
	mi := &file_physics_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectState) ProtoMessage() {}

func (x *ObjectState) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectState.ProtoReflect.Descriptor instead.
func (*ObjectState) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{13}
}

func (x *ObjectState) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *ObjectState) GetRotation() *Quaternion {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *ObjectState) GetLinearVelocity() *Vector3 {
	if x != nil {
		return x.LinearVelocity
	}
	return nil
}

func (x *ObjectState) GetAngularVelocity() *Vector3 {
	if x != nil {
		return x.AngularVelocity
	}
	return nil
}

type GetObjectStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	State         *ObjectState           `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetObjectStateResponse) Reset() {
	*x = GetObjectStateResponse{}
	mi := &file_physics_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetObjectStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectStateResponse) ProtoMessage() {}

func (x *GetObjectStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectStateResponse.ProtoReflect.Descriptor instead.
func (*GetObjectStateResponse) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{14}
}

func (x *GetObjectStateResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetObjectStateResponse) GetState() *ObjectState {
	if x != nil {
		return x.State
	}
	return nil
}

// Запрос для обновления массы объекта
type UpdateObjectMassRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mass          float32                `protobuf:"fixed32,2,opt,name=mass,proto3" json:"mass,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateObjectMassRequest) Reset() {
	*x = UpdateObjectMassRequest{}
	mi := &file_physics_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateObjectMassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateObjectMassRequest) ProtoMessage() {}

func (x *UpdateObjectMassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateObjectMassRequest.ProtoReflect.Descriptor instead.
func (*UpdateObjectMassRequest) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateObjectMassRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateObjectMassRequest) GetMass() float32 {
	if x != nil {
		return x.Mass
	}
	return 0
}

// Ответ на запрос обновления массы
type UpdateObjectMassResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateObjectMassResponse) Reset() {
	*x = UpdateObjectMassResponse{}
	mi := &file_physics_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateObjectMassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateObjectMassResponse) ProtoMessage() {}

func (x *UpdateObjectMassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateObjectMassResponse.ProtoReflect.Descriptor instead.
func (*UpdateObjectMassResponse) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateObjectMassResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// Запрос для обновления радиуса объекта
type UpdateObjectRadiusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Radius        float32                `protobuf:"fixed32,2,opt,name=radius,proto3" json:"radius,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateObjectRadiusRequest) Reset() {
	*x = UpdateObjectRadiusRequest{}
	mi := &file_physics_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateObjectRadiusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateObjectRadiusRequest) ProtoMessage() {}

func (x *UpdateObjectRadiusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateObjectRadiusRequest.ProtoReflect.Descriptor instead.
func (*UpdateObjectRadiusRequest) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateObjectRadiusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateObjectRadiusRequest) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

// Ответ на запрос обновления радиуса
type UpdateObjectRadiusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateObjectRadiusResponse) Reset() {
	*x = UpdateObjectRadiusResponse{}
	mi := &file_physics_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateObjectRadiusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateObjectRadiusResponse) ProtoMessage() {}

func (x *UpdateObjectRadiusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateObjectRadiusResponse.ProtoReflect.Descriptor instead.
func (*UpdateObjectRadiusResponse) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateObjectRadiusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// Запрос для обновления массы и радиуса объекта одновременно
type UpdateObjectMassAndRadiusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mass          float32                `protobuf:"fixed32,2,opt,name=mass,proto3" json:"mass,omitempty"`
	Radius        float32                `protobuf:"fixed32,3,opt,name=radius,proto3" json:"radius,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateObjectMassAndRadiusRequest) Reset() {
	*x = UpdateObjectMassAndRadiusRequest{}
	mi := &file_physics_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateObjectMassAndRadiusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateObjectMassAndRadiusRequest) ProtoMessage() {}

func (x *UpdateObjectMassAndRadiusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateObjectMassAndRadiusRequest.ProtoReflect.Descriptor instead.
func (*UpdateObjectMassAndRadiusRequest) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateObjectMassAndRadiusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateObjectMassAndRadiusRequest) GetMass() float32 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *UpdateObjectMassAndRadiusRequest) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

// Ответ на запрос обновления массы и радиуса
type UpdateObjectMassAndRadiusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateObjectMassAndRadiusResponse) Reset() {
	*x = UpdateObjectMassAndRadiusResponse{}
	mi := &file_physics_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateObjectMassAndRadiusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateObjectMassAndRadiusResponse) ProtoMessage() {}

func (x *UpdateObjectMassAndRadiusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateObjectMassAndRadiusResponse.ProtoReflect.Descriptor instead.
func (*UpdateObjectMassAndRadiusResponse) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateObjectMassAndRadiusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// Глобальные настройки физики мира
type WorldPhysicsConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Настройки гравитации
	GravityX float32 `protobuf:"fixed32,1,opt,name=gravity_x,json=gravityX,proto3" json:"gravity_x,omitempty"`
	GravityY float32 `protobuf:"fixed32,2,opt,name=gravity_y,json=gravityY,proto3" json:"gravity_y,omitempty"`
	GravityZ float32 `protobuf:"fixed32,3,opt,name=gravity_z,json=gravityZ,proto3" json:"gravity_z,omitempty"`
	// Глобальные параметры затухания
	LinearDamping  float32 `protobuf:"fixed32,4,opt,name=linear_damping,json=linearDamping,proto3" json:"linear_damping,omitempty"`
	AngularDamping float32 `protobuf:"fixed32,5,opt,name=angular_damping,json=angularDamping,proto3" json:"angular_damping,omitempty"`
	// Глобальные параметры трения
	Friction        float32 `protobuf:"fixed32,6,opt,name=friction,proto3" json:"friction,omitempty"`
	RollingFriction float32 `protobuf:"fixed32,7,opt,name=rolling_friction,json=rollingFriction,proto3" json:"rolling_friction,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *WorldPhysicsConfig) Reset() {
	*x = WorldPhysicsConfig{}
	mi := &file_physics_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorldPhysicsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldPhysicsConfig) ProtoMessage() {}

func (x *WorldPhysicsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldPhysicsConfig.ProtoReflect.Descriptor instead.
func (*WorldPhysicsConfig) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{21}
}

func (x *WorldPhysicsConfig) GetGravityX() float32 {
	if x != nil {
		return x.GravityX
	}
	return 0
}

func (x *WorldPhysicsConfig) GetGravityY() float32 {
	if x != nil {
		return x.GravityY
	}
	return 0
}

func (x *WorldPhysicsConfig) GetGravityZ() float32 {
	if x != nil {
		return x.GravityZ
	}
	return 0
}

func (x *WorldPhysicsConfig) GetLinearDamping() float32 {
	if x != nil {
		return x.LinearDamping
	}
	return 0
}

func (x *WorldPhysicsConfig) GetAngularDamping() float32 {
	if x != nil {
		return x.AngularDamping
	}
	return 0
}

func (x *WorldPhysicsConfig) GetFriction() float32 {
	if x != nil {
		return x.Friction
	}
	return 0
}

func (x *WorldPhysicsConfig) GetRollingFriction() float32 {
	if x != nil {
		return x.RollingFriction
	}
	return 0
}

// Настройки игрока
type PlayerConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Физические характеристики игрока
	PlayerMass    float32 `protobuf:"fixed32,1,opt,name=player_mass,json=playerMass,proto3" json:"player_mass,omitempty"` // Масса игрока
	Restitution   float32 `protobuf:"fixed32,2,opt,name=restitution,proto3" json:"restitution,omitempty"`                 // Способность к отскоку (скилл прыгучести)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerConfig) Reset() {
	*x = PlayerConfig{}
	mi := &file_physics_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerConfig) ProtoMessage() {}

func (x *PlayerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerConfig.ProtoReflect.Descriptor instead.
func (*PlayerConfig) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{22}
}

func (x *PlayerConfig) GetPlayerMass() float32 {
	if x != nil {
		return x.PlayerMass
	}
	return 0
}

func (x *PlayerConfig) GetRestitution() float32 {
	if x != nil {
		return x.Restitution
	}
	return 0
}

// Настройки управления
type ControlConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Настройки импульсов и движения
	BaseImpulse        float32 `protobuf:"fixed32,1,opt,name=base_impulse,json=baseImpulse,proto3" json:"base_impulse,omitempty"`
	MaxImpulse         float32 `protobuf:"fixed32,2,opt,name=max_impulse,json=maxImpulse,proto3" json:"max_impulse,omitempty"`
	DistanceMultiplier float32 `protobuf:"fixed32,3,opt,name=distance_multiplier,json=distanceMultiplier,proto3" json:"distance_multiplier,omitempty"`
	ImpulseMultiplier  float32 `protobuf:"fixed32,4,opt,name=impulse_multiplier,json=impulseMultiplier,proto3" json:"impulse_multiplier,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ControlConfig) Reset() {
	*x = ControlConfig{}
	mi := &file_physics_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ControlConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlConfig) ProtoMessage() {}

func (x *ControlConfig) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlConfig.ProtoReflect.Descriptor instead.
func (*ControlConfig) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{23}
}

func (x *ControlConfig) GetBaseImpulse() float32 {
	if x != nil {
		return x.BaseImpulse
	}
	return 0
}

func (x *ControlConfig) GetMaxImpulse() float32 {
	if x != nil {
		return x.MaxImpulse
	}
	return 0
}

func (x *ControlConfig) GetDistanceMultiplier() float32 {
	if x != nil {
		return x.DistanceMultiplier
	}
	return 0
}

func (x *ControlConfig) GetImpulseMultiplier() float32 {
	if x != nil {
		return x.ImpulseMultiplier
	}
	return 0
}

// Обновленная конфигурация физики
type PhysicsConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	World         *WorldPhysicsConfig    `protobuf:"bytes,1,opt,name=world,proto3" json:"world,omitempty"`
	Player        *PlayerConfig          `protobuf:"bytes,2,opt,name=player,proto3" json:"player,omitempty"`
	Control       *ControlConfig         `protobuf:"bytes,3,opt,name=control,proto3" json:"control,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PhysicsConfig) Reset() {
	*x = PhysicsConfig{}
	mi := &file_physics_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhysicsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicsConfig) ProtoMessage() {}

func (x *PhysicsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicsConfig.ProtoReflect.Descriptor instead.
func (*PhysicsConfig) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{24}
}

func (x *PhysicsConfig) GetWorld() *WorldPhysicsConfig {
	if x != nil {
		return x.World
	}
	return nil
}

func (x *PhysicsConfig) GetPlayer() *PlayerConfig {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *PhysicsConfig) GetControl() *ControlConfig {
	if x != nil {
		return x.Control
	}
	return nil
}

// Запрос для установки конфигурации физики
type SetPhysicsConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *PhysicsConfig         `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPhysicsConfigRequest) Reset() {
	*x = SetPhysicsConfigRequest{}
	mi := &file_physics_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPhysicsConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPhysicsConfigRequest) ProtoMessage() {}

func (x *SetPhysicsConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPhysicsConfigRequest.ProtoReflect.Descriptor instead.
func (*SetPhysicsConfigRequest) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{25}
}

func (x *SetPhysicsConfigRequest) GetConfig() *PhysicsConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// Ответ на запрос установки конфигурации физики
type SetPhysicsConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetPhysicsConfigResponse) Reset() {
	*x = SetPhysicsConfigResponse{}
	mi := &file_physics_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetPhysicsConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPhysicsConfigResponse) ProtoMessage() {}

func (x *SetPhysicsConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_physics_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPhysicsConfigResponse.ProtoReflect.Descriptor instead.
func (*SetPhysicsConfigResponse) Descriptor() ([]byte, []int) {
	return file_physics_proto_rawDescGZIP(), []int{26}
}

func (x *SetPhysicsConfigResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_physics_proto protoreflect.FileDescriptor

var file_physics_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x22, 0x33, 0x0a, 0x07, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x33, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12,
	0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0x44, 0x0a,
	0x0a, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x77, 0x22, 0x95, 0x02, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x70, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x2d, 0x0a, 0x06, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x12, 0x24,
	0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x03, 0x62, 0x6f, 0x78, 0x12, 0x30, 0x0a, 0x07, 0x74, 0x65, 0x72, 0x72, 0x61, 0x69, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e,
	0x54, 0x65, 0x72, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x74,
	0x65, 0x72, 0x72, 0x61, 0x69, 0x6e, 0x22, 0x3a, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x70, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x50, 0x48, 0x45, 0x52, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x4f, 0x58, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x45, 0x52, 0x52, 0x41, 0x49, 0x4e,
	0x10, 0x03, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x0a,
	0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f,
	0x64, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x44, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x44, 0x61,
	0x6d, 0x70, 0x69, 0x6e, 0x67, 0x22, 0xb0, 0x02, 0x0a, 0x07, 0x42, 0x6f, 0x78, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x46, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x65,
	0x61, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x44, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x70, 0x69,
	0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x44, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x22, 0xe0, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x72,
	0x72, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61,
	0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x6d,
	0x61, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x58, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x5f, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x59, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x7a, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5a, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xf3, 0x01, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x51, 0x75,
	0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x2e, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x51, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x69, 0x6d, 0x70, 0x75,
	0x6c, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x07, 0x69, 0x6d, 0x70,
	0x75, 0x6c, 0x73, 0x65, 0x22, 0x2e, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6d, 0x70,
	0x75, 0x6c, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x4e, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x72,
	0x71, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x74, 0x6f,
	0x72, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x06, 0x74, 0x6f,
	0x72, 0x71, 0x75, 0x65, 0x22, 0x2d, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x72,
	0x71, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe4, 0x01, 0x0a,
	0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0f, 0x6c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x56, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x10, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x33, 0x52, 0x0f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x22, 0x5c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x3d, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73,
	0x22, 0x32, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x43, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x34, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x5e, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x73, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22,
	0x3b, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x73, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x82, 0x02, 0x0a,
	0x12, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x58,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x59, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x5a, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69,
	0x6e, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x44, 0x61, 0x6d, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x64, 0x61, 0x6d,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x61, 0x6e, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x44, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x51, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61,
	0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69,
	0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x69,
	0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x69, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0xa3, 0x01, 0x0a, 0x0d, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x05,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x12,
	0x2d, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x22, 0x49, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x32, 0x0a, 0x18, 0x53,
	0x65, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32,
	0xc5, 0x05, 0x0a, 0x07, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6d, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f,
	0x72, 0x71, 0x75, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x54, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x61, 0x73, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x12, 0x22, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x73, 0x73, 0x41, 0x6e,
	0x64, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x29, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61,
	0x73, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x73, 0x73, 0x41, 0x6e, 0x64,
	0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57,
	0x0a, 0x10, 0x53, 0x65, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x20, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2c, 0x5a, 0x2a, 0x78, 0x2d, 0x63, 0x65, 0x6c,
	0x6c, 0x73, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_physics_proto_rawDescOnce sync.Once
	file_physics_proto_rawDescData []byte
)

func file_physics_proto_rawDescGZIP() []byte {
	file_physics_proto_rawDescOnce.Do(func() {
		file_physics_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_physics_proto_rawDesc), len(file_physics_proto_rawDesc)))
	})
	return file_physics_proto_rawDescData
}

var file_physics_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_physics_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_physics_proto_goTypes = []any{
	(ShapeDescriptor_ShapeType)(0),            // 0: physics.ShapeDescriptor.ShapeType
	(*Vector3)(nil),                           // 1: physics.Vector3
	(*Quaternion)(nil),                        // 2: physics.Quaternion
	(*ShapeDescriptor)(nil),                   // 3: physics.ShapeDescriptor
	(*SphereData)(nil),                        // 4: physics.SphereData
	(*BoxData)(nil),                           // 5: physics.BoxData
	(*TerrainData)(nil),                       // 6: physics.TerrainData
	(*CreateObjectRequest)(nil),               // 7: physics.CreateObjectRequest
	(*CreateObjectResponse)(nil),              // 8: physics.CreateObjectResponse
	(*ApplyImpulseRequest)(nil),               // 9: physics.ApplyImpulseRequest
	(*ApplyImpulseResponse)(nil),              // 10: physics.ApplyImpulseResponse
	(*ApplyTorqueRequest)(nil),                // 11: physics.ApplyTorqueRequest
	(*ApplyTorqueResponse)(nil),               // 12: physics.ApplyTorqueResponse
	(*GetObjectStateRequest)(nil),             // 13: physics.GetObjectStateRequest
	(*ObjectState)(nil),                       // 14: physics.ObjectState
	(*GetObjectStateResponse)(nil),            // 15: physics.GetObjectStateResponse
	(*UpdateObjectMassRequest)(nil),           // 16: physics.UpdateObjectMassRequest
	(*UpdateObjectMassResponse)(nil),          // 17: physics.UpdateObjectMassResponse
	(*UpdateObjectRadiusRequest)(nil),         // 18: physics.UpdateObjectRadiusRequest
	(*UpdateObjectRadiusResponse)(nil),        // 19: physics.UpdateObjectRadiusResponse
	(*UpdateObjectMassAndRadiusRequest)(nil),  // 20: physics.UpdateObjectMassAndRadiusRequest
	(*UpdateObjectMassAndRadiusResponse)(nil), // 21: physics.UpdateObjectMassAndRadiusResponse
	(*WorldPhysicsConfig)(nil),                // 22: physics.WorldPhysicsConfig
	(*PlayerConfig)(nil),                      // 23: physics.PlayerConfig
	(*ControlConfig)(nil),                     // 24: physics.ControlConfig
	(*PhysicsConfig)(nil),                     // 25: physics.PhysicsConfig
	(*SetPhysicsConfigRequest)(nil),           // 26: physics.SetPhysicsConfigRequest
	(*SetPhysicsConfigResponse)(nil),          // 27: physics.SetPhysicsConfigResponse
}
var file_physics_proto_depIdxs = []int32{
	0,  // 0: physics.ShapeDescriptor.type:type_name -> physics.ShapeDescriptor.ShapeType
	4,  // 1: physics.ShapeDescriptor.sphere:type_name -> physics.SphereData
	5,  // 2: physics.ShapeDescriptor.box:type_name -> physics.BoxData
	6,  // 3: physics.ShapeDescriptor.terrain:type_name -> physics.TerrainData
	1,  // 4: physics.CreateObjectRequest.position:type_name -> physics.Vector3
	2,  // 5: physics.CreateObjectRequest.rotation:type_name -> physics.Quaternion
	3,  // 6: physics.CreateObjectRequest.shape:type_name -> physics.ShapeDescriptor
	25, // 7: physics.CreateObjectRequest.physics_config:type_name -> physics.PhysicsConfig
	1,  // 8: physics.ApplyImpulseRequest.impulse:type_name -> physics.Vector3
	1,  // 9: physics.ApplyTorqueRequest.torque:type_name -> physics.Vector3
	1,  // 10: physics.ObjectState.position:type_name -> physics.Vector3
	2,  // 11: physics.ObjectState.rotation:type_name -> physics.Quaternion
	1,  // 12: physics.ObjectState.linear_velocity:type_name -> physics.Vector3
	1,  // 13: physics.ObjectState.angular_velocity:type_name -> physics.Vector3
	14, // 14: physics.GetObjectStateResponse.state:type_name -> physics.ObjectState
	22, // 15: physics.PhysicsConfig.world:type_name -> physics.WorldPhysicsConfig
	23, // 16: physics.PhysicsConfig.player:type_name -> physics.PlayerConfig
	24, // 17: physics.PhysicsConfig.control:type_name -> physics.ControlConfig
	25, // 18: physics.SetPhysicsConfigRequest.config:type_name -> physics.PhysicsConfig
	7,  // 19: physics.Physics.CreateObject:input_type -> physics.CreateObjectRequest
	9,  // 20: physics.Physics.ApplyImpulse:input_type -> physics.ApplyImpulseRequest
	11, // 21: physics.Physics.ApplyTorque:input_type -> physics.ApplyTorqueRequest
	13, // 22: physics.Physics.GetObjectState:input_type -> physics.GetObjectStateRequest
	16, // 23: physics.Physics.UpdateObjectMass:input_type -> physics.UpdateObjectMassRequest
	18, // 24: physics.Physics.UpdateObjectRadius:input_type -> physics.UpdateObjectRadiusRequest
	20, // 25: physics.Physics.UpdateObjectMassAndRadius:input_type -> physics.UpdateObjectMassAndRadiusRequest
	26, // 26: physics.Physics.SetPhysicsConfig:input_type -> physics.SetPhysicsConfigRequest
	8,  // 27: physics.Physics.CreateObject:output_type -> physics.CreateObjectResponse
	10, // 28: physics.Physics.ApplyImpulse:output_type -> physics.ApplyImpulseResponse
	12, // 29: physics.Physics.ApplyTorque:output_type -> physics.ApplyTorqueResponse
	15, // 30: physics.Physics.GetObjectState:output_type -> physics.GetObjectStateResponse
	17, // 31: physics.Physics.UpdateObjectMass:output_type -> physics.UpdateObjectMassResponse
	19, // 32: physics.Physics.UpdateObjectRadius:output_type -> physics.UpdateObjectRadiusResponse
	21, // 33: physics.Physics.UpdateObjectMassAndRadius:output_type -> physics.UpdateObjectMassAndRadiusResponse
	27, // 34: physics.Physics.SetPhysicsConfig:output_type -> physics.SetPhysicsConfigResponse
	27, // [27:35] is the sub-list for method output_type
	19, // [19:27] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_physics_proto_init() }
func file_physics_proto_init() {
	if File_physics_proto != nil {
		return
	}
	file_physics_proto_msgTypes[2].OneofWrappers = []any{
		(*ShapeDescriptor_Sphere)(nil),
		(*ShapeDescriptor_Box)(nil),
		(*ShapeDescriptor_Terrain)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_physics_proto_rawDesc), len(file_physics_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_physics_proto_goTypes,
		DependencyIndexes: file_physics_proto_depIdxs,
		EnumInfos:         file_physics_proto_enumTypes,
		MessageInfos:      file_physics_proto_msgTypes,
	}.Build()
	File_physics_proto = out.File
	file_physics_proto_goTypes = nil
	file_physics_proto_depIdxs = nil
}
