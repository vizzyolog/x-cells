package telemetry

import (
	"encoding/json"
	"log"
	"math"
	"sync"
	"time"
)

// Vector3 —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è 3D –≤–µ–∫—Ç–æ—Ä–∞
type Vector3 struct {
	X, Y, Z float64
}

// TelemetryData —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –æ–±—ä–µ–∫—Ç–∞
type TelemetryData struct {
	Timestamp      int64    `json:"timestamp"`                 // –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
	ObjectID       string   `json:"object_id"`                 // ID –æ–±—ä–µ–∫—Ç–∞
	ObjectType     string   `json:"object_type"`               // –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ (player, food, etc.)
	PhysicsType    string   `json:"physics_type"`              // –¢–∏–ø —Ñ–∏–∑–∏–∫–∏ (bullet, ammo, both)
	Position       Vector3  `json:"position"`                  // –ü–æ–∑–∏—Ü–∏—è
	Velocity       Vector3  `json:"velocity"`                  // –°–∫–æ—Ä–æ—Å—Ç—å
	Mass           float64  `json:"mass"`                      // –ú–∞—Å—Å–∞
	Radius         float64  `json:"radius"`                    // –†–∞–¥–∏—É—Å
	Speed          float64  `json:"speed"`                     // –ú–æ–¥—É–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏
	AppliedImpulse *Vector3 `json:"applied_impulse,omitempty"` // –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–π –∏–º–ø—É–ª—å—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
	Source         string   `json:"source"`                    // –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö (server/client)
}

// TelemetryManager —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–±–æ—Ä–æ–º –∏ –≤—ã–≤–æ–¥–æ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
type TelemetryManager struct {
	enabled    bool
	data       []TelemetryData
	mutex      sync.RWMutex
	maxEntries int

	// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	counters      map[string]int
	lastPrint     time.Time
	printInterval time.Duration
}

// NewTelemetryManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
func NewTelemetryManager() *TelemetryManager {
	return &TelemetryManager{
		enabled:       true, // –í–∫–ª—é—á–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
		data:          make([]TelemetryData, 0),
		maxEntries:    200, // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 –∑–∞–ø–∏—Å–µ–π
		counters:      make(map[string]int),
		lastPrint:     time.Now(),
		printInterval: 2 * time.Second, // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
	}
}

// LogObjectState –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
func (tm *TelemetryManager) LogObjectState(objectID, objectType, physicsType string,
	position, velocity Vector3, mass, radius float64) {

	if !tm.enabled {
		return
	}

	tm.mutex.Lock()
	defer tm.mutex.Unlock()

	speed := calculateSpeed(velocity)

	entry := TelemetryData{
		Timestamp:   time.Now().UnixMilli(),
		ObjectID:    objectID,
		ObjectType:  objectType,
		PhysicsType: physicsType,
		Position:    position,
		Velocity:    velocity,
		Mass:        mass,
		Radius:      radius,
		Speed:       speed,
		Source:      "server",
	}

	tm.data = append(tm.data, entry)

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
	if len(tm.data) > tm.maxEntries {
		tm.data = tm.data[1:]
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
	key := objectType + "_" + physicsType
	tm.counters[key]++
}

// LogImpulse –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–π –∏–º–ø—É–ª—å—Å
func (tm *TelemetryManager) LogImpulse(objectID, objectType, physicsType string,
	position, velocity Vector3, mass, radius float64, impulse Vector3) {

	if !tm.enabled {
		return
	}

	tm.mutex.Lock()
	defer tm.mutex.Unlock()

	speed := calculateSpeed(velocity)

	entry := TelemetryData{
		Timestamp:      time.Now().UnixMilli(),
		ObjectID:       objectID,
		ObjectType:     objectType,
		PhysicsType:    physicsType,
		Position:       position,
		Velocity:       velocity,
		Mass:           mass,
		Radius:         radius,
		Speed:          speed,
		AppliedImpulse: &impulse,
		Source:         "server",
	}

	tm.data = append(tm.data, entry)

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
	if len(tm.data) > tm.maxEntries {
		tm.data = tm.data[1:]
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
	tm.counters["impulse_"+objectType]++
}

// PrintSummary –≤—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
func (tm *TelemetryManager) PrintSummary() {
	if !tm.enabled {
		return
	}

	now := time.Now()
	if now.Sub(tm.lastPrint) < tm.printInterval {
		return
	}

	tm.mutex.RLock()
	defer tm.mutex.RUnlock()

	log.Println("üî¨ [Telemetry] ===== –°–ï–†–í–ï–†–ù–ê–Ø –¢–ï–õ–ï–ú–ï–¢–†–ò–Ø =====")
	log.Printf("üìä [Telemetry] –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: %d", len(tm.data))

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—á–µ—Ç—á–∏–∫–∞–º
	for key, count := range tm.counters {
		log.Printf("üìà [Telemetry] %s: %d", key, count)
	}

	// –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ –∏–≥—Ä–æ–∫–∞–º
	tm.printRecentPlayerData()

	// –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤
	tm.counters = make(map[string]int)
	tm.lastPrint = now

	log.Println("üî¨ [Telemetry] ===================================")
}

// printRecentPlayerData –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –∏–≥—Ä–æ–∫–æ–≤
func (tm *TelemetryManager) printRecentPlayerData() {
	// –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
	playerData := make(map[string]TelemetryData)

	for i := len(tm.data) - 1; i >= 0; i-- {
		entry := tm.data[i]
		if entry.ObjectType == "player" {
			if _, exists := playerData[entry.ObjectID]; !exists {
				playerData[entry.ObjectID] = entry
			}
		}
	}

	for playerID, data := range playerData {
		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ —á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è
		timestamp := time.UnixMilli(data.Timestamp)

		log.Printf("üéÆ [Telemetry] –ò–≥—Ä–æ–∫ %s [%s]:", playerID, timestamp.Format("15:04:05.000"))
		log.Printf("   üìç –ü–æ–∑–∏—Ü–∏—è: (%.2f, %.2f, %.2f)",
			data.Position.X, data.Position.Y, data.Position.Z)
		log.Printf("   üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: (%.2f, %.2f, %.2f) |%.2f|",
			data.Velocity.X, data.Velocity.Y, data.Velocity.Z, data.Speed)
		log.Printf("   ‚öñÔ∏è  –ú–∞—Å—Å–∞: %.2f –∫–≥, –†–∞–¥–∏—É—Å: %.2f", data.Mass, data.Radius)
		log.Printf("   üîß –§–∏–∑–∏–∫–∞: %s, –ò—Å—Ç–æ—á–Ω–∏–∫: %s", data.PhysicsType, data.Source)
		log.Printf("   ‚è∞ –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞: %d", data.Timestamp)

		if data.AppliedImpulse != nil {
			log.Printf("   üí• –ò–º–ø—É–ª—å—Å: (%.2f, %.2f, %.2f)",
				data.AppliedImpulse.X, data.AppliedImpulse.Y, data.AppliedImpulse.Z)
		}
	}
}

// GetTelemetryJSON –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
func (tm *TelemetryManager) GetTelemetryJSON() (string, error) {
	tm.mutex.RLock()
	defer tm.mutex.RUnlock()

	jsonData, err := json.MarshalIndent(tm.data, "", "  ")
	if err != nil {
		return "", err
	}

	return string(jsonData), nil
}

// SetEnabled –≤–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é
func (tm *TelemetryManager) SetEnabled(enabled bool) {
	tm.mutex.Lock()
	defer tm.mutex.Unlock()

	tm.enabled = enabled
	log.Printf("üî¨ [Telemetry] –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è %s", map[bool]string{true: "–≤–∫–ª—é—á–µ–Ω–∞", false: "–≤—ã–∫–ª—é—á–µ–Ω–∞"}[enabled])
}

// Clear –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
func (tm *TelemetryManager) Clear() {
	tm.mutex.Lock()
	defer tm.mutex.Unlock()

	tm.data = make([]TelemetryData, 0)
	tm.counters = make(map[string]int)
	log.Println("üî¨ [Telemetry] –î–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –æ—á–∏—â–µ–Ω—ã")
}

// calculateSpeed –≤—ã—á–∏—Å–ª—è–µ—Ç –º–æ–¥—É–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏
func calculateSpeed(velocity Vector3) float64 {
	return math.Sqrt(velocity.X*velocity.X + velocity.Y*velocity.Y + velocity.Z*velocity.Z)
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
var GlobalTelemetry = NewTelemetryManager()
