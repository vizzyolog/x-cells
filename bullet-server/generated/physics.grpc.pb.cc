// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: physics.proto

#include "physics.pb.h"
#include "physics.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace physics {

static const char* Physics_method_names[] = {
  "/physics.Physics/CreateObject",
  "/physics.Physics/ApplyImpulse",
  "/physics.Physics/ApplyTorque",
  "/physics.Physics/GetObjectState",
  "/physics.Physics/UpdateObjectMass",
  "/physics.Physics/SetPhysicsConfig",
};

std::unique_ptr< Physics::Stub> Physics::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Physics::Stub> stub(new Physics::Stub(channel, options));
  return stub;
}

Physics::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateObject_(Physics_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ApplyImpulse_(Physics_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ApplyTorque_(Physics_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetObjectState_(Physics_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateObjectMass_(Physics_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPhysicsConfig_(Physics_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Physics::Stub::CreateObject(::grpc::ClientContext* context, const ::physics::CreateObjectRequest& request, ::physics::CreateObjectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::physics::CreateObjectRequest, ::physics::CreateObjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateObject_, context, request, response);
}

void Physics::Stub::async::CreateObject(::grpc::ClientContext* context, const ::physics::CreateObjectRequest* request, ::physics::CreateObjectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::physics::CreateObjectRequest, ::physics::CreateObjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateObject_, context, request, response, std::move(f));
}

void Physics::Stub::async::CreateObject(::grpc::ClientContext* context, const ::physics::CreateObjectRequest* request, ::physics::CreateObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::physics::CreateObjectResponse>* Physics::Stub::PrepareAsyncCreateObjectRaw(::grpc::ClientContext* context, const ::physics::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::physics::CreateObjectResponse, ::physics::CreateObjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateObject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::physics::CreateObjectResponse>* Physics::Stub::AsyncCreateObjectRaw(::grpc::ClientContext* context, const ::physics::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Physics::Stub::ApplyImpulse(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest& request, ::physics::ApplyImpulseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::physics::ApplyImpulseRequest, ::physics::ApplyImpulseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ApplyImpulse_, context, request, response);
}

void Physics::Stub::async::ApplyImpulse(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest* request, ::physics::ApplyImpulseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::physics::ApplyImpulseRequest, ::physics::ApplyImpulseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApplyImpulse_, context, request, response, std::move(f));
}

void Physics::Stub::async::ApplyImpulse(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest* request, ::physics::ApplyImpulseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApplyImpulse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::physics::ApplyImpulseResponse>* Physics::Stub::PrepareAsyncApplyImpulseRaw(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::physics::ApplyImpulseResponse, ::physics::ApplyImpulseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ApplyImpulse_, context, request);
}

::grpc::ClientAsyncResponseReader< ::physics::ApplyImpulseResponse>* Physics::Stub::AsyncApplyImpulseRaw(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncApplyImpulseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Physics::Stub::ApplyTorque(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest& request, ::physics::ApplyTorqueResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::physics::ApplyTorqueRequest, ::physics::ApplyTorqueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ApplyTorque_, context, request, response);
}

void Physics::Stub::async::ApplyTorque(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest* request, ::physics::ApplyTorqueResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::physics::ApplyTorqueRequest, ::physics::ApplyTorqueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApplyTorque_, context, request, response, std::move(f));
}

void Physics::Stub::async::ApplyTorque(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest* request, ::physics::ApplyTorqueResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApplyTorque_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::physics::ApplyTorqueResponse>* Physics::Stub::PrepareAsyncApplyTorqueRaw(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::physics::ApplyTorqueResponse, ::physics::ApplyTorqueRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ApplyTorque_, context, request);
}

::grpc::ClientAsyncResponseReader< ::physics::ApplyTorqueResponse>* Physics::Stub::AsyncApplyTorqueRaw(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncApplyTorqueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Physics::Stub::GetObjectState(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest& request, ::physics::GetObjectStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::physics::GetObjectStateRequest, ::physics::GetObjectStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetObjectState_, context, request, response);
}

void Physics::Stub::async::GetObjectState(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest* request, ::physics::GetObjectStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::physics::GetObjectStateRequest, ::physics::GetObjectStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetObjectState_, context, request, response, std::move(f));
}

void Physics::Stub::async::GetObjectState(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest* request, ::physics::GetObjectStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetObjectState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::physics::GetObjectStateResponse>* Physics::Stub::PrepareAsyncGetObjectStateRaw(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::physics::GetObjectStateResponse, ::physics::GetObjectStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetObjectState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::physics::GetObjectStateResponse>* Physics::Stub::AsyncGetObjectStateRaw(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetObjectStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Physics::Stub::UpdateObjectMass(::grpc::ClientContext* context, const ::physics::UpdateObjectMassRequest& request, ::physics::UpdateObjectMassResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::physics::UpdateObjectMassRequest, ::physics::UpdateObjectMassResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateObjectMass_, context, request, response);
}

void Physics::Stub::async::UpdateObjectMass(::grpc::ClientContext* context, const ::physics::UpdateObjectMassRequest* request, ::physics::UpdateObjectMassResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::physics::UpdateObjectMassRequest, ::physics::UpdateObjectMassResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateObjectMass_, context, request, response, std::move(f));
}

void Physics::Stub::async::UpdateObjectMass(::grpc::ClientContext* context, const ::physics::UpdateObjectMassRequest* request, ::physics::UpdateObjectMassResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateObjectMass_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::physics::UpdateObjectMassResponse>* Physics::Stub::PrepareAsyncUpdateObjectMassRaw(::grpc::ClientContext* context, const ::physics::UpdateObjectMassRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::physics::UpdateObjectMassResponse, ::physics::UpdateObjectMassRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateObjectMass_, context, request);
}

::grpc::ClientAsyncResponseReader< ::physics::UpdateObjectMassResponse>* Physics::Stub::AsyncUpdateObjectMassRaw(::grpc::ClientContext* context, const ::physics::UpdateObjectMassRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateObjectMassRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Physics::Stub::SetPhysicsConfig(::grpc::ClientContext* context, const ::physics::SetPhysicsConfigRequest& request, ::physics::SetPhysicsConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::physics::SetPhysicsConfigRequest, ::physics::SetPhysicsConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPhysicsConfig_, context, request, response);
}

void Physics::Stub::async::SetPhysicsConfig(::grpc::ClientContext* context, const ::physics::SetPhysicsConfigRequest* request, ::physics::SetPhysicsConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::physics::SetPhysicsConfigRequest, ::physics::SetPhysicsConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPhysicsConfig_, context, request, response, std::move(f));
}

void Physics::Stub::async::SetPhysicsConfig(::grpc::ClientContext* context, const ::physics::SetPhysicsConfigRequest* request, ::physics::SetPhysicsConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPhysicsConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::physics::SetPhysicsConfigResponse>* Physics::Stub::PrepareAsyncSetPhysicsConfigRaw(::grpc::ClientContext* context, const ::physics::SetPhysicsConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::physics::SetPhysicsConfigResponse, ::physics::SetPhysicsConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPhysicsConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::physics::SetPhysicsConfigResponse>* Physics::Stub::AsyncSetPhysicsConfigRaw(::grpc::ClientContext* context, const ::physics::SetPhysicsConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPhysicsConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

Physics::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Physics_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Physics::Service, ::physics::CreateObjectRequest, ::physics::CreateObjectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Physics::Service* service,
             ::grpc::ServerContext* ctx,
             const ::physics::CreateObjectRequest* req,
             ::physics::CreateObjectResponse* resp) {
               return service->CreateObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Physics_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Physics::Service, ::physics::ApplyImpulseRequest, ::physics::ApplyImpulseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Physics::Service* service,
             ::grpc::ServerContext* ctx,
             const ::physics::ApplyImpulseRequest* req,
             ::physics::ApplyImpulseResponse* resp) {
               return service->ApplyImpulse(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Physics_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Physics::Service, ::physics::ApplyTorqueRequest, ::physics::ApplyTorqueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Physics::Service* service,
             ::grpc::ServerContext* ctx,
             const ::physics::ApplyTorqueRequest* req,
             ::physics::ApplyTorqueResponse* resp) {
               return service->ApplyTorque(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Physics_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Physics::Service, ::physics::GetObjectStateRequest, ::physics::GetObjectStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Physics::Service* service,
             ::grpc::ServerContext* ctx,
             const ::physics::GetObjectStateRequest* req,
             ::physics::GetObjectStateResponse* resp) {
               return service->GetObjectState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Physics_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Physics::Service, ::physics::UpdateObjectMassRequest, ::physics::UpdateObjectMassResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Physics::Service* service,
             ::grpc::ServerContext* ctx,
             const ::physics::UpdateObjectMassRequest* req,
             ::physics::UpdateObjectMassResponse* resp) {
               return service->UpdateObjectMass(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Physics_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Physics::Service, ::physics::SetPhysicsConfigRequest, ::physics::SetPhysicsConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Physics::Service* service,
             ::grpc::ServerContext* ctx,
             const ::physics::SetPhysicsConfigRequest* req,
             ::physics::SetPhysicsConfigResponse* resp) {
               return service->SetPhysicsConfig(ctx, req, resp);
             }, this)));
}

Physics::Service::~Service() {
}

::grpc::Status Physics::Service::CreateObject(::grpc::ServerContext* context, const ::physics::CreateObjectRequest* request, ::physics::CreateObjectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Physics::Service::ApplyImpulse(::grpc::ServerContext* context, const ::physics::ApplyImpulseRequest* request, ::physics::ApplyImpulseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Physics::Service::ApplyTorque(::grpc::ServerContext* context, const ::physics::ApplyTorqueRequest* request, ::physics::ApplyTorqueResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Physics::Service::GetObjectState(::grpc::ServerContext* context, const ::physics::GetObjectStateRequest* request, ::physics::GetObjectStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Physics::Service::UpdateObjectMass(::grpc::ServerContext* context, const ::physics::UpdateObjectMassRequest* request, ::physics::UpdateObjectMassResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Physics::Service::SetPhysicsConfig(::grpc::ServerContext* context, const ::physics::SetPhysicsConfigRequest* request, ::physics::SetPhysicsConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace physics

