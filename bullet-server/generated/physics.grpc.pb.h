// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: physics.proto
#ifndef GRPC_physics_2eproto__INCLUDED
#define GRPC_physics_2eproto__INCLUDED

#include "physics.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace physics {

// Сервис физики
class Physics final {
 public:
  static constexpr char const* service_full_name() {
    return "physics.Physics";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateObject(::grpc::ClientContext* context, const ::physics::CreateObjectRequest& request, ::physics::CreateObjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::physics::CreateObjectResponse>> AsyncCreateObject(::grpc::ClientContext* context, const ::physics::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::physics::CreateObjectResponse>>(AsyncCreateObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::physics::CreateObjectResponse>> PrepareAsyncCreateObject(::grpc::ClientContext* context, const ::physics::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::physics::CreateObjectResponse>>(PrepareAsyncCreateObjectRaw(context, request, cq));
    }
    virtual ::grpc::Status ApplyImpulse(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest& request, ::physics::ApplyImpulseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::physics::ApplyImpulseResponse>> AsyncApplyImpulse(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::physics::ApplyImpulseResponse>>(AsyncApplyImpulseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::physics::ApplyImpulseResponse>> PrepareAsyncApplyImpulse(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::physics::ApplyImpulseResponse>>(PrepareAsyncApplyImpulseRaw(context, request, cq));
    }
    virtual ::grpc::Status ApplyTorque(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest& request, ::physics::ApplyTorqueResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::physics::ApplyTorqueResponse>> AsyncApplyTorque(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::physics::ApplyTorqueResponse>>(AsyncApplyTorqueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::physics::ApplyTorqueResponse>> PrepareAsyncApplyTorque(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::physics::ApplyTorqueResponse>>(PrepareAsyncApplyTorqueRaw(context, request, cq));
    }
    virtual ::grpc::Status GetObjectState(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest& request, ::physics::GetObjectStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::physics::GetObjectStateResponse>> AsyncGetObjectState(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::physics::GetObjectStateResponse>>(AsyncGetObjectStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::physics::GetObjectStateResponse>> PrepareAsyncGetObjectState(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::physics::GetObjectStateResponse>>(PrepareAsyncGetObjectStateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateObject(::grpc::ClientContext* context, const ::physics::CreateObjectRequest* request, ::physics::CreateObjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateObject(::grpc::ClientContext* context, const ::physics::CreateObjectRequest* request, ::physics::CreateObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ApplyImpulse(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest* request, ::physics::ApplyImpulseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ApplyImpulse(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest* request, ::physics::ApplyImpulseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ApplyTorque(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest* request, ::physics::ApplyTorqueResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ApplyTorque(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest* request, ::physics::ApplyTorqueResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetObjectState(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest* request, ::physics::GetObjectStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetObjectState(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest* request, ::physics::GetObjectStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::physics::CreateObjectResponse>* AsyncCreateObjectRaw(::grpc::ClientContext* context, const ::physics::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::physics::CreateObjectResponse>* PrepareAsyncCreateObjectRaw(::grpc::ClientContext* context, const ::physics::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::physics::ApplyImpulseResponse>* AsyncApplyImpulseRaw(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::physics::ApplyImpulseResponse>* PrepareAsyncApplyImpulseRaw(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::physics::ApplyTorqueResponse>* AsyncApplyTorqueRaw(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::physics::ApplyTorqueResponse>* PrepareAsyncApplyTorqueRaw(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::physics::GetObjectStateResponse>* AsyncGetObjectStateRaw(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::physics::GetObjectStateResponse>* PrepareAsyncGetObjectStateRaw(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateObject(::grpc::ClientContext* context, const ::physics::CreateObjectRequest& request, ::physics::CreateObjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::physics::CreateObjectResponse>> AsyncCreateObject(::grpc::ClientContext* context, const ::physics::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::physics::CreateObjectResponse>>(AsyncCreateObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::physics::CreateObjectResponse>> PrepareAsyncCreateObject(::grpc::ClientContext* context, const ::physics::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::physics::CreateObjectResponse>>(PrepareAsyncCreateObjectRaw(context, request, cq));
    }
    ::grpc::Status ApplyImpulse(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest& request, ::physics::ApplyImpulseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::physics::ApplyImpulseResponse>> AsyncApplyImpulse(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::physics::ApplyImpulseResponse>>(AsyncApplyImpulseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::physics::ApplyImpulseResponse>> PrepareAsyncApplyImpulse(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::physics::ApplyImpulseResponse>>(PrepareAsyncApplyImpulseRaw(context, request, cq));
    }
    ::grpc::Status ApplyTorque(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest& request, ::physics::ApplyTorqueResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::physics::ApplyTorqueResponse>> AsyncApplyTorque(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::physics::ApplyTorqueResponse>>(AsyncApplyTorqueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::physics::ApplyTorqueResponse>> PrepareAsyncApplyTorque(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::physics::ApplyTorqueResponse>>(PrepareAsyncApplyTorqueRaw(context, request, cq));
    }
    ::grpc::Status GetObjectState(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest& request, ::physics::GetObjectStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::physics::GetObjectStateResponse>> AsyncGetObjectState(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::physics::GetObjectStateResponse>>(AsyncGetObjectStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::physics::GetObjectStateResponse>> PrepareAsyncGetObjectState(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::physics::GetObjectStateResponse>>(PrepareAsyncGetObjectStateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateObject(::grpc::ClientContext* context, const ::physics::CreateObjectRequest* request, ::physics::CreateObjectResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateObject(::grpc::ClientContext* context, const ::physics::CreateObjectRequest* request, ::physics::CreateObjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ApplyImpulse(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest* request, ::physics::ApplyImpulseResponse* response, std::function<void(::grpc::Status)>) override;
      void ApplyImpulse(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest* request, ::physics::ApplyImpulseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ApplyTorque(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest* request, ::physics::ApplyTorqueResponse* response, std::function<void(::grpc::Status)>) override;
      void ApplyTorque(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest* request, ::physics::ApplyTorqueResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetObjectState(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest* request, ::physics::GetObjectStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetObjectState(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest* request, ::physics::GetObjectStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::physics::CreateObjectResponse>* AsyncCreateObjectRaw(::grpc::ClientContext* context, const ::physics::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::physics::CreateObjectResponse>* PrepareAsyncCreateObjectRaw(::grpc::ClientContext* context, const ::physics::CreateObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::physics::ApplyImpulseResponse>* AsyncApplyImpulseRaw(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::physics::ApplyImpulseResponse>* PrepareAsyncApplyImpulseRaw(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::physics::ApplyTorqueResponse>* AsyncApplyTorqueRaw(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::physics::ApplyTorqueResponse>* PrepareAsyncApplyTorqueRaw(::grpc::ClientContext* context, const ::physics::ApplyTorqueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::physics::GetObjectStateResponse>* AsyncGetObjectStateRaw(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::physics::GetObjectStateResponse>* PrepareAsyncGetObjectStateRaw(::grpc::ClientContext* context, const ::physics::GetObjectStateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateObject_;
    const ::grpc::internal::RpcMethod rpcmethod_ApplyImpulse_;
    const ::grpc::internal::RpcMethod rpcmethod_ApplyTorque_;
    const ::grpc::internal::RpcMethod rpcmethod_GetObjectState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateObject(::grpc::ServerContext* context, const ::physics::CreateObjectRequest* request, ::physics::CreateObjectResponse* response);
    virtual ::grpc::Status ApplyImpulse(::grpc::ServerContext* context, const ::physics::ApplyImpulseRequest* request, ::physics::ApplyImpulseResponse* response);
    virtual ::grpc::Status ApplyTorque(::grpc::ServerContext* context, const ::physics::ApplyTorqueRequest* request, ::physics::ApplyTorqueResponse* response);
    virtual ::grpc::Status GetObjectState(::grpc::ServerContext* context, const ::physics::GetObjectStateRequest* request, ::physics::GetObjectStateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateObject() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateObject(::grpc::ServerContext* /*context*/, const ::physics::CreateObjectRequest* /*request*/, ::physics::CreateObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateObject(::grpc::ServerContext* context, ::physics::CreateObjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::physics::CreateObjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ApplyImpulse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ApplyImpulse() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ApplyImpulse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyImpulse(::grpc::ServerContext* /*context*/, const ::physics::ApplyImpulseRequest* /*request*/, ::physics::ApplyImpulseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApplyImpulse(::grpc::ServerContext* context, ::physics::ApplyImpulseRequest* request, ::grpc::ServerAsyncResponseWriter< ::physics::ApplyImpulseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ApplyTorque : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ApplyTorque() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ApplyTorque() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyTorque(::grpc::ServerContext* /*context*/, const ::physics::ApplyTorqueRequest* /*request*/, ::physics::ApplyTorqueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApplyTorque(::grpc::ServerContext* context, ::physics::ApplyTorqueRequest* request, ::grpc::ServerAsyncResponseWriter< ::physics::ApplyTorqueResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetObjectState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetObjectState() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetObjectState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectState(::grpc::ServerContext* /*context*/, const ::physics::GetObjectStateRequest* /*request*/, ::physics::GetObjectStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetObjectState(::grpc::ServerContext* context, ::physics::GetObjectStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::physics::GetObjectStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateObject<WithAsyncMethod_ApplyImpulse<WithAsyncMethod_ApplyTorque<WithAsyncMethod_GetObjectState<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateObject() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::physics::CreateObjectRequest, ::physics::CreateObjectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::physics::CreateObjectRequest* request, ::physics::CreateObjectResponse* response) { return this->CreateObject(context, request, response); }));}
    void SetMessageAllocatorFor_CreateObject(
        ::grpc::MessageAllocator< ::physics::CreateObjectRequest, ::physics::CreateObjectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::physics::CreateObjectRequest, ::physics::CreateObjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateObject(::grpc::ServerContext* /*context*/, const ::physics::CreateObjectRequest* /*request*/, ::physics::CreateObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateObject(
      ::grpc::CallbackServerContext* /*context*/, const ::physics::CreateObjectRequest* /*request*/, ::physics::CreateObjectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ApplyImpulse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ApplyImpulse() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::physics::ApplyImpulseRequest, ::physics::ApplyImpulseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::physics::ApplyImpulseRequest* request, ::physics::ApplyImpulseResponse* response) { return this->ApplyImpulse(context, request, response); }));}
    void SetMessageAllocatorFor_ApplyImpulse(
        ::grpc::MessageAllocator< ::physics::ApplyImpulseRequest, ::physics::ApplyImpulseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::physics::ApplyImpulseRequest, ::physics::ApplyImpulseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ApplyImpulse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyImpulse(::grpc::ServerContext* /*context*/, const ::physics::ApplyImpulseRequest* /*request*/, ::physics::ApplyImpulseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ApplyImpulse(
      ::grpc::CallbackServerContext* /*context*/, const ::physics::ApplyImpulseRequest* /*request*/, ::physics::ApplyImpulseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ApplyTorque : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ApplyTorque() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::physics::ApplyTorqueRequest, ::physics::ApplyTorqueResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::physics::ApplyTorqueRequest* request, ::physics::ApplyTorqueResponse* response) { return this->ApplyTorque(context, request, response); }));}
    void SetMessageAllocatorFor_ApplyTorque(
        ::grpc::MessageAllocator< ::physics::ApplyTorqueRequest, ::physics::ApplyTorqueResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::physics::ApplyTorqueRequest, ::physics::ApplyTorqueResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ApplyTorque() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyTorque(::grpc::ServerContext* /*context*/, const ::physics::ApplyTorqueRequest* /*request*/, ::physics::ApplyTorqueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ApplyTorque(
      ::grpc::CallbackServerContext* /*context*/, const ::physics::ApplyTorqueRequest* /*request*/, ::physics::ApplyTorqueResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetObjectState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetObjectState() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::physics::GetObjectStateRequest, ::physics::GetObjectStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::physics::GetObjectStateRequest* request, ::physics::GetObjectStateResponse* response) { return this->GetObjectState(context, request, response); }));}
    void SetMessageAllocatorFor_GetObjectState(
        ::grpc::MessageAllocator< ::physics::GetObjectStateRequest, ::physics::GetObjectStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::physics::GetObjectStateRequest, ::physics::GetObjectStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetObjectState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectState(::grpc::ServerContext* /*context*/, const ::physics::GetObjectStateRequest* /*request*/, ::physics::GetObjectStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetObjectState(
      ::grpc::CallbackServerContext* /*context*/, const ::physics::GetObjectStateRequest* /*request*/, ::physics::GetObjectStateResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateObject<WithCallbackMethod_ApplyImpulse<WithCallbackMethod_ApplyTorque<WithCallbackMethod_GetObjectState<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateObject() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateObject(::grpc::ServerContext* /*context*/, const ::physics::CreateObjectRequest* /*request*/, ::physics::CreateObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ApplyImpulse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ApplyImpulse() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ApplyImpulse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyImpulse(::grpc::ServerContext* /*context*/, const ::physics::ApplyImpulseRequest* /*request*/, ::physics::ApplyImpulseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ApplyTorque : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ApplyTorque() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ApplyTorque() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyTorque(::grpc::ServerContext* /*context*/, const ::physics::ApplyTorqueRequest* /*request*/, ::physics::ApplyTorqueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetObjectState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetObjectState() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetObjectState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectState(::grpc::ServerContext* /*context*/, const ::physics::GetObjectStateRequest* /*request*/, ::physics::GetObjectStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateObject() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateObject(::grpc::ServerContext* /*context*/, const ::physics::CreateObjectRequest* /*request*/, ::physics::CreateObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateObject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ApplyImpulse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ApplyImpulse() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ApplyImpulse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyImpulse(::grpc::ServerContext* /*context*/, const ::physics::ApplyImpulseRequest* /*request*/, ::physics::ApplyImpulseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApplyImpulse(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ApplyTorque : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ApplyTorque() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ApplyTorque() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyTorque(::grpc::ServerContext* /*context*/, const ::physics::ApplyTorqueRequest* /*request*/, ::physics::ApplyTorqueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApplyTorque(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetObjectState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetObjectState() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetObjectState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectState(::grpc::ServerContext* /*context*/, const ::physics::GetObjectStateRequest* /*request*/, ::physics::GetObjectStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetObjectState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateObject() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateObject(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateObject(::grpc::ServerContext* /*context*/, const ::physics::CreateObjectRequest* /*request*/, ::physics::CreateObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateObject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ApplyImpulse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ApplyImpulse() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ApplyImpulse(context, request, response); }));
    }
    ~WithRawCallbackMethod_ApplyImpulse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyImpulse(::grpc::ServerContext* /*context*/, const ::physics::ApplyImpulseRequest* /*request*/, ::physics::ApplyImpulseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ApplyImpulse(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ApplyTorque : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ApplyTorque() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ApplyTorque(context, request, response); }));
    }
    ~WithRawCallbackMethod_ApplyTorque() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyTorque(::grpc::ServerContext* /*context*/, const ::physics::ApplyTorqueRequest* /*request*/, ::physics::ApplyTorqueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ApplyTorque(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetObjectState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetObjectState() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetObjectState(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetObjectState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectState(::grpc::ServerContext* /*context*/, const ::physics::GetObjectStateRequest* /*request*/, ::physics::GetObjectStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetObjectState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateObject() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::physics::CreateObjectRequest, ::physics::CreateObjectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::physics::CreateObjectRequest, ::physics::CreateObjectResponse>* streamer) {
                       return this->StreamedCreateObject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateObject(::grpc::ServerContext* /*context*/, const ::physics::CreateObjectRequest* /*request*/, ::physics::CreateObjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::physics::CreateObjectRequest,::physics::CreateObjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ApplyImpulse : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ApplyImpulse() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::physics::ApplyImpulseRequest, ::physics::ApplyImpulseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::physics::ApplyImpulseRequest, ::physics::ApplyImpulseResponse>* streamer) {
                       return this->StreamedApplyImpulse(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ApplyImpulse() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ApplyImpulse(::grpc::ServerContext* /*context*/, const ::physics::ApplyImpulseRequest* /*request*/, ::physics::ApplyImpulseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedApplyImpulse(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::physics::ApplyImpulseRequest,::physics::ApplyImpulseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ApplyTorque : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ApplyTorque() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::physics::ApplyTorqueRequest, ::physics::ApplyTorqueResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::physics::ApplyTorqueRequest, ::physics::ApplyTorqueResponse>* streamer) {
                       return this->StreamedApplyTorque(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ApplyTorque() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ApplyTorque(::grpc::ServerContext* /*context*/, const ::physics::ApplyTorqueRequest* /*request*/, ::physics::ApplyTorqueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedApplyTorque(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::physics::ApplyTorqueRequest,::physics::ApplyTorqueResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetObjectState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetObjectState() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::physics::GetObjectStateRequest, ::physics::GetObjectStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::physics::GetObjectStateRequest, ::physics::GetObjectStateResponse>* streamer) {
                       return this->StreamedGetObjectState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetObjectState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetObjectState(::grpc::ServerContext* /*context*/, const ::physics::GetObjectStateRequest* /*request*/, ::physics::GetObjectStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetObjectState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::physics::GetObjectStateRequest,::physics::GetObjectStateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateObject<WithStreamedUnaryMethod_ApplyImpulse<WithStreamedUnaryMethod_ApplyTorque<WithStreamedUnaryMethod_GetObjectState<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateObject<WithStreamedUnaryMethod_ApplyImpulse<WithStreamedUnaryMethod_ApplyTorque<WithStreamedUnaryMethod_GetObjectState<Service > > > > StreamedService;
};

}  // namespace physics


#endif  // GRPC_physics_2eproto__INCLUDED
