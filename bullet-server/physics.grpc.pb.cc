// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bullet-server/physics.proto

#include "physics.pb.h"
#include "physics.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace physics {

static const char* Physics_method_names[] = {
  "/physics.Physics/ApplyImpulse",
  "/physics.Physics/GetState",
  "/physics.Physics/Step",
};

std::unique_ptr< Physics::Stub> Physics::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Physics::Stub> stub(new Physics::Stub(channel, options));
  return stub;
}

Physics::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ApplyImpulse_(Physics_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetState_(Physics_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Step_(Physics_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Physics::Stub::ApplyImpulse(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest& request, ::physics::ApplyImpulseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::physics::ApplyImpulseRequest, ::physics::ApplyImpulseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ApplyImpulse_, context, request, response);
}

void Physics::Stub::async::ApplyImpulse(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest* request, ::physics::ApplyImpulseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::physics::ApplyImpulseRequest, ::physics::ApplyImpulseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApplyImpulse_, context, request, response, std::move(f));
}

void Physics::Stub::async::ApplyImpulse(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest* request, ::physics::ApplyImpulseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApplyImpulse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::physics::ApplyImpulseResponse>* Physics::Stub::PrepareAsyncApplyImpulseRaw(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::physics::ApplyImpulseResponse, ::physics::ApplyImpulseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ApplyImpulse_, context, request);
}

::grpc::ClientAsyncResponseReader< ::physics::ApplyImpulseResponse>* Physics::Stub::AsyncApplyImpulseRaw(::grpc::ClientContext* context, const ::physics::ApplyImpulseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncApplyImpulseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Physics::Stub::GetState(::grpc::ClientContext* context, const ::physics::GetStateRequest& request, ::physics::GetStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::physics::GetStateRequest, ::physics::GetStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetState_, context, request, response);
}

void Physics::Stub::async::GetState(::grpc::ClientContext* context, const ::physics::GetStateRequest* request, ::physics::GetStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::physics::GetStateRequest, ::physics::GetStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetState_, context, request, response, std::move(f));
}

void Physics::Stub::async::GetState(::grpc::ClientContext* context, const ::physics::GetStateRequest* request, ::physics::GetStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::physics::GetStateResponse>* Physics::Stub::PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::physics::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::physics::GetStateResponse, ::physics::GetStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::physics::GetStateResponse>* Physics::Stub::AsyncGetStateRaw(::grpc::ClientContext* context, const ::physics::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Physics::Stub::Step(::grpc::ClientContext* context, const ::physics::StepRequest& request, ::physics::StepResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::physics::StepRequest, ::physics::StepResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Step_, context, request, response);
}

void Physics::Stub::async::Step(::grpc::ClientContext* context, const ::physics::StepRequest* request, ::physics::StepResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::physics::StepRequest, ::physics::StepResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, std::move(f));
}

void Physics::Stub::async::Step(::grpc::ClientContext* context, const ::physics::StepRequest* request, ::physics::StepResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::physics::StepResponse>* Physics::Stub::PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::physics::StepRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::physics::StepResponse, ::physics::StepRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Step_, context, request);
}

::grpc::ClientAsyncResponseReader< ::physics::StepResponse>* Physics::Stub::AsyncStepRaw(::grpc::ClientContext* context, const ::physics::StepRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStepRaw(context, request, cq);
  result->StartCall();
  return result;
}

Physics::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Physics_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Physics::Service, ::physics::ApplyImpulseRequest, ::physics::ApplyImpulseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Physics::Service* service,
             ::grpc::ServerContext* ctx,
             const ::physics::ApplyImpulseRequest* req,
             ::physics::ApplyImpulseResponse* resp) {
               return service->ApplyImpulse(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Physics_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Physics::Service, ::physics::GetStateRequest, ::physics::GetStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Physics::Service* service,
             ::grpc::ServerContext* ctx,
             const ::physics::GetStateRequest* req,
             ::physics::GetStateResponse* resp) {
               return service->GetState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Physics_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Physics::Service, ::physics::StepRequest, ::physics::StepResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Physics::Service* service,
             ::grpc::ServerContext* ctx,
             const ::physics::StepRequest* req,
             ::physics::StepResponse* resp) {
               return service->Step(ctx, req, resp);
             }, this)));
}

Physics::Service::~Service() {
}

::grpc::Status Physics::Service::ApplyImpulse(::grpc::ServerContext* context, const ::physics::ApplyImpulseRequest* request, ::physics::ApplyImpulseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Physics::Service::GetState(::grpc::ServerContext* context, const ::physics::GetStateRequest* request, ::physics::GetStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Physics::Service::Step(::grpc::ServerContext* context, const ::physics::StepRequest* request, ::physics::StepResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace physics

