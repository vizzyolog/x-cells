// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bullet-server/physics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bullet_2dserver_2fphysics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bullet_2dserver_2fphysics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bullet_2dserver_2fphysics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bullet_2dserver_2fphysics_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bullet_2dserver_2fphysics_2eproto;
namespace physics {
class ApplyImpulseRequest;
struct ApplyImpulseRequestDefaultTypeInternal;
extern ApplyImpulseRequestDefaultTypeInternal _ApplyImpulseRequest_default_instance_;
class ApplyImpulseResponse;
struct ApplyImpulseResponseDefaultTypeInternal;
extern ApplyImpulseResponseDefaultTypeInternal _ApplyImpulseResponse_default_instance_;
class GetStateRequest;
struct GetStateRequestDefaultTypeInternal;
extern GetStateRequestDefaultTypeInternal _GetStateRequest_default_instance_;
class GetStateResponse;
struct GetStateResponseDefaultTypeInternal;
extern GetStateResponseDefaultTypeInternal _GetStateResponse_default_instance_;
class StepRequest;
struct StepRequestDefaultTypeInternal;
extern StepRequestDefaultTypeInternal _StepRequest_default_instance_;
class StepResponse;
struct StepResponseDefaultTypeInternal;
extern StepResponseDefaultTypeInternal _StepResponse_default_instance_;
}  // namespace physics
PROTOBUF_NAMESPACE_OPEN
template<> ::physics::ApplyImpulseRequest* Arena::CreateMaybeMessage<::physics::ApplyImpulseRequest>(Arena*);
template<> ::physics::ApplyImpulseResponse* Arena::CreateMaybeMessage<::physics::ApplyImpulseResponse>(Arena*);
template<> ::physics::GetStateRequest* Arena::CreateMaybeMessage<::physics::GetStateRequest>(Arena*);
template<> ::physics::GetStateResponse* Arena::CreateMaybeMessage<::physics::GetStateResponse>(Arena*);
template<> ::physics::StepRequest* Arena::CreateMaybeMessage<::physics::StepRequest>(Arena*);
template<> ::physics::StepResponse* Arena::CreateMaybeMessage<::physics::StepResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace physics {

// ===================================================================

class ApplyImpulseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:physics.ApplyImpulseRequest) */ {
 public:
  inline ApplyImpulseRequest() : ApplyImpulseRequest(nullptr) {}
  ~ApplyImpulseRequest() override;
  explicit PROTOBUF_CONSTEXPR ApplyImpulseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplyImpulseRequest(const ApplyImpulseRequest& from);
  ApplyImpulseRequest(ApplyImpulseRequest&& from) noexcept
    : ApplyImpulseRequest() {
    *this = ::std::move(from);
  }

  inline ApplyImpulseRequest& operator=(const ApplyImpulseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyImpulseRequest& operator=(ApplyImpulseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApplyImpulseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplyImpulseRequest* internal_default_instance() {
    return reinterpret_cast<const ApplyImpulseRequest*>(
               &_ApplyImpulseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ApplyImpulseRequest& a, ApplyImpulseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyImpulseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyImpulseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApplyImpulseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApplyImpulseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApplyImpulseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ApplyImpulseRequest& from) {
    ApplyImpulseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyImpulseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "physics.ApplyImpulseRequest";
  }
  protected:
  explicit ApplyImpulseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImpulseXFieldNumber = 1,
    kImpulseYFieldNumber = 2,
    kImpulseZFieldNumber = 3,
  };
  // float impulse_x = 1;
  void clear_impulse_x();
  float impulse_x() const;
  void set_impulse_x(float value);
  private:
  float _internal_impulse_x() const;
  void _internal_set_impulse_x(float value);
  public:

  // float impulse_y = 2;
  void clear_impulse_y();
  float impulse_y() const;
  void set_impulse_y(float value);
  private:
  float _internal_impulse_y() const;
  void _internal_set_impulse_y(float value);
  public:

  // float impulse_z = 3;
  void clear_impulse_z();
  float impulse_z() const;
  void set_impulse_z(float value);
  private:
  float _internal_impulse_z() const;
  void _internal_set_impulse_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:physics.ApplyImpulseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float impulse_x_;
    float impulse_y_;
    float impulse_z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bullet_2dserver_2fphysics_2eproto;
};
// -------------------------------------------------------------------

class ApplyImpulseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:physics.ApplyImpulseResponse) */ {
 public:
  inline ApplyImpulseResponse() : ApplyImpulseResponse(nullptr) {}
  ~ApplyImpulseResponse() override;
  explicit PROTOBUF_CONSTEXPR ApplyImpulseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplyImpulseResponse(const ApplyImpulseResponse& from);
  ApplyImpulseResponse(ApplyImpulseResponse&& from) noexcept
    : ApplyImpulseResponse() {
    *this = ::std::move(from);
  }

  inline ApplyImpulseResponse& operator=(const ApplyImpulseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyImpulseResponse& operator=(ApplyImpulseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApplyImpulseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplyImpulseResponse* internal_default_instance() {
    return reinterpret_cast<const ApplyImpulseResponse*>(
               &_ApplyImpulseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ApplyImpulseResponse& a, ApplyImpulseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyImpulseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyImpulseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApplyImpulseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApplyImpulseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApplyImpulseResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ApplyImpulseResponse& from) {
    ApplyImpulseResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyImpulseResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "physics.ApplyImpulseResponse";
  }
  protected:
  explicit ApplyImpulseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:physics.ApplyImpulseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bullet_2dserver_2fphysics_2eproto;
};
// -------------------------------------------------------------------

class GetStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:physics.GetStateRequest) */ {
 public:
  inline GetStateRequest() : GetStateRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStateRequest(const GetStateRequest& from);
  GetStateRequest(GetStateRequest&& from) noexcept
    : GetStateRequest() {
    *this = ::std::move(from);
  }

  inline GetStateRequest& operator=(const GetStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStateRequest& operator=(GetStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetStateRequest*>(
               &_GetStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetStateRequest& a, GetStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "physics.GetStateRequest";
  }
  protected:
  explicit GetStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:physics.GetStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_bullet_2dserver_2fphysics_2eproto;
};
// -------------------------------------------------------------------

class GetStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:physics.GetStateResponse) */ {
 public:
  inline GetStateResponse() : GetStateResponse(nullptr) {}
  ~GetStateResponse() override;
  explicit PROTOBUF_CONSTEXPR GetStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStateResponse(const GetStateResponse& from);
  GetStateResponse(GetStateResponse&& from) noexcept
    : GetStateResponse() {
    *this = ::std::move(from);
  }

  inline GetStateResponse& operator=(const GetStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStateResponse& operator=(GetStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetStateResponse*>(
               &_GetStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetStateResponse& a, GetStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetStateResponse& from) {
    GetStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "physics.GetStateResponse";
  }
  protected:
  explicit GetStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kQxFieldNumber = 4,
    kQyFieldNumber = 5,
    kQzFieldNumber = 6,
    kQwFieldNumber = 7,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float qx = 4;
  void clear_qx();
  float qx() const;
  void set_qx(float value);
  private:
  float _internal_qx() const;
  void _internal_set_qx(float value);
  public:

  // float qy = 5;
  void clear_qy();
  float qy() const;
  void set_qy(float value);
  private:
  float _internal_qy() const;
  void _internal_set_qy(float value);
  public:

  // float qz = 6;
  void clear_qz();
  float qz() const;
  void set_qz(float value);
  private:
  float _internal_qz() const;
  void _internal_set_qz(float value);
  public:

  // float qw = 7;
  void clear_qw();
  float qw() const;
  void set_qw(float value);
  private:
  float _internal_qw() const;
  void _internal_set_qw(float value);
  public:

  // @@protoc_insertion_point(class_scope:physics.GetStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    float qx_;
    float qy_;
    float qz_;
    float qw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bullet_2dserver_2fphysics_2eproto;
};
// -------------------------------------------------------------------

class StepRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:physics.StepRequest) */ {
 public:
  inline StepRequest() : StepRequest(nullptr) {}
  ~StepRequest() override;
  explicit PROTOBUF_CONSTEXPR StepRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StepRequest(const StepRequest& from);
  StepRequest(StepRequest&& from) noexcept
    : StepRequest() {
    *this = ::std::move(from);
  }

  inline StepRequest& operator=(const StepRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepRequest& operator=(StepRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StepRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StepRequest* internal_default_instance() {
    return reinterpret_cast<const StepRequest*>(
               &_StepRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StepRequest& a, StepRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StepRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StepRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StepRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StepRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StepRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StepRequest& from) {
    StepRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "physics.StepRequest";
  }
  protected:
  explicit StepRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDtFieldNumber = 1,
    kSubstepsFieldNumber = 2,
  };
  // float dt = 1;
  void clear_dt();
  float dt() const;
  void set_dt(float value);
  private:
  float _internal_dt() const;
  void _internal_set_dt(float value);
  public:

  // int32 substeps = 2;
  void clear_substeps();
  int32_t substeps() const;
  void set_substeps(int32_t value);
  private:
  int32_t _internal_substeps() const;
  void _internal_set_substeps(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:physics.StepRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float dt_;
    int32_t substeps_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bullet_2dserver_2fphysics_2eproto;
};
// -------------------------------------------------------------------

class StepResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:physics.StepResponse) */ {
 public:
  inline StepResponse() : StepResponse(nullptr) {}
  ~StepResponse() override;
  explicit PROTOBUF_CONSTEXPR StepResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StepResponse(const StepResponse& from);
  StepResponse(StepResponse&& from) noexcept
    : StepResponse() {
    *this = ::std::move(from);
  }

  inline StepResponse& operator=(const StepResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepResponse& operator=(StepResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StepResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StepResponse* internal_default_instance() {
    return reinterpret_cast<const StepResponse*>(
               &_StepResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StepResponse& a, StepResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StepResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StepResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StepResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StepResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StepResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StepResponse& from) {
    StepResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "physics.StepResponse";
  }
  protected:
  explicit StepResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kQxFieldNumber = 4,
    kQyFieldNumber = 5,
    kQzFieldNumber = 6,
    kQwFieldNumber = 7,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float qx = 4;
  void clear_qx();
  float qx() const;
  void set_qx(float value);
  private:
  float _internal_qx() const;
  void _internal_set_qx(float value);
  public:

  // float qy = 5;
  void clear_qy();
  float qy() const;
  void set_qy(float value);
  private:
  float _internal_qy() const;
  void _internal_set_qy(float value);
  public:

  // float qz = 6;
  void clear_qz();
  float qz() const;
  void set_qz(float value);
  private:
  float _internal_qz() const;
  void _internal_set_qz(float value);
  public:

  // float qw = 7;
  void clear_qw();
  float qw() const;
  void set_qw(float value);
  private:
  float _internal_qw() const;
  void _internal_set_qw(float value);
  public:

  // @@protoc_insertion_point(class_scope:physics.StepResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    float qx_;
    float qy_;
    float qz_;
    float qw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bullet_2dserver_2fphysics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ApplyImpulseRequest

// float impulse_x = 1;
inline void ApplyImpulseRequest::clear_impulse_x() {
  _impl_.impulse_x_ = 0;
}
inline float ApplyImpulseRequest::_internal_impulse_x() const {
  return _impl_.impulse_x_;
}
inline float ApplyImpulseRequest::impulse_x() const {
  // @@protoc_insertion_point(field_get:physics.ApplyImpulseRequest.impulse_x)
  return _internal_impulse_x();
}
inline void ApplyImpulseRequest::_internal_set_impulse_x(float value) {
  
  _impl_.impulse_x_ = value;
}
inline void ApplyImpulseRequest::set_impulse_x(float value) {
  _internal_set_impulse_x(value);
  // @@protoc_insertion_point(field_set:physics.ApplyImpulseRequest.impulse_x)
}

// float impulse_y = 2;
inline void ApplyImpulseRequest::clear_impulse_y() {
  _impl_.impulse_y_ = 0;
}
inline float ApplyImpulseRequest::_internal_impulse_y() const {
  return _impl_.impulse_y_;
}
inline float ApplyImpulseRequest::impulse_y() const {
  // @@protoc_insertion_point(field_get:physics.ApplyImpulseRequest.impulse_y)
  return _internal_impulse_y();
}
inline void ApplyImpulseRequest::_internal_set_impulse_y(float value) {
  
  _impl_.impulse_y_ = value;
}
inline void ApplyImpulseRequest::set_impulse_y(float value) {
  _internal_set_impulse_y(value);
  // @@protoc_insertion_point(field_set:physics.ApplyImpulseRequest.impulse_y)
}

// float impulse_z = 3;
inline void ApplyImpulseRequest::clear_impulse_z() {
  _impl_.impulse_z_ = 0;
}
inline float ApplyImpulseRequest::_internal_impulse_z() const {
  return _impl_.impulse_z_;
}
inline float ApplyImpulseRequest::impulse_z() const {
  // @@protoc_insertion_point(field_get:physics.ApplyImpulseRequest.impulse_z)
  return _internal_impulse_z();
}
inline void ApplyImpulseRequest::_internal_set_impulse_z(float value) {
  
  _impl_.impulse_z_ = value;
}
inline void ApplyImpulseRequest::set_impulse_z(float value) {
  _internal_set_impulse_z(value);
  // @@protoc_insertion_point(field_set:physics.ApplyImpulseRequest.impulse_z)
}

// -------------------------------------------------------------------

// ApplyImpulseResponse

// string status = 1;
inline void ApplyImpulseResponse::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& ApplyImpulseResponse::status() const {
  // @@protoc_insertion_point(field_get:physics.ApplyImpulseResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ApplyImpulseResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:physics.ApplyImpulseResponse.status)
}
inline std::string* ApplyImpulseResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:physics.ApplyImpulseResponse.status)
  return _s;
}
inline const std::string& ApplyImpulseResponse::_internal_status() const {
  return _impl_.status_.Get();
}
inline void ApplyImpulseResponse::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* ApplyImpulseResponse::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* ApplyImpulseResponse::release_status() {
  // @@protoc_insertion_point(field_release:physics.ApplyImpulseResponse.status)
  return _impl_.status_.Release();
}
inline void ApplyImpulseResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:physics.ApplyImpulseResponse.status)
}

// -------------------------------------------------------------------

// GetStateRequest

// -------------------------------------------------------------------

// GetStateResponse

// float x = 1;
inline void GetStateResponse::clear_x() {
  _impl_.x_ = 0;
}
inline float GetStateResponse::_internal_x() const {
  return _impl_.x_;
}
inline float GetStateResponse::x() const {
  // @@protoc_insertion_point(field_get:physics.GetStateResponse.x)
  return _internal_x();
}
inline void GetStateResponse::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void GetStateResponse::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:physics.GetStateResponse.x)
}

// float y = 2;
inline void GetStateResponse::clear_y() {
  _impl_.y_ = 0;
}
inline float GetStateResponse::_internal_y() const {
  return _impl_.y_;
}
inline float GetStateResponse::y() const {
  // @@protoc_insertion_point(field_get:physics.GetStateResponse.y)
  return _internal_y();
}
inline void GetStateResponse::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void GetStateResponse::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:physics.GetStateResponse.y)
}

// float z = 3;
inline void GetStateResponse::clear_z() {
  _impl_.z_ = 0;
}
inline float GetStateResponse::_internal_z() const {
  return _impl_.z_;
}
inline float GetStateResponse::z() const {
  // @@protoc_insertion_point(field_get:physics.GetStateResponse.z)
  return _internal_z();
}
inline void GetStateResponse::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void GetStateResponse::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:physics.GetStateResponse.z)
}

// float qx = 4;
inline void GetStateResponse::clear_qx() {
  _impl_.qx_ = 0;
}
inline float GetStateResponse::_internal_qx() const {
  return _impl_.qx_;
}
inline float GetStateResponse::qx() const {
  // @@protoc_insertion_point(field_get:physics.GetStateResponse.qx)
  return _internal_qx();
}
inline void GetStateResponse::_internal_set_qx(float value) {
  
  _impl_.qx_ = value;
}
inline void GetStateResponse::set_qx(float value) {
  _internal_set_qx(value);
  // @@protoc_insertion_point(field_set:physics.GetStateResponse.qx)
}

// float qy = 5;
inline void GetStateResponse::clear_qy() {
  _impl_.qy_ = 0;
}
inline float GetStateResponse::_internal_qy() const {
  return _impl_.qy_;
}
inline float GetStateResponse::qy() const {
  // @@protoc_insertion_point(field_get:physics.GetStateResponse.qy)
  return _internal_qy();
}
inline void GetStateResponse::_internal_set_qy(float value) {
  
  _impl_.qy_ = value;
}
inline void GetStateResponse::set_qy(float value) {
  _internal_set_qy(value);
  // @@protoc_insertion_point(field_set:physics.GetStateResponse.qy)
}

// float qz = 6;
inline void GetStateResponse::clear_qz() {
  _impl_.qz_ = 0;
}
inline float GetStateResponse::_internal_qz() const {
  return _impl_.qz_;
}
inline float GetStateResponse::qz() const {
  // @@protoc_insertion_point(field_get:physics.GetStateResponse.qz)
  return _internal_qz();
}
inline void GetStateResponse::_internal_set_qz(float value) {
  
  _impl_.qz_ = value;
}
inline void GetStateResponse::set_qz(float value) {
  _internal_set_qz(value);
  // @@protoc_insertion_point(field_set:physics.GetStateResponse.qz)
}

// float qw = 7;
inline void GetStateResponse::clear_qw() {
  _impl_.qw_ = 0;
}
inline float GetStateResponse::_internal_qw() const {
  return _impl_.qw_;
}
inline float GetStateResponse::qw() const {
  // @@protoc_insertion_point(field_get:physics.GetStateResponse.qw)
  return _internal_qw();
}
inline void GetStateResponse::_internal_set_qw(float value) {
  
  _impl_.qw_ = value;
}
inline void GetStateResponse::set_qw(float value) {
  _internal_set_qw(value);
  // @@protoc_insertion_point(field_set:physics.GetStateResponse.qw)
}

// -------------------------------------------------------------------

// StepRequest

// float dt = 1;
inline void StepRequest::clear_dt() {
  _impl_.dt_ = 0;
}
inline float StepRequest::_internal_dt() const {
  return _impl_.dt_;
}
inline float StepRequest::dt() const {
  // @@protoc_insertion_point(field_get:physics.StepRequest.dt)
  return _internal_dt();
}
inline void StepRequest::_internal_set_dt(float value) {
  
  _impl_.dt_ = value;
}
inline void StepRequest::set_dt(float value) {
  _internal_set_dt(value);
  // @@protoc_insertion_point(field_set:physics.StepRequest.dt)
}

// int32 substeps = 2;
inline void StepRequest::clear_substeps() {
  _impl_.substeps_ = 0;
}
inline int32_t StepRequest::_internal_substeps() const {
  return _impl_.substeps_;
}
inline int32_t StepRequest::substeps() const {
  // @@protoc_insertion_point(field_get:physics.StepRequest.substeps)
  return _internal_substeps();
}
inline void StepRequest::_internal_set_substeps(int32_t value) {
  
  _impl_.substeps_ = value;
}
inline void StepRequest::set_substeps(int32_t value) {
  _internal_set_substeps(value);
  // @@protoc_insertion_point(field_set:physics.StepRequest.substeps)
}

// -------------------------------------------------------------------

// StepResponse

// float x = 1;
inline void StepResponse::clear_x() {
  _impl_.x_ = 0;
}
inline float StepResponse::_internal_x() const {
  return _impl_.x_;
}
inline float StepResponse::x() const {
  // @@protoc_insertion_point(field_get:physics.StepResponse.x)
  return _internal_x();
}
inline void StepResponse::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void StepResponse::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:physics.StepResponse.x)
}

// float y = 2;
inline void StepResponse::clear_y() {
  _impl_.y_ = 0;
}
inline float StepResponse::_internal_y() const {
  return _impl_.y_;
}
inline float StepResponse::y() const {
  // @@protoc_insertion_point(field_get:physics.StepResponse.y)
  return _internal_y();
}
inline void StepResponse::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void StepResponse::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:physics.StepResponse.y)
}

// float z = 3;
inline void StepResponse::clear_z() {
  _impl_.z_ = 0;
}
inline float StepResponse::_internal_z() const {
  return _impl_.z_;
}
inline float StepResponse::z() const {
  // @@protoc_insertion_point(field_get:physics.StepResponse.z)
  return _internal_z();
}
inline void StepResponse::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void StepResponse::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:physics.StepResponse.z)
}

// float qx = 4;
inline void StepResponse::clear_qx() {
  _impl_.qx_ = 0;
}
inline float StepResponse::_internal_qx() const {
  return _impl_.qx_;
}
inline float StepResponse::qx() const {
  // @@protoc_insertion_point(field_get:physics.StepResponse.qx)
  return _internal_qx();
}
inline void StepResponse::_internal_set_qx(float value) {
  
  _impl_.qx_ = value;
}
inline void StepResponse::set_qx(float value) {
  _internal_set_qx(value);
  // @@protoc_insertion_point(field_set:physics.StepResponse.qx)
}

// float qy = 5;
inline void StepResponse::clear_qy() {
  _impl_.qy_ = 0;
}
inline float StepResponse::_internal_qy() const {
  return _impl_.qy_;
}
inline float StepResponse::qy() const {
  // @@protoc_insertion_point(field_get:physics.StepResponse.qy)
  return _internal_qy();
}
inline void StepResponse::_internal_set_qy(float value) {
  
  _impl_.qy_ = value;
}
inline void StepResponse::set_qy(float value) {
  _internal_set_qy(value);
  // @@protoc_insertion_point(field_set:physics.StepResponse.qy)
}

// float qz = 6;
inline void StepResponse::clear_qz() {
  _impl_.qz_ = 0;
}
inline float StepResponse::_internal_qz() const {
  return _impl_.qz_;
}
inline float StepResponse::qz() const {
  // @@protoc_insertion_point(field_get:physics.StepResponse.qz)
  return _internal_qz();
}
inline void StepResponse::_internal_set_qz(float value) {
  
  _impl_.qz_ = value;
}
inline void StepResponse::set_qz(float value) {
  _internal_set_qz(value);
  // @@protoc_insertion_point(field_set:physics.StepResponse.qz)
}

// float qw = 7;
inline void StepResponse::clear_qw() {
  _impl_.qw_ = 0;
}
inline float StepResponse::_internal_qw() const {
  return _impl_.qw_;
}
inline float StepResponse::qw() const {
  // @@protoc_insertion_point(field_get:physics.StepResponse.qw)
  return _internal_qw();
}
inline void StepResponse::_internal_set_qw(float value) {
  
  _impl_.qw_ = value;
}
inline void StepResponse::set_qw(float value) {
  _internal_set_qw(value);
  // @@protoc_insertion_point(field_set:physics.StepResponse.qw)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace physics

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bullet_2dserver_2fphysics_2eproto
