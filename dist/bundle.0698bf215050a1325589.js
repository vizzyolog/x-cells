(()=>{"use strict";var __webpack_modules__={251:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.core.js\nvar three_core = __webpack_require__(922);\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(437);\n;// ./src/scene.js\n// scene.js\n\nvar scene, camera, renderer;\nfunction initScene() {\n  console.log("try to initScene");\n  scene = new three_core/* Scene */.Z58();\n  camera = new three_core/* PerspectiveCamera */.ubm(60, window.innerWidth / window.innerHeight, 0.2, 2000);\n  camera.position.set(0, 50, 100);\n  camera.lookAt(0, 0, 0);\n  renderer = new three_module/* WebGLRenderer */.JeP({\n    antialias: true\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  document.body.appendChild(renderer.domElement);\n  window.addEventListener(\'resize\', onWindowResize);\n  var ambient = new three_core/* AmbientLight */.$p8(0xffffff, 0.5);\n  scene.add(ambient);\n  var directional = new three_core/* DirectionalLight */.ZyN(0xffffff, 1);\n  directional.position.set(10, 20, 10);\n  scene.add(directional);\n}\nfunction onWindowResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\n;// ./src/physics.js\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// physics.js\n\nvar localPhysicsWorld = null;\nvar ammoPromise = null;\nfunction initAmmo() {\n  return _initAmmo.apply(this, arguments);\n}\nfunction _initAmmo() {\n  _initAmmo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!ammoPromise) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt("return", ammoPromise);\n        case 2:\n          ammoPromise = new Promise(function (resolve, reject) {\n            var script = document.createElement(\'script\');\n            script.src = \'/ammo/ammo.wasm.js\'; // путь от корня веб-сервера\n            script.async = true;\n            script.onload = function () {\n              console.log("[Ammo] Скрипт загружен, инициализация...");\n              Ammo().then(function (AmmoLib) {\n                window.Ammo = AmmoLib;\n\n                // Инициализируем физический мир после загрузки Ammo\n                var collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n                var dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n                var broadphase = new AmmoLib.btDbvtBroadphase();\n                var solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n                localPhysicsWorld = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n                localPhysicsWorld.setGravity(new AmmoLib.btVector3(0, -9.81, 0));\n                console.log("[Ammo] Инициализация успешна");\n                resolve(AmmoLib);\n              })["catch"](reject);\n            };\n            script.onerror = function (error) {\n              console.error("[Ammo] Ошибка загрузки скрипта:", error);\n              reject(error);\n            };\n            document.body.appendChild(script);\n          });\n          return _context.abrupt("return", ammoPromise);\n        case 4:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _initAmmo.apply(this, arguments);\n}\nfunction stepPhysics(deltaTime) {\n  if (localPhysicsWorld) {\n    // Проверяем, что deltaTime имеет разумное значение\n    if (deltaTime <= 0 || deltaTime > 1) {\n      console.warn("[Physics] Подозрительное значение deltaTime:", deltaTime);\n      deltaTime = 1 / 60; // используем фиксированный шаг если что-то не так\n    }\n\n    // if (Math.random() < 0.016) { // примерно раз в секунду при 60 FPS\n    //     console.log("[Physics] Шаг симуляции:", {\n    //         deltaTime: deltaTime,\n    //     });\n    // }\n\n    localPhysicsWorld.stepSimulation(deltaTime, 10);\n  } else {\n    console.warn("[Physics] Физический мир не инициализирован");\n  }\n}\nfunction updatePhysicsObjects(objects) {\n  for (var id in objects) {\n    var obj = objects[id];\n    if (!obj.mesh) continue;\n    console.log("[Physics] \\u041E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(id, " \\u0441 physicsBy: ").concat(obj.physicsBy));\n    switch (obj.physicsBy) {\n      case "ammo":\n        // Обновление только по физике Ammo.js\n        if (obj.body && obj.object_type !== "terrain") {\n          var trans = new window.Ammo.btTransform();\n          obj.body.getMotionState().getWorldTransform(trans);\n          var locX = trans.getOrigin().x();\n          var locY = trans.getOrigin().y();\n          var locZ = trans.getOrigin().z();\n          var qx = trans.getRotation().x();\n          var qy = trans.getRotation().y();\n          var qz = trans.getRotation().z();\n          var qw = trans.getRotation().w();\n          obj.mesh.position.set(locX, locY, locZ);\n          obj.mesh.quaternion.set(qx, qy, qz, qw);\n        }\n        break;\n      case "bullet":\n        // Обновление только по серверным данным\n        if (obj.serverPos && obj.object_type !== "terrain") {\n          obj.mesh.position.set(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z);\n        }\n        break;\n      case "both":\n        // Обновление по обоим источникам\n        if (obj.object_type !== "terrain") {\n          if (obj.body) {\n            var _trans = new window.Ammo.btTransform();\n            obj.body.getMotionState().getWorldTransform(_trans);\n            var _locX = _trans.getOrigin().x();\n            var _locY = _trans.getOrigin().y();\n            var _locZ = _trans.getOrigin().z();\n            var _qx = _trans.getRotation().x();\n            var _qy = _trans.getRotation().y();\n            var _qz = _trans.getRotation().z();\n            var _qw = _trans.getRotation().w();\n            obj.mesh.position.set(_locX, _locY, _locZ);\n            obj.mesh.quaternion.set(_qx, _qy, _qz, _qw);\n          }\n          if (obj.serverPos) {\n            var dx = obj.serverPos.x - obj.mesh.position.x;\n            var dy = obj.serverPos.y - obj.mesh.position.y;\n            var dz = obj.serverPos.z - obj.mesh.position.z;\n            if (dx * dx + dy * dy + dz * dz > 0.01) {\n              var alpha = 0.1;\n              var newX = obj.mesh.position.x + dx * alpha;\n              var newY = obj.mesh.position.y + dy * alpha;\n              var newZ = obj.mesh.position.z + dz * alpha;\n              obj.mesh.position.set(newX, newY, newZ);\n            }\n          }\n        }\n        break;\n      default:\n        console.warn("[Physics] \\u041D\\u0435\\u0438\\u0437\\u0432\\u0435\\u0441\\u0442\\u043D\\u044B\\u0439 \\u0442\\u0438\\u043F physicsBy \\u0434\\u043B\\u044F \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(id, ": ").concat(obj.physicsBy));\n        break;\n    }\n  }\n}\nfunction applyImpulseToSphere(cmd, objects) {\n  console.log("[Debug] Переданные объекты в applyImpulseToSphere:", objects);\n  // Проверяем, что objects передан и является объектом\n  if (!objects || _typeof(objects) !== \'object\') {\n    console.warn("[Physics] Некорректные объекты переданы в applyImpulseToSphere");\n    return;\n  }\n\n  // Создаем импульс заранее, чтобы не создавать его для каждого шара\n  var impulse = new window.Ammo.btVector3(0, 0, 0);\n  if (cmd === "LEFT") impulse.setValue(-5, 0, 0);\n  if (cmd === "RIGHT") impulse.setValue(5, 0, 0);\n  if (cmd === "UP") impulse.setValue(0, 0, -5);\n  if (cmd === "DOWN") impulse.setValue(0, 0, 5);\n  if (cmd === "SPACE") impulse.setValue(0, 10, 0);\n\n  // Проходим по всем объектам и применяем импульс только к шарам с physicsBy: "ammo"\n  for (var id in objects) {\n    var obj = objects[id];\n    if (obj && obj.mesh && obj.mesh.geometry && obj.mesh.geometry.type === "SphereGeometry" && obj.body && obj.physicsBy === "ammo" // Только для локально управляемых объектов\n    ) {\n      obj.body.activate(true);\n      obj.body.applyCentralImpulse(impulse);\n\n      // Добавляем диагностику для каждого шара\n      var velocity = obj.body.getLinearVelocity();\n      console.log("[Physics] Состояние шара:", {\n        id: id,\n        physicsBy: obj.physicsBy,\n        команда: cmd,\n        позиция: obj.mesh.position,\n        скорость: {\n          x: velocity.x(),\n          y: velocity.y(),\n          z: velocity.z()\n        }\n      });\n    }\n  }\n\n  // Очищаем память\n  Ammo.destroy(impulse);\n}\n;// ./src/objects.js\n// objects.js\n\n\n\nvar objects = {}; // Словарь объектов: id -> { mesh, body, serverPos, ... }\n\nfunction createMeshAndBodyForObject(data) {\n  if (!data || !data.object_type) {\n    console.error("Invalid data received for object creation:", data);\n    return null;\n  }\n  var type = data.object_type;\n  var mesh,\n    body = null;\n  switch (type) {\n    case "terrain":\n      mesh = createTerrainMesh(data);\n      body = createPhysicsBodyForTerrain(data);\n      break;\n    case "sphere":\n      mesh = createSphereMesh(data);\n      body = createPhysicsBodyForSphere(data);\n      break;\n    case "tree":\n      mesh = createTreeMesh(data);\n      break;\n    default:\n      console.warn("Unknown object type: ".concat(type));\n      mesh = createDefaultMesh(data);\n      break;\n  }\n  scene.add(mesh);\n  return {\n    mesh: mesh,\n    body: body\n  };\n}\nfunction createPhysicsBodyForTerrain(data) {\n  if (typeof Ammo === \'undefined\') {\n    console.error(\'Ammo.js не инициализирован\');\n    return null;\n  }\n  if (!localPhysicsWorld) {\n    console.error(\'Физический мир не инициализирован\');\n    return null;\n  }\n  var w = data.heightmap_w;\n  var h = data.heightmap_h;\n  var scaleX = data.scale_x;\n  var scaleZ = data.scale_z;\n\n  // Создаем буфер в памяти Ammo для данных высот\n  var ammoHeightData = Ammo._malloc(4 * w * h);\n\n  // Копируем данные высот в память Ammo\n  var p = 0;\n  var p2 = 0;\n  for (var j = 0; j < h; j++) {\n    for (var i = 0; i < w; i++) {\n      Ammo.HEAPF32[ammoHeightData + p2 >> 2] = data.height_data[p];\n      p++;\n      p2 += 4;\n    }\n  }\n\n  // Создаем форму террейна\n  var shape = new Ammo.btHeightfieldTerrainShape(w, h, ammoHeightData, 1,\n  // heightScale\n  data.min_height, data.max_height, 1,\n  // up axis = 1 для Y\n  Ammo.PHY_FLOAT, false // flipQuadEdges\n  );\n\n  // Устанавливаем масштабирование\n  shape.setLocalScaling(new Ammo.btVector3(scaleX, data.scale_y, scaleZ));\n  shape.setMargin(0.5);\n\n  // Создаем трансформацию\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n\n  // Важно! Смещаем террейн, так как Bullet центрирует его по ограничивающему боксу\n  transform.setOrigin(new Ammo.btVector3(data.x || 0, (data.min_height + data.max_height) / 2, data.z || 0));\n  var mass = 0; // Статическое тело\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Добавляем тело в физический мир с правильными параметрами коллизий\n  var TERRAIN_GROUP = 1; // группа для террейна\n  var SPHERE_GROUP = 2; // группа для сфер\n  localPhysicsWorld.addRigidBody(body, TERRAIN_GROUP, SPHERE_GROUP); // террейн сталкивается только со сферами\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n  console.log("[Terrain] Физическое тело создано:", {\n    размеры: {\n      w: w,\n      h: h\n    },\n    масштаб: {\n      x: scaleX,\n      y: data.scale_y,\n      z: scaleZ\n    },\n    позиция: {\n      x: data.x || 0,\n      y: (data.min_height + data.max_height) / 2,\n      z: data.z || 0\n    },\n    минВысота: data.min_height,\n    максВысота: data.max_height\n  });\n  return body;\n}\nfunction createTerrainMesh(data) {\n  var w = data.heightmap_w || 64;\n  var h = data.heightmap_h || 64;\n  var geo = new three_core/* PlaneGeometry */.bdM(w * data.scale_x, h * data.scale_z, w - 1, h - 1);\n  geo.rotateX(-Math.PI / 2);\n  if (data.height_data) {\n    var verts = geo.attributes.position.array;\n    for (var i = 0; i < verts.length; i += 3) {\n      var ix = i / 3 % w;\n      var iz = Math.floor(i / 3 / w);\n      verts[i + 1] = data.height_data[iz * w + ix] * data.scale_y;\n    }\n    geo.computeVertexNormals();\n  }\n  return new three_core/* Mesh */.eaF(geo, new three_core/* MeshLambertMaterial */.G_z({\n    color: parseColor(data.color || "#888888"),\n    wireframe: true\n  }));\n}\nfunction createSphereMesh(data) {\n  var geo = new three_core/* SphereGeometry */.Gu$(data.radius || 1, 16, 16);\n  return new three_core/* Mesh */.eaF(geo, new three_core/* MeshLambertMaterial */.G_z({\n    color: parseColor(data.color || "#888888")\n  }));\n}\nfunction createTreeMesh(data) {\n  var group = new three_core/* Group */.YJl();\n  if (data.branches && Array.isArray(data.branches)) {\n    data.branches.forEach(function (branch, index) {\n      if (branch.startX === undefined || branch.startY === undefined || branch.startZ === undefined || branch.endX === undefined || branch.endY === undefined || branch.endZ === undefined) {\n        console.warn("Branch coordinates are missing or invalid at index ".concat(index, ":"), branch);\n        return;\n      }\n      var branchGeo = new three_core/* CylinderGeometry */.Ho_(branch.radiusTop || branch.radius || 0.1,\n      // верхний радиус\n      branch.radiusBottom || branch.radius || 0.2,\n      // нижний радиус\n      1, 8);\n      var branchMat = new three_core/* MeshStandardMaterial */._4j({\n        color: parseColor(branch.color || "#654321")\n      });\n      var branchMesh = new three_core/* Mesh */.eaF(branchGeo, branchMat);\n      var midX = (branch.startX + branch.endX) / 2;\n      var midY = (branch.startY + branch.endY) / 2;\n      var midZ = (branch.startZ + branch.endZ) / 2;\n      branchMesh.position.set(midX, midY, midZ);\n      branchMesh.lookAt(new three_core/* Vector3 */.Pq0(branch.endX, branch.endY, branch.endZ));\n      var length = new three_core/* Vector3 */.Pq0(branch.endX - branch.startX, branch.endY - branch.startY, branch.endZ - branch.startZ).length();\n      branchMesh.scale.set(1, length, 1);\n      group.add(branchMesh);\n    });\n  }\n  return group;\n}\nfunction createDefaultMesh(data) {\n  var geo = new three_core/* BoxGeometry */.iNn(1, 1, 1);\n  return new three_core/* Mesh */.eaF(geo, new three_core/* MeshLambertMaterial */.G_z({\n    color: parseColor(data.color || "#888888")\n  }));\n}\nfunction createPhysicsBodyForSphere(data) {\n  try {\n    if (typeof Ammo === \'undefined\') {\n      console.error(\'Ammo.js не инициализирован\');\n      return null;\n    }\n    if (!localPhysicsWorld) {\n      console.error(\'Физический мир не инициализирован\');\n      return null;\n    }\n    var radius = data.radius || 1;\n    var mass = data.mass || 1;\n\n    // Создаем все Ammo объекты через window.Ammo\n    var shape = new window.Ammo.btSphereShape(radius);\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(data.x || 0, data.y || 0, data.z || 0));\n    var localInertia = new window.Ammo.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    var motionState = new window.Ammo.btDefaultMotionState(transform);\n    var rbInfo = new window.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    var body = new window.Ammo.btRigidBody(rbInfo);\n\n    // Добавляем тело в физический мир с правильными параметрами коллизий\n    var TERRAIN_GROUP = 1; // группа для террейна\n    var SPHERE_GROUP = 2; // группа для сфер\n    localPhysicsWorld.addRigidBody(body, SPHERE_GROUP, TERRAIN_GROUP); // сферы сталкиваются только с террейном\n\n    // Очистка памяти\n    window.Ammo.destroy(rbInfo);\n    window.Ammo.destroy(localInertia);\n    return body;\n  } catch (error) {\n    console.error(\'Ошибка при создании физического тела:\', error);\n    return null;\n  }\n}\n\n// export function debugPhysicsWorld() {\n//     if (!localPhysicsWorld) {\n//         console.error("[Physics Debug] Физический мир не инициализирован");\n//         return;\n//     }\n\n//     const numBodies = localPhysicsWorld.getNumCollisionObjects();\n//     console.log(`[Physics Debug] В физическом мире ${numBodies} объектов`);\n\n//     for (let i = 0; i < numBodies; i++) {\n//         const obj = localPhysicsWorld.getCollisionObjectArray().at(i);\n//         const transform = new Ammo.btTransform();\n\n//         if (obj.getMotionState()) {\n//             obj.getMotionState().getWorldTransform(transform);\n//         } else {\n//             obj.getWorldTransform(transform);\n//         }\n\n//         const pos = transform.getOrigin();\n//         const rot = transform.getRotation();\n\n//         console.log(`[Physics Debug] Объект #${i}:`, {\n//             позиция: { x: pos.x(), y: pos.y(), z: pos.z() },\n//             вращение: { x: rot.x(), y: rot.y(), z: rot.z(), w: rot.w() },\n//             активен: obj.isActive(),\n//             статичен: obj.isStaticObject(),\n//             кинематичен: obj.isKinematicObject()\n//         });\n//     }\n// }\n\nfunction parseColor(colorStr) {\n  if (!colorStr) return 0x888888;\n  if (colorStr.startsWith("#")) {\n    return parseInt(colorStr.slice(1), 16);\n  }\n  return 0x888888;\n}\nfunction createTestSphere() {\n  // Создаем визуальную сферу\n  var radius = 1;\n  var geometry = new three_core/* SphereGeometry */.Gu$(radius, 32, 32);\n  var material = new three_core/* MeshLambertMaterial */.G_z({\n    color: 0xff00ff\n  });\n  var mesh = new three_core/* Mesh */.eaF(geometry, material);\n\n  // Позиционируем сферу высоко над террейном\n  var startY = 58; // Высота над террейном\n  mesh.position.set(0, startY, 0);\n  scene.add(mesh);\n\n  // Создаем физическое тело\n  var shape = new Ammo.btSphereShape(radius);\n  var mass = 1;\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n  transform.setOrigin(new Ammo.btVector3(0, startY, 0));\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  shape.calculateLocalInertia(mass, localInertia);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Важные настройки для физического тела\n  body.setActivationState(4); // DISABLE_DEACTIVATION\n  body.setFriction(0.5);\n  body.setRollingFriction(0.1);\n  body.setRestitution(0.5); // Упругость\n\n  // Добавляем тело в физический мир с правильными параметрами коллизий\n  var TERRAIN_GROUP = 1; // группа для террейна\n  var SPHERE_GROUP = 2; // группа для сфер\n  localPhysicsWorld.addRigidBody(body, SPHERE_GROUP, TERRAIN_GROUP); // сферы сталкиваются только с террейном\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n\n  // Добавляем объект в наш список объектов\n  var testSphereObj = {\n    mesh: mesh,\n    body: body,\n    object_type: "test_sphere",\n    physicsBy: "ammo" // Изменено с "both" на "ammo", чтобы управлялось только локальной физикой\n  };\n  objects["test_sphere"] = testSphereObj;\n  return testSphereObj;\n}\n;// ./src/network.js\nfunction network_typeof(o) { "@babel/helpers - typeof"; return network_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, network_typeof(o); }\n// network.js\n\n\nvar ws = null;\nfunction handleMessage(data) {\n  try {\n    if (data.type === "create" && data.id) {\n      console.log("[WS] Обработка create сообщения для id:", data.id);\n\n      // Создаем объект и добавляем его в список объектов\n      var obj = createMeshAndBodyForObject(data);\n      obj.physicsBy = data.physics_by || "both"; // Убедитесь, что свойство устанавливается\n      objects[data.id] = obj;\n      console.log("[WS] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, " \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D \\u0441 physicsBy: ").concat(obj.physicsBy)); // Логирование установленного свойства\n    } else if (data.type === "update" && data.id && objects[data.id]) {\n      console.log("[WS] Обработка update сообщения для id:", data.id);\n      var _obj = objects[data.id];\n      _obj.serverPos = {\n        x: data.x || 0,\n        y: data.y || 0,\n        z: data.z || 0\n      };\n    }\n  } catch (error) {\n    console.error("[WS] Ошибка при обработке сообщения:", error);\n    console.error("[WS] Стек вызовов:", error.stack);\n  }\n}\nfunction handleKeyDown(e) {\n  if (!ws || ws.readyState !== WebSocket.OPEN) return;\n  var cmd = "";\n  switch (e.key) {\n    case "ArrowLeft":\n      cmd = "LEFT";\n      break;\n    case "ArrowRight":\n      cmd = "RIGHT";\n      break;\n    case "ArrowUp":\n      cmd = "UP";\n      break;\n    case "ArrowDown":\n      cmd = "DOWN";\n      break;\n    case " ":\n      cmd = "SPACE";\n      break;\n    default:\n      return;\n  }\n  try {\n    ws.send(JSON.stringify({\n      type: "cmd",\n      cmd: cmd\n    }));\n    applyImpulseToSphere(cmd, objects);\n  } catch (error) {\n    console.error("[WS] Ошибка отправки:", error);\n  }\n}\nfunction initNetwork() {\n  try {\n    console.log("[WS] Начало инициализации WebSocket");\n    ws = new WebSocket("ws://localhost:8080/ws");\n    ws.onopen = function () {\n      console.log("[WS] connected");\n      // Отправим тестовое сообщение\n      try {\n        ws.send(JSON.stringify({\n          type: "ping"\n        }));\n        console.log("[WS] Отправлено тестовое сообщение");\n      } catch (e) {\n        console.error("[WS] Ошибка отправки тестового сообщения:", e);\n      }\n    };\n    ws.onmessage = function (evt) {\n      try {\n        var data = JSON.parse(evt.data);\n        if (!data || network_typeof(data) !== \'object\') {\n          throw new Error(\'Неверный формат данных\');\n        }\n        handleMessage(data);\n      } catch (error) {\n        console.error("[WS] Полная ошибка:", error);\n        console.error("[WS] Стек вызовов:", error.stack);\n      }\n    };\n    ws.onerror = function (error) {\n      console.error("[WS] WebSocket error:", error);\n      console.error("[WS] Детали ошибки:", {\n        message: error.message,\n        type: error.type,\n        eventPhase: error.eventPhase\n      });\n    };\n    ws.onclose = function (event) {\n      console.log("[WS] Соединение закрыто:", {\n        code: event.code,\n        reason: event.reason,\n        wasClean: event.wasClean\n      });\n    };\n    document.addEventListener("keydown", handleKeyDown);\n  } catch (error) {\n    console.error("[WS] Ошибка при создании WebSocket:", error);\n    console.error("[WS] Стек вызовов:", error.stack);\n  }\n}\n;// ./src/index.js\nfunction src_typeof(o) { "@babel/helpers - typeof"; return src_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, src_typeof(o); }\nfunction src_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ src_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == src_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(src_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction src_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction src_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// index.js\n\n\n\n\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Выполняем шаг физической симуляции (например, 1/60 секунды)\n  stepPhysics(1 / 60);\n  updatePhysicsObjects(objects);\n\n  // Пример обновления камеры: следим за первым найденным шаром\n  var targetObject = null;\n  for (var id in objects) {\n    var obj = objects[id];\n    if (obj && obj.mesh && obj.mesh.geometry && obj.mesh.geometry.type === "SphereGeometry") {\n      targetObject = obj;\n      break;\n    }\n  }\n  if (targetObject) {\n    var targetPos = targetObject.mesh.position;\n    var offset = new three_core/* Vector3 */.Pq0(0, 50, 100);\n    var cameraTarget = targetPos.clone().add(offset);\n    camera.position.lerp(cameraTarget, 0.1);\n    camera.lookAt(targetPos);\n  }\n  renderer.render(scene, camera);\n}\nfunction start() {\n  return _start.apply(this, arguments);\n}\nfunction _start() {\n  _start = src_asyncToGenerator(/*#__PURE__*/src_regeneratorRuntime().mark(function _callee() {\n    return src_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          console.log("Start");\n          initScene();\n          _context.prev = 2;\n          _context.next = 5;\n          return new Promise(function (resolve) {\n            return setTimeout(resolve, 500);\n          });\n        case 5:\n          _context.next = 7;\n          return initAmmo();\n        case 7:\n          // Создаем тестовую сферу после инициализации Ammo\n          createTestSphere();\n          initNetwork();\n          animate();\n          _context.next = 15;\n          break;\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context["catch"](2);\n          console.error("Ошибка при инициализации Ammo.js:", _context.t0);\n        case 15:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[2, 12]]);\n  }));\n  return _start.apply(this, arguments);\n}\nstart();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE9BQU8sQ0FBQyxDQUFDO1VBQUN2TSxRQUFBLENBQUFqRCxJQUFBO1VBQUE7UUFBQTtVQUFBaUQsUUFBQSxDQUFBdEIsSUFBQTtVQUFBc0IsUUFBQSxDQUFBbU4sRUFBQSxHQUFBbk4sUUFBQTtVQUVWN0ksT0FBTyxDQUFDaUssS0FBSyxDQUFDLG1DQUFtQyxFQUFBcEIsUUFBQSxDQUFBbU4sRUFBTyxDQUFDO1FBQUM7UUFBQTtVQUFBLE9BQUFuTixRQUFBLENBQUFuQixJQUFBO01BQUE7SUFBQSxHQUFBaUIsT0FBQTtFQUFBLENBRWpFO0VBQUEsT0FBQW1OLE1BQUEsQ0FBQTFOLEtBQUEsT0FBQUQsU0FBQTtBQUFBO0FBRUQwTixLQUFLLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uL3NyYy9zY2VuZS5qcz8yNjRjIiwid2VicGFjazovL3dlYi8uL3NyYy9waHlzaWNzLmpzP2M0ODMiLCJ3ZWJwYWNrOi8vd2ViLy4vc3JjL29iamVjdHMuanM/YzhlYyIsIndlYnBhY2s6Ly93ZWIvLi9zcmMvbmV0d29yay5qcz9iZDkyIiwid2VicGFjazovL3dlYi8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNjZW5lLmpzXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbmV4cG9ydCBsZXQgc2NlbmUsIGNhbWVyYSwgcmVuZGVyZXI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0U2NlbmUoKSB7XG4gICAgY29uc29sZS5sb2coXCJ0cnkgdG8gaW5pdFNjZW5lXCIpXG4gICAgc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcblxuICAgIGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYShcbiAgICAgICAgNjAsXG4gICAgICAgIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LFxuICAgICAgICAwLjIsXG4gICAgICAgIDIwMDBcbiAgICApO1xuICAgIGNhbWVyYS5wb3NpdGlvbi5zZXQoMCwgNTAsIDEwMCk7XG4gICAgY2FtZXJhLmxvb2tBdCgwLCAwLCAwKTtcblxuICAgIHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoeyBhbnRpYWxpYXM6IHRydWUgfSk7XG4gICAgcmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJlbmRlcmVyLmRvbUVsZW1lbnQpO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uV2luZG93UmVzaXplKTtcblxuICAgIGNvbnN0IGFtYmllbnQgPSBuZXcgVEhSRUUuQW1iaWVudExpZ2h0KDB4ZmZmZmZmLCAwLjUpO1xuICAgIHNjZW5lLmFkZChhbWJpZW50KTtcblxuICAgIGNvbnN0IGRpcmVjdGlvbmFsID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHhmZmZmZmYsIDEpO1xuICAgIGRpcmVjdGlvbmFsLnBvc2l0aW9uLnNldCgxMCwgMjAsIDEwKTtcbiAgICBzY2VuZS5hZGQoZGlyZWN0aW9uYWwpO1xufVxuXG5mdW5jdGlvbiBvbldpbmRvd1Jlc2l6ZSgpIHtcbiAgICBjYW1lcmEuYXNwZWN0ID0gd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICByZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xufVxuXG5leHBvcnQgeyBvbldpbmRvd1Jlc2l6ZSB9OyIsIi8vIHBoeXNpY3MuanNcblxuZXhwb3J0IGxldCBsb2NhbFBoeXNpY3NXb3JsZCA9IG51bGw7XG5sZXQgYW1tb1Byb21pc2UgPSBudWxsO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdEFtbW8oKSB7XG4gICAgaWYgKGFtbW9Qcm9taXNlKSB7XG4gICAgICAgIHJldHVybiBhbW1vUHJvbWlzZTtcbiAgICB9XG5cbiAgICBhbW1vUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIHNjcmlwdC5zcmMgPSAnL2FtbW8vYW1tby53YXNtLmpzJzsgLy8g0L/Rg9GC0Ywg0L7RgiDQutC+0YDQvdGPINCy0LXQsS3RgdC10YDQstC10YDQsFxuICAgICAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgICAgICBcbiAgICAgICAgc2NyaXB0Lm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0FtbW9dINCh0LrRgNC40L/RgiDQt9Cw0LPRgNGD0LbQtdC9LCDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjRjy4uLlwiKTtcbiAgICAgICAgICAgIEFtbW8oKS50aGVuKChBbW1vTGliKSA9PiB7XG4gICAgICAgICAgICAgICAgd2luZG93LkFtbW8gPSBBbW1vTGliO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vINCY0L3QuNGG0LjQsNC70LjQt9C40YDRg9C10Lwg0YTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAINC/0L7RgdC70LUg0LfQsNCz0YDRg9C30LrQuCBBbW1vXG4gICAgICAgICAgICAgICAgY29uc3QgY29sbGlzaW9uQ29uZmlndXJhdGlvbiA9IG5ldyBBbW1vTGliLmJ0RGVmYXVsdENvbGxpc2lvbkNvbmZpZ3VyYXRpb24oKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXNwYXRjaGVyID0gbmV3IEFtbW9MaWIuYnRDb2xsaXNpb25EaXNwYXRjaGVyKGNvbGxpc2lvbkNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJyb2FkcGhhc2UgPSBuZXcgQW1tb0xpYi5idERidnRCcm9hZHBoYXNlKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc29sdmVyID0gbmV3IEFtbW9MaWIuYnRTZXF1ZW50aWFsSW1wdWxzZUNvbnN0cmFpbnRTb2x2ZXIoKTtcbiAgICAgICAgICAgICAgICBsb2NhbFBoeXNpY3NXb3JsZCA9IG5ldyBBbW1vTGliLmJ0RGlzY3JldGVEeW5hbWljc1dvcmxkKFxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaGVyLFxuICAgICAgICAgICAgICAgICAgICBicm9hZHBoYXNlLFxuICAgICAgICAgICAgICAgICAgICBzb2x2ZXIsXG4gICAgICAgICAgICAgICAgICAgIGNvbGxpc2lvbkNvbmZpZ3VyYXRpb25cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGxvY2FsUGh5c2ljc1dvcmxkLnNldEdyYXZpdHkobmV3IEFtbW9MaWIuYnRWZWN0b3IzKDAsIC05LjgxLCAwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltBbW1vXSDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRg9GB0L/QtdGI0L3QsFwiKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKEFtbW9MaWIpO1xuICAgICAgICAgICAgfSkuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHNjcmlwdC5vbmVycm9yID0gKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW0FtbW9dINCe0YjQuNCx0LrQsCDQt9Cw0LPRgNGD0LfQutC4INGB0LrRgNC40L/RgtCwOlwiLCBlcnJvcik7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBhbW1vUHJvbWlzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0ZXBQaHlzaWNzKGRlbHRhVGltZSkge1xuICAgIGlmIChsb2NhbFBoeXNpY3NXb3JsZCkge1xuICAgICAgICAvLyDQn9GA0L7QstC10YDRj9C10LwsINGH0YLQviBkZWx0YVRpbWUg0LjQvNC10LXRgiDRgNCw0LfRg9C80L3QvtC1INC30L3QsNGH0LXQvdC40LVcbiAgICAgICAgaWYgKGRlbHRhVGltZSA8PSAwIHx8IGRlbHRhVGltZSA+IDEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIltQaHlzaWNzXSDQn9C+0LTQvtC30YDQuNGC0LXQu9GM0L3QvtC1INC30L3QsNGH0LXQvdC40LUgZGVsdGFUaW1lOlwiLCBkZWx0YVRpbWUpO1xuICAgICAgICAgICAgZGVsdGFUaW1lID0gMS82MDsgLy8g0LjRgdC/0L7Qu9GM0LfRg9C10Lwg0YTQuNC60YHQuNGA0L7QstCw0L3QvdGL0Lkg0YjQsNCzINC10YHQu9C4INGH0YLQvi3RgtC+INC90LUg0YLQsNC6XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIGlmIChNYXRoLnJhbmRvbSgpIDwgMC4wMTYpIHsgLy8g0L/RgNC40LzQtdGA0L3QviDRgNCw0Lcg0LIg0YHQtdC60YPQvdC00YMg0L/RgNC4IDYwIEZQU1xuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coXCJbUGh5c2ljc10g0KjQsNCzINGB0LjQvNGD0LvRj9GG0LjQuDpcIiwge1xuICAgICAgICAvLyAgICAgICAgIGRlbHRhVGltZTogZGVsdGFUaW1lLFxuICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgXG4gICAgICAgIGxvY2FsUGh5c2ljc1dvcmxkLnN0ZXBTaW11bGF0aW9uKGRlbHRhVGltZSwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIltQaHlzaWNzXSDQpNC40LfQuNGH0LXRgdC60LjQuSDQvNC40YAg0L3QtSDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0L1cIik7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlUGh5c2ljc09iamVjdHMob2JqZWN0cykge1xuICAgIGZvciAobGV0IGlkIGluIG9iamVjdHMpIHtcbiAgICAgICAgY29uc3Qgb2JqID0gb2JqZWN0c1tpZF07XG4gICAgICAgIGlmICghb2JqLm1lc2gpIGNvbnRpbnVlO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKGBbUGh5c2ljc10g0J7QsdC90L7QstC70LXQvdC40LUg0L7QsdGK0LXQutGC0LAgJHtpZH0g0YEgcGh5c2ljc0J5OiAke29iai5waHlzaWNzQnl9YCk7IFxuXG4gICAgICAgIHN3aXRjaCAob2JqLnBoeXNpY3NCeSkge1xuICAgICAgICAgICAgY2FzZSBcImFtbW9cIjpcbiAgICAgICAgICAgICAgICAvLyDQntCx0L3QvtCy0LvQtdC90LjQtSDRgtC+0LvRjNC60L4g0L/QviDRhNC40LfQuNC60LUgQW1tby5qc1xuICAgICAgICAgICAgICAgIGlmIChvYmouYm9keSAmJiBvYmoub2JqZWN0X3R5cGUgIT09IFwidGVycmFpblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zID0gbmV3IHdpbmRvdy5BbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LmdldE1vdGlvblN0YXRlKCkuZ2V0V29ybGRUcmFuc2Zvcm0odHJhbnMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY1ggPSB0cmFucy5nZXRPcmlnaW4oKS54KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY1kgPSB0cmFucy5nZXRPcmlnaW4oKS55KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY1ogPSB0cmFucy5nZXRPcmlnaW4oKS56KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcXggPSB0cmFucy5nZXRSb3RhdGlvbigpLngoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcXkgPSB0cmFucy5nZXRSb3RhdGlvbigpLnkoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcXogPSB0cmFucy5nZXRSb3RhdGlvbigpLnooKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcXcgPSB0cmFucy5nZXRSb3RhdGlvbigpLncoKTtcblxuICAgICAgICAgICAgICAgICAgICBvYmoubWVzaC5wb3NpdGlvbi5zZXQobG9jWCwgbG9jWSwgbG9jWik7XG4gICAgICAgICAgICAgICAgICAgIG9iai5tZXNoLnF1YXRlcm5pb24uc2V0KHF4LCBxeSwgcXosIHF3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJidWxsZXRcIjpcbiAgICAgICAgICAgICAgICAvLyDQntCx0L3QvtCy0LvQtdC90LjQtSDRgtC+0LvRjNC60L4g0L/QviDRgdC10YDQstC10YDQvdGL0Lwg0LTQsNC90L3Ri9C8XG4gICAgICAgICAgICAgICAgaWYgKG9iai5zZXJ2ZXJQb3MgJiYgb2JqLm9iamVjdF90eXBlICE9PSBcInRlcnJhaW5cIikge1xuICAgICAgICAgICAgICAgICAgICBvYmoubWVzaC5wb3NpdGlvbi5zZXQob2JqLnNlcnZlclBvcy54LCBvYmouc2VydmVyUG9zLnksIG9iai5zZXJ2ZXJQb3Mueik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwiYm90aFwiOlxuICAgICAgICAgICAgICAgIC8vINCe0LHQvdC+0LLQu9C10L3QuNC1INC/0L4g0L7QsdC+0LjQvCDQuNGB0YLQvtGH0L3QuNC60LDQvFxuICAgICAgICAgICAgICAgIGlmIChvYmoub2JqZWN0X3R5cGUgIT09IFwidGVycmFpblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmouYm9keSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnMgPSBuZXcgd2luZG93LkFtbW8uYnRUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LmdldE1vdGlvblN0YXRlKCkuZ2V0V29ybGRUcmFuc2Zvcm0odHJhbnMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2NYID0gdHJhbnMuZ2V0T3JpZ2luKCkueCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9jWSA9IHRyYW5zLmdldE9yaWdpbigpLnkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY1ogPSB0cmFucy5nZXRPcmlnaW4oKS56KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHF4ID0gdHJhbnMuZ2V0Um90YXRpb24oKS54KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBxeSA9IHRyYW5zLmdldFJvdGF0aW9uKCkueSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcXogPSB0cmFucy5nZXRSb3RhdGlvbigpLnooKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHF3ID0gdHJhbnMuZ2V0Um90YXRpb24oKS53KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5tZXNoLnBvc2l0aW9uLnNldChsb2NYLCBsb2NZLCBsb2NaKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5tZXNoLnF1YXRlcm5pb24uc2V0KHF4LCBxeSwgcXosIHF3KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmouc2VydmVyUG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkeCA9IG9iai5zZXJ2ZXJQb3MueCAtIG9iai5tZXNoLnBvc2l0aW9uLng7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkeSA9IG9iai5zZXJ2ZXJQb3MueSAtIG9iai5tZXNoLnBvc2l0aW9uLnk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkeiA9IG9iai5zZXJ2ZXJQb3MueiAtIG9iai5tZXNoLnBvc2l0aW9uLno7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkeCAqIGR4ICsgZHkgKiBkeSArIGR6ICogZHogPiAwLjAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxwaGEgPSAwLjE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3WCA9IG9iai5tZXNoLnBvc2l0aW9uLnggKyBkeCAqIGFscGhhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1kgPSBvYmoubWVzaC5wb3NpdGlvbi55ICsgZHkgKiBhbHBoYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdaID0gb2JqLm1lc2gucG9zaXRpb24ueiArIGR6ICogYWxwaGE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoubWVzaC5wb3NpdGlvbi5zZXQobmV3WCwgbmV3WSwgbmV3Wik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBbUGh5c2ljc10g0J3QtdC40LfQstC10YHRgtC90YvQuSDRgtC40L8gcGh5c2ljc0J5INC00LvRjyDQvtCx0YrQtdC60YLQsCAke2lkfTogJHtvYmoucGh5c2ljc0J5fWApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlJbXB1bHNlVG9TcGhlcmUoY21kLCBvYmplY3RzKSB7XG4gICAgY29uc29sZS5sb2coXCJbRGVidWddINCf0LXRgNC10LTQsNC90L3Ri9C1INC+0LHRitC10LrRgtGLINCyIGFwcGx5SW1wdWxzZVRvU3BoZXJlOlwiLCBvYmplY3RzKTtcbiAgICAvLyDQn9GA0L7QstC10YDRj9C10LwsINGH0YLQviBvYmplY3RzINC/0LXRgNC10LTQsNC9INC4INGP0LLQu9GP0LXRgtGB0Y8g0L7QsdGK0LXQutGC0L7QvFxuICAgIGlmICghb2JqZWN0cyB8fCB0eXBlb2Ygb2JqZWN0cyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiW1BoeXNpY3NdINCd0LXQutC+0YDRgNC10LrRgtC90YvQtSDQvtCx0YrQtdC60YLRiyDQv9C10YDQtdC00LDQvdGLINCyIGFwcGx5SW1wdWxzZVRvU3BoZXJlXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8g0KHQvtC30LTQsNC10Lwg0LjQvNC/0YPQu9GM0YEg0LfQsNGA0LDQvdC10LUsINGH0YLQvtCx0Ysg0L3QtSDRgdC+0LfQtNCw0LLQsNGC0Ywg0LXQs9C+INC00LvRjyDQutCw0LbQtNC+0LPQviDRiNCw0YDQsFxuICAgIGNvbnN0IGltcHVsc2UgPSBuZXcgd2luZG93LkFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xuICAgIGlmIChjbWQgPT09IFwiTEVGVFwiKSBpbXB1bHNlLnNldFZhbHVlKC01LCAwLCAwKTtcbiAgICBpZiAoY21kID09PSBcIlJJR0hUXCIpIGltcHVsc2Uuc2V0VmFsdWUoNSwgMCwgMCk7XG4gICAgaWYgKGNtZCA9PT0gXCJVUFwiKSBpbXB1bHNlLnNldFZhbHVlKDAsIDAsIC01KTtcbiAgICBpZiAoY21kID09PSBcIkRPV05cIikgaW1wdWxzZS5zZXRWYWx1ZSgwLCAwLCA1KTtcbiAgICBpZiAoY21kID09PSBcIlNQQUNFXCIpIGltcHVsc2Uuc2V0VmFsdWUoMCwgMTAsIDApO1xuXG4gICAgLy8g0J/RgNC+0YXQvtC00LjQvCDQv9C+INCy0YHQtdC8INC+0LHRitC10LrRgtCw0Lwg0Lgg0L/RgNC40LzQtdC90Y/QtdC8INC40LzQv9GD0LvRjNGBINGC0L7Qu9GM0LrQviDQuiDRiNCw0YDQsNC8INGBIHBoeXNpY3NCeTogXCJhbW1vXCJcbiAgICBmb3IgKGxldCBpZCBpbiBvYmplY3RzKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IG9iamVjdHNbaWRdO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBvYmogJiZcbiAgICAgICAgICAgIG9iai5tZXNoICYmXG4gICAgICAgICAgICBvYmoubWVzaC5nZW9tZXRyeSAmJlxuICAgICAgICAgICAgb2JqLm1lc2guZ2VvbWV0cnkudHlwZSA9PT0gXCJTcGhlcmVHZW9tZXRyeVwiICYmXG4gICAgICAgICAgICBvYmouYm9keSAmJlxuICAgICAgICAgICAgb2JqLnBoeXNpY3NCeSA9PT0gXCJhbW1vXCIgIC8vINCi0L7Qu9GM0LrQviDQtNC70Y8g0LvQvtC60LDQu9GM0L3QviDRg9C/0YDQsNCy0LvRj9C10LzRi9GFINC+0LHRitC10LrRgtC+0LJcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBvYmouYm9keS5hY3RpdmF0ZSh0cnVlKTtcbiAgICAgICAgICAgIG9iai5ib2R5LmFwcGx5Q2VudHJhbEltcHVsc2UoaW1wdWxzZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDQtNC40LDQs9C90L7RgdGC0LjQutGDINC00LvRjyDQutCw0LbQtNC+0LPQviDRiNCw0YDQsFxuICAgICAgICAgICAgY29uc3QgdmVsb2NpdHkgPSBvYmouYm9keS5nZXRMaW5lYXJWZWxvY2l0eSgpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbUGh5c2ljc10g0KHQvtGB0YLQvtGP0L3QuNC1INGI0LDRgNCwOlwiLCB7XG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIHBoeXNpY3NCeTogb2JqLnBoeXNpY3NCeSxcbiAgICAgICAgICAgICAgICDQutC+0LzQsNC90LTQsDogY21kLFxuICAgICAgICAgICAgICAgINC/0L7Qt9C40YbQuNGPOiBvYmoubWVzaC5wb3NpdGlvbixcbiAgICAgICAgICAgICAgICDRgdC60L7RgNC+0YHRgtGMOiB7XG4gICAgICAgICAgICAgICAgICAgIHg6IHZlbG9jaXR5LngoKSxcbiAgICAgICAgICAgICAgICAgICAgeTogdmVsb2NpdHkueSgpLFxuICAgICAgICAgICAgICAgICAgICB6OiB2ZWxvY2l0eS56KClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vINCe0YfQuNGJ0LDQtdC8INC/0LDQvNGP0YLRjFxuICAgIEFtbW8uZGVzdHJveShpbXB1bHNlKTtcbn0iLCIvLyBvYmplY3RzLmpzXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBzY2VuZSB9IGZyb20gJy4vc2NlbmUnO1xuaW1wb3J0IHsgbG9jYWxQaHlzaWNzV29ybGQgfSBmcm9tICcuL3BoeXNpY3MnO1xuXG5leHBvcnQgbGV0IG9iamVjdHMgPSB7fTsgLy8g0KHQu9C+0LLQsNGA0Ywg0L7QsdGK0LXQutGC0L7QsjogaWQgLT4geyBtZXNoLCBib2R5LCBzZXJ2ZXJQb3MsIC4uLiB9XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNZXNoQW5kQm9keUZvck9iamVjdChkYXRhKSB7XG4gICAgaWYgKCFkYXRhIHx8ICFkYXRhLm9iamVjdF90eXBlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGRhdGEgcmVjZWl2ZWQgZm9yIG9iamVjdCBjcmVhdGlvbjpcIiwgZGF0YSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHR5cGUgPSBkYXRhLm9iamVjdF90eXBlO1xuICAgIGxldCBtZXNoLCBib2R5ID0gbnVsbDtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwidGVycmFpblwiOlxuICAgICAgICAgICAgbWVzaCA9IGNyZWF0ZVRlcnJhaW5NZXNoKGRhdGEpO1xuICAgICAgICAgICAgYm9keSA9IGNyZWF0ZVBoeXNpY3NCb2R5Rm9yVGVycmFpbihkYXRhKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwic3BoZXJlXCI6XG4gICAgICAgICAgICBtZXNoID0gY3JlYXRlU3BoZXJlTWVzaChkYXRhKTtcbiAgICAgICAgICAgIGJvZHkgPSBjcmVhdGVQaHlzaWNzQm9keUZvclNwaGVyZShkYXRhKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidHJlZVwiOlxuICAgICAgICAgICAgbWVzaCA9IGNyZWF0ZVRyZWVNZXNoKGRhdGEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFVua25vd24gb2JqZWN0IHR5cGU6ICR7dHlwZX1gKTtcbiAgICAgICAgICAgIG1lc2ggPSBjcmVhdGVEZWZhdWx0TWVzaChkYXRhKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHNjZW5lLmFkZChtZXNoKTtcbiAgICByZXR1cm4geyBtZXNoLCBib2R5IH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBoeXNpY3NCb2R5Rm9yVGVycmFpbihkYXRhKSB7XG4gICAgaWYgKHR5cGVvZiBBbW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdBbW1vLmpzINC90LUg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC9Jyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICghbG9jYWxQaHlzaWNzV29ybGQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcign0KTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAINC90LUg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC9Jyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHcgPSBkYXRhLmhlaWdodG1hcF93O1xuICAgIGNvbnN0IGggPSBkYXRhLmhlaWdodG1hcF9oO1xuICAgIGNvbnN0IHNjYWxlWCA9IGRhdGEuc2NhbGVfeDtcbiAgICBjb25zdCBzY2FsZVogPSBkYXRhLnNjYWxlX3o7XG5cbiAgICAvLyDQodC+0LfQtNCw0LXQvCDQsdGD0YTQtdGAINCyINC/0LDQvNGP0YLQuCBBbW1vINC00LvRjyDQtNCw0L3QvdGL0YUg0LLRi9GB0L7RglxuICAgIGNvbnN0IGFtbW9IZWlnaHREYXRhID0gQW1tby5fbWFsbG9jKDQgKiB3ICogaCk7XG4gICAgXG4gICAgLy8g0JrQvtC/0LjRgNGD0LXQvCDQtNCw0L3QvdGL0LUg0LLRi9GB0L7RgiDQsiDQv9Cw0LzRj9GC0YwgQW1tb1xuICAgIGxldCBwID0gMDtcbiAgICBsZXQgcDIgPSAwO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgaDsgaisrKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdzsgaSsrKSB7XG4gICAgICAgICAgICBBbW1vLkhFQVBGMzJbYW1tb0hlaWdodERhdGEgKyBwMiA+PiAyXSA9IGRhdGEuaGVpZ2h0X2RhdGFbcF07XG4gICAgICAgICAgICBwKys7XG4gICAgICAgICAgICBwMiArPSA0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8g0KHQvtC30LTQsNC10Lwg0YTQvtGA0LzRgyDRgtC10YDRgNC10LnQvdCwXG4gICAgY29uc3Qgc2hhcGUgPSBuZXcgQW1tby5idEhlaWdodGZpZWxkVGVycmFpblNoYXBlKFxuICAgICAgICB3LFxuICAgICAgICBoLFxuICAgICAgICBhbW1vSGVpZ2h0RGF0YSxcbiAgICAgICAgMSwgIC8vIGhlaWdodFNjYWxlXG4gICAgICAgIGRhdGEubWluX2hlaWdodCxcbiAgICAgICAgZGF0YS5tYXhfaGVpZ2h0LFxuICAgICAgICAxLCAgLy8gdXAgYXhpcyA9IDEg0LTQu9GPIFlcbiAgICAgICAgQW1tby5QSFlfRkxPQVQsXG4gICAgICAgIGZhbHNlICAvLyBmbGlwUXVhZEVkZ2VzXG4gICAgKTtcblxuICAgIC8vINCj0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdC8INC80LDRgdGI0YLQsNCx0LjRgNC+0LLQsNC90LjQtVxuICAgIHNoYXBlLnNldExvY2FsU2NhbGluZyhuZXcgQW1tby5idFZlY3RvcjMoc2NhbGVYLCBkYXRhLnNjYWxlX3ksIHNjYWxlWikpO1xuICAgIHNoYXBlLnNldE1hcmdpbigwLjUpO1xuXG4gICAgLy8g0KHQvtC30LTQsNC10Lwg0YLRgNCw0L3RgdGE0L7RgNC80LDRhtC40Y5cbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBuZXcgQW1tby5idFRyYW5zZm9ybSgpO1xuICAgIHRyYW5zZm9ybS5zZXRJZGVudGl0eSgpO1xuICAgIFxuICAgIC8vINCS0LDQttC90L4hINCh0LzQtdGJ0LDQtdC8INGC0LXRgNGA0LXQudC9LCDRgtCw0Log0LrQsNC6IEJ1bGxldCDRhtC10L3RgtGA0LjRgNGD0LXRgiDQtdCz0L4g0L/QviDQvtCz0YDQsNC90LjRh9C40LLQsNGO0YnQtdC80YMg0LHQvtC60YHRg1xuICAgIHRyYW5zZm9ybS5zZXRPcmlnaW4obmV3IEFtbW8uYnRWZWN0b3IzKFxuICAgICAgICBkYXRhLnggfHwgMCxcbiAgICAgICAgKGRhdGEubWluX2hlaWdodCArIGRhdGEubWF4X2hlaWdodCkgLyAyLFxuICAgICAgICBkYXRhLnogfHwgMFxuICAgICkpO1xuXG4gICAgY29uc3QgbWFzcyA9IDA7IC8vINCh0YLQsNGC0LjRh9C10YHQutC+0LUg0YLQtdC70L5cbiAgICBjb25zdCBsb2NhbEluZXJ0aWEgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgY29uc3QgbW90aW9uU3RhdGUgPSBuZXcgQW1tby5idERlZmF1bHRNb3Rpb25TdGF0ZSh0cmFuc2Zvcm0pO1xuICAgIGNvbnN0IHJiSW5mbyA9IG5ldyBBbW1vLmJ0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mbyhtYXNzLCBtb3Rpb25TdGF0ZSwgc2hhcGUsIGxvY2FsSW5lcnRpYSk7XG4gICAgY29uc3QgYm9keSA9IG5ldyBBbW1vLmJ0UmlnaWRCb2R5KHJiSW5mbyk7XG5cbiAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0YLQtdC70L4g0LIg0YTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAINGBINC/0YDQsNCy0LjQu9GM0L3Ri9C80Lgg0L/QsNGA0LDQvNC10YLRgNCw0LzQuCDQutC+0LvQu9C40LfQuNC5XG4gICAgY29uc3QgVEVSUkFJTl9HUk9VUCA9IDE7ICAvLyDQs9GA0YPQv9C/0LAg0LTQu9GPINGC0LXRgNGA0LXQudC90LBcbiAgICBjb25zdCBTUEhFUkVfR1JPVVAgPSAyOyAgIC8vINCz0YDRg9C/0L/QsCDQtNC70Y8g0YHRhNC10YBcbiAgICBsb2NhbFBoeXNpY3NXb3JsZC5hZGRSaWdpZEJvZHkoYm9keSwgVEVSUkFJTl9HUk9VUCwgU1BIRVJFX0dST1VQKTsgLy8g0YLQtdGA0YDQtdC50L0g0YHRgtCw0LvQutC40LLQsNC10YLRgdGPINGC0L7Qu9GM0LrQviDRgdC+INGB0YTQtdGA0LDQvNC4XG5cbiAgICAvLyDQntGH0LjRgdGC0LrQsCDQv9Cw0LzRj9GC0LhcbiAgICBBbW1vLmRlc3Ryb3kocmJJbmZvKTtcbiAgICBBbW1vLmRlc3Ryb3kobG9jYWxJbmVydGlhKTtcblxuICAgIGNvbnNvbGUubG9nKFwiW1RlcnJhaW5dINCk0LjQt9C40YfQtdGB0LrQvtC1INGC0LXQu9C+INGB0L7Qt9C00LDQvdC+OlwiLCB7XG4gICAgICAgINGA0LDQt9C80LXRgNGLOiB7IHcsIGggfSxcbiAgICAgICAg0LzQsNGB0YjRgtCw0LE6IHsgeDogc2NhbGVYLCB5OiBkYXRhLnNjYWxlX3ksIHo6IHNjYWxlWiB9LFxuICAgICAgICDQv9C+0LfQuNGG0LjRjzogeyBcbiAgICAgICAgICAgIHg6IGRhdGEueCB8fCAwLCBcbiAgICAgICAgICAgIHk6IChkYXRhLm1pbl9oZWlnaHQgKyBkYXRhLm1heF9oZWlnaHQpIC8gMixcbiAgICAgICAgICAgIHo6IGRhdGEueiB8fCAwIFxuICAgICAgICB9LFxuICAgICAgICDQvNC40L3QktGL0YHQvtGC0LA6IGRhdGEubWluX2hlaWdodCxcbiAgICAgICAg0LzQsNC60YHQktGL0YHQvtGC0LA6IGRhdGEubWF4X2hlaWdodFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJvZHk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRlcnJhaW5NZXNoKGRhdGEpIHtcbiAgICBjb25zdCB3ID0gZGF0YS5oZWlnaHRtYXBfdyB8fCA2NDtcbiAgICBjb25zdCBoID0gZGF0YS5oZWlnaHRtYXBfaCB8fCA2NDtcbiAgICBjb25zdCBnZW8gPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShcbiAgICAgICAgdyAqIGRhdGEuc2NhbGVfeCxcbiAgICAgICAgaCAqIGRhdGEuc2NhbGVfeixcbiAgICAgICAgdyAtIDEsXG4gICAgICAgIGggLSAxXG4gICAgKTtcbiAgICBnZW8ucm90YXRlWCgtTWF0aC5QSSAvIDIpO1xuXG4gICAgaWYgKGRhdGEuaGVpZ2h0X2RhdGEpIHtcbiAgICAgICAgY29uc3QgdmVydHMgPSBnZW8uYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0cy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgICAgY29uc3QgaXggPSAoaSAvIDMpICUgdztcbiAgICAgICAgICAgIGNvbnN0IGl6ID0gTWF0aC5mbG9vcihpIC8gMyAvIHcpO1xuICAgICAgICAgICAgdmVydHNbaSArIDFdID0gZGF0YS5oZWlnaHRfZGF0YVtpeiAqIHcgKyBpeF0gKiBkYXRhLnNjYWxlX3k7XG4gICAgICAgIH1cbiAgICAgICAgZ2VvLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUSFJFRS5NZXNoKFxuICAgICAgICBnZW8sXG4gICAgICAgIG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHtcbiAgICAgICAgICAgIGNvbG9yOiBwYXJzZUNvbG9yKGRhdGEuY29sb3IgfHwgXCIjODg4ODg4XCIpLFxuICAgICAgICAgICAgd2lyZWZyYW1lOiB0cnVlLFxuICAgICAgICB9KVxuICAgICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTcGhlcmVNZXNoKGRhdGEpIHtcbiAgICBjb25zdCBnZW8gPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoZGF0YS5yYWRpdXMgfHwgMSwgMTYsIDE2KTtcbiAgICByZXR1cm4gbmV3IFRIUkVFLk1lc2goXG4gICAgICAgIGdlbyxcbiAgICAgICAgbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoeyBjb2xvcjogcGFyc2VDb2xvcihkYXRhLmNvbG9yIHx8IFwiIzg4ODg4OFwiKSB9KVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyZWVNZXNoKGRhdGEpIHtcbiAgICBjb25zdCBncm91cCA9IG5ldyBUSFJFRS5Hcm91cCgpO1xuXG4gICAgaWYgKGRhdGEuYnJhbmNoZXMgJiYgQXJyYXkuaXNBcnJheShkYXRhLmJyYW5jaGVzKSkge1xuICAgICAgICBkYXRhLmJyYW5jaGVzLmZvckVhY2goKGJyYW5jaCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBicmFuY2guc3RhcnRYID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICBicmFuY2guc3RhcnRZID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICBicmFuY2guc3RhcnRaID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICBicmFuY2guZW5kWCA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgYnJhbmNoLmVuZFkgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgIGJyYW5jaC5lbmRaID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgICAgYEJyYW5jaCBjb29yZGluYXRlcyBhcmUgbWlzc2luZyBvciBpbnZhbGlkIGF0IGluZGV4ICR7aW5kZXh9OmAsXG4gICAgICAgICAgICAgICAgICAgIGJyYW5jaFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBicmFuY2hHZW8gPSBuZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeShcbiAgICAgICAgICAgICAgICBicmFuY2gucmFkaXVzVG9wIHx8IGJyYW5jaC5yYWRpdXMgfHwgMC4xLCAgICAvLyDQstC10YDRhdC90LjQuSDRgNCw0LTQuNGD0YFcbiAgICAgICAgICAgICAgICBicmFuY2gucmFkaXVzQm90dG9tIHx8IGJyYW5jaC5yYWRpdXMgfHwgMC4yLCAvLyDQvdC40LbQvdC40Lkg0YDQsNC00LjRg9GBXG4gICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICA4XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgYnJhbmNoTWF0ID0gbmV3IFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsKHtcbiAgICAgICAgICAgICAgICBjb2xvcjogcGFyc2VDb2xvcihicmFuY2guY29sb3IgfHwgXCIjNjU0MzIxXCIpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBicmFuY2hNZXNoID0gbmV3IFRIUkVFLk1lc2goYnJhbmNoR2VvLCBicmFuY2hNYXQpO1xuXG4gICAgICAgICAgICBjb25zdCBtaWRYID0gKGJyYW5jaC5zdGFydFggKyBicmFuY2guZW5kWCkgLyAyO1xuICAgICAgICAgICAgY29uc3QgbWlkWSA9IChicmFuY2guc3RhcnRZICsgYnJhbmNoLmVuZFkpIC8gMjtcbiAgICAgICAgICAgIGNvbnN0IG1pZFogPSAoYnJhbmNoLnN0YXJ0WiArIGJyYW5jaC5lbmRaKSAvIDI7XG5cbiAgICAgICAgICAgIGJyYW5jaE1lc2gucG9zaXRpb24uc2V0KG1pZFgsIG1pZFksIG1pZFopO1xuICAgICAgICAgICAgYnJhbmNoTWVzaC5sb29rQXQobmV3IFRIUkVFLlZlY3RvcjMoYnJhbmNoLmVuZFgsIGJyYW5jaC5lbmRZLCBicmFuY2guZW5kWikpO1xuXG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBuZXcgVEhSRUUuVmVjdG9yMyhcbiAgICAgICAgICAgICAgICBicmFuY2guZW5kWCAtIGJyYW5jaC5zdGFydFgsXG4gICAgICAgICAgICAgICAgYnJhbmNoLmVuZFkgLSBicmFuY2guc3RhcnRZLFxuICAgICAgICAgICAgICAgIGJyYW5jaC5lbmRaIC0gYnJhbmNoLnN0YXJ0WlxuICAgICAgICAgICAgKS5sZW5ndGgoKTtcblxuICAgICAgICAgICAgYnJhbmNoTWVzaC5zY2FsZS5zZXQoMSwgbGVuZ3RoLCAxKTtcblxuICAgICAgICAgICAgZ3JvdXAuYWRkKGJyYW5jaE1lc2gpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ3JvdXA7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRNZXNoKGRhdGEpIHtcbiAgICBjb25zdCBnZW8gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMSwgMSwgMSk7XG4gICAgcmV0dXJuIG5ldyBUSFJFRS5NZXNoKFxuICAgICAgICBnZW8sXG4gICAgICAgIG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHsgY29sb3I6IHBhcnNlQ29sb3IoZGF0YS5jb2xvciB8fCBcIiM4ODg4ODhcIikgfSlcbiAgICApO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVQaHlzaWNzQm9keUZvclNwaGVyZShkYXRhKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBBbW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignQW1tby5qcyDQvdC1INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvScpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWxvY2FsUGh5c2ljc1dvcmxkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCfQpNC40LfQuNGH0LXRgdC60LjQuSDQvNC40YAg0L3QtSDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0L0nKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmFkaXVzID0gZGF0YS5yYWRpdXMgfHwgMTtcbiAgICAgICAgY29uc3QgbWFzcyA9IGRhdGEubWFzcyB8fCAxO1xuXG4gICAgICAgIC8vINCh0L7Qt9C00LDQtdC8INCy0YHQtSBBbW1vINC+0LHRitC10LrRgtGLINGH0LXRgNC10Lcgd2luZG93LkFtbW9cbiAgICAgICAgY29uc3Qgc2hhcGUgPSBuZXcgd2luZG93LkFtbW8uYnRTcGhlcmVTaGFwZShyYWRpdXMpO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBuZXcgd2luZG93LkFtbW8uYnRUcmFuc2Zvcm0oKTtcbiAgICAgICAgdHJhbnNmb3JtLnNldElkZW50aXR5KCk7XG4gICAgICAgIHRyYW5zZm9ybS5zZXRPcmlnaW4obmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMyhkYXRhLnggfHwgMCwgZGF0YS55IHx8IDAsIGRhdGEueiB8fCAwKSk7XG5cbiAgICAgICAgY29uc3QgbG9jYWxJbmVydGlhID0gbmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgc2hhcGUuY2FsY3VsYXRlTG9jYWxJbmVydGlhKG1hc3MsIGxvY2FsSW5lcnRpYSk7XG5cbiAgICAgICAgY29uc3QgbW90aW9uU3RhdGUgPSBuZXcgd2luZG93LkFtbW8uYnREZWZhdWx0TW90aW9uU3RhdGUodHJhbnNmb3JtKTtcbiAgICAgICAgY29uc3QgcmJJbmZvID0gbmV3IHdpbmRvdy5BbW1vLmJ0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mbyhcbiAgICAgICAgICAgIG1hc3MsXG4gICAgICAgICAgICBtb3Rpb25TdGF0ZSxcbiAgICAgICAgICAgIHNoYXBlLFxuICAgICAgICAgICAgbG9jYWxJbmVydGlhXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGJvZHkgPSBuZXcgd2luZG93LkFtbW8uYnRSaWdpZEJvZHkocmJJbmZvKTtcblxuICAgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0YLQtdC70L4g0LIg0YTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAINGBINC/0YDQsNCy0LjQu9GM0L3Ri9C80Lgg0L/QsNGA0LDQvNC10YLRgNCw0LzQuCDQutC+0LvQu9C40LfQuNC5XG4gICAgICAgIGNvbnN0IFRFUlJBSU5fR1JPVVAgPSAxOyAgLy8g0LPRgNGD0L/Qv9CwINC00LvRjyDRgtC10YDRgNC10LnQvdCwXG4gICAgICAgIGNvbnN0IFNQSEVSRV9HUk9VUCA9IDI7ICAgLy8g0LPRgNGD0L/Qv9CwINC00LvRjyDRgdGE0LXRgFxuICAgICAgICBsb2NhbFBoeXNpY3NXb3JsZC5hZGRSaWdpZEJvZHkoYm9keSwgU1BIRVJFX0dST1VQLCBURVJSQUlOX0dST1VQKTsgLy8g0YHRhNC10YDRiyDRgdGC0LDQu9C60LjQstCw0Y7RgtGB0Y8g0YLQvtC70YzQutC+INGBINGC0LXRgNGA0LXQudC90L7QvFxuXG4gICAgICAgIC8vINCe0YfQuNGB0YLQutCwINC/0LDQvNGP0YLQuFxuICAgICAgICB3aW5kb3cuQW1tby5kZXN0cm95KHJiSW5mbyk7XG4gICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3kobG9jYWxJbmVydGlhKTtcblxuICAgICAgICByZXR1cm4gYm9keTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCfQntGI0LjQsdC60LAg0L/RgNC4INGB0L7Qt9C00LDQvdC40Lgg0YTQuNC30LjRh9C10YHQutC+0LPQviDRgtC10LvQsDonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuLy8gZXhwb3J0IGZ1bmN0aW9uIGRlYnVnUGh5c2ljc1dvcmxkKCkge1xuLy8gICAgIGlmICghbG9jYWxQaHlzaWNzV29ybGQpIHtcbi8vICAgICAgICAgY29uc29sZS5lcnJvcihcIltQaHlzaWNzIERlYnVnXSDQpNC40LfQuNGH0LXRgdC60LjQuSDQvNC40YAg0L3QtSDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0L1cIik7XG4vLyAgICAgICAgIHJldHVybjtcbi8vICAgICB9XG4gICAgXG4vLyAgICAgY29uc3QgbnVtQm9kaWVzID0gbG9jYWxQaHlzaWNzV29ybGQuZ2V0TnVtQ29sbGlzaW9uT2JqZWN0cygpO1xuLy8gICAgIGNvbnNvbGUubG9nKGBbUGh5c2ljcyBEZWJ1Z10g0JIg0YTQuNC30LjRh9C10YHQutC+0Lwg0LzQuNGA0LUgJHtudW1Cb2RpZXN9INC+0LHRitC10LrRgtC+0LJgKTtcbiAgICBcbi8vICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUJvZGllczsgaSsrKSB7XG4vLyAgICAgICAgIGNvbnN0IG9iaiA9IGxvY2FsUGh5c2ljc1dvcmxkLmdldENvbGxpc2lvbk9iamVjdEFycmF5KCkuYXQoaSk7XG4vLyAgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyBBbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgICAgIFxuLy8gICAgICAgICBpZiAob2JqLmdldE1vdGlvblN0YXRlKCkpIHtcbi8vICAgICAgICAgICAgIG9iai5nZXRNb3Rpb25TdGF0ZSgpLmdldFdvcmxkVHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4vLyAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgICBvYmouZ2V0V29ybGRUcmFuc2Zvcm0odHJhbnNmb3JtKTtcbi8vICAgICAgICAgfVxuICAgICAgICBcbi8vICAgICAgICAgY29uc3QgcG9zID0gdHJhbnNmb3JtLmdldE9yaWdpbigpO1xuLy8gICAgICAgICBjb25zdCByb3QgPSB0cmFuc2Zvcm0uZ2V0Um90YXRpb24oKTtcbiAgICAgICAgXG4vLyAgICAgICAgIGNvbnNvbGUubG9nKGBbUGh5c2ljcyBEZWJ1Z10g0J7QsdGK0LXQutGCICMke2l9OmAsIHtcbi8vICAgICAgICAgICAgINC/0L7Qt9C40YbQuNGPOiB7IHg6IHBvcy54KCksIHk6IHBvcy55KCksIHo6IHBvcy56KCkgfSxcbi8vICAgICAgICAgICAgINCy0YDQsNGJ0LXQvdC40LU6IHsgeDogcm90LngoKSwgeTogcm90LnkoKSwgejogcm90LnooKSwgdzogcm90LncoKSB9LFxuLy8gICAgICAgICAgICAg0LDQutGC0LjQstC10L06IG9iai5pc0FjdGl2ZSgpLFxuLy8gICAgICAgICAgICAg0YHRgtCw0YLQuNGH0LXQvTogb2JqLmlzU3RhdGljT2JqZWN0KCksXG4vLyAgICAgICAgICAgICDQutC40L3QtdC80LDRgtC40YfQtdC9OiBvYmouaXNLaW5lbWF0aWNPYmplY3QoKVxuLy8gICAgICAgICB9KTtcbi8vICAgICB9XG4vLyB9XG5cbmZ1bmN0aW9uIHBhcnNlQ29sb3IoY29sb3JTdHIpIHtcbiAgICBpZiAoIWNvbG9yU3RyKSByZXR1cm4gMHg4ODg4ODg7XG4gICAgaWYgKGNvbG9yU3RyLnN0YXJ0c1dpdGgoXCIjXCIpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChjb2xvclN0ci5zbGljZSgxKSwgMTYpO1xuICAgIH1cbiAgICByZXR1cm4gMHg4ODg4ODg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUZXN0U3BoZXJlKCkge1xuICAgIC8vINCh0L7Qt9C00LDQtdC8INCy0LjQt9GD0LDQu9GM0L3Rg9GOINGB0YTQtdGA0YNcbiAgICBjb25zdCByYWRpdXMgPSAxO1xuICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KHJhZGl1cywgMzIsIDMyKTtcbiAgICBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHsgY29sb3I6IDB4ZmYwMGZmIH0pO1xuICAgIGNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xuICAgIFxuICAgIC8vINCf0L7Qt9C40YbQuNC+0L3QuNGA0YPQtdC8INGB0YTQtdGA0YMg0LLRi9GB0L7QutC+INC90LDQtCDRgtC10YDRgNC10LnQvdC+0LxcbiAgICBjb25zdCBzdGFydFkgPSA1ODsgLy8g0JLRi9GB0L7RgtCwINC90LDQtCDRgtC10YDRgNC10LnQvdC+0LxcbiAgICBtZXNoLnBvc2l0aW9uLnNldCgwLCBzdGFydFksIDApO1xuICAgIHNjZW5lLmFkZChtZXNoKTtcblxuICAgIC8vINCh0L7Qt9C00LDQtdC8INGE0LjQt9C40YfQtdGB0LrQvtC1INGC0LXQu9C+XG4gICAgY29uc3Qgc2hhcGUgPSBuZXcgQW1tby5idFNwaGVyZVNoYXBlKHJhZGl1cyk7XG4gICAgY29uc3QgbWFzcyA9IDE7XG4gICAgXG4gICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IEFtbW8uYnRUcmFuc2Zvcm0oKTtcbiAgICB0cmFuc2Zvcm0uc2V0SWRlbnRpdHkoKTtcbiAgICB0cmFuc2Zvcm0uc2V0T3JpZ2luKG5ldyBBbW1vLmJ0VmVjdG9yMygwLCBzdGFydFksIDApKTtcblxuICAgIGNvbnN0IGxvY2FsSW5lcnRpYSA9IG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICBzaGFwZS5jYWxjdWxhdGVMb2NhbEluZXJ0aWEobWFzcywgbG9jYWxJbmVydGlhKTtcblxuICAgIGNvbnN0IG1vdGlvblN0YXRlID0gbmV3IEFtbW8uYnREZWZhdWx0TW90aW9uU3RhdGUodHJhbnNmb3JtKTtcbiAgICBjb25zdCByYkluZm8gPSBuZXcgQW1tby5idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm8obWFzcywgbW90aW9uU3RhdGUsIHNoYXBlLCBsb2NhbEluZXJ0aWEpO1xuICAgIGNvbnN0IGJvZHkgPSBuZXcgQW1tby5idFJpZ2lkQm9keShyYkluZm8pO1xuXG4gICAgLy8g0JLQsNC20L3Ri9C1INC90LDRgdGC0YDQvtC50LrQuCDQtNC70Y8g0YTQuNC30LjRh9C10YHQutC+0LPQviDRgtC10LvQsFxuICAgIGJvZHkuc2V0QWN0aXZhdGlvblN0YXRlKDQpOyAvLyBESVNBQkxFX0RFQUNUSVZBVElPTlxuICAgIGJvZHkuc2V0RnJpY3Rpb24oMC41KTtcbiAgICBib2R5LnNldFJvbGxpbmdGcmljdGlvbigwLjEpO1xuICAgIGJvZHkuc2V0UmVzdGl0dXRpb24oMC41KTsgLy8g0KPQv9GA0YPQs9C+0YHRgtGMXG5cbiAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0YLQtdC70L4g0LIg0YTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAINGBINC/0YDQsNCy0LjQu9GM0L3Ri9C80Lgg0L/QsNGA0LDQvNC10YLRgNCw0LzQuCDQutC+0LvQu9C40LfQuNC5XG4gICAgY29uc3QgVEVSUkFJTl9HUk9VUCA9IDE7ICAvLyDQs9GA0YPQv9C/0LAg0LTQu9GPINGC0LXRgNGA0LXQudC90LBcbiAgICBjb25zdCBTUEhFUkVfR1JPVVAgPSAyOyAgIC8vINCz0YDRg9C/0L/QsCDQtNC70Y8g0YHRhNC10YBcbiAgICBsb2NhbFBoeXNpY3NXb3JsZC5hZGRSaWdpZEJvZHkoYm9keSwgU1BIRVJFX0dST1VQLCBURVJSQUlOX0dST1VQKTsgLy8g0YHRhNC10YDRiyDRgdGC0LDQu9C60LjQstCw0Y7RgtGB0Y8g0YLQvtC70YzQutC+INGBINGC0LXRgNGA0LXQudC90L7QvFxuXG4gICAgLy8g0J7Rh9C40YHRgtC60LAg0L/QsNC80Y/RgtC4XG4gICAgQW1tby5kZXN0cm95KHJiSW5mbyk7XG4gICAgQW1tby5kZXN0cm95KGxvY2FsSW5lcnRpYSk7XG5cbiAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0L7QsdGK0LXQutGCINCyINC90LDRiCDRgdC/0LjRgdC+0Log0L7QsdGK0LXQutGC0L7QslxuICAgIGNvbnN0IHRlc3RTcGhlcmVPYmogPSB7XG4gICAgICAgIG1lc2gsXG4gICAgICAgIGJvZHksXG4gICAgICAgIG9iamVjdF90eXBlOiBcInRlc3Rfc3BoZXJlXCIsXG4gICAgICAgIHBoeXNpY3NCeTogXCJhbW1vXCIgLy8g0JjQt9C80LXQvdC10L3QviDRgSBcImJvdGhcIiDQvdCwIFwiYW1tb1wiLCDRh9GC0L7QsdGLINGD0L/RgNCw0LLQu9GP0LvQvtGB0Ywg0YLQvtC70YzQutC+INC70L7QutCw0LvRjNC90L7QuSDRhNC40LfQuNC60L7QuVxuICAgIH07XG4gICAgb2JqZWN0c1tcInRlc3Rfc3BoZXJlXCJdID0gdGVzdFNwaGVyZU9iajtcblxuICAgIHJldHVybiB0ZXN0U3BoZXJlT2JqO1xufSIsIi8vIG5ldHdvcmsuanNcbmltcG9ydCB7IG9iamVjdHMsIGNyZWF0ZU1lc2hBbmRCb2R5Rm9yT2JqZWN0IH0gZnJvbSAnLi9vYmplY3RzJztcbmltcG9ydCB7IGFwcGx5SW1wdWxzZVRvU3BoZXJlIH0gZnJvbSAnLi9waHlzaWNzJztcblxubGV0IHdzID0gbnVsbDtcblxuZnVuY3Rpb24gaGFuZGxlTWVzc2FnZShkYXRhKSB7ICAgICAgXG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGRhdGEudHlwZSA9PT0gXCJjcmVhdGVcIiAmJiBkYXRhLmlkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltXU10g0J7QsdGA0LDQsdC+0YLQutCwIGNyZWF0ZSDRgdC+0L7QsdGJ0LXQvdC40Y8g0LTQu9GPIGlkOlwiLCBkYXRhLmlkKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0KHQvtC30LTQsNC10Lwg0L7QsdGK0LXQutGCINC4INC00L7QsdCw0LLQu9GP0LXQvCDQtdCz0L4g0LIg0YHQv9C40YHQvtC6INC+0LHRitC10LrRgtC+0LJcbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IGNyZWF0ZU1lc2hBbmRCb2R5Rm9yT2JqZWN0KGRhdGEpO1xuICAgICAgICAgICAgb2JqLnBoeXNpY3NCeSA9IGRhdGEucGh5c2ljc19ieSB8fCBcImJvdGhcIjsgLy8g0KPQsdC10LTQuNGC0LXRgdGMLCDRh9GC0L4g0YHQstC+0LnRgdGC0LLQviDRg9GB0YLQsNC90LDQstC70LjQstCw0LXRgtGB0Y9cbiAgICAgICAgICAgIG9iamVjdHNbZGF0YS5pZF0gPSBvYmo7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbV1NdINCe0LHRitC10LrRgiAke2RhdGEuaWR9INGB0L7Qt9C00LDQvSDRgSBwaHlzaWNzQnk6ICR7b2JqLnBoeXNpY3NCeX1gKTsgLy8g0JvQvtCz0LjRgNC+0LLQsNC90LjQtSDRg9GB0YLQsNC90L7QstC70LXQvdC90L7Qs9C+INGB0LLQvtC50YHRgtCy0LBcbiAgICAgICAgfSBcbiAgICAgICAgZWxzZSBpZiAoZGF0YS50eXBlID09PSBcInVwZGF0ZVwiICYmIGRhdGEuaWQgJiYgb2JqZWN0c1tkYXRhLmlkXSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbV1NdINCe0LHRgNCw0LHQvtGC0LrQsCB1cGRhdGUg0YHQvtC+0LHRidC10L3QuNGPINC00LvRjyBpZDpcIiwgZGF0YS5pZCk7XG4gICAgICAgICAgICBjb25zdCBvYmogPSBvYmplY3RzW2RhdGEuaWRdO1xuICAgICAgICAgICAgb2JqLnNlcnZlclBvcyA9IHtcbiAgICAgICAgICAgICAgICB4OiBkYXRhLnggfHwgMCxcbiAgICAgICAgICAgICAgICB5OiBkYXRhLnkgfHwgMCxcbiAgICAgICAgICAgICAgICB6OiBkYXRhLnogfHwgMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV1NdINCe0YjQuNCx0LrQsCDQv9GA0Lgg0L7QsdGA0LDQsdC+0YLQutC1INGB0L7QvtCx0YnQtdC90LjRjzpcIiwgZXJyb3IpO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dTXSDQodGC0LXQuiDQstGL0LfQvtCy0L7QsjpcIiwgZXJyb3Iuc3RhY2spO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlS2V5RG93bihlKSB7XG4gICAgaWYgKCF3cyB8fCB3cy5yZWFkeVN0YXRlICE9PSBXZWJTb2NrZXQuT1BFTikgcmV0dXJuO1xuXG4gICAgbGV0IGNtZCA9IFwiXCI7XG4gICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6IGNtZCA9IFwiTEVGVFwiOyBicmVhaztcbiAgICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjogY21kID0gXCJSSUdIVFwiOyBicmVhaztcbiAgICAgICAgY2FzZSBcIkFycm93VXBcIjogY21kID0gXCJVUFwiOyBicmVhaztcbiAgICAgICAgY2FzZSBcIkFycm93RG93blwiOiBjbWQgPSBcIkRPV05cIjsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCIgXCI6IGNtZCA9IFwiU1BBQ0VcIjsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICB3cy5zZW5kKEpTT04uc3RyaW5naWZ5KHsgdHlwZTogXCJjbWRcIiwgY21kIH0pKTtcbiAgICAgICAgYXBwbHlJbXB1bHNlVG9TcGhlcmUoY21kLCBvYmplY3RzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dTXSDQntGI0LjQsdC60LAg0L7RgtC/0YDQsNCy0LrQuDpcIiwgZXJyb3IpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXROZXR3b3JrKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiW1dTXSDQndCw0YfQsNC70L4g0LjQvdC40YbQuNCw0LvQuNC30LDRhtC40LggV2ViU29ja2V0XCIpO1xuICAgICAgICB3cyA9IG5ldyBXZWJTb2NrZXQoXCJ3czovL2xvY2FsaG9zdDo4MDgwL3dzXCIpO1xuICAgICAgICBcbiAgICAgICAgd3Mub25vcGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbV1NdIGNvbm5lY3RlZFwiKTtcbiAgICAgICAgICAgIC8vINCe0YLQv9GA0LDQstC40Lwg0YLQtdGB0YLQvtCy0L7QtSDRgdC+0L7QsdGJ0LXQvdC40LVcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgd3Muc2VuZChKU09OLnN0cmluZ2lmeSh7IHR5cGU6IFwicGluZ1wiIH0pKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltXU10g0J7RgtC/0YDQsNCy0LvQtdC90L4g0YLQtdGB0YLQvtCy0L7QtSDRgdC+0L7QsdGJ0LXQvdC40LVcIik7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIltXU10g0J7RiNC40LHQutCwINC+0YLQv9GA0LDQstC60Lgg0YLQtdGB0YLQvtCy0L7Qs9C+INGB0L7QvtCx0YnQtdC90LjRjzpcIiwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgd3Mub25tZXNzYWdlID0gKGV2dCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShldnQuZGF0YSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ9Cd0LXQstC10YDQvdGL0Lkg0YTQvtGA0LzQsNGCINC00LDQvdC90YvRhScpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGhhbmRsZU1lc3NhZ2UoZGF0YSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV1NdINCf0L7Qu9C90LDRjyDQvtGI0LjQsdC60LA6XCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dTXSDQodGC0LXQuiDQstGL0LfQvtCy0L7QsjpcIiwgZXJyb3Iuc3RhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHdzLm9uZXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV1NdIFdlYlNvY2tldCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIltXU10g0JTQtdGC0LDQu9C4INC+0YjQuNCx0LrQuDpcIiwge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgdHlwZTogZXJyb3IudHlwZSxcbiAgICAgICAgICAgICAgICBldmVudFBoYXNlOiBlcnJvci5ldmVudFBoYXNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB3cy5vbmNsb3NlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltXU10g0KHQvtC10LTQuNC90LXQvdC40LUg0LfQsNC60YDRi9GC0L46XCIsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBldmVudC5jb2RlLFxuICAgICAgICAgICAgICAgIHJlYXNvbjogZXZlbnQucmVhc29uLFxuICAgICAgICAgICAgICAgIHdhc0NsZWFuOiBldmVudC53YXNDbGVhblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgaGFuZGxlS2V5RG93bik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIltXU10g0J7RiNC40LHQutCwINC/0YDQuCDRgdC+0LfQtNCw0L3QuNC4IFdlYlNvY2tldDpcIiwgZXJyb3IpO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dTXSDQodGC0LXQuiDQstGL0LfQvtCy0L7QsjpcIiwgZXJyb3Iuc3RhY2spO1xuICAgIH1cbn0iLCIvLyBpbmRleC5qc1xuaW1wb3J0IHsgaW5pdFNjZW5lLCBzY2VuZSwgY2FtZXJhLCByZW5kZXJlciB9IGZyb20gJy4vc2NlbmUnO1xuaW1wb3J0IHsgaW5pdEFtbW8sIHN0ZXBQaHlzaWNzLCB1cGRhdGVQaHlzaWNzT2JqZWN0cywgYXBwbHlJbXB1bHNlVG9TcGhlcmUgfSBmcm9tICcuL3BoeXNpY3MnO1xuaW1wb3J0IHsgaW5pdE5ldHdvcmsgfSBmcm9tICcuL25ldHdvcmsnO1xuaW1wb3J0IHsgb2JqZWN0cywgZGVidWdQaHlzaWNzV29ybGQsIGNyZWF0ZVRlc3RTcGhlcmUgfSBmcm9tICcuL29iamVjdHMnO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5mdW5jdGlvbiBhbmltYXRlKCkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcblxuICAgIC8vINCS0YvQv9C+0LvQvdGP0LXQvCDRiNCw0LMg0YTQuNC30LjRh9C10YHQutC+0Lkg0YHQuNC80YPQu9GP0YbQuNC4ICjQvdCw0L/RgNC40LzQtdGALCAxLzYwINGB0LXQutGD0L3QtNGLKVxuICAgIHN0ZXBQaHlzaWNzKDEgLyA2MCk7XG4gICAgdXBkYXRlUGh5c2ljc09iamVjdHMob2JqZWN0cyk7XG5cbiAgICAvLyDQn9GA0LjQvNC10YAg0L7QsdC90L7QstC70LXQvdC40Y8g0LrQsNC80LXRgNGLOiDRgdC70LXQtNC40Lwg0LfQsCDQv9C10YDQstGL0Lwg0L3QsNC50LTQtdC90L3Ri9C8INGI0LDRgNC+0LxcbiAgICBsZXQgdGFyZ2V0T2JqZWN0ID0gbnVsbDtcbiAgICBmb3IgKGxldCBpZCBpbiBvYmplY3RzKSB7XG4gICAgICAgIGxldCBvYmogPSBvYmplY3RzW2lkXTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgb2JqICYmXG4gICAgICAgICAgICBvYmoubWVzaCAmJlxuICAgICAgICAgICAgb2JqLm1lc2guZ2VvbWV0cnkgJiZcbiAgICAgICAgICAgIG9iai5tZXNoLmdlb21ldHJ5LnR5cGUgPT09IFwiU3BoZXJlR2VvbWV0cnlcIlxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRhcmdldE9iamVjdCA9IG9iajtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0YXJnZXRPYmplY3QpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0UG9zID0gdGFyZ2V0T2JqZWN0Lm1lc2gucG9zaXRpb247XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDUwLCAxMDApO1xuICAgICAgICBjb25zdCBjYW1lcmFUYXJnZXQgPSB0YXJnZXRQb3MuY2xvbmUoKS5hZGQob2Zmc2V0KTtcblxuICAgICAgICBjYW1lcmEucG9zaXRpb24ubGVycChjYW1lcmFUYXJnZXQsIDAuMSk7XG4gICAgICAgIGNhbWVyYS5sb29rQXQodGFyZ2V0UG9zKTtcbiAgICB9XG5cbiAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgIGNvbnNvbGUubG9nKFwiU3RhcnRcIilcbiAgICBpbml0U2NlbmUoKTtcbiAgICB0cnkge1xuICAgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0L3QtdCx0L7Qu9GM0YjRg9GOINC30LDQtNC10YDQttC60YMg0L/QtdGA0LXQtCDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQtdC5XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCA1MDApKTtcbiAgICAgICAgYXdhaXQgaW5pdEFtbW8oKTtcbiAgICAgICAgLy8g0KHQvtC30LTQsNC10Lwg0YLQtdGB0YLQvtCy0YPRjiDRgdGE0LXRgNGDINC/0L7RgdC70LUg0LjQvdC40YbQuNCw0LvQuNC30LDRhtC40LggQW1tb1xuICAgICAgICBjcmVhdGVUZXN0U3BoZXJlKCk7XG4gICAgICAgIGluaXROZXR3b3JrKCk7XG4gICAgICAgIGFuaW1hdGUoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwi0J7RiNC40LHQutCwINC/0YDQuCDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQuCBBbW1vLmpzOlwiLCBlcnJvcik7XG4gICAgfVxufVxuXG5zdGFydCgpOyJdLCJuYW1lcyI6WyJUSFJFRSIsInNjZW5lIiwiY2FtZXJhIiwicmVuZGVyZXIiLCJpbml0U2NlbmUiLCJjb25zb2xlIiwibG9nIiwiU2NlbmUiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInBvc2l0aW9uIiwic2V0IiwibG9va0F0IiwiV2ViR0xSZW5kZXJlciIsImFudGlhbGlhcyIsInNldFNpemUiLCJkb2N1bWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImRvbUVsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwib25XaW5kb3dSZXNpemUiLCJhbWJpZW50IiwiQW1iaWVudExpZ2h0IiwiYWRkIiwiZGlyZWN0aW9uYWwiLCJEaXJlY3Rpb25hbExpZ2h0IiwiYXNwZWN0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJlIiwidCIsInIiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJuIiwiaGFzT3duUHJvcGVydHkiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImkiLCJTeW1ib2wiLCJhIiwiaXRlcmF0b3IiLCJjIiwiYXN5bmNJdGVyYXRvciIsInUiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIndyYXAiLCJHZW5lcmF0b3IiLCJjcmVhdGUiLCJDb250ZXh0IiwibWFrZUludm9rZU1ldGhvZCIsInRyeUNhdGNoIiwidHlwZSIsImFyZyIsImNhbGwiLCJoIiwibCIsImYiLCJzIiwieSIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJwIiwiZCIsImdldFByb3RvdHlwZU9mIiwidiIsInZhbHVlcyIsImciLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiX2ludm9rZSIsIkFzeW5jSXRlcmF0b3IiLCJpbnZva2UiLCJfdHlwZW9mIiwicmVzb2x2ZSIsIl9fYXdhaXQiLCJ0aGVuIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJFcnJvciIsImRvbmUiLCJtZXRob2QiLCJkZWxlZ2F0ZSIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsIlR5cGVFcnJvciIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInB1c2giLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXNOYU4iLCJsZW5ndGgiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsImtleXMiLCJyZXZlcnNlIiwicG9wIiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJ2YWwiLCJoYW5kbGUiLCJjb21wbGV0ZSIsImZpbmlzaCIsIl9jYXRjaCIsImRlbGVnYXRlWWllbGQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJfYXN5bmNUb0dlbmVyYXRvciIsImFyZ3VtZW50cyIsImFwcGx5IiwiX25leHQiLCJfdGhyb3ciLCJsb2NhbFBoeXNpY3NXb3JsZCIsImFtbW9Qcm9taXNlIiwiaW5pdEFtbW8iLCJfaW5pdEFtbW8iLCJfY2FsbGVlIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInJlamVjdCIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJzcmMiLCJvbmxvYWQiLCJBbW1vIiwiQW1tb0xpYiIsImNvbGxpc2lvbkNvbmZpZ3VyYXRpb24iLCJidERlZmF1bHRDb2xsaXNpb25Db25maWd1cmF0aW9uIiwiZGlzcGF0Y2hlciIsImJ0Q29sbGlzaW9uRGlzcGF0Y2hlciIsImJyb2FkcGhhc2UiLCJidERidnRCcm9hZHBoYXNlIiwic29sdmVyIiwiYnRTZXF1ZW50aWFsSW1wdWxzZUNvbnN0cmFpbnRTb2x2ZXIiLCJidERpc2NyZXRlRHluYW1pY3NXb3JsZCIsInNldEdyYXZpdHkiLCJidFZlY3RvcjMiLCJvbmVycm9yIiwiZXJyb3IiLCJzdGVwUGh5c2ljcyIsImRlbHRhVGltZSIsIndhcm4iLCJzdGVwU2ltdWxhdGlvbiIsInVwZGF0ZVBoeXNpY3NPYmplY3RzIiwib2JqZWN0cyIsImlkIiwib2JqIiwibWVzaCIsImNvbmNhdCIsInBoeXNpY3NCeSIsIm9iamVjdF90eXBlIiwidHJhbnMiLCJidFRyYW5zZm9ybSIsImdldE1vdGlvblN0YXRlIiwiZ2V0V29ybGRUcmFuc2Zvcm0iLCJsb2NYIiwiZ2V0T3JpZ2luIiwieCIsImxvY1kiLCJsb2NaIiwieiIsInF4IiwiZ2V0Um90YXRpb24iLCJxeSIsInF6IiwicXciLCJ3IiwicXVhdGVybmlvbiIsInNlcnZlclBvcyIsImR4IiwiZHkiLCJkeiIsImFscGhhIiwibmV3WCIsIm5ld1kiLCJuZXdaIiwiYXBwbHlJbXB1bHNlVG9TcGhlcmUiLCJjbWQiLCJpbXB1bHNlIiwic2V0VmFsdWUiLCJnZW9tZXRyeSIsImFjdGl2YXRlIiwiYXBwbHlDZW50cmFsSW1wdWxzZSIsInZlbG9jaXR5IiwiZ2V0TGluZWFyVmVsb2NpdHkiLCLQutC+0LzQsNC90LTQsCIsItC/0L7Qt9C40YbQuNGPIiwi0YHQutC+0YDQvtGB0YLRjCIsImRlc3Ryb3kiLCJjcmVhdGVNZXNoQW5kQm9keUZvck9iamVjdCIsImRhdGEiLCJjcmVhdGVUZXJyYWluTWVzaCIsImNyZWF0ZVBoeXNpY3NCb2R5Rm9yVGVycmFpbiIsImNyZWF0ZVNwaGVyZU1lc2giLCJjcmVhdGVQaHlzaWNzQm9keUZvclNwaGVyZSIsImNyZWF0ZVRyZWVNZXNoIiwiY3JlYXRlRGVmYXVsdE1lc2giLCJoZWlnaHRtYXBfdyIsImhlaWdodG1hcF9oIiwic2NhbGVYIiwic2NhbGVfeCIsInNjYWxlWiIsInNjYWxlX3oiLCJhbW1vSGVpZ2h0RGF0YSIsIl9tYWxsb2MiLCJwMiIsImoiLCJIRUFQRjMyIiwiaGVpZ2h0X2RhdGEiLCJzaGFwZSIsImJ0SGVpZ2h0ZmllbGRUZXJyYWluU2hhcGUiLCJtaW5faGVpZ2h0IiwibWF4X2hlaWdodCIsIlBIWV9GTE9BVCIsInNldExvY2FsU2NhbGluZyIsInNjYWxlX3kiLCJzZXRNYXJnaW4iLCJ0cmFuc2Zvcm0iLCJzZXRJZGVudGl0eSIsInNldE9yaWdpbiIsIm1hc3MiLCJsb2NhbEluZXJ0aWEiLCJtb3Rpb25TdGF0ZSIsImJ0RGVmYXVsdE1vdGlvblN0YXRlIiwicmJJbmZvIiwiYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvIiwiYnRSaWdpZEJvZHkiLCJURVJSQUlOX0dST1VQIiwiU1BIRVJFX0dST1VQIiwiYWRkUmlnaWRCb2R5Iiwi0YDQsNC30LzQtdGA0YsiLCLQvNCw0YHRiNGC0LDQsSIsItC80LjQvdCS0YvRgdC+0YLQsCIsItC80LDQutGB0JLRi9GB0L7RgtCwIiwiZ2VvIiwiUGxhbmVHZW9tZXRyeSIsInJvdGF0ZVgiLCJNYXRoIiwiUEkiLCJ2ZXJ0cyIsImF0dHJpYnV0ZXMiLCJhcnJheSIsIml4IiwiaXoiLCJmbG9vciIsImNvbXB1dGVWZXJ0ZXhOb3JtYWxzIiwiTWVzaCIsIk1lc2hMYW1iZXJ0TWF0ZXJpYWwiLCJjb2xvciIsInBhcnNlQ29sb3IiLCJ3aXJlZnJhbWUiLCJTcGhlcmVHZW9tZXRyeSIsInJhZGl1cyIsImdyb3VwIiwiR3JvdXAiLCJicmFuY2hlcyIsIkFycmF5IiwiaXNBcnJheSIsImJyYW5jaCIsImluZGV4Iiwic3RhcnRYIiwidW5kZWZpbmVkIiwic3RhcnRZIiwic3RhcnRaIiwiZW5kWCIsImVuZFkiLCJlbmRaIiwiYnJhbmNoR2VvIiwiQ3lsaW5kZXJHZW9tZXRyeSIsInJhZGl1c1RvcCIsInJhZGl1c0JvdHRvbSIsImJyYW5jaE1hdCIsIk1lc2hTdGFuZGFyZE1hdGVyaWFsIiwiYnJhbmNoTWVzaCIsIm1pZFgiLCJtaWRZIiwibWlkWiIsIlZlY3RvcjMiLCJzY2FsZSIsIkJveEdlb21ldHJ5IiwiYnRTcGhlcmVTaGFwZSIsImNhbGN1bGF0ZUxvY2FsSW5lcnRpYSIsImNvbG9yU3RyIiwic3RhcnRzV2l0aCIsInBhcnNlSW50IiwiY3JlYXRlVGVzdFNwaGVyZSIsIm1hdGVyaWFsIiwic2V0QWN0aXZhdGlvblN0YXRlIiwic2V0RnJpY3Rpb24iLCJzZXRSb2xsaW5nRnJpY3Rpb24iLCJzZXRSZXN0aXR1dGlvbiIsInRlc3RTcGhlcmVPYmoiLCJ3cyIsImhhbmRsZU1lc3NhZ2UiLCJwaHlzaWNzX2J5Iiwic3RhY2siLCJoYW5kbGVLZXlEb3duIiwicmVhZHlTdGF0ZSIsIldlYlNvY2tldCIsIk9QRU4iLCJrZXkiLCJzZW5kIiwiSlNPTiIsInN0cmluZ2lmeSIsImluaXROZXR3b3JrIiwib25vcGVuIiwib25tZXNzYWdlIiwiZXZ0IiwicGFyc2UiLCJtZXNzYWdlIiwiZXZlbnRQaGFzZSIsIm9uY2xvc2UiLCJldmVudCIsImNvZGUiLCJyZWFzb24iLCJ3YXNDbGVhbiIsImRlYnVnUGh5c2ljc1dvcmxkIiwiYW5pbWF0ZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRhcmdldE9iamVjdCIsInRhcmdldFBvcyIsIm9mZnNldCIsImNhbWVyYVRhcmdldCIsImNsb25lIiwibGVycCIsInJlbmRlciIsInN0YXJ0IiwiX3N0YXJ0Iiwic2V0VGltZW91dCIsInQwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///251\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var B=__webpack_module_cache__[Q];if(void 0!==B)return B.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,B,U,F)=>{if(!B){var s=1/0;for(E=0;E<deferred.length;E++){for(var[B,U,F]=deferred[E],L=!0,C=0;C<B.length;C++)(!1&F||s>=F)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](B[C])))?B.splice(C--,1):(L=!1,F<s&&(s=F));if(L){deferred.splice(E--,1);var t=U();void 0!==t&&(Q=t)}}return Q}F=F||0;for(var E=deferred.length;E>0&&deferred[E-1][2]>F;E--)deferred[E]=deferred[E-1];deferred[E]=[B,U,F]},__webpack_require__.d=(Q,B)=>{for(var U in B)__webpack_require__.o(B,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:B[U]})},__webpack_require__.o=(Q,B)=>Object.prototype.hasOwnProperty.call(Q,B),(()=>{var Q={792:0};__webpack_require__.O.j=B=>0===Q[B];var B=(B,U)=>{var F,s,[L,C,t]=U,E=0;if(L.some((B=>0!==Q[B]))){for(F in C)__webpack_require__.o(C,F)&&(__webpack_require__.m[F]=C[F]);if(t)var I=t(__webpack_require__)}for(B&&B(U);E<L.length;E++)s=L[E],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(I)},U=self.webpackChunkweb=self.webpackChunkweb||[];U.forEach(B.bind(null,0)),U.push=B.bind(null,U.push.bind(U))})();var __webpack_exports__=__webpack_require__.O(void 0,[233],(()=>__webpack_require__(251)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();