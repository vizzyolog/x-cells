(()=>{var __webpack_modules__={617:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.core.js\nvar three_core = __webpack_require__(922);\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(437);\n;// ./src/scene.js\n// scene.js\n\nvar scene_scene, renderer;\nvar directionalLight; // Экспортируем свет для доступности в других модулях\n\nfunction initScene() {\n  console.log("try to initScene");\n  scene_scene = new three_core/* Scene */.Z58();\n  scene_scene.background = new three_core/* Color */.Q1f(0x88ccff);\n  renderer = new three_module/* WebGLRenderer */.JeP({\n    antialias: true\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  // Включаем поддержку теней\n  renderer.shadowMap.enabled = true;\n  renderer.shadowMap.type = three_core/* PCFSoftShadowMap */.Wk7;\n  document.body.appendChild(renderer.domElement);\n  window.addEventListener(\'resize\', onWindowResize);\n\n  // Настраиваем освещение\n  var ambient = new three_core/* AmbientLight */.$p8(0xffffff, 0.8);\n  scene_scene.add(ambient);\n\n  // Основной направленный свет с тенями\n  directionalLight = new three_core/* DirectionalLight */.ZyN(0xffffff, 1);\n  directionalLight.position.set(50, 100, 50);\n  directionalLight.castShadow = true;\n\n  // Настраиваем параметры теней для охвата большой области\n  directionalLight.shadow.camera.near = 0.1;\n  directionalLight.shadow.camera.far = 500;\n  directionalLight.shadow.camera.left = -100;\n  directionalLight.shadow.camera.right = 100;\n  directionalLight.shadow.camera.top = 100;\n  directionalLight.shadow.camera.bottom = -100;\n  directionalLight.shadow.mapSize.width = 512; // Большее разрешение для лучшего качества\n  directionalLight.shadow.mapSize.height = 512;\n  // directionalLight.shadow.bias = -0.0001; // Уменьшаем артефакты тени\n  scene_scene.add(directionalLight);\n\n  // Добавляем вспомогательный свет для подсветки теней\n  var fillLight = new three_core/* DirectionalLight */.ZyN(0xffffff, 1);\n  fillLight.position.set(-50, 50, -50);\n  scene_scene.add(fillLight);\n\n  // Можно добавить помощник для отладки теней (раскомментируйте при необходимости)\n  // const helper = new THREE.CameraHelper(directionalLight.shadow.camera);\n  // scene.add(helper);\n}\nfunction onWindowResize() {\n  // Обработка изменения размера окна только для рендерера\n  // (камера обрабатывается в camera.js)\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\n// Добавляем функцию для обновления положения источника света относительно камеры, как солнце\nfunction updateShadowCamera(camera) {\n  if (!directionalLight || !camera) return;\n\n  // Получаем направление взгляда камеры\n  var cameraDirection = new three_core/* Vector3 */.Pq0();\n  camera.getWorldDirection(cameraDirection);\n\n  // Создаем позицию "солнца" относительно камеры\n  // Поднимаем "солнце" на 200 единиц вверх от позиции камеры и смещаем немного в сторону и назад\n  var sunOffset = new three_core/* Vector3 */.Pq0(100, 200, -50);\n  var sunPosition = camera.position.clone().add(sunOffset);\n\n  // Обновляем позицию света\n  directionalLight.position.copy(sunPosition);\n\n  // Определяем точку, куда направлен свет - перед камерой на расстоянии 100 единиц\n  var targetOffset = cameraDirection.clone().multiplyScalar(100);\n  var targetPosition = camera.position.clone().add(targetOffset);\n  directionalLight.target.position.copy(targetPosition);\n\n  // Обновляем матрицу трансформации цели света\n  directionalLight.target.updateMatrixWorld();\n\n  // Обновляем матрицу камеры теней\n  directionalLight.shadow.camera.updateProjectionMatrix();\n}\n\n// EXTERNAL MODULE: ./node_modules/events/events.js\nvar events = __webpack_require__(7);\n;// ./src/network.js\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// network.js\n\n\nvar ws = null;\nvar physicsStarted = false;\nvar pendingObjects = [];\n\n// Добавляем переменные для работы с временными метками\nvar serverTimeOffset = 0; // Разница между серверным и клиентским временем\nvar serverTimeOffsetSamples = []; // Хранение образцов для вычисления среднего значения\nvar MAX_OFFSET_SAMPLES = 10; // Максимальное количество образцов\nvar pingHistory = []; // История пингов для анализа\nvar MAX_PING_SAMPLES = 10; // Максимальное количество образцов пинга\n\n// Глобальная конфигурация физики\nvar physicsConfig = null;\n\n// Функция для получения текущей конфигурации физики\nfunction getPhysicsConfig() {\n  return physicsConfig;\n}\n\n// Вычисляем текущее серверное время на основе смещения\nfunction estimateServerTime() {\n  return Date.now() + serverTimeOffset;\n}\n\n// Обновление смещения времени сервера\nfunction updateServerTimeOffset(serverTime) {\n  var now = Date.now();\n  var currentOffset = serverTime - now;\n\n  // Добавляем новый образец\n  serverTimeOffsetSamples.push(currentOffset);\n\n  // Ограничиваем количество образцов\n  if (serverTimeOffsetSamples.length > MAX_OFFSET_SAMPLES) {\n    serverTimeOffsetSamples.shift();\n  }\n\n  // Используем медиану вместо среднего для устойчивости к выбросам\n  var sortedOffsets = [].concat(serverTimeOffsetSamples).sort(function (a, b) {\n    return a - b;\n  });\n  var medianOffset = sortedOffsets[Math.floor(sortedOffsets.length / 2)];\n  serverTimeOffset = medianOffset;\n\n  // Обновляем отображение времени\n  updateTimeDisplay();\n  console.log("[Time] \\u0421\\u0438\\u043D\\u0445\\u0440\\u043E\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F \\u0432\\u0440\\u0435\\u043C\\u0435\\u043D\\u0438: \\u0441\\u043C\\u0435\\u0449\\u0435\\u043D\\u0438\\u0435 = ".concat(medianOffset, " \\u043C\\u0441"));\n}\n\n// Добавляем функцию для обновления отображения пинга на экране\nfunction updatePingDisplay(pingValue) {\n  var pingDisplay = document.getElementById(\'ping-display\');\n  if (pingDisplay) {\n    pingDisplay.textContent = "\\u041F\\u0438\\u043D\\u0433: ".concat(pingValue.toFixed(0), " \\u043C\\u0441");\n\n    // Меняем цвет в зависимости от качества соединения\n    if (pingValue < 50) {\n      pingDisplay.style.backgroundColor = \'rgba(0, 128, 0, 0.5)\'; // Зеленый - хороший пинг\n    } else if (pingValue < 100) {\n      pingDisplay.style.backgroundColor = \'rgba(255, 165, 0, 0.5)\'; // Оранжевый - средний пинг\n    } else {\n      pingDisplay.style.backgroundColor = \'rgba(255, 0, 0, 0.5)\'; // Красный - плохой пинг\n    }\n  }\n}\n\n// Функция для обновления серверного времени на экране\nfunction updateTimeDisplay() {\n  var serverTimeElem = document.getElementById(\'server-time\');\n  var timeOffsetElem = document.getElementById(\'time-offset\');\n  if (serverTimeElem && timeOffsetElem) {\n    var estServerTime = estimateServerTime();\n    var serverDate = new Date(estServerTime);\n    serverTimeElem.textContent = "\\u0412\\u0440\\u0435\\u043C\\u044F \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430: ".concat(serverDate.toLocaleTimeString());\n    timeOffsetElem.textContent = "\\u0421\\u043C\\u0435\\u0449\\u0435\\u043D\\u0438\\u0435: ".concat(serverTimeOffset.toFixed(0), " \\u043C\\u0441");\n  }\n}\n\n// Создаем интервал для периодического обновления времени\nvar timeDisplayInterval;\nvar serverDelay = 0;\nfunction updateServerDelayDisplay(delay) {\n  var delayDisplay = document.getElementById(\'server-delay-display\');\n  if (delayDisplay) {\n    delayDisplay.textContent = "\\u0417\\u0430\\u0434\\u0435\\u0440\\u0436\\u043A\\u0430 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430: ".concat(delay.toFixed(0), " \\u043C\\u0441");\n  }\n}\nfunction handleMessage(data) {\n  try {\n    // Если сообщение содержит временную метку сервера, обновляем смещение\n    if (data.server_time) {\n      console.log("data.server_time: ", data.server_time);\n      updateServerTimeOffset(data.server_time);\n    }\n\n    // Обрабатываем конфигурацию физики\n    if (data.type === "physics_config") {\n      console.log("[Network] Получена конфигурация физики:", data.config);\n      physicsConfig = data.config;\n\n      // Применяем конфигурацию к физике на клиенте\n      applyPhysicsConfig(physicsConfig);\n      return; // Прекращаем обработку этого сообщения\n    }\n\n    // Обрабатываем pong-сообщения для синхронизации времени\n    if (data.type === "pong") {\n      var now = Date.now();\n      var roundTripTime = now - data.client_time;\n\n      // Добавляем измерение пинга в историю\n      pingHistory.push(roundTripTime);\n      if (pingHistory.length > MAX_PING_SAMPLES) {\n        pingHistory.shift();\n      }\n\n      // Вычисляем средний пинг\n      var avgPing = pingHistory.reduce(function (sum, ping) {\n        return sum + ping;\n      }, 0) / pingHistory.length;\n\n      // Обновляем отображение пинга на экране\n      updatePingDisplay(avgPing);\n      console.log("[WS] \\u041F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D pong, RTT: ".concat(roundTripTime, "ms, \\u0421\\u0440\\u0435\\u0434\\u043D\\u0438\\u0439 RTT: ").concat(avgPing.toFixed(2), "ms"));\n\n      // Обновляем смещение серверного времени с учетом RTT/2 (предполагаем симметричную задержку)\n      updateServerTimeOffset(data.server_time + roundTripTime / 2);\n      return; // Прекращаем обработку этого сообщения\n    }\n    if (data.type === "update") {\n      // Проверяем, содержит ли update сообщение данные объекта\n      if (data.objects || data.id) {\n        // Отладочная информация\n        console.log(\'[WS] Получено update сообщение:\', data.id ? "id: ".concat(data.id) : "\\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u043E\\u0432: ".concat(Object.keys(data.objects).length));\n\n        // Передаем данные в функцию обработки обновлений\n        receiveObjectUpdate(data);\n      } else {\n        console.warn(\'[WS] Получено update сообщение без объектов:\', data);\n      }\n    } else if (data.type === "create" && data.id) {\n      console.log("[WS] Получено сообщение о создании объекта:", data.id, "в координатах:", {\n        x: data.x || 0,\n        y: data.y || 0,\n        z: data.z || 0\n      }, "время сервера:", data.server_time);\n\n      // Создаем объект и добавляем его в список объектов\n      var obj = createMeshAndBodyForObject(data);\n\n      // Проверяем, что объект был успешно создан\n      if (obj) {\n        obj.physicsBy = data.physics_by || "both";\n        obj.serverPos = {\n          x: data.x || 0,\n          y: data.y || 0,\n          z: data.z || 0\n        };\n        // Добавляем временную метку сервера\n        obj.serverCreationTime = data.server_time;\n        obj.clientCreationTime = Date.now();\n        objects_objects[data.id] = obj;\n\n        // Запоминаем точное время создания объекта для дальнейшей синхронизации\n        obj.createdAt = Date.now();\n        console.log("[WS] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, " \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D \\u0441 physicsBy: ").concat(obj.physicsBy));\n\n        // Если физический мир активен, активируем тело\n        if (obj.body && physics_localPhysicsWorld) {\n          if (!physicsStarted) {\n            // Добавляем в список ожидающих, если физика еще не запущена\n            pendingObjects.push(data.id);\n            console.log("[WS] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, " \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D \\u0432 \\u0441\\u043F\\u0438\\u0441\\u043E\\u043A \\u043E\\u0436\\u0438\\u0434\\u0430\\u043D\\u0438\\u044F - \\u0444\\u0438\\u0437\\u0438\\u043A\\u0430 \\u0435\\u0449\\u0435 \\u043D\\u0435 \\u0430\\u043A\\u0442\\u0438\\u0432\\u043D\\u0430"));\n          } else {\n            // Активируем тело сразу\n            obj.body.activate(true);\n            // Устанавливаем начальную позицию точно по серверным координатам\n            if (obj.serverPos) {\n              try {\n                // Проверяем наличие Ammo\n                if (typeof window.Ammo === \'undefined\') {\n                  console.error(\'[WS] window.Ammo не определен при попытке телепортации объекта\');\n                  return;\n                }\n                var transform = new window.Ammo.btTransform();\n                obj.body.getMotionState().getWorldTransform(transform);\n                transform.setOrigin(new window.Ammo.btVector3(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z));\n                obj.body.getMotionState().setWorldTransform(transform);\n                obj.mesh.position.set(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z);\n                console.log("[WS] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, " \\u0442\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D \\u0432 \\u0438\\u0441\\u0445\\u043E\\u0434\\u043D\\u044B\\u0435 \\u043A\\u043E\\u043E\\u0440\\u0434\\u0438\\u043D\\u0430\\u0442\\u044B:"), {\n                  x: obj.serverPos.x,\n                  y: obj.serverPos.y,\n                  z: obj.serverPos.z\n                });\n\n                // Очищаем память\n                window.Ammo.destroy(transform);\n              } catch (error) {\n                console.error("[WS] \\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0442\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0430\\u0446\\u0438\\u0438 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(data.id, ":"), error);\n              }\n            }\n          }\n        }\n      } else {\n        console.error("[WS] \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0441\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, ", \\u0442\\u0438\\u043F: ").concat(data.object_type));\n      }\n    } else if (data.type === "cmd_ack") {\n      // Обрабатываем подтверждение команды с временной меткой\n      if (data.client_time && data.server_time) {\n        var _roundTripTime = Date.now() - data.client_time;\n\n        // Добавляем измерение пинга в историю\n        pingHistory.push(_roundTripTime);\n        if (pingHistory.length > MAX_PING_SAMPLES) {\n          pingHistory.shift();\n        }\n\n        // Вычисляем средний пинг\n        var _avgPing = pingHistory.reduce(function (sum, ping) {\n          return sum + ping;\n        }, 0) / pingHistory.length;\n\n        // Обновляем отображение пинга на экране\n        updatePingDisplay(_avgPing);\n        console.log("[WS] \\u041F\\u043E\\u0434\\u0442\\u0432\\u0435\\u0440\\u0436\\u0434\\u0435\\u043D\\u0438\\u0435 \\u043A\\u043E\\u043C\\u0430\\u043D\\u0434\\u044B: ".concat(data.cmd, ", RTT: ").concat(_roundTripTime, "ms, \\u0421\\u0440\\u0435\\u0434\\u043D\\u0438\\u0439 RTT: ").concat(_avgPing.toFixed(2), "ms"));\n\n        // Обновляем смещение серверного времени с учетом RTT/2 (предполагаем симметричную задержку)\n        updateServerTimeOffset(data.server_time + _roundTripTime / 2);\n      }\n    }\n  } catch (error) {\n    console.error("[WS] Ошибка при обработке сообщения:", error);\n    console.error("[WS] Стек вызовов:", error.stack);\n  }\n}\nfunction handleKeyDown(e) {\n  if (!ws || ws.readyState !== WebSocket.OPEN) return;\n  var cmd = "";\n  var forceX = 0,\n    forceY = 0,\n    forceZ = 0;\n  switch (e.key) {\n    case "ArrowLeft":\n      cmd = "LEFT";\n      forceX = -5;\n      break;\n    case "ArrowRight":\n      cmd = "RIGHT";\n      forceX = 5;\n      break;\n    case "ArrowUp":\n      cmd = "UP";\n      forceZ = -5;\n      break;\n    case "ArrowDown":\n      cmd = "DOWN";\n      forceZ = 5;\n      break;\n    case " ":\n      cmd = "SPACE";\n      forceY = 10;\n      break;\n    default:\n      return;\n  }\n  try {\n    // Добавляем временную метку клиента к команде\n    var clientTime = Date.now();\n    var commandObj = {\n      type: "cmd",\n      cmd: cmd,\n      client_time: clientTime // Добавляем временную метку клиента\n    };\n    console.log("[WS] \\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430 \\u043A\\u043E\\u043C\\u0430\\u043D\\u0434\\u044B: ".concat(cmd, ", \\u0432\\u0440\\u0435\\u043C\\u044F \\u043A\\u043B\\u0438\\u0435\\u043D\\u0442\\u0430: ").concat(clientTime));\n    ws.send(JSON.stringify(commandObj));\n\n    // Применяем импульс локально ко всем объектам сфер\n    for (var id in objects_objects) {\n      var obj = objects_objects[id];\n      if (obj && obj.body && obj.mesh && obj.mesh.geometry && obj.mesh.geometry.type === "SphereGeometry") {\n        console.log("[WS] \\u041F\\u0440\\u0438\\u043C\\u0435\\u043D\\u044F\\u0435\\u043C \\u0438\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441 \\u043A \\u0441\\u0444\\u0435\\u0440\\u0435 ".concat(id, " \\u0441 physicsBy=").concat(obj.physicsBy));\n\n        // Вызываем функцию применения импульса с обновленными параметрами\n        applyImpulseToSphere(id, {\n          x: forceX,\n          y: forceY,\n          z: forceZ\n        }, 1.0);\n      }\n    }\n  } catch (error) {\n    console.error("[WS] Ошибка отправки:", error);\n  }\n}\nfunction initNetwork() {\n  return _initNetwork.apply(this, arguments);\n}\n\n// Функция для отправки ping-сообщения с временной меткой клиента\nfunction _initNetwork() {\n  _initNetwork = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log("[WS] Начало инициализации WebSocket");\n          ws = new WebSocket("ws://localhost:8080/ws");\n          ws.onopen = function () {\n            console.log("[WS] connected");\n            // Инициализируем индикатор пинга\n            updatePingDisplay(0);\n            // Обновляем информацию о времени\n            updateTimeDisplay();\n            // Запускаем интервал обновления времени\n            if (timeDisplayInterval) clearInterval(timeDisplayInterval);\n            timeDisplayInterval = setInterval(updateTimeDisplay, 1000);\n            // Отправим тестовое сообщение для синхронизации времени\n            sendPing();\n          };\n          ws.onmessage = function (evt) {\n            try {\n              var data = JSON.parse(evt.data);\n              if (!data || _typeof(data) !== \'object\') {\n                throw new Error(\'Неверный формат данных\');\n              }\n\n              // Если приходит сообщение с id и object_type, но без type - это объект создания\n              if (!data.type && data.id && data.object_type) {\n                console.log(\'[WS] Получен объект без type, считаем это create:\', data);\n                // Добавляем тип для совместимости с существующим кодом\n                data.type = "create";\n                // Обрабатываем как create\n                handleMessage(data);\n              }\n              // Обрабатываем update сообщения через нашу новую функцию\n              else if (data.type === "update" && data.id) {\n                receiveObjectUpdate(data);\n              } else if (data.type === "create" && data.id) {\n                // Оставляем существующую логику создания объектов\n                handleMessage(data);\n              } else if (data.type === "pong") {\n                // Обрабатываем pong сообщения для синхронизации времени\n                handleMessage(data);\n              } else {\n                // Обрабатываем другие типы сообщений, например "cmd_ack"\n                handleMessage(data);\n              }\n            } catch (error) {\n              console.error("[WS] Ошибка при обработке сообщения:", error);\n            }\n          };\n          ws.onerror = function (error) {\n            console.error("[WS] WebSocket error:", error);\n            console.error("[WS] Детали ошибки:", {\n              message: error.message,\n              type: error.type,\n              eventPhase: error.eventPhase\n            });\n          };\n          ws.onclose = function (event) {\n            console.log("[WS] Соединение закрыто:", {\n              code: event.code,\n              reason: event.reason,\n              wasClean: event.wasClean\n            });\n\n            // Останавливаем обновление времени при закрытии соединения\n            if (timeDisplayInterval) {\n              clearInterval(timeDisplayInterval);\n              timeDisplayInterval = null;\n            }\n          };\n          document.addEventListener("keydown", handleKeyDown);\n\n          // Запускаем периодическую синхронизацию времени\n          setInterval(sendPing, 10000); // Каждые 10 секунд\n          return _context.abrupt("return", ws);\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context["catch"](0);\n          console.error("[WS] Ошибка при создании WebSocket:", _context.t0);\n          console.error("[WS] Стек вызовов:", _context.t0.stack);\n        case 16:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 12]]);\n  }));\n  return _initNetwork.apply(this, arguments);\n}\nfunction sendPing() {\n  if (!ws || ws.readyState !== WebSocket.OPEN) return;\n  var clientTime = Date.now();\n  var pingObj = {\n    type: "ping",\n    client_time: clientTime\n  };\n  try {\n    ws.send(JSON.stringify(pingObj));\n    console.log("[WS] \\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D ping \\u0434\\u043B\\u044F \\u0441\\u0438\\u043D\\u0445\\u0440\\u043E\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u0438 \\u0432\\u0440\\u0435\\u043C\\u0435\\u043D\\u0438, \\u0432\\u0440\\u0435\\u043C\\u044F \\u043A\\u043B\\u0438\\u0435\\u043D\\u0442\\u0430: ".concat(clientTime));\n  } catch (error) {\n    console.error("[WS] Ошибка отправки ping:", error);\n  }\n}\n\n// Новая функция для запуска физики с задержкой\nfunction startPhysicsSimulation() {\n  physicsStarted = true;\n\n  // Активируем все ожидающие объекты\n  var _iterator = _createForOfIteratorHelper(pendingObjects),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var id = _step.value;\n      var obj = objects_objects[id];\n      if (obj && obj.body) {\n        // Активируем тело\n        obj.body.activate(true);\n\n        // Телепортируем к последним известным серверным координатам\n        if (obj.serverPos) {\n          var transform = new Ammo.btTransform();\n          obj.body.getMotionState().getWorldTransform(transform);\n          transform.setOrigin(new Ammo.btVector3(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z));\n          obj.body.getMotionState().setWorldTransform(transform);\n          obj.mesh.position.set(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z);\n          console.log("[Physics] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(id, " \\u0430\\u043A\\u0442\\u0438\\u0432\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D \\u0438 \\u0442\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D \\u0432 \\u043A\\u043E\\u043E\\u0440\\u0434\\u0438\\u043D\\u0430\\u0442\\u044B:"), {\n            x: obj.serverPos.x,\n            y: obj.serverPos.y,\n            z: obj.serverPos.z\n          });\n        }\n      }\n    }\n\n    // Очищаем список ожидающих\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  pendingObjects = [];\n  console.log("[Physics] Физика активирована, все ожидающие объекты обработаны");\n}\n\n// Экспортируем функции для доступа из других модулей\n\n;// ./src/gamepad.js\n\n\n\n// Константы для настройки поведения\nvar DEBUG_MODE = true; // Включает/выключает отладочные элементы (arrowHelper)\nvar MIN_ARROW_LENGTH = 10;\nvar MAX_ARROW_LENGTH = 50;\nvar SEND_INTERVAL = 50; // Уменьшаем интервал отправки до 50 мс для лучшей отзывчивости\nvar ARROW_HEIGHT_OFFSET = 2; // Смещение стрелки по высоте над игроком\nvar RAY_UPDATE_INTERVAL = 50; // Интервал обновления луча при движении камеры (мс)\nvar KEY_FORCE = 2.0; // Значительно увеличиваем силу импульса для клавиатурного управления\n\nvar arrowHelper;\nvar lastSentPosition = new three_core/* Vector3 */.Pq0();\nvar lastSendTime = 0;\nvar raycaster = new three_core/* Raycaster */.tBo();\nvar mouse = new three_core/* Vector2 */.I9Y();\nvar cameraLastPosition = new three_core/* Vector3 */.Pq0();\nvar lastRayUpdateTime = 0;\nvar lastIntersectPoint = new three_core/* Vector3 */.Pq0();\nvar isMouseActive = false; // Флаг активности мыши над игровой областью\n\n// Флаги для клавиатурного управления\nvar keys = {\n  w: false,\n  a: false,\n  s: false,\n  d: false\n};\n\n// Переменные для хранения направления\nvar currentDirection = new three_core/* Vector3 */.Pq0();\nvar directionNeedsUpdate = false;\nvar terrainMeshRef = null;\nvar playerMeshRef = null;\nvar cameraRef = null;\nvar socketRef = null;\nfunction getArrowDirection() {\n  return lastSentPosition.clone();\n}\nfunction initGamepad(camera, terrainMesh, playerMesh, socket, scene) {\n  // Сохраняем ссылки на объекты для использования в других функциях\n  terrainMeshRef = terrainMesh;\n  playerMeshRef = playerMesh;\n  cameraRef = camera;\n  socketRef = socket;\n  cameraLastPosition.copy(camera.position);\n\n  // Создаем и добавляем arrowHelper в сцену\n  arrowHelper = new three_core/* ArrowHelper */.E0M(new three_core/* Vector3 */.Pq0(0, 0, 1),\n  // Начальное направление\n  playerMesh.position,\n  // Начальная позиция\n  MIN_ARROW_LENGTH,\n  // Длина стрелки (начальная)\n  0xffff00 // Цвет стрелки\n  );\n\n  // Добавляем arrowHelper в сцену только если DEBUG_MODE включен\n  if (DEBUG_MODE) {\n    scene.add(arrowHelper);\n    console.log("ArrowHelper initialized and added to scene");\n  } else {\n    console.log("ArrowHelper initialized but hidden (DEBUG_MODE is off)");\n  }\n\n  // Добавляем обработчики событий мыши и клавиатуры\n  window.addEventListener(\'mousemove\', onMouseMove);\n  window.addEventListener(\'keydown\', onKeyDown);\n  window.addEventListener(\'keyup\', onKeyUp);\n\n  // Запускаем анимацию для обновления стрелки и обработки клавиатурного ввода\n  animate();\n  function animate() {\n    requestAnimationFrame(animate);\n\n    // Обновляем стрелку если нужно и если она видима\n    if (directionNeedsUpdate && DEBUG_MODE) {\n      updateArrowHelper(playerMesh);\n      directionNeedsUpdate = false;\n    }\n\n    // Проверяем, двигалась ли камера и нужно ли обновить луч\n    var now = Date.now();\n    if (isMouseActive && cameraRef && now - lastRayUpdateTime > RAY_UPDATE_INTERVAL) {\n      // Если камера движется и мышь активна над игровой областью\n      if (!cameraRef.position.equals(cameraLastPosition)) {\n        // Обновляем луч с последних координат мыши\n        updateRayFromLastMouse();\n        cameraLastPosition.copy(cameraRef.position);\n        lastRayUpdateTime = now;\n      }\n    }\n\n    // Обрабатываем клавиатурное управление\n    processKeyboardInput();\n  }\n  function processKeyboardInput() {\n    if (!playerMeshRef || !socketRef) return;\n\n    // Проверяем, если хотя бы одна клавиша нажата\n    if (keys.w || keys.a || keys.s || keys.d) {\n      // Создаем вектор направления на основе нажатых клавиш\n      var direction = new three_core/* Vector3 */.Pq0(0, 0, 0);\n      if (keys.w) direction.z -= 1;\n      if (keys.s) direction.z += 1;\n      if (keys.a) direction.x -= 1;\n      if (keys.d) direction.x += 1;\n\n      // Нормализуем направление, если оно не нулевое\n      if (direction.length() > 0) {\n        direction.normalize();\n\n        // Отправляем направление на сервер\n        if (Date.now() - lastSendTime > SEND_INTERVAL) {\n          // Получаем текущую конфигурацию физики\n          var physicsConfig = getPhysicsConfig();\n\n          // Используем множитель импульса из конфигурации, если она доступна\n          var keyForce = KEY_FORCE;\n          if (physicsConfig && physicsConfig.impulse_multiplier) {\n            keyForce = (physicsConfig.base_impulse || 0.5) * 8.0; // Увеличиваем в 8 раз базовый импульс\n          } else {\n            keyForce = KEY_FORCE * 4.0; // Или увеличиваем в 4 раза значение по умолчанию\n          }\n\n          // Логируем для отладки\n          console.log("[Gamepad] \\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430 \\u0438\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441\\u0430 \\u0441 \\u043A\\u043B\\u0430\\u0432\\u0438\\u0430\\u0442\\u0443\\u0440\\u044B: \\u043D\\u0430\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 (".concat(direction.x.toFixed(2), ", ").concat(direction.y.toFixed(2), ", ").concat(direction.z.toFixed(2), "), \\u0441\\u0438\\u043B\\u0430 ").concat(keyForce));\n\n          // Отправляем импульс на сервер\n          sendDirectionToServer(direction, keyForce, socketRef);\n          lastSendTime = Date.now();\n\n          // Обновляем lastSentPosition для отображения стрелки\n          lastSentPosition.copy(direction);\n          lastSentPosition.userData = {\n            distance: keyForce\n          };\n          directionNeedsUpdate = true;\n        }\n      }\n    }\n  }\n  function onKeyDown(event) {\n    // Обновляем состояние клавиш\n    switch (event.key.toLowerCase()) {\n      case \'w\':\n        keys.w = true;\n        break;\n      case \'a\':\n        keys.a = true;\n        break;\n      case \'s\':\n        keys.s = true;\n        break;\n      case \'d\':\n        keys.d = true;\n        break;\n    }\n  }\n  function onKeyUp(event) {\n    // Обновляем состояние клавиш\n    switch (event.key.toLowerCase()) {\n      case \'w\':\n        keys.w = false;\n        break;\n      case \'a\':\n        keys.a = false;\n        break;\n      case \'s\':\n        keys.s = false;\n        break;\n      case \'d\':\n        keys.d = false;\n        break;\n    }\n  }\n  function onMouseMove(event) {\n    // Обновляем координаты мыши\n    mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n    // Устанавливаем флаг активности мыши\n    isMouseActive = true;\n\n    // Вызываем функцию обновления направления\n    castRayAndUpdateDirection();\n  }\n  function updateRayFromLastMouse() {\n    // Обновляем луч с текущими координатами мыши и новой позицией камеры\n    castRayAndUpdateDirection();\n  }\n  function castRayAndUpdateDirection() {\n    if (!cameraRef || !terrainMeshRef || !playerMeshRef || !socketRef) return;\n\n    // Устанавливаем луч от камеры через координаты мыши\n    raycaster.setFromCamera(mouse, cameraRef);\n\n    // Находим пересечения с террейном\n    var intersects = raycaster.intersectObjects([terrainMeshRef]);\n    if (intersects.length > 0) {\n      var targetPosition = intersects[0].point;\n      lastIntersectPoint.copy(targetPosition);\n\n      // Вычисляем направление в 3D пространстве (с учетом оси Y)\n      currentDirection.set(targetPosition.x - playerMeshRef.position.x, targetPosition.y - playerMeshRef.position.y,\n      // Учитываем высоту\n      targetPosition.z - playerMeshRef.position.z);\n\n      // Сохраняем длину до нормализации (расстояние от игрока до точки пересечения)\n      var distance = currentDirection.length();\n\n      // Нормализуем для получения направления\n      currentDirection.normalize();\n\n      // Запоминаем направление и расстояние\n      lastSentPosition.copy(currentDirection);\n\n      // Сохраняем исходное расстояние для использования в updateArrowHelper\n      lastSentPosition.userData = {\n        distance: distance\n      };\n\n      // Помечаем, что направление нужно обновить\n      directionNeedsUpdate = true;\n\n      // Проверяем, нужно ли отправлять данные на сервер\n      if (Date.now() - lastSendTime > SEND_INTERVAL) {\n        sendDirectionToServer(currentDirection, distance, socketRef);\n        lastSendTime = Date.now();\n      }\n    }\n  }\n  function sendDirectionToServer(direction, distance, socket) {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      // Для мышиного управления увеличиваем дистанцию, которая используется как сила импульса\n      var enhancedDistance = Math.min(distance * 1.5, 100); // Увеличиваем на 50%, но не больше 100\n\n      socket.send(JSON.stringify({\n        type: \'cmd\',\n        cmd: \'MOUSE_VECTOR\',\n        data: {\n          x: direction.x,\n          y: direction.y,\n          // Теперь отправляем реальное значение Y\n          z: direction.z,\n          distance: enhancedDistance // Используем увеличенное значение дистанции\n        },\n        client_time: Date.now(),\n        object_id: \'mainPlayer1\'\n      }));\n    } else {\n      console.error(\'WebSocket не подключен\');\n    }\n  }\n}\n\n// Функция для включения/выключения отображения arrowHelper\nfunction setDebugMode(enabled) {\n  if (arrowHelper) {\n    arrowHelper.visible = enabled;\n    console.log("ArrowHelper visibility set to ".concat(enabled));\n  }\n}\n\n// Функция для получения текущего статуса отладочного режима\nfunction getDebugMode() {\n  return DEBUG_MODE;\n}\n\n// Обновляем позицию и направление arrowHelper\nfunction updateArrowHelper(playerMesh) {\n  if (arrowHelper) {\n    // Позиция стрелки с учетом смещения по высоте\n    var arrowPosition = new three_core/* Vector3 */.Pq0(playerMesh.position.x, playerMesh.position.y + ARROW_HEIGHT_OFFSET,\n    // Поднимаем стрелку над игроком\n    playerMesh.position.z);\n\n    // Обновляем позицию стрелки\n    arrowHelper.position.copy(arrowPosition);\n\n    // Устанавливаем направление стрелки (теперь с учетом оси Y)\n    arrowHelper.setDirection(lastSentPosition);\n\n    // Используем сохраненное расстояние до точки пересечения\n    var distance = lastSentPosition.userData ? lastSentPosition.userData.distance : MIN_ARROW_LENGTH;\n\n    // Ограничиваем длину стрелки, чтобы она не была слишком большой или маленькой\n    var arrowLength = Math.min(MAX_ARROW_LENGTH, Math.max(MIN_ARROW_LENGTH, distance));\n\n    // Устанавливаем длину стрелки пропорционально расстоянию\n    arrowHelper.setLength(arrowLength);\n  } else {\n    console.error("arrowHelper не инициализирован");\n  }\n}\n\n// Экспортируем функции для использования в других модулях\n\n;// ./src/camera.js\n// camera.js\n\n\n\n\n// Объявляем камеру\nvar camera;\n\n// Настройки камеры - оставляем оригинальные значения\nvar CAMERA_HEIGHT = 100;\nvar CAMERA_DISTANCE = 100;\nvar SMOOTH_FACTOR = 0.05;\nvar ROTATION_SMOOTH_FACTOR = 0.03;\nvar DEAD_ZONE_ANGLE = 0.3;\nvar MIN_Y_ANGLE = -0.5;\nvar MAX_Y_ANGLE = 0.5;\n\n// Дополнительные настройки для адаптивного доворота\nvar MIN_ADAPTIVE_FACTOR = 0.01; // Минимальный фактор доворота\nvar MAX_ADAPTIVE_FACTOR = 0.12; // Максимальный фактор для быстрых поворотов\nvar QUADRATIC_FACTOR = 0.9; // Коэффициент квадратичной зависимости (0-1)\n\n// Внутренняя переменная для хранения текущего значения коэффициента\nvar currentQuadraticFactor = QUADRATIC_FACTOR;\nvar PLAYER_ID = "mainPlayer1"; // Жестко закрепляем ID игрока\n\n// Сохраняем последнюю известную позицию и направление игрока\nvar lastKnownPosition = new three_core/* Vector3 */.Pq0(0, 0, 0);\nvar lastCameraPosition = new three_core/* Vector3 */.Pq0(0, CAMERA_HEIGHT, CAMERA_DISTANCE);\nvar lastCameraDirection = new three_core/* Vector3 */.Pq0(0, 0, -1); // Начальное направление камеры\nvar targetCameraDirection = new three_core/* Vector3 */.Pq0(0, 0, -1);\nvar cameraTarget = new three_core/* Vector3 */.Pq0(); // Промежуточная точка для сглаживания\nvar lastArrowDirection = new three_core/* Vector3 */.Pq0(0, 0, 1); // Последнее направление стрелки\nvar lastMeasuredAngle = 0; // Последний измеренный угол для логирования\nvar lastMeasuredDistance = 0; // Последнее измеренное расстояние для логирования\nvar turningActive = false; // Флаг активного поворота для логирования\n\n// Добавим новую переменную для сглаживания точки, на которую смотрит камера\nvar smoothLookAtTarget = new three_core/* Vector3 */.Pq0();\nfunction initCamera() {\n  // Создаем камеру\n  camera = new three_core/* PerspectiveCamera */.ubm(60, window.innerWidth / window.innerHeight, 0.2, 2000);\n\n  // Устанавливаем начальную позицию\n  camera.position.set(0, CAMERA_HEIGHT, CAMERA_DISTANCE);\n  camera.lookAt(0, 0, 0);\n\n  // Добавляем обработчик изменения размера окна\n  window.addEventListener(\'resize\', camera_onWindowResize);\n\n  // Инициализируем значение currentQuadraticFactor\n  currentQuadraticFactor = QUADRATIC_FACTOR;\n  console.log("[Camera] Камера инициализирована");\n  return camera;\n}\nfunction camera_onWindowResize() {\n  if (!camera) return;\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n}\n\n// Функция для вычисления угла между двумя направлениями в 3D\nfunction angleBetweenDirections(dir1, dir2) {\n  // Нормализуем векторы для корректного вычисления угла\n  var v1 = dir1.clone().normalize();\n  var v2 = dir2.clone().normalize();\n\n  // Вычисляем угол между векторами\n  return Math.acos(Math.min(1, Math.max(-1, v1.dot(v2))));\n}\n\n// Функция для вычисления адаптивного фактора доворота с квадратичной зависимостью\nfunction calculateAdaptiveRotationFactor(angle, distance) {\n  // Нормализуем расстояние (предполагаем, что максимальное значимое расстояние - 100)\n  var normalizedDistance = Math.min(distance, 100) / 100;\n\n  // Вычисляем относительную скорость поворота с учетом угла\n  var angleRatio = angle / DEAD_ZONE_ANGLE;\n\n  // Применяем квадратичную зависимость от расстояния с настраиваемым коэффициентом\n  // Когда currentQuadraticFactor = 0, зависимость линейная\n  // Когда currentQuadraticFactor = 1, зависимость полностью квадратичная\n  var distanceFactor = normalizedDistance * (1 - currentQuadraticFactor) + Math.pow(normalizedDistance, 2) * currentQuadraticFactor;\n\n  // Комбинируем факторы угла и расстояния\n  var combinedFactor = angleRatio * distanceFactor;\n\n  // Интерполируем между минимальным и максимальным факторами доворота\n  var adaptiveFactor = MIN_ADAPTIVE_FACTOR + (MAX_ADAPTIVE_FACTOR - MIN_ADAPTIVE_FACTOR) * Math.min(1.0, combinedFactor);\n  return adaptiveFactor;\n}\nfunction updateCamera() {\n  if (!camera) return;\n  var player = objects_objects[PLAYER_ID];\n  if (player && player.mesh) {\n    var currentPlayerPosition = player.mesh.position.clone();\n    var arrowDirection = getArrowDirection();\n\n    // Плавно обновляем точку, на которую смотрит камера\n    smoothLookAtTarget.lerp(currentPlayerPosition, SMOOTH_FACTOR);\n    if (arrowDirection.length() > 0) {\n      var angle = angleBetweenDirections(arrowDirection, lastArrowDirection);\n      if (angle > DEAD_ZONE_ANGLE) {\n        var yComponent = Math.max(MIN_Y_ANGLE, Math.min(MAX_Y_ANGLE, -arrowDirection.y));\n        targetCameraDirection.set(-arrowDirection.x, yComponent, -arrowDirection.z).normalize();\n        lastArrowDirection.copy(arrowDirection);\n        turningActive = true;\n      }\n    }\n    var adaptiveRotationFactor = calculateAdaptiveRotationFactor(lastMeasuredAngle, lastMeasuredDistance);\n    lastCameraDirection.lerp(targetCameraDirection, adaptiveRotationFactor);\n    lastCameraDirection.normalize();\n    var horizontalDistance = CAMERA_DISTANCE * Math.cos(lastCameraDirection.y);\n    var cameraOffset = new three_core/* Vector3 */.Pq0(lastCameraDirection.x * horizontalDistance, CAMERA_HEIGHT + lastCameraDirection.y * CAMERA_DISTANCE, lastCameraDirection.z * horizontalDistance);\n    var targetPosition = currentPlayerPosition.clone().add(cameraOffset);\n    cameraTarget.lerp(targetPosition, SMOOTH_FACTOR);\n    camera.position.copy(cameraTarget);\n\n    // Камера теперь смотрит на сглаженную позицию\n    camera.lookAt(smoothLookAtTarget);\n    lastKnownPosition.copy(currentPlayerPosition);\n  }\n}\n\n// Функция для изменения коэффициента квадратичной зависимости\nfunction setQuadraticFactor(value) {\n  // Ограничиваем значение от 0 до 1\n  var newValue = Math.max(0, Math.min(1, value));\n  console.log("[Camera] \\u0418\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u0435 \\u043A\\u043E\\u044D\\u0444\\u0444\\u0438\\u0446\\u0438\\u0435\\u043D\\u0442\\u0430 \\u043A\\u0432\\u0430\\u0434\\u0440\\u0430\\u0442\\u0438\\u0447\\u043D\\u043E\\u0439 \\u0437\\u0430\\u0432\\u0438\\u0441\\u0438\\u043C\\u043E\\u0441\\u0442\\u0438: ".concat(currentQuadraticFactor.toFixed(2), " -> ").concat(newValue.toFixed(2)));\n  currentQuadraticFactor = newValue;\n  return newValue;\n}\n\n// Функция для получения текущего коэффициента квадратичной зависимости\nfunction getQuadraticFactor() {\n  return currentQuadraticFactor;\n}\n\n// Debug-функция для вывода расширенной информации о камере\nfunction logCameraStatus() {\n  if (!camera) return;\n  console.log("[Camera] Position: (".concat(camera.position.x.toFixed(2), ", ").concat(camera.position.y.toFixed(2), ", ").concat(camera.position.z.toFixed(2), ")"));\n  console.log("[Camera] Direction: (".concat(lastCameraDirection.x.toFixed(2), ", ").concat(lastCameraDirection.y.toFixed(2), ", ").concat(lastCameraDirection.z.toFixed(2), ")"));\n  console.log("[Camera] Target Direction: (".concat(targetCameraDirection.x.toFixed(2), ", ").concat(targetCameraDirection.y.toFixed(2), ", ").concat(targetCameraDirection.z.toFixed(2), ")"));\n  console.log("[Camera] Arrow Direction: (".concat(lastArrowDirection.x.toFixed(2), ", ").concat(lastArrowDirection.y.toFixed(2), ", ").concat(lastArrowDirection.z.toFixed(2), ")"));\n  console.log("[Camera] Looking at: (".concat(lastKnownPosition.x.toFixed(2), ", ").concat(lastKnownPosition.y.toFixed(2), ", ").concat(lastKnownPosition.z.toFixed(2), ")"));\n  console.log("[Camera] Turning Active: ".concat(turningActive, ", Last Angle: ").concat(lastMeasuredAngle.toFixed(3), " \\u0440\\u0430\\u0434 (").concat((lastMeasuredAngle * 180 / Math.PI).toFixed(1), "\\xB0)"));\n  console.log("[Camera] Last Distance: ".concat(lastMeasuredDistance.toFixed(1), ", Quadratic Factor: ").concat(currentQuadraticFactor.toFixed(2), ", Default: ").concat(QUADRATIC_FACTOR.toFixed(2)));\n  console.log("[Camera] Adaptive Factor: ".concat(calculateAdaptiveRotationFactor(lastMeasuredAngle, lastMeasuredDistance).toFixed(3)));\n\n  // Проверяем наличие игрока\n  var player = objects[PLAYER_ID];\n  if (player && player.mesh) {\n    console.log("[Camera] Player found at: (".concat(player.mesh.position.x.toFixed(2), ", ").concat(player.mesh.position.y.toFixed(2), ", ").concat(player.mesh.position.z.toFixed(2), ")"));\n  } else {\n    console.log("[Camera] Player with ID \\"".concat(PLAYER_ID, "\\" not found!"));\n  }\n}\n;// ./src/gamestatemanager.js\nfunction gamestatemanager_typeof(o) { "@babel/helpers - typeof"; return gamestatemanager_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, gamestatemanager_typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == gamestatemanager_typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != gamestatemanager_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != gamestatemanager_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && ("object" == gamestatemanager_typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\n// gamestatemanager.js\n\n\n\n\n\nvar GameStateManager = /*#__PURE__*/function (_EventEmitter) {\n  function GameStateManager(ws) {\n    var _this;\n    _classCallCheck(this, GameStateManager);\n    _this = _callSuper(this, GameStateManager);\n    _this.terrainMeshCreated = false;\n    _this.playerMeshCreated = false;\n    _this.terrainMesh = null;\n    _this.playerMesh = null;\n    _this.ws = ws;\n    _this.scene = scene_scene;\n    return _this;\n  }\n  _inherits(GameStateManager, _EventEmitter);\n  return _createClass(GameStateManager, [{\n    key: "setTerrainMesh",\n    value: function setTerrainMesh(mesh) {\n      this.terrainMesh = mesh;\n      this.terrainMeshCreated = true;\n      this.checkGameState();\n    }\n  }, {\n    key: "setPlayerMesh",\n    value: function setPlayerMesh(mesh) {\n      this.playerMesh = mesh;\n      this.playerMeshCreated = true;\n      this.checkGameState();\n    }\n  }, {\n    key: "checkGameState",\n    value: function checkGameState() {\n      if (this.terrainMeshCreated && this.playerMeshCreated) {\n        initGamepad(camera, this.terrainMesh, this.playerMesh, this.ws, this.scene);\n        this.emit(\'gameInitialized\');\n        console.warn("[Game State Manager] game initialized!!!");\n      }\n    }\n  }]);\n}(events.EventEmitter); // Создаем экземпляр GameStateManager с ws\nvar gameStateManager;\nfunction initGameStateManager(ws, scene) {\n  gameStateManager = new GameStateManager(ws, scene);\n}\n;// ./src/objects.js\n// objects.js\n\n\n\n\n\nvar terrainCreated = new events.EventEmitter();\nvar playerCreated = new events.EventEmitter();\nvar objects_objects = {}; // Словарь объектов: id -> { mesh, body, serverPos, ... }\nvar terrainMesh; // Экспортируем terrainMesh\nvar playerMesh; // Экспортируем playerMesh\n\nfunction createMeshAndBodyForObject(data) {\n  if (!data || !data.object_type) {\n    console.error("Invalid data received for object creation:", data);\n    return null;\n  }\n  var type = data.object_type;\n  var mesh = null,\n    body = null;\n  try {\n    switch (type) {\n      case "terrain":\n        mesh = createTerrainMesh(data);\n        body = createPhysicsBodyForTerrain(data);\n        break;\n      case "sphere":\n        mesh = createSphereMesh(data);\n        body = createPhysicsBodyForSphere(data);\n        break;\n      case "tree":\n        mesh = createTreeMesh(data);\n        break;\n      case "box":\n        mesh = createBoxMesh(data);\n        body = createPhysicsBodyForBox(data);\n        break;\n      default:\n        console.warn("Unknown object type: ".concat(type));\n        return null;\n    }\n\n    // Проверяем, что mesh был успешно создан\n    if (!mesh) {\n      console.error("Failed to create mesh for object type: ".concat(type));\n      return null;\n    }\n    scene_scene.add(mesh);\n\n    // Сохраняем в объекте исходные данные, включая массу\n    var result = {\n      mesh: mesh,\n      body: body,\n      object_type: type,\n      mass: data.mass || 0 // Сохраняем массу из данных сервера\n    };\n    return result;\n  } catch (error) {\n    console.error("\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D\\u0438\\u0438 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 \\u0442\\u0438\\u043F\\u0430 ".concat(type, ":"), error);\n    // Если mesh был создан, но произошла ошибка, удаляем его из сцены\n    if (mesh) {\n      scene_scene.remove(mesh);\n    }\n    return null;\n  }\n}\nfunction createPhysicsBodyForTerrain(data) {\n  if (typeof Ammo === \'undefined\') {\n    console.error(\'Ammo.js не инициализирован\');\n    return null;\n  }\n  if (!physics_localPhysicsWorld) {\n    console.error(\'Физический мир не инициализирован\');\n    return null;\n  }\n  var w = data.heightmap_w;\n  var h = data.heightmap_h;\n  var scaleX = data.scale_x;\n  var scaleZ = data.scale_z;\n\n  // Создаем буфер в памяти Ammo для данных высот\n  var ammoHeightData = Ammo._malloc(4 * w * h);\n\n  // Копируем данные высот в память Ammo\n  var p = 0;\n  var p2 = 0;\n  for (var j = 0; j < h; j++) {\n    for (var i = 0; i < w; i++) {\n      Ammo.HEAPF32[ammoHeightData + p2 >> 2] = data.height_data[p];\n      p++;\n      p2 += 4;\n    }\n  }\n\n  // Создаем форму террейна\n  var shape = new Ammo.btHeightfieldTerrainShape(w, h, ammoHeightData, 1,\n  // heightScale\n  data.min_height, data.max_height, 1,\n  // up axis = 1 для Y\n  Ammo.PHY_FLOAT, false // flipQuadEdges\n  );\n\n  // Устанавливаем масштабирование\n  shape.setLocalScaling(new Ammo.btVector3(scaleX, data.scale_y, scaleZ));\n\n  // Устанавливаем margin для террейна (0.5 вместо 2.0, так как террейн меньше)\n  shape.setMargin(0.5);\n  console.log("[Terrain] Установлен margin террейна:", 0.5);\n\n  // Создаем трансформацию\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n  var mass = 0; // Статическое тело\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Добавляем тело в физический мир\n  var TERRAIN_GROUP = 1;\n  physics_localPhysicsWorld.addRigidBody(body, TERRAIN_GROUP, -1); // Террейн сталкивается со всеми\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n  console.log("[Terrain] Физическое тело создано:", {\n    размеры: {\n      w: w,\n      h: h\n    },\n    масштаб: {\n      x: data.scaleX,\n      y: data.scale_y,\n      z: data.scaleZ\n    },\n    позиция: {\n      x: data.x || 0,\n      y: (data.min_height + data.max_height) / 2,\n      z: data.z || 0\n    },\n    минВысота: data.min_height,\n    максВысота: data.max_height\n  });\n  return body;\n}\nfunction createTerrainMesh(data) {\n  var w = data.heightmap_w || 64;\n  var h = data.heightmap_h || 64;\n  var geo = new three_core/* PlaneGeometry */.bdM(w * data.scale_x, h * data.scale_z, w - 1, h - 1);\n  geo.rotateX(-Math.PI / 2);\n  if (data.height_data) {\n    var verts = geo.attributes.position.array;\n    for (var i = 0; i < verts.length; i += 3) {\n      var ix = i / 3 % w;\n      var iz = Math.floor(i / 3 / w);\n      verts[i + 1] = data.height_data[iz * w + ix] * data.scale_y;\n    }\n    geo.computeVertexNormals();\n  }\n  terrainMesh = new three_core/* Mesh */.eaF(\n  // Присваиваем mesh переменной terrainMesh\n  geo, new three_core/* MeshPhongMaterial */.tXL({\n    color: parseColor(data.color || "#0000ff"),\n    wireframe: false,\n    flatShading: true\n  }));\n\n  // Включаем тени для террейна\n  terrainMesh.receiveShadow = true;\n  gameStateManager.setTerrainMesh(terrainMesh);\n  return terrainMesh;\n}\nfunction createSphereMesh(data) {\n  try {\n    var geo = new three_core/* SphereGeometry */.Gu$(data.radius || 1, 32, 32);\n    var mesh = new three_core/* Mesh */.eaF(geo, new three_core/* MeshPhongMaterial */.tXL({\n      color: parseColor(data.color || "#888888"),\n      shininess: 30\n    }));\n\n    // Включаем тени для сфер\n    mesh.castShadow = true;\n    mesh.receiveShadow = true;\n    if (data.id === "mainPlayer1") {\n      playerMesh = mesh;\n      gameStateManager.setPlayerMesh(playerMesh);\n    }\n    return mesh;\n  } catch (error) {\n    console.error("Ошибка при создании меша сферы:", error);\n    return null;\n  }\n}\nfunction createBoxMesh(data) {\n  var geo = new three_core/* BoxGeometry */.iNn(1, 1, 1);\n  return new three_core/* Mesh */.eaF(geo, new three_core/* MeshLambertMaterial */.G_z({\n    color: parseColor(data.color || "#888888")\n  }));\n}\nfunction createPhysicsBodyForSphere(data) {\n  try {\n    if (typeof Ammo === \'undefined\') {\n      console.error(\'Ammo.js не инициализирован\');\n      return null;\n    }\n    if (!physics_localPhysicsWorld) {\n      console.error(\'Физический мир не инициализирован\');\n      return null;\n    }\n\n    // Безопасная проверка window.Ammo\n    if (typeof window.Ammo === \'undefined\') {\n      console.error(\'window.Ammo не инициализирован\');\n      return null;\n    }\n    var radius = data.radius || 1;\n    // Увеличиваем массу в три раза для лучшей физики\n    var mass = data.mass || 15.0; // Увеличиваем с 5.0 до 15.0\n\n    // Создаем все Ammo объекты через window.Ammo\n    var shape = new window.Ammo.btSphereShape(radius);\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(data.x || 0, data.y || 0, data.z || 0));\n    var localInertia = new window.Ammo.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    var motionState = new window.Ammo.btDefaultMotionState(transform);\n    var rbInfo = new window.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    var body = new window.Ammo.btRigidBody(rbInfo);\n\n    // Проверяем, что тело имеет необходимые методы\n    if (!body || typeof body.getMotionState !== \'function\') {\n      console.error(\'Ошибка: созданное физическое тело недействительно\');\n      window.Ammo.destroy(rbInfo);\n      window.Ammo.destroy(localInertia);\n      return null;\n    }\n\n    // Устанавливаем дополнительные свойства\n    body.setFriction(0.02); // Уменьшаем трение для лучшего скольжения\n    body.setRestitution(1.0); // Максимальная упругость для мощного отскока\n    body.setRollingFriction(0.01); // Очень низкое сопротивление качению\n    body.setDamping(0.0, 0.0); // Убираем затухание для сохранения энергии\n\n    // Отключаем деактивацию\n    body.setActivationState(4); // DISABLE_DEACTIVATION\n\n    // Для небольших сфер включаем CCD (continuous collision detection),\n    // чтобы предотвратить проваливание сквозь поверхности при высокой скорости\n    body.setCcdMotionThreshold(radius * 0.7);\n    body.setCcdSweptSphereRadius(radius * 0.6);\n\n    // Добавляем тело в физический мир\n    var SPHERE_GROUP = 2;\n    physics_localPhysicsWorld.addRigidBody(body, SPHERE_GROUP, -1); // Сферы сталкиваются со всеми\n\n    console.log("[Sphere] Физическое тело создано:", {\n      radius: radius,\n      mass: mass,\n      position: {\n        x: data.x || 0,\n        y: data.y || 0,\n        z: data.z || 0\n      },\n      ccd: {\n        motionThreshold: radius * 0.7,\n        sweptSphereRadius: radius * 0.6\n      },\n      friction: 0.02,\n      restitution: 1.0\n    });\n\n    // Очистка памяти\n    window.Ammo.destroy(rbInfo);\n    window.Ammo.destroy(localInertia);\n    return body;\n  } catch (error) {\n    console.error(\'Ошибка при создании физического тела:\', error);\n    return null;\n  }\n}\nfunction createPhysicsBodyForBox(data) {\n  try {\n    if (typeof Ammo === \'undefined\') {\n      console.error(\'Ammo.js не инициализирован\');\n      return null;\n    }\n    if (!physics_localPhysicsWorld) {\n      console.error(\'Физический мир не инициализирован\');\n      return null;\n    }\n    var radius = data.radius || 1;\n    var mass = data.mass || 1;\n\n    // Создаем все Ammo объекты через window.Ammo\n    var shape = new window.Ammo.btSphereShape(radius);\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(data.x || 0, data.y || 0, data.z || 0));\n    var localInertia = new window.Ammo.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    var motionState = new window.Ammo.btDefaultMotionState(transform);\n    var rbInfo = new window.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    var body = new window.Ammo.btRigidBody(rbInfo);\n\n    // // Настраиваем физические свойства\n    // body.setFriction(0.5);\n    // body.setRollingFriction(0.1);\n    // body.setRestitution(0.2); // Немного уменьшаем упругость для стабильности\n    // body.setDamping(0.01, 0.01); // Небольшое линейное и угловое затухание\n\n    // Включаем CCD для предотвращения проваливания сквозь террейн\n    // Для меньшего масштаба (100 вместо 15000) эти значения более оптимальны\n    // body.setCcdMotionThreshold(radius * 0.8); // Увеличиваем порог для активации CCD\n    // body.setCcdSweptSphereRadius(radius * 0.7); // Радиус сферы для CCD\n\n    // Отключаем деактивацию\n    body.setActivationState(4); // DISABLE_DEACTIVATION\n\n    // Добавляем тело в физический мир\n    var SPHERE_GROUP = 2;\n    physics_localPhysicsWorld.addRigidBody(body, SPHERE_GROUP, -1); // Сферы сталкиваются со всеми\n\n    console.log("[Sphere] Физическое тело создано:", {\n      radius: radius,\n      mass: mass,\n      position: {\n        x: data.x || 0,\n        y: data.y || 0,\n        z: data.z || 0\n      },\n      ccd: {\n        motionThreshold: radius * 0.8,\n        sweptSphereRadius: radius * 0.7\n      },\n      friction: 0.5,\n      restitution: 0.2\n    });\n\n    // Очистка памяти\n    window.Ammo.destroy(rbInfo);\n    window.Ammo.destroy(localInertia);\n    return body;\n  } catch (error) {\n    console.error(\'Ошибка при создании физического тела:\', error);\n    return null;\n  }\n}\nfunction parseColor(colorStr) {\n  if (!colorStr) return 0x888888;\n  if (colorStr.startsWith("#")) {\n    return parseInt(colorStr.slice(1), 16);\n  }\n  return 0x888888;\n}\nfunction createTestSphere() {\n  // Создаем визуальную сферу\n  var radius = 1;\n  var geometry = new THREE.SphereGeometry(radius, 32, 32);\n  var material = new THREE.MeshPhongMaterial({\n    color: 0xff00ff,\n    shininess: 30\n  });\n  var mesh = new THREE.Mesh(geometry, material);\n\n  // Включаем тени для тестовой сферы\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n\n  // Позиционируем сферу высоко над террейном\n  var startY = 58; // Высота над террейном\n  mesh.position.set(0, startY, 0);\n  scene.add(mesh);\n\n  // Создаем физическое тело\n  var shape = new Ammo.btSphereShape(radius);\n  var mass = 5; // Увеличиваем массу с 3 до 5\n\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n  transform.setOrigin(new Ammo.btVector3(0, startY, 0));\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  shape.calculateLocalInertia(mass, localInertia);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Важные настройки для физического тела\n  body.setActivationState(4); // DISABLE_DEACTIVATION\n  body.setFriction(0.2); // Уменьшаем с 0.3 до 0.2\n  body.setRollingFriction(0.03); // Уменьшаем с 0.05 до 0.03\n  body.setRestitution(0.99); // Увеличиваем до максимума\n  body.setDamping(0.0, 0.0); // Отключаем затухание полностью\n\n  // Включаем CCD для предотвращения проваливания сквозь объекты\n  body.setCcdMotionThreshold(radius * 0.6);\n  body.setCcdSweptSphereRadius(radius * 0.5);\n\n  // Добавляем тело в физический мир\n  var SPHERE_GROUP = 2;\n  localPhysicsWorld.addRigidBody(body, SPHERE_GROUP, -1); // Тестовая сфера сталкивается со всеми\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n\n  // Добавляем объект в наш список объектов\n  var testSphereObj = {\n    mesh: mesh,\n    body: body,\n    object_type: "test_sphere",\n    physicsBy: "ammo" // Изменено с "both" на "ammo", чтобы управлялось только локальной физикой\n  };\n  objects_objects["test_sphere"] = testSphereObj;\n  return testSphereObj;\n}\n;// ./src/throttledlog.js\n//throttledlog.js\n\n// Система логирования с ограничением частоты\nvar LOG_INTERVAL = 5000; // 1 секунда между логами\nvar logTimers = {};\nfunction throttledLog(category, message) {\n  var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var now = Date.now();\n\n  // Проверяем, прошло ли достаточно времени с последнего лога для этой категории\n  if (!logTimers[category] || now - logTimers[category] >= LOG_INTERVAL) {\n    // Обновляем таймер для этой категории\n    logTimers[category] = now;\n\n    // Форматируем и выводим сообщение\n    if (data) {\n      console.log("[".concat(category, "] ").concat(message), data);\n    } else {\n      console.log("[".concat(category, "] ").concat(message));\n    }\n    return true; // Лог был выведен\n  }\n  return false; // Лог был пропущен из-за ограничения частоты\n}\n\n// Функция для логирования данных о главном игроке\nfunction logMainPlayerInfo() {\n  var mainPlayer = objects["mainPlayer1"];\n  if (!mainPlayer || !mainPlayer.mesh) {\n    return;\n  }\n  var pos = mainPlayer.mesh.position;\n\n  // Получаем скорость, если доступна физика\n  var vel = {\n    x: 0,\n    y: 0,\n    z: 0\n  };\n  if (mainPlayer.body) {\n    var velocity = mainPlayer.body.getLinearVelocity();\n    vel = {\n      x: velocity.x(),\n      y: velocity.y(),\n      z: velocity.z()\n    };\n    window.Ammo.destroy(velocity);\n  }\n\n  // Выводим в формате, напоминающем C++ вывод\n  throttledLog("MainPlayer", "Position: (".concat(pos.x.toFixed(2), ", ").concat(pos.y.toFixed(2), ", ").concat(pos.z.toFixed(2), "), ") + "Velocity: (".concat(vel.x.toFixed(2), ", ").concat(vel.y.toFixed(2), ", ").concat(vel.z.toFixed(2), ")"));\n}\n;// ./src/physics.js\nfunction physics_typeof(o) { "@babel/helpers - typeof"; return physics_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, physics_typeof(o); }\nfunction physics_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ physics_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == physics_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(physics_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = physics_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction physics_toPropertyKey(t) { var i = physics_toPrimitive(t, "string"); return "symbol" == physics_typeof(i) ? i : i + ""; }\nfunction physics_toPrimitive(t, r) { if ("object" != physics_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != physics_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction physics_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction physics_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { physics_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { physics_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// physics.js\n\n\n\n\nvar physics_localPhysicsWorld = null;\nvar ammoPromise = null;\n\n// Настройки для коррекции позиции\nvar DEAD_ZONE = 10;\nvar CORRECTION_STRENGTH = 50.0;\nvar TELEPORT_THRESHOLD = 5.0;\n\n// Добавляем настройки для client-side prediction\nvar PREDICTION_SMOOTH_FACTOR = 10;\nvar PREDICTION_MAX_ERROR = 10.0;\nvar DISTANCE_BASED_SMOOTH_FACTOR = true; // Использовать динамический коэффициент сглаживания\nvar NEW_OBJECT_TIMEOUT = 2000; // 2 секунды для "новых" объектов\n\n// История команд для предсказания\nvar inputHistory = (/* unused pure expression or super */ null && ([]));\nvar lastSequenceNumber = 0; // Счетчик последовательности для команд\nvar lastServerUpdateTime = 0; // Время последнего серверного обновления\n\n// Добавляем маркер времени создания объектов\nvar objectCreationTimes = new Map();\n\n// Функция для настройки физического мира\nfunction setupPhysicsWorld() {\n  if (!window.Ammo) {\n    console.error("[Physics] Ammo.js не инициализирован");\n    return;\n  }\n\n  // Создаем физический мир\n  var collisionConfiguration = new window.Ammo.btDefaultCollisionConfiguration();\n  var dispatcher = new window.Ammo.btCollisionDispatcher(collisionConfiguration);\n  var broadphase = new window.Ammo.btDbvtBroadphase();\n  var solver = new window.Ammo.btSequentialImpulseConstraintSolver();\n  physics_localPhysicsWorld = new window.Ammo.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n\n  // Устанавливаем гравитацию\n  physics_localPhysicsWorld.setGravity(new window.Ammo.btVector3(0, -9.81, 0));\n  console.log("[Physics] Физический мир успешно создан");\n\n  // Добавляем эффект отскока после создания мира\n  // TODO: Реализация отскока отложена на будущее\n  // addCollisionBounceEffect();\n}\nfunction initAmmo() {\n  return _initAmmo.apply(this, arguments);\n}\n\n// Обработка шага физики\nfunction _initAmmo() {\n  _initAmmo = physics_asyncToGenerator(/*#__PURE__*/physics_regeneratorRuntime().mark(function _callee() {\n    return physics_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt("return", new Promise(function (resolve, reject) {\n            if (typeof Ammo !== \'undefined\') {\n              console.log(\'Ammo.js уже инициализирован\');\n              setupPhysicsWorld();\n              resolve();\n              return;\n            }\n            console.log(\'Инициализация Ammo.js...\');\n            var ammoScript = document.createElement(\'script\');\n            ammoScript.src = \'/ammo/ammo.wasm.js\';\n            ammoScript.async = true;\n            ammoScript.onload = function () {\n              console.log(\'Скрипт Ammo.js загружен, инициализация...\');\n              window.Ammo().then(function (Ammo) {\n                window.Ammo = Ammo;\n                console.log(\'Ammo.js инициализирован успешно\');\n                setupPhysicsWorld();\n\n                // Запускаем физическую симуляцию с задержкой в 1 секунду,\n                // чтобы гарантировать получение координат от сервера\n                console.log("[Physics] Задерживаем запуск физики на 1 секунду для получения серверных координат...");\n                setTimeout(function () {\n                  startPhysicsSimulation();\n                }, 1000);\n                resolve();\n              })["catch"](function (err) {\n                console.error(\'Ошибка инициализации Ammo.js:\', err);\n                reject(err);\n              });\n            };\n            ammoScript.onerror = function (err) {\n              console.error(\'Ошибка загрузки Ammo.js:\', err);\n              reject(err);\n            };\n            document.body.appendChild(ammoScript);\n          }));\n        case 1:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _initAmmo.apply(this, arguments);\n}\nfunction stepPhysics(deltaTime) {\n  if (!physics_localPhysicsWorld) return;\n  try {\n    // Проверяем корректность deltaTime\n    if (!deltaTime || isNaN(deltaTime) || deltaTime <= 0 || deltaTime > 1) {\n      deltaTime = 1 / 60; // Значение по умолчанию\n    }\n\n    // Ограничиваем максимальный шаг для стабильности\n    var maxStep = 1 / 60; // Не больше 30мс для одного шага\n    var effectiveStep = Math.min(deltaTime, maxStep);\n\n    // Используем фиксированный шаг и переменное количество подшагов для точности\n    var fixedStep = 1 / 120; // 120 Гц внутренние шаги\n    var maxSubSteps = Math.ceil(effectiveStep / fixedStep);\n\n    // Выполняем шаг симуляции с заданными параметрами\n    physics_localPhysicsWorld.stepSimulation(effectiveStep, maxSubSteps, fixedStep);\n\n    // Применяем ограничения скорости\n    applySpeedLimits();\n\n    // Обновляем физические объекты\n    updatePhysicsObjects(objects_objects, deltaTime);\n  } catch (error) {\n    console.error(\'Ошибка при обновлении физики:\', error);\n  }\n}\n\n// Функция для ограничения скорости в Ammo.js\nfunction applySpeedLimits() {\n  try {\n    if (!objects_objects || !window.Ammo || !window.PHYSICS_CONFIG) return;\n\n    // Используем максимальную скорость из конфигурации\n    var MAX_SPEED = window.PHYSICS_CONFIG.MaxSpeed || 80.0;\n    for (var id in objects_objects) {\n      var obj = objects_objects[id];\n      if (!obj || !obj.body) continue;\n\n      // Пропускаем статические объекты или террейн\n      if (obj.object_type === "terrain") continue;\n\n      // Получаем текущую линейную скорость\n      var _velocity = obj.body.getLinearVelocity();\n      var speedSq = _velocity.x() * _velocity.x() + _velocity.y() * _velocity.y() + _velocity.z() * _velocity.z();\n      var speed = Math.sqrt(speedSq);\n\n      // Если скорость превышает максимальную, ограничиваем её\n      if (speed > MAX_SPEED) {\n        console.warn("apply speed limit :", speed);\n        var scale = MAX_SPEED / speed;\n        var newVelocity = new window.Ammo.btVector3(_velocity.x() * scale, _velocity.y() * scale, _velocity.z() * scale);\n        obj.body.setLinearVelocity(newVelocity);\n        window.Ammo.destroy(newVelocity);\n      }\n\n      // Если это игрок, обновляем отображение скорости\n      if (id.startsWith(\'mainPlayer1\')) {\n        var mass = obj.mass || 5.0;\n        updatePlayerSpeedDisplay(speed, MAX_SPEED, mass);\n      }\n      window.Ammo.destroy(_velocity);\n    }\n  } catch (e) {\n    console.error("Ошибка при обработке скорости:", e);\n  }\n}\n\n// Функция для обновления отображения скорости игрока\nfunction updatePlayerSpeedDisplay(speed, maxSpeed, mass) {\n  var speedDisplay = document.getElementById(\'player-speed\');\n  var maxSpeedDisplay = document.getElementById(\'player-max-speed\');\n  var massDisplay = document.getElementById(\'player-mass\');\n  if (speedDisplay) {\n    // Форматируем до 2 знаков после запятой для большей точности при малых скоростях\n    speedDisplay.textContent = "\\u0421\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C: ".concat(speed.toFixed(2), " \\u043C/\\u0441");\n\n    // Меняем цвет в зависимости от скорости\n    var speedRatio = speed / maxSpeed;\n    if (speedRatio < 0.5) {\n      speedDisplay.style.color = \'white\'; // Обычная скорость\n    } else if (speedRatio < 0.8) {\n      speedDisplay.style.color = \'yellow\'; // Высокая скорость\n    } else {\n      speedDisplay.style.color = \'orange\'; // Приближение к максимуму\n      if (speedRatio > 0.95) {\n        speedDisplay.style.color = \'red\'; // Почти максимальная\n      }\n    }\n  }\n  if (maxSpeedDisplay) {\n    maxSpeedDisplay.textContent = "\\u041C\\u0430\\u043A\\u0441. \\u0441\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C: ".concat(maxSpeed.toFixed(1), " \\u043C/\\u0441");\n  }\n  if (massDisplay) {\n    massDisplay.textContent = "\\u041C\\u0430\\u0441\\u0441\\u0430: ".concat(mass.toFixed(1), " \\u043A\\u0433");\n  }\n\n  // Добавляем отладку для отслеживания значений\n  console.log("[Speed] Current: ".concat(speed.toFixed(2), " m/s, Max: ").concat(maxSpeed, " m/s, Mass: ").concat(mass, " kg"));\n}\nfunction updatePhysicsObjects(objects, deltaTime) {\n  // Переменные для диагностики\n  var mainSpherePos = null;\n  var ammoShadowPos = null;\n  var bulletShadowPos = null;\n\n  // Обновляем все объекты\n  for (var id in objects) {\n    var obj = objects[id];\n    if (!obj.mesh) continue;\n\n    // Проверяем, новый ли это объект\n    var isNewObject = objectCreationTimes.has(id) && Date.now() - objectCreationTimes.get(id) < NEW_OBJECT_TIMEOUT;\n\n    // Пропускаем обработку террейна (он статичен)\n    if (obj.object_type === "terrain") continue;\n    var currentTime = Date.now();\n\n    // Пропускаем обработку, если данные слишком старые\n    if (!obj.hasNewServerData && (!obj.lastServerUpdate || currentTime - obj.lastServerUpdate > 1000)) {\n      continue; // Переходим к следующему объекту\n    }\n\n    // Если серверная позиция не изменилась с прошлого обновления, пропускаем коррекцию\n    if (obj.prevServerPos && obj.serverPos && Math.abs(obj.prevServerPos.x - obj.serverPos.x) < 0.001 && Math.abs(obj.prevServerPos.y - obj.serverPos.y) < 0.001 && Math.abs(obj.prevServerPos.z - obj.serverPos.z) < 0.001) {\n      // console.log(`Серверная позиция не изменилась для ${id}, пропускаем коррекцию`);\n      continue;\n    }\n    switch (obj.physicsBy) {\n      case "ammo":\n        // Обновление только по физике Ammo.js\n        if (obj.body && obj.object_type !== "terrain") {\n          var trans = new window.Ammo.btTransform();\n          obj.body.getMotionState().getWorldTransform(trans);\n          var locX = trans.getOrigin().x();\n          var locY = trans.getOrigin().y();\n          var locZ = trans.getOrigin().z();\n          var qx = trans.getRotation().x();\n          var qy = trans.getRotation().y();\n          var qz = trans.getRotation().z();\n          var qw = trans.getRotation().w();\n          obj.mesh.position.set(locX, locY, locZ);\n          obj.mesh.quaternion.set(qx, qy, qz, qw);\n\n          // Сохраняем для диагностики\n          if (id === "ammo_shadow") {\n            ammoShadowPos = {\n              x: locX,\n              y: locY,\n              z: locZ\n            };\n          }\n        }\n        break;\n      case "bullet":\n        // Обновление по серверным данным без интерполяции\n        if (obj.serverPos && obj.object_type !== "terrain") {\n          // Устанавливаем точную позицию меша из серверных данных\n          obj.mesh.position.set(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z);\n\n          // Обновляем физическое тело\n          if (obj.body) {\n            var transform = new window.Ammo.btTransform();\n            transform.setIdentity();\n            transform.setOrigin(new window.Ammo.btVector3(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z));\n\n            // Применяем трансформацию к физическому телу\n            obj.body.getMotionState().setWorldTransform(transform);\n\n            // Если есть серверная скорость, применяем её\n            if (obj.serverVelocity) {\n              var _velocity2 = new window.Ammo.btVector3(obj.serverVelocity.x, obj.serverVelocity.y, obj.serverVelocity.z);\n              obj.body.setLinearVelocity(_velocity2);\n              window.Ammo.destroy(_velocity2);\n            }\n            window.Ammo.destroy(transform);\n          }\n\n          // Сохраняем для диагностики\n          if (id === "bullet_shadow") {\n            bulletShadowPos = {\n              x: obj.serverPos.x,\n              y: obj.serverPos.y,\n              z: obj.serverPos.z\n            };\n          }\n        }\n        break;\n      case "both":\n        // Гибридный подход для объектов, управляемых обоими источниками\n        if (obj.serverPos && obj.object_type !== "terrain" && obj.body) {\n          // Сохраняем позицию основной сферы для диагностики\n          if (id === "mainPlayer1") {\n            mainSpherePos = {\n              x: obj.mesh.position.x,\n              y: obj.mesh.position.y,\n              z: obj.mesh.position.z,\n              serverX: obj.serverPos.x,\n              serverY: obj.serverPos.y,\n              serverZ: obj.serverPos.z\n            };\n          }\n\n          // Получаем текущую позицию из физического тела\n          var _transform = new window.Ammo.btTransform();\n          obj.body.getMotionState().getWorldTransform(_transform);\n\n          // Вычисляем разницу между серверной и текущей позицией физического тела\n          var currentX = _transform.getOrigin().x();\n          var currentY = _transform.getOrigin().y();\n          var currentZ = _transform.getOrigin().z();\n\n          // Нам важно знать скорость объекта для выбора оптимальной стратегии коррекции\n          var _velocity3 = obj.body.getLinearVelocity();\n          var speedSq = _velocity3.x() * _velocity3.x() + _velocity3.y() * _velocity3.y() + _velocity3.z() * _velocity3.z();\n          var speed = Math.sqrt(speedSq);\n          var isMovingFast = speedSq > 4.0; // Если скорость больше 2 м/с\n\n          var targetX = obj.serverPos.x;\n          var targetY = obj.serverPos.y;\n          var targetZ = obj.serverPos.z;\n          if (obj.serverVelocity) {\n            // Вычисляем прогнозируемую позицию на основе серверной скорости\n            var predictedX = obj.serverPos.x + obj.serverVelocity.x * deltaTime;\n            var predictedY = obj.serverPos.y + obj.serverVelocity.y * deltaTime;\n            var predictedZ = obj.serverPos.z + obj.serverVelocity.z * deltaTime;\n\n            // Вычисляем разницу между прогнозируемой и текущей позициями\n            var dxPredicted = predictedX - currentX;\n            var dyPredicted = predictedY - currentY;\n            var dzPredicted = predictedZ - currentZ;\n\n            // Вычисляем расстояние\n            var distancePredicted = Math.sqrt(dxPredicted * dxPredicted + dyPredicted * dyPredicted + dzPredicted * dzPredicted);\n\n            // Используем прогнозируемую позицию, если она ближе к текущей\n            if (distancePredicted < distance) {\n              targetX = predictedX;\n              targetY = predictedY;\n              targetZ = predictedZ;\n            }\n          }\n\n          // Теперь разницу считаем от целевой позиции, а не от серверной\n          var dx = targetX - currentX;\n          var dy = targetY - currentY;\n          var dz = targetZ - currentZ;\n\n          // Вычисляем расстояние\n          var distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\n\n          // Логируем только при значительных расхождениях\n          if (distance > DEAD_ZONE || isMovingFast) {\n            throttledLog("Physics", "\\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(id, ": \\u0420\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435: ").concat(distance.toFixed(3), ", \\u0421\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C: ").concat(speed.toFixed(3), ", \\u0411\\u044B\\u0441\\u0442\\u0440\\u043E: ").concat(isMovingFast, ", \\u041A\\u043B\\u0438\\u0435\\u043D\\u0442: {x: ").concat(currentX.toFixed(2), ", y: ").concat(currentY.toFixed(2), ", z: ").concat(currentZ.toFixed(2), "}, \\u0421\\u0435\\u0440\\u0432\\u0435\\u0440: {x: ").concat(obj.serverPos.x.toFixed(2), ", y: ").concat(obj.serverPos.y.toFixed(2), ", z: ").concat(obj.serverPos.z.toFixed(2), "}"));\n          }\n\n          // Применяем client-side prediction\n          if (distance > Math.max(PREDICTION_MAX_ERROR, speed * 0.1) || isNewObject && distance > 5.0) {\n            // Добавляем учет скорости при определении необходимости сброса\n            var speedBasedError = Math.max(PREDICTION_MAX_ERROR, speed * 0.2); // Допускаем большую ошибку при высокой скорости\n\n            // Определяем коэффициент сглаживания на основе состояния объекта\n            var smoothFactor = PREDICTION_SMOOTH_FACTOR;\n\n            // Для новых объектов используем более жесткую коррекцию\n            if (isNewObject) {\n              smoothFactor = 0.8; // 80% серверной позиции\n              // throttledLog("Physics", \n              //     `Новый объект ${id}, применяем жесткую коррекцию (${smoothFactor})`\n              // );\n            } else if (DISTANCE_BASED_SMOOTH_FACTOR) {\n              // Чем больше расхождение, тем больше коэффициент\n              smoothFactor = Math.min(distance / 20.0, 0.5); // Максимум 0.5\n            }\n\n            // Для больших расхождений или новых объектов применяем телепортацию\n            if (distance > speedBasedError || isNewObject && distance > 5.0) {\n              console.warn("apply teleportation :", distance);\n\n              // Телепортируем объект\n              _transform.setOrigin(new window.Ammo.btVector3(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z));\n              obj.body.getMotionState().setWorldTransform(_transform);\n\n              // Проверим, была ли применена телепортация\n              var afterTeleport = new window.Ammo.btTransform();\n              obj.body.getMotionState().getWorldTransform(afterTeleport);\n              var teleportX = afterTeleport.getOrigin().x();\n              var teleportY = afterTeleport.getOrigin().y();\n              var teleportZ = afterTeleport.getOrigin().z();\n\n              // Проверим, насколько телепортация была успешной\n              var teleportSuccess = Math.abs(teleportX - obj.serverPos.x) < 0.1 && Math.abs(teleportY - obj.serverPos.y) < 0.1 && Math.abs(teleportZ - obj.serverPos.z) < 0.1;\n              console.log("[Physics] \\u0422\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0430\\u0446\\u0438\\u044F ".concat(teleportSuccess ? \'успешна\' : \'неудачна\', " - \\u0426\\u0435\\u043B\\u044C: {x: ").concat(obj.serverPos.x.toFixed(2), ", y: ").concat(obj.serverPos.y.toFixed(2), ", z: ").concat(obj.serverPos.z.toFixed(2), "}, \\u0424\\u0430\\u043A\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u0438: {x: ").concat(teleportX.toFixed(2), ", y: ").concat(teleportY.toFixed(2), ", z: ").concat(teleportZ.toFixed(2), "}"));\n              window.Ammo.destroy(afterTeleport);\n\n              // Сбрасываем скорость только при существенных расхождениях\n              if (distance > speedBasedError * 1.5) {\n                var timeSinceLastUpdate = Date.now() - obj.lastServerUpdate;\n                console.warn("[Reset Velocity] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(id, ": distance=").concat(distance.toFixed(2), ", threshold=").concat(speedBasedError.toFixed(2), ", timeSinceUpdate=").concat(timeSinceLastUpdate, "ms"));\n\n                // При очень больших расхождениях полностью сбрасываем скорость\n                var zero = new window.Ammo.btVector3(0, 0, 0);\n                obj.body.setLinearVelocity(zero);\n                obj.body.setAngularVelocity(zero);\n                window.Ammo.destroy(zero);\n              } else if (obj.serverVelocity) {\n                // Если есть рассчитанная серверная скорость, применяем её\n                console.warn("apply server velocity :", obj.serverVelocity);\n                var serverVel = new window.Ammo.btVector3(obj.serverVelocity.x, obj.serverVelocity.y, obj.serverVelocity.z);\n                obj.body.setLinearVelocity(serverVel);\n                window.Ammo.destroy(serverVel);\n              } else {\n                // Иначе уменьшаем текущую скорость\n                console.warn("apply damped velocity :", _velocity3);\n                var dampedVelocity = new window.Ammo.btVector3(_velocity3.x() * 0.5, _velocity3.y() * 0.5, _velocity3.z() * 0.5);\n                obj.body.setLinearVelocity(dampedVelocity);\n                window.Ammo.destroy(dampedVelocity);\n              }\n\n              // Немедленно синхронизируем меш с физическим телом\n              var updatedTransform = new window.Ammo.btTransform();\n              obj.body.getMotionState().getWorldTransform(updatedTransform);\n              var px = updatedTransform.getOrigin().x();\n              var py = updatedTransform.getOrigin().y();\n              var pz = updatedTransform.getOrigin().z();\n              obj.mesh.position.set(px, py, pz);\n              window.Ammo.destroy(updatedTransform);\n            } else if (distance > TELEPORT_THRESHOLD) {\n              // Мягкая коррекция для средних расхождений\n              // Смешиваем текущую позицию с серверной\n\n              var correctionX = obj.serverPos.x * smoothFactor + currentX * (1 - smoothFactor);\n              var correctionY = obj.serverPos.y * smoothFactor + currentY * (1 - smoothFactor);\n              var correctionZ = obj.serverPos.z * smoothFactor + currentZ * (1 - smoothFactor);\n              var correctionVector = new window.Ammo.btVector3(correctionX, correctionY, correctionZ);\n              console.warn("smooth correction", correctionVector);\n              _transform.setOrigin(new window.Ammo.btVector3(correctionX, correctionY, correctionZ));\n              obj.body.getMotionState().setWorldTransform(_transform);\n\n              // Если мы перемещаем объект, обновляем mesh непосредственно для большей плавности\n              obj.mesh.position.set(correctionX, correctionY, correctionZ);\n\n              // Обновляем скорость, чтобы она учитывала направление серверного движения\n              if (obj.serverVelocity) {\n                var blendedVelocity = new window.Ammo.btVector3(_velocity3.x() * (1 - smoothFactor) + obj.serverVelocity.x * smoothFactor, _velocity3.y() * (1 - smoothFactor) + obj.serverVelocity.y * smoothFactor, _velocity3.z() * (1 - smoothFactor) + obj.serverVelocity.z * smoothFactor);\n                obj.body.setLinearVelocity(blendedVelocity);\n                window.Ammo.destroy(blendedVelocity);\n              }\n            } else {\n              // Для небольших расхождений - корректирующая сила\n              // Более плавная коррекция для медленно движущихся объектов\n              var adaptiveStrength = isMovingFast ? CORRECTION_STRENGTH : CORRECTION_STRENGTH * 0.7;\n              var magnitude = distance * adaptiveStrength;\n\n              // Для объектов на земле не применяем вертикальную коррекцию,\n              // если они находятся на поверхности с небольшой разницей по высоте\n              var correctY = true;\n              if (Math.abs(dy) < DEAD_ZONE && Math.abs(_velocity3.y()) < 0.5) {\n                correctY = false;\n              }\n              var force = new window.Ammo.btVector3(dx * magnitude, correctY ? dy * magnitude : 0, dz * magnitude);\n\n              // Активируем тело и применяем силу\n              obj.body.activate(true);\n              obj.body.applyCentralForce(force);\n              window.Ammo.destroy(force);\n            }\n          }\n\n          // Добавляем подробную диагностику для основного игрока\n          if (id === "mainPlayer1") {\n            console.debug("[Physics Debug] ".concat(id, ": distance=").concat(distance.toFixed(2), ", speed=").concat(speed.toFixed(2), ", threshold=").concat(Math.max(PREDICTION_MAX_ERROR, speed * 0.1).toFixed(2), ", isNewObject=").concat(isNewObject));\n          }\n          window.Ammo.destroy(_velocity3);\n          window.Ammo.destroy(_transform);\n        }\n        break;\n      default:\n        //throttledLog("Error", `Неизвестный тип physicsBy для объекта ${id}: ${obj.physicsBy}`);\n        break;\n    }\n\n    // В конце обработки объекта\n    obj.hasNewServerData = false; // Сбрасываем флаг, показывая что мы обработали новые данные\n  }\n\n  // Выводим диагностическую информацию о расхождениях\n  if (mainSpherePos && ammoShadowPos && bulletShadowPos) {\n    // Вычисляем расхождения между диагностическими сферами\n    var mainToAmmoDistance = Math.sqrt(Math.pow(mainSpherePos.x - ammoShadowPos.x, 2) + Math.pow(mainSpherePos.y - ammoShadowPos.y, 2) + Math.pow(mainSpherePos.z - ammoShadowPos.z, 2));\n    var mainToBulletDistance = Math.sqrt(Math.pow(mainSpherePos.x - bulletShadowPos.x, 2) + Math.pow(mainSpherePos.y - bulletShadowPos.y, 2) + Math.pow(mainSpherePos.z - bulletShadowPos.z, 2));\n    var serverToMainDistance = Math.sqrt(Math.pow(mainSpherePos.serverX - mainSpherePos.x, 2) + Math.pow(mainSpherePos.serverY - mainSpherePos.y, 2) + Math.pow(mainSpherePos.serverZ - mainSpherePos.z, 2));\n\n    // Выводим статистику только примерно раз в секунду (чтобы не спамить консоль)\n    if (Math.random() < 0.016) {\n      // примерно при 60 FPS будет выводить раз в секунду\n      throttledLog("Physics", "Диагностика расхождений:", {\n        "Основная сфера -> Ammo-тень": mainToAmmoDistance.toFixed(3),\n        "Основная сфера -> Bullet-тень": mainToBulletDistance.toFixed(3),\n        "Серверная позиция -> Основная сфера": serverToMainDistance.toFixed(3)\n      });\n    }\n  }\n}\n\n// Функция для применения импульса\nfunction applyImpulseToSphere(id, direction, strength) {\n  var object = objects_objects[id];\n  if (!object || !object.body) return;\n  try {\n    if (typeof Ammo === \'undefined\') {\n      console.error(\'Ammo.js не инициализирован\');\n      return;\n    }\n\n    // Нормализуем направление и применяем силу\n    var impulseVec = new Ammo.btVector3(direction.x * strength, direction.y * strength, direction.z * strength);\n\n    // Применяем импульс к телу\n    object.body.applyCentralImpulse(impulseVec);\n\n    // Выводим информацию о примененном импульсе\n    console.log("[Physics] \\u0418\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441 \\u043F\\u0440\\u0438\\u043C\\u0435\\u043D\\u0435\\u043D \\u043A ".concat(id, ": \\n            \\u041D\\u0430\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435: (").concat(direction.x.toFixed(2), ", ").concat(direction.y.toFixed(2), ", ").concat(direction.z.toFixed(2), ")\\n            \\u0421\\u0438\\u043B\\u0430: ").concat(strength.toFixed(2)));\n\n    // Освобождаем память\n    Ammo.destroy(impulseVec);\n  } catch (error) {\n    console.error(\'Ошибка при применении импульса:\', error);\n  }\n}\n\n// Функция для получения обновлений с сервера\nfunction receiveObjectUpdate(data) {\n  try {\n    // Проверяем, в каком формате пришли данные\n    if (data.objects) {\n      // Стандартный формат с полем objects\n      var objectIds = Object.keys(data.objects);\n      if (objectIds.length === 0) {\n        console.warn("[Physics] Получен пустой список объектов");\n        return;\n      }\n\n      // Обрабатываем каждый объект\n      for (var _i = 0, _objectIds = objectIds; _i < _objectIds.length; _i++) {\n        var id = _objectIds[_i];\n        var objectData = data.objects[id];\n        updateSingleObject(id, objectData);\n      }\n    } else if (data.id) {\n      // Альтернативный формат, где данные напрямую в корне объекта\n      // Создаем временную структуру для совместимости\n      var _id = data.id;\n      console.log("[Physics] \\u0418\\u0441\\u0445\\u043E\\u0434\\u043D\\u044B\\u0435 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435 \\u0441 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430 \\u0434\\u043B\\u044F ".concat(_id, ":"), {\n        id: data.id,\n        position: data.x !== undefined ? {\n          x: data.x,\n          y: data.y,\n          z: data.z\n        } : "не указана",\n        velocity: data.vx !== undefined ? {\n          vx: data.vx,\n          vy: data.vy,\n          vz: data.vz\n        } : "не указана",\n        raw: _objectSpread({}, data) // Копируем все поля объекта для диагностики\n      });\n\n      // Преобразуем данные в формат, ожидаемый функцией updateSingleObject\n      var _objectData = {\n        velocity: data.vx !== undefined ? {\n          x: data.vx,\n          y: data.vy,\n          z: data.vz\n        } : undefined,\n        position: data.x !== undefined ? {\n          x: data.x,\n          y: data.y,\n          z: data.z\n        } : undefined\n      };\n\n      // Добавляем отладочную информацию\n      console.log("[Physics] \\u041E\\u0431\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 \\u0432 \\u0430\\u043B\\u044C\\u0442\\u0435\\u0440\\u043D\\u0430\\u0442\\u0438\\u0432\\u043D\\u043E\\u043C \\u0444\\u043E\\u0440\\u043C\\u0430\\u0442\\u0435 \\u0434\\u043B\\u044F ".concat(_id, ":"), data);\n\n      // Обрабатываем объект\n      updateSingleObject(_id, _objectData);\n    } else {\n      console.warn("[Physics] Получены данные в неизвестном формате:", data);\n    }\n  } catch (e) {\n    console.error("[Physics] Ошибка при обработке обновления объектов:", e);\n  }\n}\n\n// Вспомогательная функция для обновления одного объекта\nfunction updateSingleObject(id, objectData) {\n  var obj = objects_objects[id];\n\n  // Если объект еще не создан, пропускаем его\n  if (!obj) {\n    console.warn("[Physics] \\u041F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u043E \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0434\\u043B\\u044F \\u043D\\u0435\\u0441\\u0443\\u0449\\u0435\\u0441\\u0442\\u0432\\u0443\\u044E\\u0449\\u0435\\u0433\\u043E \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430: ".concat(id));\n    return;\n  }\n\n  // Проверяем наличие данных о скорости\n  if (objectData.velocity) {\n    var vel = objectData.velocity;\n\n    // Выводим подробную информацию о полученной скорости\n    console.log("[Physics] \\u041F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u0430 \\u0441\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C \\u0434\\u043B\\u044F ".concat(id, ": ") + "x=".concat(vel.x.toFixed(2), ", y=").concat(vel.y.toFixed(2), ", z=").concat(vel.z.toFixed(2)));\n\n    // Вычисляем величину скорости\n    var speed = Math.sqrt(vel.x * vel.x + vel.y * vel.y + vel.z * vel.z);\n    console.log("[Physics] \\u0422\\u0435\\u043A\\u0443\\u0449\\u0430\\u044F \\u0441\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C ".concat(id, ": ").concat(speed.toFixed(2), " \\u043C/\\u0441"));\n\n    // Сохраняем скорость в объекте\n    obj.serverVelocity = {\n      x: vel.x,\n      y: vel.y,\n      z: vel.z\n    };\n\n    // Обновляем отображение скорости, если это игрок\n    if (id.startsWith(\'mainPlayer1\')) {\n      // Используем значение массы из объекта\n      var maxDisplaySpeed = 1000.0; // Большое значение для снятия ограничений\n      var mass = obj.mass || 5.0; // Используем массу из объекта или стандартное значение\n\n      // Обновляем отображение\n      //updatePlayerSpeedDisplay(speed, maxDisplaySpeed, mass);\n\n      // Логируем очень высокие скорости, но не ограничиваем\n      if (speed > 500) {\n        console.log("[Physics] \\u0412\\u044B\\u0441\\u043E\\u043A\\u0430\\u044F \\u0441\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C ".concat(id, ": ").concat(speed.toFixed(2), " \\u043C/\\u0441"));\n      }\n    }\n  }\n\n  // Обрабатываем данные о позиции\n  if (objectData.position) {\n    // Сохраняем предыдущую серверную позицию для сравнения\n    if (obj.serverPos) {\n      obj.prevServerPos = {\n        x: obj.serverPos.x,\n        y: obj.serverPos.y,\n        z: obj.serverPos.z\n      };\n    }\n    obj.serverPos = {\n      x: objectData.position.x,\n      y: objectData.position.y,\n      z: objectData.position.z\n    };\n    obj.lastServerUpdate = Date.now();\n    obj.hasNewServerData = true; // Флаг, указывающий на новые данные\n  }\n\n  // Добавить после обработки position\n  if (objectData.quaternion) {\n    // Сохраняем ориентацию\n    obj.serverQuaternion = {\n      w: objectData.quaternion.w,\n      x: objectData.quaternion.x,\n      y: objectData.quaternion.y,\n      z: objectData.quaternion.z\n    };\n\n    // Применяем к меше, если она существует\n    if (obj.mesh) {\n      obj.mesh.quaternion.set(objectData.quaternion.x, objectData.quaternion.y, objectData.quaternion.z, objectData.quaternion.w);\n    }\n\n    // Применяем к физическому телу, если оно существует\n    if (obj.body) {\n      var transform = new window.Ammo.btTransform();\n      obj.body.getMotionState().getWorldTransform(transform);\n      var quaternion = new window.Ammo.btQuaternion(objectData.quaternion.x, objectData.quaternion.y, objectData.quaternion.z, objectData.quaternion.w);\n      transform.setRotation(quaternion);\n      obj.body.getMotionState().setWorldTransform(transform);\n      window.Ammo.destroy(quaternion);\n      window.Ammo.destroy(transform);\n    }\n  }\n\n  // Получаем текущую позицию объекта\n  if (obj.body) {\n    var _objectData$position, _objectData$position2, _objectData$position3;\n    var _transform2 = new window.Ammo.btTransform();\n    obj.body.getMotionState().getWorldTransform(_transform2);\n    var posX = _transform2.getOrigin().x();\n    var posY = _transform2.getOrigin().y();\n    var posZ = _transform2.getOrigin().z();\n    console.log("[Physics] \\u041F\\u043E\\u0437\\u0438\\u0446\\u0438\\u044F \\u0441\\u0440\\u0430\\u0432\\u043D\\u0435\\u043D\\u0438\\u0435 - \\u041A\\u043B\\u0438\\u0435\\u043D\\u0442: {x: ".concat(posX.toFixed(2), ", y: ").concat(posY.toFixed(2), ", z: ").concat(posZ.toFixed(2), "}, \\u0421\\u0435\\u0440\\u0432\\u0435\\u0440: {x: ").concat(((_objectData$position = objectData.position) === null || _objectData$position === void 0 ? void 0 : _objectData$position.x.toFixed(2)) || "н/д", ", y: ").concat(((_objectData$position2 = objectData.position) === null || _objectData$position2 === void 0 ? void 0 : _objectData$position2.y.toFixed(2)) || "н/д", ", z: ").concat(((_objectData$position3 = objectData.position) === null || _objectData$position3 === void 0 ? void 0 : _objectData$position3.z.toFixed(2)) || "н/д", "}"));\n\n    // Если позиционные данные существуют, проверим расхождение\n    if (objectData.position) {\n      var dx = objectData.position.x - posX;\n      var dy = objectData.position.y - posY;\n      var dz = objectData.position.z - posZ;\n      var distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\n      console.log("[Physics] \\u0420\\u0430\\u0441\\u0445\\u043E\\u0436\\u0434\\u0435\\u043D\\u0438\\u0435 \\u043C\\u0435\\u0436\\u0434\\u0443 \\u043A\\u043B\\u0438\\u0435\\u043D\\u0442\\u043E\\u043C \\u0438 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u043E\\u043C: ".concat(distance.toFixed(2), " \\u0435\\u0434\\u0438\\u043D\\u0438\\u0446"));\n    }\n    window.Ammo.destroy(_transform2);\n  }\n\n  // Если мы обновляем позицию\n  if (objectData.position && obj.body) {\n    // Запомним исходную позицию перед обновлением\n    var oldTransform = new window.Ammo.btTransform();\n    obj.body.getMotionState().getWorldTransform(oldTransform);\n    var oldX = oldTransform.getOrigin().x();\n    var oldY = oldTransform.getOrigin().y();\n    var oldZ = oldTransform.getOrigin().z();\n\n    // Применяем новую позицию\n    var newTransform = new window.Ammo.btTransform();\n    newTransform.setIdentity();\n    newTransform.setOrigin(new window.Ammo.btVector3(objectData.position.x, objectData.position.y, objectData.position.z));\n    obj.body.getMotionState().setWorldTransform(newTransform);\n\n    // Проверяем, изменилась ли позиция\n    var checkTransform = new window.Ammo.btTransform();\n    obj.body.getMotionState().getWorldTransform(checkTransform);\n    var newX = checkTransform.getOrigin().x();\n    var newY = checkTransform.getOrigin().y();\n    var newZ = checkTransform.getOrigin().z();\n    console.log("[Physics] \\u0422\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0430\\u0446\\u0438\\u044F - \\u0414\\u043E: {x: ".concat(oldX.toFixed(2), ", y: ").concat(oldY.toFixed(2), ", z: ").concat(oldZ.toFixed(2), "}, \\u041F\\u043E\\u0441\\u043B\\u0435: {x: ").concat(newX.toFixed(2), ", y: ").concat(newY.toFixed(2), ", z: ").concat(newZ.toFixed(2), "}, \\u0426\\u0435\\u043B\\u044C: {x: ").concat(objectData.position.x.toFixed(2), ", y: ").concat(objectData.position.y.toFixed(2), ", z: ").concat(objectData.position.z.toFixed(2), "}"));\n\n    // Проверяем успешность\n    var success = Math.abs(newX - objectData.position.x) < 0.1 && Math.abs(newY - objectData.position.y) < 0.1 && Math.abs(newZ - objectData.position.z) < 0.1;\n    console.log("[Physics] \\u0422\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0430\\u0446\\u0438\\u044F ".concat(success ? \'успешна\' : \'неудачна\'));\n\n    // Очищаем ресурсы\n    window.Ammo.destroy(oldTransform);\n    window.Ammo.destroy(newTransform);\n    window.Ammo.destroy(checkTransform);\n  }\n}\n\n// В файле physics.js добавляем функцию для создания случайной силы при столкновении\n// TODO: Реализация отложена на будущее\n/*\nexport function addCollisionBounceEffect() {\n    try {\n        if (typeof Ammo === \'undefined\') return;\n        \n        // Добавляем обработчик столкновений, который будет добавлять случайную силу\n        // Эта функция может быть вызвана в начале симуляции\n        window.addEventListener(\'collisions\', (e) => {\n            const { body1, body2 } = e.detail;\n            \n            // Добавляем случайный импульс при столкновении\n            if (body1 && body1.getType() === Ammo.btRigidBody) {\n                const randomImpulse = new Ammo.btVector3(\n                    (Math.random() - 0.5) * 15, // Увеличиваем с 10 до 15\n                    Math.random() * 8,          // Увеличиваем с 5 до 8\n                    (Math.random() - 0.5) * 15  // Увеличиваем с 10 до 15\n                );\n                body1.applyCentralImpulse(randomImpulse);\n                Ammo.destroy(randomImpulse);\n            }\n            \n            if (body2 && body2.getType() === Ammo.btRigidBody) {\n                const randomImpulse = new Ammo.btVector3(\n                    (Math.random() - 0.5) * 15, // Увеличиваем с 10 до 15\n                    Math.random() * 8,          // Увеличиваем с 5 до 8\n                    (Math.random() - 0.5) * 15  // Увеличиваем с 10 до 15\n                );\n                body2.applyCentralImpulse(randomImpulse);\n                Ammo.destroy(randomImpulse);\n            }\n        });\n        \n        console.log("Добавлен эффект отскока при столкновениях");\n    } catch (error) {\n        console.error(\'Ошибка при добавлении эффекта отскока:\', error);\n    }\n}\n*/\n\n// Функция для применения конфигурации физики\nfunction applyPhysicsConfig(config) {\n  if (!config) {\n    console.warn("[Physics] Получена пустая конфигурация физики");\n    return;\n  }\n  console.log("[Physics] Применяем конфигурацию физики:", config);\n\n  // Применяем настройки ко всем объектам\n  for (var id in objects_objects) {\n    var obj = objects_objects[id];\n    if (!obj || !obj.body) continue;\n    try {\n      // Обновляем массу объекта\n      if (id.startsWith(\'mainPlayer\')) {\n        // Игроки получают массу из конфигурации\n        var mass = config.player_mass || 15.0;\n        obj.mass = mass;\n        if (obj.body) {\n          // Сохраняем текущее состояние движения\n          // const velocity = obj.body.getLinearVelocity();\n\n          // // Создаем новую информацию о инерции\n          // const shape = obj.body.getCollisionShape();\n          // const localInertia = new Ammo.btVector3(0, 0, 0);\n          // shape.calculateLocalInertia(mass, localInertia);\n\n          // // Устанавливаем новую массу\n          // obj.body.setMassProps(mass, localInertia);\n\n          // // Восстанавливаем скорость\n          // obj.body.setLinearVelocity(velocity);\n\n          // Активируем объект для обновления физики\n          obj.body.activate(true);\n          console.log("[Physics] \\u0423\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0430 \\u043C\\u0430\\u0441\\u0441\\u0430 ".concat(id, ": ").concat(mass, " \\u043A\\u0433"));\n\n          // Освобождаем ресурсы\n          Ammo.destroy(localInertia);\n          Ammo.destroy(velocity);\n        }\n      } else if (id.includes(\'box\')) {\n        // Боксы получают свою массу из конфигурации\n        var _mass = config.default_box_mass || 5.0;\n        obj.mass = _mass;\n        if (obj.body) {\n          // Аналогично для коробок\n          var _velocity4 = obj.body.getLinearVelocity();\n          var shape = obj.body.getCollisionShape();\n          var _localInertia = new Ammo.btVector3(0, 0, 0);\n          shape.calculateLocalInertia(_mass, _localInertia);\n          obj.body.setMassProps(_mass, _localInertia);\n          obj.body.setLinearVelocity(_velocity4);\n          obj.body.activate(true);\n          console.log("[Physics] \\u0423\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0430 \\u043C\\u0430\\u0441\\u0441\\u0430 ".concat(id, ": ").concat(_mass, " \\u043A\\u0433"));\n          Ammo.destroy(_localInertia);\n          Ammo.destroy(_velocity4);\n        }\n      }\n\n      // Можно также обновить другие свойства (трение, отскок и т.д.)\n      if (obj.body) {\n        // Устанавливаем отскок (restitution)\n        obj.body.setRestitution(config.restitution || 0.9);\n\n        // Устанавливаем трение (friction)\n        obj.body.setFriction(config.friction || 0.5);\n      }\n    } catch (e) {\n      console.error("[Physics] \\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043F\\u0440\\u0438\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u0438 \\u043A\\u043E\\u043D\\u0444\\u0438\\u0433\\u0443\\u0440\\u0430\\u0446\\u0438\\u0438 \\u043A ".concat(id, ":"), e);\n    }\n  }\n\n  // Сохраняем глобальные параметры для использования при создании новых объектов\n  window.PHYSICS_CONFIG = config;\n  console.log("[Physics] Конфигурация физики успешно применена");\n}\n// EXTERNAL MODULE: ./node_modules/stats.js/build/stats.min.js\nvar stats_min = __webpack_require__(571);\nvar stats_min_default = /*#__PURE__*/__webpack_require__.n(stats_min);\n;// ./src/index.js\nfunction src_typeof(o) { "@babel/helpers - typeof"; return src_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, src_typeof(o); }\nfunction src_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ src_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == src_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(src_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction src_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction src_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// index.js\n\n\n\n\n\n\n\n\nvar stats = new (stats_min_default())();\nstats.showPanel(0); // 0: FPS, 1: ms, 2: memory\ndocument.body.appendChild(stats.dom);\nfunction animate() {\n  stats.begin();\n  stepPhysics(1 / 60);\n  updatePhysicsObjects(objects_objects);\n\n  // Обновляем камеру из нового модуля\n  updateCamera();\n\n  // Обновляем положение источника света относительно камеры, как солнце\n  updateShadowCamera(camera);\n\n  // Обновляем ArrowHelper\n  if (gameStateManager.playerMesh) {\n    updateArrowHelper(gameStateManager.playerMesh);\n  }\n  renderer.render(scene_scene, camera);\n  stats.end(); // Завершаем замер\n\n  requestAnimationFrame(animate);\n}\nfunction start() {\n  return _start.apply(this, arguments);\n}\nfunction _start() {\n  _start = src_asyncToGenerator(/*#__PURE__*/src_regeneratorRuntime().mark(function _callee() {\n    var playerInfo, playerInfoDiv, playerInfoElement, speedDiv, maxSpeedDiv, massDiv, ws;\n    return src_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          console.log("Start");\n          initScene();\n\n          // Инициализируем камеру из нового модуля\n          initCamera();\n\n          // Инициализируем элементы интерфейса для отображения скорости и других параметров\n          console.log("Инициализация элементов интерфейса...");\n          // Проверяем, существуют ли уже элементы\n          if (!document.getElementById(\'player-speed\')) {\n            console.log("Элементы интерфейса игрока не найдены, создаем...");\n            playerInfo = document.getElementById(\'player-info\');\n            if (!playerInfo) {\n              console.error("Элемент player-info не найден! Создаем его...");\n              playerInfoDiv = document.createElement(\'div\');\n              playerInfoDiv.id = \'player-info\';\n              playerInfoDiv.style.position = \'absolute\';\n              playerInfoDiv.style.top = \'0px\';\n              playerInfoDiv.style.left = \'290px\';\n              playerInfoDiv.style.backgroundColor = \'rgba(0, 0, 0, 0.5)\';\n              playerInfoDiv.style.color = \'white\';\n              playerInfoDiv.style.padding = \'5px 10px\';\n              playerInfoDiv.style.borderRadius = \'5px\';\n              playerInfoDiv.style.fontFamily = \'Arial, sans-serif\';\n              playerInfoDiv.style.fontSize = \'14px\';\n              playerInfoDiv.style.zIndex = \'1000\';\n              playerInfoDiv.style.display = \'flex\';\n              playerInfoDiv.style.flexDirection = \'column\';\n              playerInfoDiv.style.gap = \'5px\';\n              document.body.appendChild(playerInfoDiv);\n            }\n            playerInfoElement = document.getElementById(\'player-info\') || playerInfo;\n            speedDiv = document.createElement(\'div\');\n            speedDiv.id = \'player-speed\';\n            speedDiv.textContent = \'Скорость: -- м/с\';\n            playerInfoElement.appendChild(speedDiv);\n            maxSpeedDiv = document.createElement(\'div\');\n            maxSpeedDiv.id = \'player-max-speed\';\n            maxSpeedDiv.textContent = \'Макс. скорость: -- м/с\';\n            playerInfoElement.appendChild(maxSpeedDiv);\n            massDiv = document.createElement(\'div\');\n            massDiv.id = \'player-mass\';\n            massDiv.textContent = \'Масса: -- кг\';\n            playerInfoElement.appendChild(massDiv);\n            console.log("Элементы интерфейса игрока созданы");\n          } else {\n            console.log("Элементы интерфейса игрока уже существуют");\n          }\n          _context.prev = 5;\n          _context.next = 8;\n          return new Promise(function (resolve) {\n            return setTimeout(resolve, 500);\n          });\n        case 8:\n          _context.next = 10;\n          return initAmmo();\n        case 10:\n          _context.next = 12;\n          return initNetwork();\n        case 12:\n          ws = _context.sent;\n          initGameStateManager(ws, scene_scene);\n          gameStateManager.on(\'gameInitialized\', function () {\n            console.warn(\'game initialized\');\n            animate();\n          });\n          _context.next = 20;\n          break;\n        case 17:\n          _context.prev = 17;\n          _context.t0 = _context["catch"](5);\n          console.error("Ошибка при инициализации Ammo.js:", _context.t0);\n        case 20:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[5, 17]]);\n  }));\n  return _start.apply(this, arguments);\n}\nstart();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUM7UUFBQTtVQUFBMVMsUUFBQSxDQUFBNUosSUFBQTtVQUFBLE9BR0N3SixXQUFXLENBQUMsQ0FBQztRQUFBO1VBQXhCN0YsRUFBRSxHQUFBaUcsUUFBQSxDQUFBbEssSUFBQTtVQUVSa1Usb0JBQW9CLENBQUNqUSxFQUFFLEVBQUV0TCxXQUFLLENBQUM7VUFFL0JzYixnQkFBZ0IsQ0FBQ21ULEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxZQUFNO1lBQ3pDcnVCLE9BQU8sQ0FBQ3dPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztZQUNoQ21HLE9BQU8sQ0FBQyxDQUFDO1VBQ2IsQ0FBQyxDQUFDO1VBQUN4RCxRQUFBLENBQUE1SixJQUFBO1VBQUE7UUFBQTtVQUFBNEosUUFBQSxDQUFBakksSUFBQTtVQUFBaUksUUFBQSxDQUFBZ0IsRUFBQSxHQUFBaEIsUUFBQTtVQUdIblIsT0FBTyxDQUFDb1AsS0FBSyxDQUFDLG1DQUFtQyxFQUFBK0IsUUFBQSxDQUFBZ0IsRUFBTyxDQUFDO1FBQUM7UUFBQTtVQUFBLE9BQUFoQixRQUFBLENBQUE5SCxJQUFBO01BQUE7SUFBQSxHQUFBNEgsT0FBQTtFQUFBLENBRWpFO0VBQUEsT0FBQXFjLE1BQUEsQ0FBQTdpQixLQUFBLE9BQUFELFNBQUE7QUFBQTtBQUVENmlCLEtBQUssQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4vc3JjL3NjZW5lLmpzPzI2NGMiLCJ3ZWJwYWNrOi8vd2ViLy4vc3JjL25ldHdvcmsuanM/YmQ5MiIsIndlYnBhY2s6Ly93ZWIvLi9zcmMvZ2FtZXBhZC5qcz8zNzgwIiwid2VicGFjazovL3dlYi8uL3NyYy9jYW1lcmEuanM/N2I2MCIsIndlYnBhY2s6Ly93ZWIvLi9zcmMvZ2FtZXN0YXRlbWFuYWdlci5qcz81YjQyIiwid2VicGFjazovL3dlYi8uL3NyYy9vYmplY3RzLmpzP2M4ZWMiLCJ3ZWJwYWNrOi8vd2ViLy4vc3JjL3Rocm90dGxlZGxvZy5qcz84ODcxIiwid2VicGFjazovL3dlYi8uL3NyYy9waHlzaWNzLmpzP2M0ODMiLCJ3ZWJwYWNrOi8vd2ViLy4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc2NlbmUuanNcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuZXhwb3J0IGxldCBzY2VuZSwgcmVuZGVyZXI7XG5leHBvcnQgbGV0IGRpcmVjdGlvbmFsTGlnaHQ7IC8vINCt0LrRgdC/0L7RgNGC0LjRgNGD0LXQvCDRgdCy0LXRgiDQtNC70Y8g0LTQvtGB0YLRg9C/0L3QvtGB0YLQuCDQsiDQtNGA0YPQs9C40YUg0LzQvtC00YPQu9GP0YVcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRTY2VuZSgpIHtcbiAgICBjb25zb2xlLmxvZyhcInRyeSB0byBpbml0U2NlbmVcIilcbiAgICBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xuICAgIHNjZW5lLmJhY2tncm91bmQgPSBuZXcgVEhSRUUuQ29sb3IoMHg4OGNjZmYpOyBcblxuICAgIHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoeyBhbnRpYWxpYXM6IHRydWUgfSk7XG4gICAgcmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICAvLyDQktC60LvRjtGH0LDQtdC8INC/0L7QtNC00LXRgNC20LrRgyDRgtC10L3QtdC5XG4gICAgcmVuZGVyZXIuc2hhZG93TWFwLmVuYWJsZWQgPSB0cnVlO1xuICAgIHJlbmRlcmVyLnNoYWRvd01hcC50eXBlID0gVEhSRUUuUENGU29mdFNoYWRvd01hcDtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJlbmRlcmVyLmRvbUVsZW1lbnQpO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uV2luZG93UmVzaXplKTtcblxuICAgIC8vINCd0LDRgdGC0YDQsNC40LLQsNC10Lwg0L7RgdCy0LXRidC10L3QuNC1XG4gICAgY29uc3QgYW1iaWVudCA9IG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoMHhmZmZmZmYsIDAuOCk7XG4gICAgc2NlbmUuYWRkKGFtYmllbnQpO1xuXG4gICAgLy8g0J7RgdC90L7QstC90L7QuSDQvdCw0L/RgNCw0LLQu9C10L3QvdGL0Lkg0YHQstC10YIg0YEg0YLQtdC90Y/QvNC4XG4gICAgZGlyZWN0aW9uYWxMaWdodCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KDB4ZmZmZmZmLCAxKTtcbiAgICBkaXJlY3Rpb25hbExpZ2h0LnBvc2l0aW9uLnNldCg1MCwgMTAwLCA1MCk7XG4gICAgZGlyZWN0aW9uYWxMaWdodC5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICBcbiAgICAvLyDQndCw0YHRgtGA0LDQuNCy0LDQtdC8INC/0LDRgNCw0LzQtdGC0YDRiyDRgtC10L3QtdC5INC00LvRjyDQvtGF0LLQsNGC0LAg0LHQvtC70YzRiNC+0Lkg0L7QsdC70LDRgdGC0LhcbiAgICBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmEubmVhciA9IDAuMTtcbiAgICBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmEuZmFyID0gNTAwOyBcbiAgICBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmEubGVmdCA9IC0xMDA7IFxuICAgIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS5yaWdodCA9IDEwMDtcbiAgICBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmEudG9wID0gMTAwO1xuICAgIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS5ib3R0b20gPSAtMTAwO1xuICAgIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93Lm1hcFNpemUud2lkdGggPSA1MTI7IC8vINCR0L7Qu9GM0YjQtdC1INGA0LDQt9GA0LXRiNC10L3QuNC1INC00LvRjyDQu9GD0YfRiNC10LPQviDQutCw0YfQtdGB0YLQstCwXG4gICAgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cubWFwU2l6ZS5oZWlnaHQgPSA1MTI7XG4gICAgLy8gZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cuYmlhcyA9IC0wLjAwMDE7IC8vINCj0LzQtdC90YzRiNCw0LXQvCDQsNGA0YLQtdGE0LDQutGC0Ysg0YLQtdC90LhcbiAgICBzY2VuZS5hZGQoZGlyZWN0aW9uYWxMaWdodCk7XG5cbiAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0LLRgdC/0L7QvNC+0LPQsNGC0LXQu9GM0L3Ri9C5INGB0LLQtdGCINC00LvRjyDQv9C+0LTRgdCy0LXRgtC60Lgg0YLQtdC90LXQuVxuICAgIGNvbnN0IGZpbGxMaWdodCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KDB4ZmZmZmZmLCAxKTtcbiAgICBmaWxsTGlnaHQucG9zaXRpb24uc2V0KC01MCwgNTAsIC01MCk7XG4gICAgc2NlbmUuYWRkKGZpbGxMaWdodCk7XG4gICAgXG4gICAgLy8g0JzQvtC20L3QviDQtNC+0LHQsNCy0LjRgtGMINC/0L7QvNC+0YnQvdC40Log0LTQu9GPINC+0YLQu9Cw0LTQutC4INGC0LXQvdC10LkgKNGA0LDRgdC60L7QvNC80LXQvdGC0LjRgNGD0LnRgtC1INC/0YDQuCDQvdC10L7QsdGF0L7QtNC40LzQvtGB0YLQuClcbiAgICAvLyBjb25zdCBoZWxwZXIgPSBuZXcgVEhSRUUuQ2FtZXJhSGVscGVyKGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYSk7XG4gICAgLy8gc2NlbmUuYWRkKGhlbHBlcik7XG59XG5cbmZ1bmN0aW9uIG9uV2luZG93UmVzaXplKCkge1xuICAgIC8vINCe0LHRgNCw0LHQvtGC0LrQsCDQuNC30LzQtdC90LXQvdC40Y8g0YDQsNC30LzQtdGA0LAg0L7QutC90LAg0YLQvtC70YzQutC+INC00LvRjyDRgNC10L3QtNC10YDQtdGA0LBcbiAgICAvLyAo0LrQsNC80LXRgNCwINC+0LHRgNCw0LHQsNGC0YvQstCw0LXRgtGB0Y8g0LIgY2FtZXJhLmpzKVxuICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG59XG5cbi8vINCU0L7QsdCw0LLQu9GP0LXQvCDRhNGD0L3QutGG0LjRjiDQtNC70Y8g0L7QsdC90L7QstC70LXQvdC40Y8g0L/QvtC70L7QttC10L3QuNGPINC40YHRgtC+0YfQvdC40LrQsCDRgdCy0LXRgtCwINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QviDQutCw0LzQtdGA0YssINC60LDQuiDRgdC+0LvQvdGG0LVcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVTaGFkb3dDYW1lcmEoY2FtZXJhKSB7XG4gICAgaWYgKCFkaXJlY3Rpb25hbExpZ2h0IHx8ICFjYW1lcmEpIHJldHVybjtcbiAgICBcbiAgICAvLyDQn9C+0LvRg9GH0LDQtdC8INC90LDQv9GA0LDQstC70LXQvdC40LUg0LLQt9Cz0LvRj9C00LAg0LrQsNC80LXRgNGLXG4gICAgY29uc3QgY2FtZXJhRGlyZWN0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICBjYW1lcmEuZ2V0V29ybGREaXJlY3Rpb24oY2FtZXJhRGlyZWN0aW9uKTtcbiAgICBcbiAgICAvLyDQodC+0LfQtNCw0LXQvCDQv9C+0LfQuNGG0LjRjiBcItGB0L7Qu9C90YbQsFwiINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QviDQutCw0LzQtdGA0YtcbiAgICAvLyDQn9C+0LTQvdC40LzQsNC10LwgXCLRgdC+0LvQvdGG0LVcIiDQvdCwIDIwMCDQtdC00LjQvdC40YYg0LLQstC10YDRhSDQvtGCINC/0L7Qt9C40YbQuNC4INC60LDQvNC10YDRiyDQuCDRgdC80LXRidCw0LXQvCDQvdC10LzQvdC+0LPQviDQsiDRgdGC0L7RgNC+0L3RgyDQuCDQvdCw0LfQsNC0XG4gICAgY29uc3Qgc3VuT2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoMTAwLCAyMDAsIC01MCk7XG4gICAgY29uc3Qgc3VuUG9zaXRpb24gPSBjYW1lcmEucG9zaXRpb24uY2xvbmUoKS5hZGQoc3VuT2Zmc2V0KTtcbiAgICBcbiAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0L/QvtC30LjRhtC40Y4g0YHQstC10YLQsFxuICAgIGRpcmVjdGlvbmFsTGlnaHQucG9zaXRpb24uY29weShzdW5Qb3NpdGlvbik7XG4gICAgXG4gICAgLy8g0J7Qv9GA0LXQtNC10LvRj9C10Lwg0YLQvtGH0LrRgywg0LrRg9C00LAg0L3QsNC/0YDQsNCy0LvQtdC9INGB0LLQtdGCIC0g0L/QtdGA0LXQtCDQutCw0LzQtdGA0L7QuSDQvdCwINGA0LDRgdGB0YLQvtGP0L3QuNC4IDEwMCDQtdC00LjQvdC40YZcbiAgICBjb25zdCB0YXJnZXRPZmZzZXQgPSBjYW1lcmFEaXJlY3Rpb24uY2xvbmUoKS5tdWx0aXBseVNjYWxhcigxMDApO1xuICAgIGNvbnN0IHRhcmdldFBvc2l0aW9uID0gY2FtZXJhLnBvc2l0aW9uLmNsb25lKCkuYWRkKHRhcmdldE9mZnNldCk7XG4gICAgZGlyZWN0aW9uYWxMaWdodC50YXJnZXQucG9zaXRpb24uY29weSh0YXJnZXRQb3NpdGlvbik7XG4gICAgXG4gICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INC80LDRgtGA0LjRhtGDINGC0YDQsNC90YHRhNC+0YDQvNCw0YbQuNC4INGG0LXQu9C4INGB0LLQtdGC0LBcbiAgICBkaXJlY3Rpb25hbExpZ2h0LnRhcmdldC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuICAgIFxuICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQvNCw0YLRgNC40YbRgyDQutCw0LzQtdGA0Ysg0YLQtdC90LXQuVxuICAgIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG59XG5cbmV4cG9ydCB7IG9uV2luZG93UmVzaXplIH07IiwiLy8gbmV0d29yay5qc1xuaW1wb3J0IHsgb2JqZWN0cywgY3JlYXRlTWVzaEFuZEJvZHlGb3JPYmplY3QgfSBmcm9tICcuL29iamVjdHMnO1xuaW1wb3J0IHsgYXBwbHlJbXB1bHNlVG9TcGhlcmUsIHJlY2VpdmVPYmplY3RVcGRhdGUsIGxvY2FsUGh5c2ljc1dvcmxkLCBhcHBseVBoeXNpY3NDb25maWcgfSBmcm9tICcuL3BoeXNpY3MnO1xuXG5sZXQgd3MgPSBudWxsO1xubGV0IHBoeXNpY3NTdGFydGVkID0gZmFsc2U7XG5sZXQgcGVuZGluZ09iamVjdHMgPSBbXTtcblxuLy8g0JTQvtCx0LDQstC70Y/QtdC8INC/0LXRgNC10LzQtdC90L3Ri9C1INC00LvRjyDRgNCw0LHQvtGC0Ysg0YEg0LLRgNC10LzQtdC90L3Ri9C80Lgg0LzQtdGC0LrQsNC80LhcbmxldCBzZXJ2ZXJUaW1lT2Zmc2V0ID0gMDsgICAgICAgLy8g0KDQsNC30L3QuNGG0LAg0LzQtdC20LTRgyDRgdC10YDQstC10YDQvdGL0Lwg0Lgg0LrQu9C40LXQvdGC0YHQutC40Lwg0LLRgNC10LzQtdC90LXQvFxubGV0IHNlcnZlclRpbWVPZmZzZXRTYW1wbGVzID0gW107IC8vINCl0YDQsNC90LXQvdC40LUg0L7QsdGA0LDQt9GG0L7QsiDQtNC70Y8g0LLRi9GH0LjRgdC70LXQvdC40Y8g0YHRgNC10LTQvdC10LPQviDQt9C90LDRh9C10L3QuNGPXG5jb25zdCBNQVhfT0ZGU0VUX1NBTVBMRVMgPSAxMDsgIC8vINCc0LDQutGB0LjQvNCw0LvRjNC90L7QtSDQutC+0LvQuNGH0LXRgdGC0LLQviDQvtCx0YDQsNC30YbQvtCyXG5sZXQgcGluZ0hpc3RvcnkgPSBbXTsgICAgICAgICAgIC8vINCY0YHRgtC+0YDQuNGPINC/0LjQvdCz0L7QsiDQtNC70Y8g0LDQvdCw0LvQuNC30LBcbmNvbnN0IE1BWF9QSU5HX1NBTVBMRVMgPSAxMDsgICAgLy8g0JzQsNC60YHQuNC80LDQu9GM0L3QvtC1INC60L7Qu9C40YfQtdGB0YLQstC+INC+0LHRgNCw0LfRhtC+0LIg0L/QuNC90LPQsFxuXG4vLyDQk9C70L7QsdCw0LvRjNC90LDRjyDQutC+0L3RhNC40LPRg9GA0LDRhtC40Y8g0YTQuNC30LjQutC4XG5sZXQgcGh5c2ljc0NvbmZpZyA9IG51bGw7XG5cbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0YLQtdC60YPRidC10Lkg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNC4INGE0LjQt9C40LrQuFxuZXhwb3J0IGZ1bmN0aW9uIGdldFBoeXNpY3NDb25maWcoKSB7XG4gICAgcmV0dXJuIHBoeXNpY3NDb25maWc7XG59XG5cbi8vINCS0YvRh9C40YHQu9GP0LXQvCDRgtC10LrRg9GJ0LXQtSDRgdC10YDQstC10YDQvdC+0LUg0LLRgNC10LzRjyDQvdCwINC+0YHQvdC+0LLQtSDRgdC80LXRidC10L3QuNGPXG5mdW5jdGlvbiBlc3RpbWF0ZVNlcnZlclRpbWUoKSB7XG4gICAgcmV0dXJuIERhdGUubm93KCkgKyBzZXJ2ZXJUaW1lT2Zmc2V0O1xufVxuXG4vLyDQntCx0L3QvtCy0LvQtdC90LjQtSDRgdC80LXRidC10L3QuNGPINCy0YDQtdC80LXQvdC4INGB0LXRgNCy0LXRgNCwXG5mdW5jdGlvbiB1cGRhdGVTZXJ2ZXJUaW1lT2Zmc2V0KHNlcnZlclRpbWUpIHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IGN1cnJlbnRPZmZzZXQgPSBzZXJ2ZXJUaW1lIC0gbm93O1xuICAgIFxuICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDQvdC+0LLRi9C5INC+0LHRgNCw0LfQtdGGXG4gICAgc2VydmVyVGltZU9mZnNldFNhbXBsZXMucHVzaChjdXJyZW50T2Zmc2V0KTtcbiAgICBcbiAgICAvLyDQntCz0YDQsNC90LjRh9C40LLQsNC10Lwg0LrQvtC70LjRh9C10YHRgtCy0L4g0L7QsdGA0LDQt9GG0L7QslxuICAgIGlmIChzZXJ2ZXJUaW1lT2Zmc2V0U2FtcGxlcy5sZW5ndGggPiBNQVhfT0ZGU0VUX1NBTVBMRVMpIHtcbiAgICAgICAgc2VydmVyVGltZU9mZnNldFNhbXBsZXMuc2hpZnQoKTtcbiAgICB9XG4gICAgXG4gICAgLy8g0JjRgdC/0L7Qu9GM0LfRg9C10Lwg0LzQtdC00LjQsNC90YMg0LLQvNC10YHRgtC+INGB0YDQtdC00L3QtdCz0L4g0LTQu9GPINGD0YHRgtC+0LnRh9C40LLQvtGB0YLQuCDQuiDQstGL0LHRgNC+0YHQsNC8XG4gICAgY29uc3Qgc29ydGVkT2Zmc2V0cyA9IFsuLi5zZXJ2ZXJUaW1lT2Zmc2V0U2FtcGxlc10uc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICAgIGNvbnN0IG1lZGlhbk9mZnNldCA9IHNvcnRlZE9mZnNldHNbTWF0aC5mbG9vcihzb3J0ZWRPZmZzZXRzLmxlbmd0aCAvIDIpXTtcbiAgICBcbiAgICBzZXJ2ZXJUaW1lT2Zmc2V0ID0gbWVkaWFuT2Zmc2V0O1xuICAgIFxuICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQvtGC0L7QsdGA0LDQttC10L3QuNC1INCy0YDQtdC80LXQvdC4XG4gICAgdXBkYXRlVGltZURpc3BsYXkoKTtcbiAgICBcbiAgICBjb25zb2xlLmxvZyhgW1RpbWVdINCh0LjQvdGF0YDQvtC90LjQt9Cw0YbQuNGPINCy0YDQtdC80LXQvdC4OiDRgdC80LXRidC10L3QuNC1ID0gJHttZWRpYW5PZmZzZXR9INC80YFgKTtcbn1cblxuLy8g0JTQvtCx0LDQstC70Y/QtdC8INGE0YPQvdC60YbQuNGOINC00LvRjyDQvtCx0L3QvtCy0LvQtdC90LjRjyDQvtGC0L7QsdGA0LDQttC10L3QuNGPINC/0LjQvdCz0LAg0L3QsCDRjdC60YDQsNC90LVcbmZ1bmN0aW9uIHVwZGF0ZVBpbmdEaXNwbGF5KHBpbmdWYWx1ZSkge1xuICAgIGNvbnN0IHBpbmdEaXNwbGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BpbmctZGlzcGxheScpO1xuICAgIGlmIChwaW5nRGlzcGxheSkge1xuICAgICAgICBwaW5nRGlzcGxheS50ZXh0Q29udGVudCA9IGDQn9C40L3QszogJHtwaW5nVmFsdWUudG9GaXhlZCgwKX0g0LzRgWA7XG4gICAgICAgIFxuICAgICAgICAvLyDQnNC10L3Rj9C10Lwg0YbQstC10YIg0LIg0LfQsNCy0LjRgdC40LzQvtGB0YLQuCDQvtGCINC60LDRh9C10YHRgtCy0LAg0YHQvtC10LTQuNC90LXQvdC40Y9cbiAgICAgICAgaWYgKHBpbmdWYWx1ZSA8IDUwKSB7XG4gICAgICAgICAgICBwaW5nRGlzcGxheS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgwLCAxMjgsIDAsIDAuNSknOyAvLyDQl9C10LvQtdC90YvQuSAtINGF0L7RgNC+0YjQuNC5INC/0LjQvdCzXG4gICAgICAgIH0gZWxzZSBpZiAocGluZ1ZhbHVlIDwgMTAwKSB7XG4gICAgICAgICAgICBwaW5nRGlzcGxheS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgyNTUsIDE2NSwgMCwgMC41KSc7IC8vINCe0YDQsNC90LbQtdCy0YvQuSAtINGB0YDQtdC00L3QuNC5INC/0LjQvdCzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwaW5nRGlzcGxheS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgyNTUsIDAsIDAsIDAuNSknOyAvLyDQmtGA0LDRgdC90YvQuSAtINC/0LvQvtGF0L7QuSDQv9C40L3Qs1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyDQpNGD0L3QutGG0LjRjyDQtNC70Y8g0L7QsdC90L7QstC70LXQvdC40Y8g0YHQtdGA0LLQtdGA0L3QvtCz0L4g0LLRgNC10LzQtdC90Lgg0L3QsCDRjdC60YDQsNC90LVcbmZ1bmN0aW9uIHVwZGF0ZVRpbWVEaXNwbGF5KCkge1xuICAgIGNvbnN0IHNlcnZlclRpbWVFbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlcnZlci10aW1lJyk7XG4gICAgY29uc3QgdGltZU9mZnNldEVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGltZS1vZmZzZXQnKTtcbiAgICBcbiAgICBpZiAoc2VydmVyVGltZUVsZW0gJiYgdGltZU9mZnNldEVsZW0pIHtcbiAgICAgICAgY29uc3QgZXN0U2VydmVyVGltZSA9IGVzdGltYXRlU2VydmVyVGltZSgpO1xuICAgICAgICBjb25zdCBzZXJ2ZXJEYXRlID0gbmV3IERhdGUoZXN0U2VydmVyVGltZSk7XG4gICAgICAgIHNlcnZlclRpbWVFbGVtLnRleHRDb250ZW50ID0gYNCS0YDQtdC80Y8g0YHQtdGA0LLQtdGA0LA6ICR7c2VydmVyRGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcoKX1gO1xuICAgICAgICB0aW1lT2Zmc2V0RWxlbS50ZXh0Q29udGVudCA9IGDQodC80LXRidC10L3QuNC1OiAke3NlcnZlclRpbWVPZmZzZXQudG9GaXhlZCgwKX0g0LzRgWA7XG4gICAgfVxufVxuXG4vLyDQodC+0LfQtNCw0LXQvCDQuNC90YLQtdGA0LLQsNC7INC00LvRjyDQv9C10YDQuNC+0LTQuNGH0LXRgdC60L7Qs9C+INC+0LHQvdC+0LLQu9C10L3QuNGPINCy0YDQtdC80LXQvdC4XG5sZXQgdGltZURpc3BsYXlJbnRlcnZhbDtcbmxldCBzZXJ2ZXJEZWxheSA9IDA7XG5cbmZ1bmN0aW9uIHVwZGF0ZVNlcnZlckRlbGF5RGlzcGxheShkZWxheSkge1xuICAgIGNvbnN0IGRlbGF5RGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZXJ2ZXItZGVsYXktZGlzcGxheScpO1xuICAgIGlmIChkZWxheURpc3BsYXkpIHtcbiAgICAgICAgZGVsYXlEaXNwbGF5LnRleHRDb250ZW50ID0gYNCX0LDQtNC10YDQttC60LAg0YHQtdGA0LLQtdGA0LA6ICR7ZGVsYXkudG9GaXhlZCgwKX0g0LzRgWA7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVNZXNzYWdlKGRhdGEpIHsgICAgICBcbiAgICB0cnkge1xuICAgICAgICAvLyDQldGB0LvQuCDRgdC+0L7QsdGJ0LXQvdC40LUg0YHQvtC00LXRgNC20LjRgiDQstGA0LXQvNC10L3QvdGD0Y4g0LzQtdGC0LrRgyDRgdC10YDQstC10YDQsCwg0L7QsdC90L7QstC70Y/QtdC8INGB0LzQtdGJ0LXQvdC40LVcbiAgICAgICAgaWYgKGRhdGEuc2VydmVyX3RpbWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZGF0YS5zZXJ2ZXJfdGltZTogXCIsIGRhdGEuc2VydmVyX3RpbWUpXG4gICAgICAgICAgICB1cGRhdGVTZXJ2ZXJUaW1lT2Zmc2V0KGRhdGEuc2VydmVyX3RpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdC8INC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjiDRhNC40LfQuNC60LhcbiAgICAgICAgaWYgKGRhdGEudHlwZSA9PT0gXCJwaHlzaWNzX2NvbmZpZ1wiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltOZXR3b3JrXSDQn9C+0LvRg9GH0LXQvdCwINC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjyDRhNC40LfQuNC60Lg6XCIsIGRhdGEuY29uZmlnKTtcbiAgICAgICAgICAgIHBoeXNpY3NDb25maWcgPSBkYXRhLmNvbmZpZztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0J/RgNC40LzQtdC90Y/QtdC8INC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjiDQuiDRhNC40LfQuNC60LUg0L3QsCDQutC70LjQtdC90YLQtVxuICAgICAgICAgICAgYXBwbHlQaHlzaWNzQ29uZmlnKHBoeXNpY3NDb25maWcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm47IC8vINCf0YDQtdC60YDQsNGJ0LDQtdC8INC+0LHRgNCw0LHQvtGC0LrRgyDRjdGC0L7Qs9C+INGB0L7QvtCx0YnQtdC90LjRj1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdC8IHBvbmct0YHQvtC+0LHRidC10L3QuNGPINC00LvRjyDRgdC40L3RhdGA0L7QvdC40LfQsNGG0LjQuCDQstGA0LXQvNC10L3QuFxuICAgICAgICBpZiAoZGF0YS50eXBlID09PSBcInBvbmdcIikge1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGNvbnN0IHJvdW5kVHJpcFRpbWUgPSBub3cgLSBkYXRhLmNsaWVudF90aW1lO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0LjQt9C80LXRgNC10L3QuNC1INC/0LjQvdCz0LAg0LIg0LjRgdGC0L7RgNC40Y5cbiAgICAgICAgICAgIHBpbmdIaXN0b3J5LnB1c2gocm91bmRUcmlwVGltZSk7XG4gICAgICAgICAgICBpZiAocGluZ0hpc3RvcnkubGVuZ3RoID4gTUFYX1BJTkdfU0FNUExFUykge1xuICAgICAgICAgICAgICAgIHBpbmdIaXN0b3J5LnNoaWZ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCS0YvRh9C40YHQu9GP0LXQvCDRgdGA0LXQtNC90LjQuSDQv9C40L3Qs1xuICAgICAgICAgICAgY29uc3QgYXZnUGluZyA9IHBpbmdIaXN0b3J5LnJlZHVjZSgoc3VtLCBwaW5nKSA9PiBzdW0gKyBwaW5nLCAwKSAvIHBpbmdIaXN0b3J5Lmxlbmd0aDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INC+0YLQvtCx0YDQsNC20LXQvdC40LUg0L/QuNC90LPQsCDQvdCwINGN0LrRgNCw0L3QtVxuICAgICAgICAgICAgdXBkYXRlUGluZ0Rpc3BsYXkoYXZnUGluZyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbV1NdINCf0L7Qu9GD0YfQtdC9IHBvbmcsIFJUVDogJHtyb3VuZFRyaXBUaW1lfW1zLCDQodGA0LXQtNC90LjQuSBSVFQ6ICR7YXZnUGluZy50b0ZpeGVkKDIpfW1zYCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDRgdC80LXRidC10L3QuNC1INGB0LXRgNCy0LXRgNC90L7Qs9C+INCy0YDQtdC80LXQvdC4INGBINGD0YfQtdGC0L7QvCBSVFQvMiAo0L/RgNC10LTQv9C+0LvQsNCz0LDQtdC8INGB0LjQvNC80LXRgtGA0LjRh9C90YPRjiDQt9Cw0LTQtdGA0LbQutGDKVxuICAgICAgICAgICAgdXBkYXRlU2VydmVyVGltZU9mZnNldChkYXRhLnNlcnZlcl90aW1lICsgcm91bmRUcmlwVGltZSAvIDIpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm47IC8vINCf0YDQtdC60YDQsNGJ0LDQtdC8INC+0LHRgNCw0LHQvtGC0LrRgyDRjdGC0L7Qs9C+INGB0L7QvtCx0YnQtdC90LjRj1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGEudHlwZSA9PT0gXCJ1cGRhdGVcIikge1xuICAgICAgICAgICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8LCDRgdC+0LTQtdGA0LbQuNGCINC70LggdXBkYXRlINGB0L7QvtCx0YnQtdC90LjQtSDQtNCw0L3QvdGL0LUg0L7QsdGK0LXQutGC0LBcbiAgICAgICAgICAgIGlmIChkYXRhLm9iamVjdHMgfHwgZGF0YS5pZCkge1xuICAgICAgICAgICAgICAgIC8vINCe0YLQu9Cw0LTQvtGH0L3QsNGPINC40L3RhNC+0YDQvNCw0YbQuNGPXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tXU10g0J/QvtC70YPRh9C10L3QviB1cGRhdGUg0YHQvtC+0LHRidC10L3QuNC1OicsIFxuICAgICAgICAgICAgICAgICAgICBkYXRhLmlkID8gYGlkOiAke2RhdGEuaWR9YCA6IGDQmtC+0LvQuNGH0LXRgdGC0LLQviDQvtCx0YrQtdC60YLQvtCyOiAke09iamVjdC5rZXlzKGRhdGEub2JqZWN0cykubGVuZ3RofWApO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vINCf0LXRgNC10LTQsNC10Lwg0LTQsNC90L3Ri9C1INCyINGE0YPQvdC60YbQuNGOINC+0LHRgNCw0LHQvtGC0LrQuCDQvtCx0L3QvtCy0LvQtdC90LjQuVxuICAgICAgICAgICAgICAgIHJlY2VpdmVPYmplY3RVcGRhdGUoZGF0YSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignW1dTXSDQn9C+0LvRg9GH0LXQvdC+IHVwZGF0ZSDRgdC+0L7QsdGJ0LXQvdC40LUg0LHQtdC3INC+0LHRitC10LrRgtC+0LI6JywgZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gXG4gICAgICAgIGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gXCJjcmVhdGVcIiAmJiBkYXRhLmlkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltXU10g0J/QvtC70YPRh9C10L3QviDRgdC+0L7QsdGJ0LXQvdC40LUg0L4g0YHQvtC30LTQsNC90LjQuCDQvtCx0YrQtdC60YLQsDpcIiwgZGF0YS5pZCwgXCLQsiDQutC+0L7RgNC00LjQvdCw0YLQsNGFOlwiLCBcbiAgICAgICAgICAgICAgICB7IHg6IGRhdGEueCB8fCAwLCB5OiBkYXRhLnkgfHwgMCwgejogZGF0YS56IHx8IDAgfSxcbiAgICAgICAgICAgICAgICBcItCy0YDQtdC80Y8g0YHQtdGA0LLQtdGA0LA6XCIsIGRhdGEuc2VydmVyX3RpbWUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQodC+0LfQtNCw0LXQvCDQvtCx0YrQtdC60YIg0Lgg0LTQvtCx0LDQstC70Y/QtdC8INC10LPQviDQsiDRgdC/0LjRgdC+0Log0L7QsdGK0LXQutGC0L7QslxuICAgICAgICAgICAgY29uc3Qgb2JqID0gY3JlYXRlTWVzaEFuZEJvZHlGb3JPYmplY3QoZGF0YSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCwg0YfRgtC+INC+0LHRitC10LrRgiDQsdGL0Lsg0YPRgdC/0LXRiNC90L4g0YHQvtC30LTQsNC9XG4gICAgICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgICAgICAgb2JqLnBoeXNpY3NCeSA9IGRhdGEucGh5c2ljc19ieSB8fCBcImJvdGhcIjtcbiAgICAgICAgICAgICAgICBvYmouc2VydmVyUG9zID0ge1xuICAgICAgICAgICAgICAgICAgICB4OiBkYXRhLnggfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgeTogZGF0YS55IHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIHo6IGRhdGEueiB8fCAwXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0LLRgNC10LzQtdC90L3Rg9GOINC80LXRgtC60YMg0YHQtdGA0LLQtdGA0LBcbiAgICAgICAgICAgICAgICBvYmouc2VydmVyQ3JlYXRpb25UaW1lID0gZGF0YS5zZXJ2ZXJfdGltZTtcbiAgICAgICAgICAgICAgICBvYmouY2xpZW50Q3JlYXRpb25UaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBvYmplY3RzW2RhdGEuaWRdID0gb2JqO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vINCX0LDQv9C+0LzQuNC90LDQtdC8INGC0L7Rh9C90L7QtSDQstGA0LXQvNGPINGB0L7Qt9C00LDQvdC40Y8g0L7QsdGK0LXQutGC0LAg0LTQu9GPINC00LDQu9GM0L3QtdC50YjQtdC5INGB0LjQvdGF0YDQvtC90LjQt9Cw0YbQuNC4XG4gICAgICAgICAgICAgICAgb2JqLmNyZWF0ZWRBdCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtXU10g0J7QsdGK0LXQutGCICR7ZGF0YS5pZH0g0YHQvtC30LTQsNC9INGBIHBoeXNpY3NCeTogJHtvYmoucGh5c2ljc0J5fWApO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vINCV0YHQu9C4INGE0LjQt9C40YfQtdGB0LrQuNC5INC80LjRgCDQsNC60YLQuNCy0LXQvSwg0LDQutGC0LjQstC40YDRg9C10Lwg0YLQtdC70L5cbiAgICAgICAgICAgICAgICBpZiAob2JqLmJvZHkgJiYgbG9jYWxQaHlzaWNzV29ybGQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwaHlzaWNzU3RhcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INCyINGB0L/QuNGB0L7QuiDQvtC20LjQtNCw0Y7RidC40YUsINC10YHQu9C4INGE0LjQt9C40LrQsCDQtdGJ0LUg0L3QtSDQt9Cw0L/Rg9GJ0LXQvdCwXG4gICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nT2JqZWN0cy5wdXNoKGRhdGEuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtXU10g0J7QsdGK0LXQutGCICR7ZGF0YS5pZH0g0LTQvtCx0LDQstC70LXQvSDQsiDRgdC/0LjRgdC+0Log0L7QttC40LTQsNC90LjRjyAtINGE0LjQt9C40LrQsCDQtdGJ0LUg0L3QtSDQsNC60YLQuNCy0L3QsGApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8g0JDQutGC0LjQstC40YDRg9C10Lwg0YLQtdC70L4g0YHRgNCw0LfRg1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmJvZHkuYWN0aXZhdGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQo9GB0YLQsNC90LDQstC70LjQstCw0LXQvCDQvdCw0YfQsNC70YzQvdGD0Y4g0L/QvtC30LjRhtC40Y4g0YLQvtGH0L3QviDQv9C+INGB0LXRgNCy0LXRgNC90YvQvCDQutC+0L7RgNC00LjQvdCw0YLQsNC8XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnNlcnZlclBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCDQvdCw0LvQuNGH0LjQtSBBbW1vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93LkFtbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbV1NdIHdpbmRvdy5BbW1vINC90LUg0L7Qv9GA0LXQtNC10LvQtdC9INC/0YDQuCDQv9C+0L/Ri9GC0LrQtSDRgtC10LvQtdC/0L7RgNGC0LDRhtC40Lgg0L7QsdGK0LXQutGC0LAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IHdpbmRvdy5BbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LmdldE1vdGlvblN0YXRlKCkuZ2V0V29ybGRUcmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtLnNldE9yaWdpbihuZXcgd2luZG93LkFtbW8uYnRWZWN0b3IzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNlcnZlclBvcy54LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zZXJ2ZXJQb3MueSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2VydmVyUG9zLnpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LmdldE1vdGlvblN0YXRlKCkuc2V0V29ybGRUcmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm1lc2gucG9zaXRpb24uc2V0KG9iai5zZXJ2ZXJQb3MueCwgb2JqLnNlcnZlclBvcy55LCBvYmouc2VydmVyUG9zLnopO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtXU10g0J7QsdGK0LXQutGCICR7ZGF0YS5pZH0g0YLQtdC70LXQv9C+0YDRgtC40YDQvtCy0LDQvSDQsiDQuNGB0YXQvtC00L3Ri9C1INC60L7QvtGA0LTQuNC90LDRgtGLOmAsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyB4OiBvYmouc2VydmVyUG9zLngsIHk6IG9iai5zZXJ2ZXJQb3MueSwgejogb2JqLnNlcnZlclBvcy56IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0J7Rh9C40YnQsNC10Lwg0L/QsNC80Y/RgtGMXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3kodHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBbV1NdINCe0YjQuNCx0LrQsCDQv9GA0Lgg0YLQtdC70LXQv9C+0YDRgtCw0YbQuNC4INC+0LHRitC10LrRgtCwICR7ZGF0YS5pZH06YCwgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW1dTXSDQndC1INGD0LTQsNC70L7RgdGMINGB0L7Qt9C00LDRgtGMINC+0LHRitC10LrRgiAke2RhdGEuaWR9LCDRgtC40L86ICR7ZGF0YS5vYmplY3RfdHlwZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBcbiAgICAgICAgZWxzZSBpZiAoZGF0YS50eXBlID09PSBcImNtZF9hY2tcIikge1xuICAgICAgICAgICAgLy8g0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdC8INC/0L7QtNGC0LLQtdGA0LbQtNC10L3QuNC1INC60L7QvNCw0L3QtNGLINGBINCy0YDQtdC80LXQvdC90L7QuSDQvNC10YLQutC+0LlcbiAgICAgICAgICAgIGlmIChkYXRhLmNsaWVudF90aW1lICYmIGRhdGEuc2VydmVyX3RpbWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByb3VuZFRyaXBUaW1lID0gRGF0ZS5ub3coKSAtIGRhdGEuY2xpZW50X3RpbWU7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC40LfQvNC10YDQtdC90LjQtSDQv9C40L3Qs9CwINCyINC40YHRgtC+0YDQuNGOXG4gICAgICAgICAgICAgICAgcGluZ0hpc3RvcnkucHVzaChyb3VuZFRyaXBUaW1lKTtcbiAgICAgICAgICAgICAgICBpZiAocGluZ0hpc3RvcnkubGVuZ3RoID4gTUFYX1BJTkdfU0FNUExFUykge1xuICAgICAgICAgICAgICAgICAgICBwaW5nSGlzdG9yeS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyDQktGL0YfQuNGB0LvRj9C10Lwg0YHRgNC10LTQvdC40Lkg0L/QuNC90LNcbiAgICAgICAgICAgICAgICBjb25zdCBhdmdQaW5nID0gcGluZ0hpc3RvcnkucmVkdWNlKChzdW0sIHBpbmcpID0+IHN1bSArIHBpbmcsIDApIC8gcGluZ0hpc3RvcnkubGVuZ3RoO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQvtGC0L7QsdGA0LDQttC10L3QuNC1INC/0LjQvdCz0LAg0L3QsCDRjdC60YDQsNC90LVcbiAgICAgICAgICAgICAgICB1cGRhdGVQaW5nRGlzcGxheShhdmdQaW5nKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW1dTXSDQn9C+0LTRgtCy0LXRgNC20LTQtdC90LjQtSDQutC+0LzQsNC90LTRizogJHtkYXRhLmNtZH0sIFJUVDogJHtyb3VuZFRyaXBUaW1lfW1zLCDQodGA0LXQtNC90LjQuSBSVFQ6ICR7YXZnUGluZy50b0ZpeGVkKDIpfW1zYCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INGB0LzQtdGJ0LXQvdC40LUg0YHQtdGA0LLQtdGA0L3QvtCz0L4g0LLRgNC10LzQtdC90Lgg0YEg0YPRh9C10YLQvtC8IFJUVC8yICjQv9GA0LXQtNC/0L7Qu9Cw0LPQsNC10Lwg0YHQuNC80LzQtdGC0YDQuNGH0L3Rg9GOINC30LDQtNC10YDQttC60YMpXG4gICAgICAgICAgICAgICAgdXBkYXRlU2VydmVyVGltZU9mZnNldChkYXRhLnNlcnZlcl90aW1lICsgcm91bmRUcmlwVGltZSAvIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIltXU10g0J7RiNC40LHQutCwINC/0YDQuCDQvtCx0YDQsNCx0L7RgtC60LUg0YHQvtC+0LHRidC10L3QuNGPOlwiLCBlcnJvcik7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV1NdINCh0YLQtdC6INCy0YvQt9C+0LLQvtCyOlwiLCBlcnJvci5zdGFjayk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVLZXlEb3duKGUpIHtcbiAgICBpZiAoIXdzIHx8IHdzLnJlYWR5U3RhdGUgIT09IFdlYlNvY2tldC5PUEVOKSByZXR1cm47XG5cbiAgICBsZXQgY21kID0gXCJcIjtcbiAgICBsZXQgZm9yY2VYID0gMCwgZm9yY2VZID0gMCwgZm9yY2VaID0gMDtcbiAgICBcbiAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICAgIGNhc2UgXCJBcnJvd0xlZnRcIjogXG4gICAgICAgICAgICBjbWQgPSBcIkxFRlRcIjsgXG4gICAgICAgICAgICBmb3JjZVggPSAtNTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQXJyb3dSaWdodFwiOiBcbiAgICAgICAgICAgIGNtZCA9IFwiUklHSFRcIjsgXG4gICAgICAgICAgICBmb3JjZVggPSA1O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJBcnJvd1VwXCI6IFxuICAgICAgICAgICAgY21kID0gXCJVUFwiOyBcbiAgICAgICAgICAgIGZvcmNlWiA9IC01O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJBcnJvd0Rvd25cIjogXG4gICAgICAgICAgICBjbWQgPSBcIkRPV05cIjsgXG4gICAgICAgICAgICBmb3JjZVogPSA1O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCIgXCI6IFxuICAgICAgICAgICAgY21kID0gXCJTUEFDRVwiOyBcbiAgICAgICAgICAgIGZvcmNlWSA9IDEwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0LLRgNC10LzQtdC90L3Rg9GOINC80LXRgtC60YMg0LrQu9C40LXQvdGC0LAg0Log0LrQvtC80LDQvdC00LVcbiAgICAgICAgY29uc3QgY2xpZW50VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIGNvbnN0IGNvbW1hbmRPYmogPSB7IFxuICAgICAgICAgICAgdHlwZTogXCJjbWRcIiwgXG4gICAgICAgICAgICBjbWQsXG4gICAgICAgICAgICBjbGllbnRfdGltZTogY2xpZW50VGltZSAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0LLRgNC10LzQtdC90L3Rg9GOINC80LXRgtC60YMg0LrQu9C40LXQvdGC0LBcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKGBbV1NdINCe0YLQv9GA0LDQstC60LAg0LrQvtC80LDQvdC00Ys6ICR7Y21kfSwg0LLRgNC10LzRjyDQutC70LjQtdC90YLQsDogJHtjbGllbnRUaW1lfWApO1xuICAgICAgICB3cy5zZW5kKEpTT04uc3RyaW5naWZ5KGNvbW1hbmRPYmopKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCf0YDQuNC80LXQvdGP0LXQvCDQuNC80L/Rg9C70YzRgSDQu9C+0LrQsNC70YzQvdC+INC60L4g0LLRgdC10Lwg0L7QsdGK0LXQutGC0LDQvCDRgdGE0LXRgFxuICAgICAgICBmb3IgKGxldCBpZCBpbiBvYmplY3RzKSB7XG4gICAgICAgICAgICBjb25zdCBvYmogPSBvYmplY3RzW2lkXTtcbiAgICAgICAgICAgIGlmIChvYmogJiYgb2JqLmJvZHkgJiYgb2JqLm1lc2ggJiYgb2JqLm1lc2guZ2VvbWV0cnkgJiYgXG4gICAgICAgICAgICAgICAgb2JqLm1lc2guZ2VvbWV0cnkudHlwZSA9PT0gXCJTcGhlcmVHZW9tZXRyeVwiKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtXU10g0J/RgNC40LzQtdC90Y/QtdC8INC40LzQv9GD0LvRjNGBINC6INGB0YTQtdGA0LUgJHtpZH0g0YEgcGh5c2ljc0J5PSR7b2JqLnBoeXNpY3NCeX1gKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyDQktGL0LfRi9Cy0LDQtdC8INGE0YPQvdC60YbQuNGOINC/0YDQuNC80LXQvdC10L3QuNGPINC40LzQv9GD0LvRjNGB0LAg0YEg0L7QsdC90L7QstC70LXQvdC90YvQvNC4INC/0LDRgNCw0LzQtdGC0YDQsNC80LhcbiAgICAgICAgICAgICAgICBhcHBseUltcHVsc2VUb1NwaGVyZShpZCwgeyB4OiBmb3JjZVgsIHk6IGZvcmNlWSwgejogZm9yY2VaIH0sIDEuMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dTXSDQntGI0LjQsdC60LAg0L7RgtC/0YDQsNCy0LrQuDpcIiwgZXJyb3IpO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXROZXR3b3JrKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiW1dTXSDQndCw0YfQsNC70L4g0LjQvdC40YbQuNCw0LvQuNC30LDRhtC40LggV2ViU29ja2V0XCIpO1xuICAgICAgICB3cyA9IG5ldyBXZWJTb2NrZXQoXCJ3czovL2xvY2FsaG9zdDo4MDgwL3dzXCIpO1xuICAgICAgICBcbiAgICAgICAgd3Mub25vcGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbV1NdIGNvbm5lY3RlZFwiKTtcbiAgICAgICAgICAgIC8vINCY0L3QuNGG0LjQsNC70LjQt9C40YDRg9C10Lwg0LjQvdC00LjQutCw0YLQvtGAINC/0LjQvdCz0LBcbiAgICAgICAgICAgIHVwZGF0ZVBpbmdEaXNwbGF5KDApO1xuICAgICAgICAgICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INC40L3RhNC+0YDQvNCw0YbQuNGOINC+INCy0YDQtdC80LXQvdC4XG4gICAgICAgICAgICB1cGRhdGVUaW1lRGlzcGxheSgpO1xuICAgICAgICAgICAgLy8g0JfQsNC/0YPRgdC60LDQtdC8INC40L3RgtC10YDQstCw0Lsg0L7QsdC90L7QstC70LXQvdC40Y8g0LLRgNC10LzQtdC90LhcbiAgICAgICAgICAgIGlmICh0aW1lRGlzcGxheUludGVydmFsKSBjbGVhckludGVydmFsKHRpbWVEaXNwbGF5SW50ZXJ2YWwpO1xuICAgICAgICAgICAgdGltZURpc3BsYXlJbnRlcnZhbCA9IHNldEludGVydmFsKHVwZGF0ZVRpbWVEaXNwbGF5LCAxMDAwKTtcbiAgICAgICAgICAgIC8vINCe0YLQv9GA0LDQstC40Lwg0YLQtdGB0YLQvtCy0L7QtSDRgdC+0L7QsdGJ0LXQvdC40LUg0LTQu9GPINGB0LjQvdGF0YDQvtC90LjQt9Cw0YbQuNC4INCy0YDQtdC80LXQvdC4XG4gICAgICAgICAgICBzZW5kUGluZygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHdzLm9ubWVzc2FnZSA9IChldnQpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoZXZ0LmRhdGEpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICghZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfQndC10LLQtdGA0L3Ri9C5INGE0L7RgNC80LDRgiDQtNCw0L3QvdGL0YUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyDQldGB0LvQuCDQv9GA0LjRhdC+0LTQuNGCINGB0L7QvtCx0YnQtdC90LjQtSDRgSBpZCDQuCBvYmplY3RfdHlwZSwg0L3QviDQsdC10LcgdHlwZSAtINGN0YLQviDQvtCx0YrQtdC60YIg0YHQvtC30LTQsNC90LjRj1xuICAgICAgICAgICAgICAgIGlmICghZGF0YS50eXBlICYmIGRhdGEuaWQgJiYgZGF0YS5vYmplY3RfdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1dTXSDQn9C+0LvRg9GH0LXQvSDQvtCx0YrQtdC60YIg0LHQtdC3IHR5cGUsINGB0YfQuNGC0LDQtdC8INGN0YLQviBjcmVhdGU6JywgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDRgtC40L8g0LTQu9GPINGB0L7QstC80LXRgdGC0LjQvNC+0YHRgtC4INGBINGB0YPRidC10YHRgtCy0YPRjtGJ0LjQvCDQutC+0LTQvtC8XG4gICAgICAgICAgICAgICAgICAgIGRhdGEudHlwZSA9IFwiY3JlYXRlXCI7XG4gICAgICAgICAgICAgICAgICAgIC8vINCe0LHRgNCw0LHQsNGC0YvQstCw0LXQvCDQutCw0LogY3JlYXRlXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZU1lc3NhZ2UoZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vINCe0LHRgNCw0LHQsNGC0YvQstCw0LXQvCB1cGRhdGUg0YHQvtC+0LHRidC10L3QuNGPINGH0LXRgNC10Lcg0L3QsNGI0YMg0L3QvtCy0YPRjiDRhNGD0L3QutGG0LjRjlxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gXCJ1cGRhdGVcIiAmJiBkYXRhLmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY2VpdmVPYmplY3RVcGRhdGUoZGF0YSk7XG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkYXRhLnR5cGUgPT09IFwiY3JlYXRlXCIgJiYgZGF0YS5pZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyDQntGB0YLQsNCy0LvRj9C10Lwg0YHRg9GJ0LXRgdGC0LLRg9GO0YnRg9GOINC70L7Qs9C40LrRgyDRgdC+0LfQtNCw0L3QuNGPINC+0LHRitC10LrRgtC+0LJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlTWVzc2FnZShkYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZGF0YS50eXBlID09PSBcInBvbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyDQntCx0YDQsNCx0LDRgtGL0LLQsNC10LwgcG9uZyDRgdC+0L7QsdGJ0LXQvdC40Y8g0LTQu9GPINGB0LjQvdGF0YDQvtC90LjQt9Cw0YbQuNC4INCy0YDQtdC80LXQvdC4XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZU1lc3NhZ2UoZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyDQntCx0YDQsNCx0LDRgtGL0LLQsNC10Lwg0LTRgNGD0LPQuNC1INGC0LjQv9GLINGB0L7QvtCx0YnQtdC90LjQuSwg0L3QsNC/0YDQuNC80LXRgCBcImNtZF9hY2tcIlxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVNZXNzYWdlKGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIltXU10g0J7RiNC40LHQutCwINC/0YDQuCDQvtCx0YDQsNCx0L7RgtC60LUg0YHQvtC+0LHRidC10L3QuNGPOlwiLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgd3Mub25lcnJvciA9IChlcnJvcikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIltXU10gV2ViU29ja2V0IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dTXSDQlNC10YLQsNC70Lgg0L7RiNC40LHQutC4OlwiLCB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgICAgICB0eXBlOiBlcnJvci50eXBlLFxuICAgICAgICAgICAgICAgIGV2ZW50UGhhc2U6IGVycm9yLmV2ZW50UGhhc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHdzLm9uY2xvc2UgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW1dTXSDQodC+0LXQtNC40L3QtdC90LjQtSDQt9Cw0LrRgNGL0YLQvjpcIiwge1xuICAgICAgICAgICAgICAgIGNvZGU6IGV2ZW50LmNvZGUsXG4gICAgICAgICAgICAgICAgcmVhc29uOiBldmVudC5yZWFzb24sXG4gICAgICAgICAgICAgICAgd2FzQ2xlYW46IGV2ZW50Lndhc0NsZWFuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0J7RgdGC0LDQvdCw0LLQu9C40LLQsNC10Lwg0L7QsdC90L7QstC70LXQvdC40LUg0LLRgNC10LzQtdC90Lgg0L/RgNC4INC30LDQutGA0YvRgtC40Lgg0YHQvtC10LTQuNC90LXQvdC40Y9cbiAgICAgICAgICAgIGlmICh0aW1lRGlzcGxheUludGVydmFsKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lRGlzcGxheUludGVydmFsKTtcbiAgICAgICAgICAgICAgICB0aW1lRGlzcGxheUludGVydmFsID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBoYW5kbGVLZXlEb3duKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCX0LDQv9GD0YHQutCw0LXQvCDQv9C10YDQuNC+0LTQuNGH0LXRgdC60YPRjiDRgdC40L3RhdGA0L7QvdC40LfQsNGG0LjRjiDQstGA0LXQvNC10L3QuFxuICAgICAgICBzZXRJbnRlcnZhbChzZW5kUGluZywgMTAwMDApOyAvLyDQmtCw0LbQtNGL0LUgMTAg0YHQtdC60YPQvdC0XG5cbiAgICAgICAgcmV0dXJuIHdzO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV1NdINCe0YjQuNCx0LrQsCDQv9GA0Lgg0YHQvtC30LTQsNC90LjQuCBXZWJTb2NrZXQ6XCIsIGVycm9yKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIltXU10g0KHRgtC10Log0LLRi9C30L7QstC+0LI6XCIsIGVycm9yLnN0YWNrKTtcbiAgICB9XG5cbiAgICBcbn1cblxuLy8g0KTRg9C90LrRhtC40Y8g0LTQu9GPINC+0YLQv9GA0LDQstC60LggcGluZy3RgdC+0L7QsdGJ0LXQvdC40Y8g0YEg0LLRgNC10LzQtdC90L3QvtC5INC80LXRgtC60L7QuSDQutC70LjQtdC90YLQsFxuZnVuY3Rpb24gc2VuZFBpbmcoKSB7XG4gICAgaWYgKCF3cyB8fCB3cy5yZWFkeVN0YXRlICE9PSBXZWJTb2NrZXQuT1BFTikgcmV0dXJuO1xuICAgIFxuICAgIGNvbnN0IGNsaWVudFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IHBpbmdPYmogPSB7IFxuICAgICAgICB0eXBlOiBcInBpbmdcIiwgXG4gICAgICAgIGNsaWVudF90aW1lOiBjbGllbnRUaW1lIFxuICAgIH07XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgICAgd3Muc2VuZChKU09OLnN0cmluZ2lmeShwaW5nT2JqKSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbV1NdINCe0YLQv9GA0LDQstC70LXQvSBwaW5nINC00LvRjyDRgdC40L3RhdGA0L7QvdC40LfQsNGG0LjQuCDQstGA0LXQvNC10L3QuCwg0LLRgNC10LzRjyDQutC70LjQtdC90YLQsDogJHtjbGllbnRUaW1lfWApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV1NdINCe0YjQuNCx0LrQsCDQvtGC0L/RgNCw0LLQutC4IHBpbmc6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbi8vINCd0L7QstCw0Y8g0YTRg9C90LrRhtC40Y8g0LTQu9GPINC30LDQv9GD0YHQutCwINGE0LjQt9C40LrQuCDRgSDQt9Cw0LTQtdGA0LbQutC+0LlcbmV4cG9ydCBmdW5jdGlvbiBzdGFydFBoeXNpY3NTaW11bGF0aW9uKCkge1xuICAgIHBoeXNpY3NTdGFydGVkID0gdHJ1ZTtcbiAgICBcbiAgICAvLyDQkNC60YLQuNCy0LjRgNGD0LXQvCDQstGB0LUg0L7QttC40LTQsNGO0YnQuNC1INC+0LHRitC10LrRgtGLXG4gICAgZm9yIChjb25zdCBpZCBvZiBwZW5kaW5nT2JqZWN0cykge1xuICAgICAgICBjb25zdCBvYmogPSBvYmplY3RzW2lkXTtcbiAgICAgICAgaWYgKG9iaiAmJiBvYmouYm9keSkge1xuICAgICAgICAgICAgLy8g0JDQutGC0LjQstC40YDRg9C10Lwg0YLQtdC70L5cbiAgICAgICAgICAgIG9iai5ib2R5LmFjdGl2YXRlKHRydWUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQotC10LvQtdC/0L7RgNGC0LjRgNGD0LXQvCDQuiDQv9C+0YHQu9C10LTQvdC40Lwg0LjQt9Cy0LXRgdGC0L3Ri9C8INGB0LXRgNCy0LXRgNC90YvQvCDQutC+0L7RgNC00LjQvdCw0YLQsNC8XG4gICAgICAgICAgICBpZiAob2JqLnNlcnZlclBvcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyBBbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgICAgb2JqLmJvZHkuZ2V0TW90aW9uU3RhdGUoKS5nZXRXb3JsZFRyYW5zZm9ybSh0cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybS5zZXRPcmlnaW4obmV3IEFtbW8uYnRWZWN0b3IzKFxuICAgICAgICAgICAgICAgICAgICBvYmouc2VydmVyUG9zLngsIFxuICAgICAgICAgICAgICAgICAgICBvYmouc2VydmVyUG9zLnksIFxuICAgICAgICAgICAgICAgICAgICBvYmouc2VydmVyUG9zLnpcbiAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICBvYmouYm9keS5nZXRNb3Rpb25TdGF0ZSgpLnNldFdvcmxkVHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgb2JqLm1lc2gucG9zaXRpb24uc2V0KG9iai5zZXJ2ZXJQb3MueCwgb2JqLnNlcnZlclBvcy55LCBvYmouc2VydmVyUG9zLnopO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbUGh5c2ljc10g0J7QsdGK0LXQutGCICR7aWR9INCw0LrRgtC40LLQuNGA0L7QstCw0L0g0Lgg0YLQtdC70LXQv9C+0YDRgtC40YDQvtCy0LDQvSDQsiDQutC+0L7RgNC00LjQvdCw0YLRizpgLCBcbiAgICAgICAgICAgICAgICAgICAgeyB4OiBvYmouc2VydmVyUG9zLngsIHk6IG9iai5zZXJ2ZXJQb3MueSwgejogb2JqLnNlcnZlclBvcy56IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vINCe0YfQuNGJ0LDQtdC8INGB0L/QuNGB0L7QuiDQvtC20LjQtNCw0Y7RidC40YVcbiAgICBwZW5kaW5nT2JqZWN0cyA9IFtdO1xuICAgIGNvbnNvbGUubG9nKFwiW1BoeXNpY3NdINCk0LjQt9C40LrQsCDQsNC60YLQuNCy0LjRgNC+0LLQsNC90LAsINCy0YHQtSDQvtC20LjQtNCw0Y7RidC40LUg0L7QsdGK0LXQutGC0Ysg0L7QsdGA0LDQsdC+0YLQsNC90YtcIik7XG59XG5cbi8vINCt0LrRgdC/0L7RgNGC0LjRgNGD0LXQvCDRhNGD0L3QutGG0LjQuCDQtNC70Y8g0LTQvtGB0YLRg9C/0LAg0LjQtyDQtNGA0YPQs9C40YUg0LzQvtC00YPQu9C10LlcbmV4cG9ydCB7IGVzdGltYXRlU2VydmVyVGltZSB9OyIsImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7IGdldFBoeXNpY3NDb25maWcgfSBmcm9tICcuL25ldHdvcmsnO1xuXG4vLyDQmtC+0L3RgdGC0LDQvdGC0Ysg0LTQu9GPINC90LDRgdGC0YDQvtC50LrQuCDQv9C+0LLQtdC00LXQvdC40Y9cbmNvbnN0IERFQlVHX01PREUgPSB0cnVlOyAvLyDQktC60LvRjtGH0LDQtdGCL9Cy0YvQutC70Y7Rh9Cw0LXRgiDQvtGC0LvQsNC00L7Rh9C90YvQtSDRjdC70LXQvNC10L3RgtGLIChhcnJvd0hlbHBlcilcbmNvbnN0IE1JTl9BUlJPV19MRU5HVEggPSAxMDtcbmNvbnN0IE1BWF9BUlJPV19MRU5HVEggPSA1MDtcbmNvbnN0IFNFTkRfSU5URVJWQUwgPSA1MDsgLy8g0KPQvNC10L3RjNGI0LDQtdC8INC40L3RgtC10YDQstCw0Lsg0L7RgtC/0YDQsNCy0LrQuCDQtNC+IDUwINC80YEg0LTQu9GPINC70YPRh9GI0LXQuSDQvtGC0LfRi9Cy0YfQuNCy0L7RgdGC0LhcbmNvbnN0IEFSUk9XX0hFSUdIVF9PRkZTRVQgPSAyOyAvLyDQodC80LXRidC10L3QuNC1INGB0YLRgNC10LvQutC4INC/0L4g0LLRi9GB0L7RgtC1INC90LDQtCDQuNCz0YDQvtC60L7QvFxuY29uc3QgUkFZX1VQREFURV9JTlRFUlZBTCA9IDUwOyAvLyDQmNC90YLQtdGA0LLQsNC7INC+0LHQvdC+0LLQu9C10L3QuNGPINC70YPRh9CwINC/0YDQuCDQtNCy0LjQttC10L3QuNC4INC60LDQvNC10YDRiyAo0LzRgSlcbmNvbnN0IEtFWV9GT1JDRSA9IDIuMDsgLy8g0JfQvdCw0YfQuNGC0LXQu9GM0L3QviDRg9Cy0LXQu9C40YfQuNCy0LDQtdC8INGB0LjQu9GDINC40LzQv9GD0LvRjNGB0LAg0LTQu9GPINC60LvQsNCy0LjQsNGC0YPRgNC90L7Qs9C+INGD0L/RgNCw0LLQu9C10L3QuNGPXG5cbmxldCBhcnJvd0hlbHBlcjtcbmxldCBsYXN0U2VudFBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbmxldCBsYXN0U2VuZFRpbWUgPSAwO1xubGV0IHJheWNhc3RlciA9IG5ldyBUSFJFRS5SYXljYXN0ZXIoKTtcbmxldCBtb3VzZSA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5sZXQgY2FtZXJhTGFzdFBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbmxldCBsYXN0UmF5VXBkYXRlVGltZSA9IDA7XG5sZXQgbGFzdEludGVyc2VjdFBvaW50ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbmxldCBpc01vdXNlQWN0aXZlID0gZmFsc2U7IC8vINCk0LvQsNCzINCw0LrRgtC40LLQvdC+0YHRgtC4INC80YvRiNC4INC90LDQtCDQuNCz0YDQvtCy0L7QuSDQvtCx0LvQsNGB0YLRjNGOXG5cbi8vINCk0LvQsNCz0Lgg0LTQu9GPINC60LvQsNCy0LjQsNGC0YPRgNC90L7Qs9C+INGD0L/RgNCw0LLQu9C10L3QuNGPXG5sZXQga2V5cyA9IHtcbiAgICB3OiBmYWxzZSxcbiAgICBhOiBmYWxzZSxcbiAgICBzOiBmYWxzZSxcbiAgICBkOiBmYWxzZVxufTtcblxuLy8g0J/QtdGA0LXQvNC10L3QvdGL0LUg0LTQu9GPINGF0YDQsNC90LXQvdC40Y8g0L3QsNC/0YDQsNCy0LvQtdC90LjRj1xubGV0IGN1cnJlbnREaXJlY3Rpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xubGV0IGRpcmVjdGlvbk5lZWRzVXBkYXRlID0gZmFsc2U7XG5sZXQgdGVycmFpbk1lc2hSZWYgPSBudWxsO1xubGV0IHBsYXllck1lc2hSZWYgPSBudWxsO1xubGV0IGNhbWVyYVJlZiA9IG51bGw7XG5sZXQgc29ja2V0UmVmID0gbnVsbDtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFycm93RGlyZWN0aW9uKCkge1xuICAgIHJldHVybiBsYXN0U2VudFBvc2l0aW9uLmNsb25lKCk7XG59XG5cbmZ1bmN0aW9uIGluaXRHYW1lcGFkKGNhbWVyYSwgdGVycmFpbk1lc2gsIHBsYXllck1lc2gsIHNvY2tldCwgc2NlbmUpIHtcbiAgICAvLyDQodC+0YXRgNCw0L3Rj9C10Lwg0YHRgdGL0LvQutC4INC90LAg0L7QsdGK0LXQutGC0Ysg0LTQu9GPINC40YHQv9C+0LvRjNC30L7QstCw0L3QuNGPINCyINC00YDRg9Cz0LjRhSDRhNGD0L3QutGG0LjRj9GFXG4gICAgdGVycmFpbk1lc2hSZWYgPSB0ZXJyYWluTWVzaDtcbiAgICBwbGF5ZXJNZXNoUmVmID0gcGxheWVyTWVzaDtcbiAgICBjYW1lcmFSZWYgPSBjYW1lcmE7XG4gICAgc29ja2V0UmVmID0gc29ja2V0O1xuICAgIGNhbWVyYUxhc3RQb3NpdGlvbi5jb3B5KGNhbWVyYS5wb3NpdGlvbik7XG4gICAgXG4gICAgLy8g0KHQvtC30LTQsNC10Lwg0Lgg0LTQvtCx0LDQstC70Y/QtdC8IGFycm93SGVscGVyINCyINGB0YbQtdC90YNcbiAgICBhcnJvd0hlbHBlciA9IG5ldyBUSFJFRS5BcnJvd0hlbHBlcihcbiAgICAgICAgbmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMSksIC8vINCd0LDRh9Cw0LvRjNC90L7QtSDQvdCw0L/RgNCw0LLQu9C10L3QuNC1XG4gICAgICAgIHBsYXllck1lc2gucG9zaXRpb24sICAgICAgICAvLyDQndCw0YfQsNC70YzQvdCw0Y8g0L/QvtC30LjRhtC40Y9cbiAgICAgICAgTUlOX0FSUk9XX0xFTkdUSCwgICAgICAgICAgLy8g0JTQu9C40L3QsCDRgdGC0YDQtdC70LrQuCAo0L3QsNGH0LDQu9GM0L3QsNGPKVxuICAgICAgICAweGZmZmYwMCAgICAgICAgICAgICAgICAgICAgLy8g0KbQstC10YIg0YHRgtGA0LXQu9C60LhcbiAgICApO1xuICAgIFxuICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCBhcnJvd0hlbHBlciDQsiDRgdGG0LXQvdGDINGC0L7Qu9GM0LrQviDQtdGB0LvQuCBERUJVR19NT0RFINCy0LrQu9GO0YfQtdC9XG4gICAgaWYgKERFQlVHX01PREUpIHtcbiAgICAgICAgc2NlbmUuYWRkKGFycm93SGVscGVyKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJBcnJvd0hlbHBlciBpbml0aWFsaXplZCBhbmQgYWRkZWQgdG8gc2NlbmVcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJBcnJvd0hlbHBlciBpbml0aWFsaXplZCBidXQgaGlkZGVuIChERUJVR19NT0RFIGlzIG9mZilcIik7XG4gICAgfVxuXG4gICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC+0LHRgNCw0LHQvtGC0YfQuNC60Lgg0YHQvtCx0YvRgtC40Lkg0LzRi9GI0Lgg0Lgg0LrQu9Cw0LLQuNCw0YLRg9GA0YtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25LZXlEb3duKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBvbktleVVwKTtcbiAgICBcbiAgICAvLyDQl9Cw0L/Rg9GB0LrQsNC10Lwg0LDQvdC40LzQsNGG0LjRjiDQtNC70Y8g0L7QsdC90L7QstC70LXQvdC40Y8g0YHRgtGA0LXQu9C60Lgg0Lgg0L7QsdGA0LDQsdC+0YLQutC4INC60LvQsNCy0LjQsNGC0YPRgNC90L7Qs9C+INCy0LLQvtC00LBcbiAgICBhbmltYXRlKCk7XG5cbiAgICBmdW5jdGlvbiBhbmltYXRlKCkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4gICAgICAgIFxuICAgICAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0YHRgtGA0LXQu9C60YMg0LXRgdC70Lgg0L3Rg9C20L3QviDQuCDQtdGB0LvQuCDQvtC90LAg0LLQuNC00LjQvNCwXG4gICAgICAgIGlmIChkaXJlY3Rpb25OZWVkc1VwZGF0ZSAmJiBERUJVR19NT0RFKSB7XG4gICAgICAgICAgICB1cGRhdGVBcnJvd0hlbHBlcihwbGF5ZXJNZXNoKTtcbiAgICAgICAgICAgIGRpcmVjdGlvbk5lZWRzVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCwg0LTQstC40LPQsNC70LDRgdGMINC70Lgg0LrQsNC80LXRgNCwINC4INC90YPQttC90L4g0LvQuCDQvtCx0L3QvtCy0LjRgtGMINC70YPRh1xuICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICBpZiAoaXNNb3VzZUFjdGl2ZSAmJiBjYW1lcmFSZWYgJiYgbm93IC0gbGFzdFJheVVwZGF0ZVRpbWUgPiBSQVlfVVBEQVRFX0lOVEVSVkFMKSB7XG4gICAgICAgICAgICAvLyDQldGB0LvQuCDQutCw0LzQtdGA0LAg0LTQstC40LbQtdGC0YHRjyDQuCDQvNGL0YjRjCDQsNC60YLQuNCy0L3QsCDQvdCw0LQg0LjQs9GA0L7QstC+0Lkg0L7QsdC70LDRgdGC0YzRjlxuICAgICAgICAgICAgaWYgKCFjYW1lcmFSZWYucG9zaXRpb24uZXF1YWxzKGNhbWVyYUxhc3RQb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0LvRg9GHINGBINC/0L7RgdC70LXQtNC90LjRhSDQutC+0L7RgNC00LjQvdCw0YIg0LzRi9GI0LhcbiAgICAgICAgICAgICAgICB1cGRhdGVSYXlGcm9tTGFzdE1vdXNlKCk7XG4gICAgICAgICAgICAgICAgY2FtZXJhTGFzdFBvc2l0aW9uLmNvcHkoY2FtZXJhUmVmLnBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBsYXN0UmF5VXBkYXRlVGltZSA9IG5vdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8g0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdC8INC60LvQsNCy0LjQsNGC0YPRgNC90L7QtSDRg9C/0YDQsNCy0LvQtdC90LjQtVxuICAgICAgICBwcm9jZXNzS2V5Ym9hcmRJbnB1dCgpO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBwcm9jZXNzS2V5Ym9hcmRJbnB1dCgpIHtcbiAgICAgICAgaWYgKCFwbGF5ZXJNZXNoUmVmIHx8ICFzb2NrZXRSZWYpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCwg0LXRgdC70Lgg0YXQvtGC0Y8g0LHRiyDQvtC00L3QsCDQutC70LDQstC40YjQsCDQvdCw0LbQsNGC0LBcbiAgICAgICAgaWYgKGtleXMudyB8fCBrZXlzLmEgfHwga2V5cy5zIHx8IGtleXMuZCkge1xuICAgICAgICAgICAgLy8g0KHQvtC30LTQsNC10Lwg0LLQtdC60YLQvtGAINC90LDQv9GA0LDQstC70LXQvdC40Y8g0L3QsCDQvtGB0L3QvtCy0LUg0L3QsNC20LDRgtGL0YUg0LrQu9Cw0LLQuNGIXG4gICAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGtleXMudykgZGlyZWN0aW9uLnogLT0gMTtcbiAgICAgICAgICAgIGlmIChrZXlzLnMpIGRpcmVjdGlvbi56ICs9IDE7XG4gICAgICAgICAgICBpZiAoa2V5cy5hKSBkaXJlY3Rpb24ueCAtPSAxO1xuICAgICAgICAgICAgaWYgKGtleXMuZCkgZGlyZWN0aW9uLnggKz0gMTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0J3QvtGA0LzQsNC70LjQt9GD0LXQvCDQvdCw0L/RgNCw0LLQu9C10L3QuNC1LCDQtdGB0LvQuCDQvtC90L4g0L3QtSDQvdGD0LvQtdCy0L7QtVxuICAgICAgICAgICAgaWYgKGRpcmVjdGlvbi5sZW5ndGgoKSA+IDApIHtcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24ubm9ybWFsaXplKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8g0J7RgtC/0YDQsNCy0LvRj9C10Lwg0L3QsNC/0YDQsNCy0LvQtdC90LjQtSDQvdCwINGB0LXRgNCy0LXRgFxuICAgICAgICAgICAgICAgIGlmIChEYXRlLm5vdygpIC0gbGFzdFNlbmRUaW1lID4gU0VORF9JTlRFUlZBTCkge1xuICAgICAgICAgICAgICAgICAgICAvLyDQn9C+0LvRg9GH0LDQtdC8INGC0LXQutGD0YnRg9GOINC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjiDRhNC40LfQuNC60LhcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGh5c2ljc0NvbmZpZyA9IGdldFBoeXNpY3NDb25maWcoKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vINCY0YHQv9C+0LvRjNC30YPQtdC8INC80L3QvtC20LjRgtC10LvRjCDQuNC80L/Rg9C70YzRgdCwINC40Lcg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNC4LCDQtdGB0LvQuCDQvtC90LAg0LTQvtGB0YLRg9C/0L3QsFxuICAgICAgICAgICAgICAgICAgICBsZXQga2V5Rm9yY2UgPSBLRVlfRk9SQ0U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwaHlzaWNzQ29uZmlnICYmIHBoeXNpY3NDb25maWcuaW1wdWxzZV9tdWx0aXBsaWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlGb3JjZSA9IChwaHlzaWNzQ29uZmlnLmJhc2VfaW1wdWxzZSB8fCAwLjUpICogOC4wOyAvLyDQo9Cy0LXQu9C40YfQuNCy0LDQtdC8INCyIDgg0YDQsNC3INCx0LDQt9C+0LLRi9C5INC40LzQv9GD0LvRjNGBXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlGb3JjZSA9IEtFWV9GT1JDRSAqIDQuMDsgLy8g0JjQu9C4INGD0LLQtdC70LjRh9C40LLQsNC10Lwg0LIgNCDRgNCw0LfQsCDQt9C90LDRh9C10L3QuNC1INC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vINCb0L7Qs9C40YDRg9C10Lwg0LTQu9GPINC+0YLQu9Cw0LTQutC4XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbR2FtZXBhZF0g0J7RgtC/0YDQsNCy0LrQsCDQuNC80L/Rg9C70YzRgdCwINGBINC60LvQsNCy0LjQsNGC0YPRgNGLOiDQvdCw0L/RgNCw0LLQu9C10L3QuNC1ICgke2RpcmVjdGlvbi54LnRvRml4ZWQoMil9LCAke2RpcmVjdGlvbi55LnRvRml4ZWQoMil9LCAke2RpcmVjdGlvbi56LnRvRml4ZWQoMil9KSwg0YHQuNC70LAgJHtrZXlGb3JjZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vINCe0YLQv9GA0LDQstC70Y/QtdC8INC40LzQv9GD0LvRjNGBINC90LAg0YHQtdGA0LLQtdGAXG4gICAgICAgICAgICAgICAgICAgIHNlbmREaXJlY3Rpb25Ub1NlcnZlcihkaXJlY3Rpb24sIGtleUZvcmNlLCBzb2NrZXRSZWYpO1xuICAgICAgICAgICAgICAgICAgICBsYXN0U2VuZFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8g0J7QsdC90L7QstC70Y/QtdC8IGxhc3RTZW50UG9zaXRpb24g0LTQu9GPINC+0YLQvtCx0YDQsNC20LXQvdC40Y8g0YHRgtGA0LXQu9C60LhcbiAgICAgICAgICAgICAgICAgICAgbGFzdFNlbnRQb3NpdGlvbi5jb3B5KGRpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RTZW50UG9zaXRpb24udXNlckRhdGEgPSB7IGRpc3RhbmNlOiBrZXlGb3JjZSB9O1xuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb25OZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIG9uS2V5RG93bihldmVudCkge1xuICAgICAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0YHQvtGB0YLQvtGP0L3QuNC1INC60LvQsNCy0LjRiFxuICAgICAgICBzd2l0Y2goZXZlbnQua2V5LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3cnOiBrZXlzLncgPSB0cnVlOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2EnOiBrZXlzLmEgPSB0cnVlOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3MnOiBrZXlzLnMgPSB0cnVlOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2QnOiBrZXlzLmQgPSB0cnVlOyBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBvbktleVVwKGV2ZW50KSB7XG4gICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDRgdC+0YHRgtC+0Y/QvdC40LUg0LrQu9Cw0LLQuNGIXG4gICAgICAgIHN3aXRjaChldmVudC5rZXkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgY2FzZSAndyc6IGtleXMudyA9IGZhbHNlOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2EnOiBrZXlzLmEgPSBmYWxzZTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzJzoga2V5cy5zID0gZmFsc2U7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZCc6IGtleXMuZCA9IGZhbHNlOyBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQutC+0L7RgNC00LjQvdCw0YLRiyDQvNGL0YjQuFxuICAgICAgICBtb3VzZS54ID0gKGV2ZW50LmNsaWVudFggLyB3aW5kb3cuaW5uZXJXaWR0aCkgKiAyIC0gMTtcbiAgICAgICAgbW91c2UueSA9IC0oZXZlbnQuY2xpZW50WSAvIHdpbmRvdy5pbm5lckhlaWdodCkgKiAyICsgMTtcbiAgICAgICAgXG4gICAgICAgIC8vINCj0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdC8INGE0LvQsNCzINCw0LrRgtC40LLQvdC+0YHRgtC4INC80YvRiNC4XG4gICAgICAgIGlzTW91c2VBY3RpdmUgPSB0cnVlO1xuICAgICAgICBcbiAgICAgICAgLy8g0JLRi9C30YvQstCw0LXQvCDRhNGD0L3QutGG0LjRjiDQvtCx0L3QvtCy0LvQtdC90LjRjyDQvdCw0L/RgNCw0LLQu9C10L3QuNGPXG4gICAgICAgIGNhc3RSYXlBbmRVcGRhdGVEaXJlY3Rpb24oKTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gdXBkYXRlUmF5RnJvbUxhc3RNb3VzZSgpIHtcbiAgICAgICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INC70YPRhyDRgSDRgtC10LrRg9GJ0LjQvNC4INC60L7QvtGA0LTQuNC90LDRgtCw0LzQuCDQvNGL0YjQuCDQuCDQvdC+0LLQvtC5INC/0L7Qt9C40YbQuNC10Lkg0LrQsNC80LXRgNGLXG4gICAgICAgIGNhc3RSYXlBbmRVcGRhdGVEaXJlY3Rpb24oKTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gY2FzdFJheUFuZFVwZGF0ZURpcmVjdGlvbigpIHtcbiAgICAgICAgaWYgKCFjYW1lcmFSZWYgfHwgIXRlcnJhaW5NZXNoUmVmIHx8ICFwbGF5ZXJNZXNoUmVmIHx8ICFzb2NrZXRSZWYpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgIC8vINCj0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdC8INC70YPRhyDQvtGCINC60LDQvNC10YDRiyDRh9C10YDQtdC3INC60L7QvtGA0LTQuNC90LDRgtGLINC80YvRiNC4XG4gICAgICAgIHJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKG1vdXNlLCBjYW1lcmFSZWYpO1xuICAgICAgICBcbiAgICAgICAgLy8g0J3QsNGF0L7QtNC40Lwg0L/QtdGA0LXRgdC10YfQtdC90LjRjyDRgSDRgtC10YDRgNC10LnQvdC+0LxcbiAgICAgICAgY29uc3QgaW50ZXJzZWN0cyA9IHJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKFt0ZXJyYWluTWVzaFJlZl0pO1xuICAgIFxuICAgICAgICBpZiAoaW50ZXJzZWN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRQb3NpdGlvbiA9IGludGVyc2VjdHNbMF0ucG9pbnQ7XG4gICAgICAgICAgICBsYXN0SW50ZXJzZWN0UG9pbnQuY29weSh0YXJnZXRQb3NpdGlvbik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCS0YvRh9C40YHQu9GP0LXQvCDQvdCw0L/RgNCw0LLQu9C10L3QuNC1INCyIDNEINC/0YDQvtGB0YLRgNCw0L3RgdGC0LLQtSAo0YEg0YPRh9C10YLQvtC8INC+0YHQuCBZKVxuICAgICAgICAgICAgY3VycmVudERpcmVjdGlvbi5zZXQoXG4gICAgICAgICAgICAgICAgdGFyZ2V0UG9zaXRpb24ueCAtIHBsYXllck1lc2hSZWYucG9zaXRpb24ueCxcbiAgICAgICAgICAgICAgICB0YXJnZXRQb3NpdGlvbi55IC0gcGxheWVyTWVzaFJlZi5wb3NpdGlvbi55LCAvLyDQo9GH0LjRgtGL0LLQsNC10Lwg0LLRi9GB0L7RgtGDXG4gICAgICAgICAgICAgICAgdGFyZ2V0UG9zaXRpb24ueiAtIHBsYXllck1lc2hSZWYucG9zaXRpb24uelxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0KHQvtGF0YDQsNC90Y/QtdC8INC00LvQuNC90YMg0LTQviDQvdC+0YDQvNCw0LvQuNC30LDRhtC40LggKNGA0LDRgdGB0YLQvtGP0L3QuNC1INC+0YIg0LjQs9GA0L7QutCwINC00L4g0YLQvtGH0LrQuCDQv9C10YDQtdGB0LXRh9C10L3QuNGPKVxuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBjdXJyZW50RGlyZWN0aW9uLmxlbmd0aCgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQndC+0YDQvNCw0LvQuNC30YPQtdC8INC00LvRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0L3QsNC/0YDQsNCy0LvQtdC90LjRj1xuICAgICAgICAgICAgY3VycmVudERpcmVjdGlvbi5ub3JtYWxpemUoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0JfQsNC/0L7QvNC40L3QsNC10Lwg0L3QsNC/0YDQsNCy0LvQtdC90LjQtSDQuCDRgNCw0YHRgdGC0L7Rj9C90LjQtVxuICAgICAgICAgICAgbGFzdFNlbnRQb3NpdGlvbi5jb3B5KGN1cnJlbnREaXJlY3Rpb24pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQodC+0YXRgNCw0L3Rj9C10Lwg0LjRgdGF0L7QtNC90L7QtSDRgNCw0YHRgdGC0L7Rj9C90LjQtSDQtNC70Y8g0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40Y8g0LIgdXBkYXRlQXJyb3dIZWxwZXJcbiAgICAgICAgICAgIGxhc3RTZW50UG9zaXRpb24udXNlckRhdGEgPSB7IGRpc3RhbmNlOiBkaXN0YW5jZSB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQn9C+0LzQtdGH0LDQtdC8LCDRh9GC0L4g0L3QsNC/0YDQsNCy0LvQtdC90LjQtSDQvdGD0LbQvdC+INC+0LHQvdC+0LLQuNGC0YxcbiAgICAgICAgICAgIGRpcmVjdGlvbk5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8LCDQvdGD0LbQvdC+INC70Lgg0L7RgtC/0YDQsNCy0LvRj9GC0Ywg0LTQsNC90L3Ri9C1INC90LAg0YHQtdGA0LLQtdGAXG4gICAgICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIGxhc3RTZW5kVGltZSA+IFNFTkRfSU5URVJWQUwpIHtcbiAgICAgICAgICAgICAgICBzZW5kRGlyZWN0aW9uVG9TZXJ2ZXIoY3VycmVudERpcmVjdGlvbiwgZGlzdGFuY2UsIHNvY2tldFJlZik7XG4gICAgICAgICAgICAgICAgbGFzdFNlbmRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNlbmREaXJlY3Rpb25Ub1NlcnZlcihkaXJlY3Rpb24sIGRpc3RhbmNlLCBzb2NrZXQpIHtcbiAgICAgICAgaWYgKHNvY2tldCAmJiBzb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgICAgICAgICAgIC8vINCU0LvRjyDQvNGL0YjQuNC90L7Qs9C+INGD0L/RgNCw0LLQu9C10L3QuNGPINGD0LLQtdC70LjRh9C40LLQsNC10Lwg0LTQuNGB0YLQsNC90YbQuNGOLCDQutC+0YLQvtGA0LDRjyDQuNGB0L/QvtC70YzQt9GD0LXRgtGB0Y8g0LrQsNC6INGB0LjQu9CwINC40LzQv9GD0LvRjNGB0LBcbiAgICAgICAgICAgIGNvbnN0IGVuaGFuY2VkRGlzdGFuY2UgPSBNYXRoLm1pbihkaXN0YW5jZSAqIDEuNSwgMTAwKTsgLy8g0KPQstC10LvQuNGH0LjQstCw0LXQvCDQvdCwIDUwJSwg0L3QviDQvdC1INCx0L7Qu9GM0YjQtSAxMDBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjbWQnLFxuICAgICAgICAgICAgICAgIGNtZDogJ01PVVNFX1ZFQ1RPUicsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICB4OiBkaXJlY3Rpb24ueCxcbiAgICAgICAgICAgICAgICAgICAgeTogZGlyZWN0aW9uLnksIC8vINCi0LXQv9C10YDRjCDQvtGC0L/RgNCw0LLQu9GP0LXQvCDRgNC10LDQu9GM0L3QvtC1INC30L3QsNGH0LXQvdC40LUgWVxuICAgICAgICAgICAgICAgICAgICB6OiBkaXJlY3Rpb24ueixcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2U6IGVuaGFuY2VkRGlzdGFuY2UgLy8g0JjRgdC/0L7Qu9GM0LfRg9C10Lwg0YPQstC10LvQuNGH0LXQvdC90L7QtSDQt9C90LDRh9C10L3QuNC1INC00LjRgdGC0LDQvdGG0LjQuFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2xpZW50X3RpbWU6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgb2JqZWN0X2lkOiAnbWFpblBsYXllcjEnXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdXZWJTb2NrZXQg0L3QtSDQv9C+0LTQutC70Y7Rh9C10L0nKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8g0KTRg9C90LrRhtC40Y8g0LTQu9GPINCy0LrQu9GO0YfQtdC90LjRjy/QstGL0LrQu9GO0YfQtdC90LjRjyDQvtGC0L7QsdGA0LDQttC10L3QuNGPIGFycm93SGVscGVyXG5leHBvcnQgZnVuY3Rpb24gc2V0RGVidWdNb2RlKGVuYWJsZWQpIHtcbiAgICBpZiAoYXJyb3dIZWxwZXIpIHtcbiAgICAgICAgYXJyb3dIZWxwZXIudmlzaWJsZSA9IGVuYWJsZWQ7XG4gICAgICAgIGNvbnNvbGUubG9nKGBBcnJvd0hlbHBlciB2aXNpYmlsaXR5IHNldCB0byAke2VuYWJsZWR9YCk7XG4gICAgfVxufVxuXG4vLyDQpNGD0L3QutGG0LjRjyDQtNC70Y8g0L/QvtC70YPRh9C10L3QuNGPINGC0LXQutGD0YnQtdCz0L4g0YHRgtCw0YLRg9GB0LAg0L7RgtC70LDQtNC+0YfQvdC+0LPQviDRgNC10LbQuNC80LBcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWJ1Z01vZGUoKSB7XG4gICAgcmV0dXJuIERFQlVHX01PREU7XG59XG5cbi8vINCe0LHQvdC+0LLQu9GP0LXQvCDQv9C+0LfQuNGG0LjRjiDQuCDQvdCw0L/RgNCw0LLQu9C10L3QuNC1IGFycm93SGVscGVyXG5mdW5jdGlvbiB1cGRhdGVBcnJvd0hlbHBlcihwbGF5ZXJNZXNoKSB7XG4gICAgaWYgKGFycm93SGVscGVyKSB7XG4gICAgICAgIC8vINCf0L7Qt9C40YbQuNGPINGB0YLRgNC10LvQutC4INGBINGD0YfQtdGC0L7QvCDRgdC80LXRidC10L3QuNGPINC/0L4g0LLRi9GB0L7RgtC1XG4gICAgICAgIGNvbnN0IGFycm93UG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMyhcbiAgICAgICAgICAgIHBsYXllck1lc2gucG9zaXRpb24ueCxcbiAgICAgICAgICAgIHBsYXllck1lc2gucG9zaXRpb24ueSArIEFSUk9XX0hFSUdIVF9PRkZTRVQsIC8vINCf0L7QtNC90LjQvNCw0LXQvCDRgdGC0YDQtdC70LrRgyDQvdCw0LQg0LjQs9GA0L7QutC+0LxcbiAgICAgICAgICAgIHBsYXllck1lc2gucG9zaXRpb24uelxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INC/0L7Qt9C40YbQuNGOINGB0YLRgNC10LvQutC4XG4gICAgICAgIGFycm93SGVscGVyLnBvc2l0aW9uLmNvcHkoYXJyb3dQb3NpdGlvbik7XG4gICAgICAgIFxuICAgICAgICAvLyDQo9GB0YLQsNC90LDQstC70LjQstCw0LXQvCDQvdCw0L/RgNCw0LLQu9C10L3QuNC1INGB0YLRgNC10LvQutC4ICjRgtC10L/QtdGA0Ywg0YEg0YPRh9C10YLQvtC8INC+0YHQuCBZKVxuICAgICAgICBhcnJvd0hlbHBlci5zZXREaXJlY3Rpb24obGFzdFNlbnRQb3NpdGlvbik7XG4gICAgICAgIFxuICAgICAgICAvLyDQmNGB0L/QvtC70YzQt9GD0LXQvCDRgdC+0YXRgNCw0L3QtdC90L3QvtC1INGA0LDRgdGB0YLQvtGP0L3QuNC1INC00L4g0YLQvtGH0LrQuCDQv9C10YDQtdGB0LXRh9C10L3QuNGPXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gbGFzdFNlbnRQb3NpdGlvbi51c2VyRGF0YSA/IGxhc3RTZW50UG9zaXRpb24udXNlckRhdGEuZGlzdGFuY2UgOiBNSU5fQVJST1dfTEVOR1RIO1xuICAgICAgICBcbiAgICAgICAgLy8g0J7Qs9GA0LDQvdC40YfQuNCy0LDQtdC8INC00LvQuNC90YMg0YHRgtGA0LXQu9C60LgsINGH0YLQvtCx0Ysg0L7QvdCwINC90LUg0LHRi9C70LAg0YHQu9C40YjQutC+0Lwg0LHQvtC70YzRiNC+0Lkg0LjQu9C4INC80LDQu9C10L3RjNC60L7QuVxuICAgICAgICBjb25zdCBhcnJvd0xlbmd0aCA9IE1hdGgubWluKE1BWF9BUlJPV19MRU5HVEgsIE1hdGgubWF4KE1JTl9BUlJPV19MRU5HVEgsIGRpc3RhbmNlKSk7XG4gICAgICAgIFxuICAgICAgICAvLyDQo9GB0YLQsNC90LDQstC70LjQstCw0LXQvCDQtNC70LjQvdGDINGB0YLRgNC10LvQutC4INC/0YDQvtC/0L7RgNGG0LjQvtC90LDQu9GM0L3QviDRgNCw0YHRgdGC0L7Rj9C90LjRjlxuICAgICAgICBhcnJvd0hlbHBlci5zZXRMZW5ndGgoYXJyb3dMZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJhcnJvd0hlbHBlciDQvdC1INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvVwiKTtcbiAgICB9XG59XG5cbi8vINCt0LrRgdC/0L7RgNGC0LjRgNGD0LXQvCDRhNGD0L3QutGG0LjQuCDQtNC70Y8g0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40Y8g0LIg0LTRgNGD0LPQuNGFINC80L7QtNGD0LvRj9GFXG5leHBvcnQgeyBpbml0R2FtZXBhZCwgdXBkYXRlQXJyb3dIZWxwZXIgfTsiLCIvLyBjYW1lcmEuanNcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7IG9iamVjdHMgfSBmcm9tICcuL29iamVjdHMnO1xuaW1wb3J0IHsgZ2V0QXJyb3dEaXJlY3Rpb24gfSBmcm9tICcuL2dhbWVwYWQnO1xuXG4vLyDQntCx0YrRj9Cy0LvRj9C10Lwg0LrQsNC80LXRgNGDXG5leHBvcnQgbGV0IGNhbWVyYTtcblxuLy8g0J3QsNGB0YLRgNC+0LnQutC4INC60LDQvNC10YDRiyAtINC+0YHRgtCw0LLQu9GP0LXQvCDQvtGA0LjQs9C40L3QsNC70YzQvdGL0LUg0LfQvdCw0YfQtdC90LjRj1xuY29uc3QgQ0FNRVJBX0hFSUdIVCA9IDEwMDtcbmNvbnN0IENBTUVSQV9ESVNUQU5DRSA9IDEwMDtcbmNvbnN0IFNNT09USF9GQUNUT1IgPSAwLjA1O1xuY29uc3QgUk9UQVRJT05fU01PT1RIX0ZBQ1RPUiA9IDAuMDM7XG5jb25zdCBERUFEX1pPTkVfQU5HTEUgPSAwLjM7XG5jb25zdCBNSU5fWV9BTkdMRSA9IC0wLjU7XG5jb25zdCBNQVhfWV9BTkdMRSA9IDAuNTtcblxuLy8g0JTQvtC/0L7Qu9C90LjRgtC10LvRjNC90YvQtSDQvdCw0YHRgtGA0L7QudC60Lgg0LTQu9GPINCw0LTQsNC/0YLQuNCy0L3QvtCz0L4g0LTQvtCy0L7RgNC+0YLQsFxuY29uc3QgTUlOX0FEQVBUSVZFX0ZBQ1RPUiA9IDAuMDE7ICAgLy8g0JzQuNC90LjQvNCw0LvRjNC90YvQuSDRhNCw0LrRgtC+0YAg0LTQvtCy0L7RgNC+0YLQsFxuY29uc3QgTUFYX0FEQVBUSVZFX0ZBQ1RPUiA9IDAuMTI7ICAgLy8g0JzQsNC60YHQuNC80LDQu9GM0L3Ri9C5INGE0LDQutGC0L7RgCDQtNC70Y8g0LHRi9GB0YLRgNGL0YUg0L/QvtCy0L7RgNC+0YLQvtCyXG5jb25zdCBRVUFEUkFUSUNfRkFDVE9SID0gMC45OyAgICAgICAvLyDQmtC+0Y3RhNGE0LjRhtC40LXQvdGCINC60LLQsNC00YDQsNGC0LjRh9C90L7QuSDQt9Cw0LLQuNGB0LjQvNC+0YHRgtC4ICgwLTEpXG5cbi8vINCS0L3Rg9GC0YDQtdC90L3Rj9GPINC/0LXRgNC10LzQtdC90L3QsNGPINC00LvRjyDRhdGA0LDQvdC10L3QuNGPINGC0LXQutGD0YnQtdCz0L4g0LfQvdCw0YfQtdC90LjRjyDQutC+0Y3RhNGE0LjRhtC40LXQvdGC0LBcbmxldCBjdXJyZW50UXVhZHJhdGljRmFjdG9yID0gUVVBRFJBVElDX0ZBQ1RPUjtcblxuY29uc3QgUExBWUVSX0lEID0gXCJtYWluUGxheWVyMVwiOyAvLyDQltC10YHRgtC60L4g0LfQsNC60YDQtdC/0LvRj9C10LwgSUQg0LjQs9GA0L7QutCwXG5cbi8vINCh0L7RhdGA0LDQvdGP0LXQvCDQv9C+0YHQu9C10LTQvdGO0Y4g0LjQt9Cy0LXRgdGC0L3Rg9GOINC/0L7Qt9C40YbQuNGOINC4INC90LDQv9GA0LDQstC70LXQvdC40LUg0LjQs9GA0L7QutCwXG5sZXQgbGFzdEtub3duUG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAwKTtcbmxldCBsYXN0Q2FtZXJhUG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygwLCBDQU1FUkFfSEVJR0hULCBDQU1FUkFfRElTVEFOQ0UpO1xubGV0IGxhc3RDYW1lcmFEaXJlY3Rpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAtMSk7IC8vINCd0LDRh9Cw0LvRjNC90L7QtSDQvdCw0L/RgNCw0LLQu9C10L3QuNC1INC60LDQvNC10YDRi1xubGV0IHRhcmdldENhbWVyYURpcmVjdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIC0xKTtcbmxldCBjYW1lcmFUYXJnZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygpOyAvLyDQn9GA0L7QvNC10LbRg9GC0L7Rh9C90LDRjyDRgtC+0YfQutCwINC00LvRjyDRgdCz0LvQsNC20LjQstCw0L3QuNGPXG5sZXQgbGFzdEFycm93RGlyZWN0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMSk7IC8vINCf0L7RgdC70LXQtNC90LXQtSDQvdCw0L/RgNCw0LLQu9C10L3QuNC1INGB0YLRgNC10LvQutC4XG5sZXQgbGFzdE1lYXN1cmVkQW5nbGUgPSAwOyAvLyDQn9C+0YHQu9C10LTQvdC40Lkg0LjQt9C80LXRgNC10L3QvdGL0Lkg0YPQs9C+0Lsg0LTQu9GPINC70L7Qs9C40YDQvtCy0LDQvdC40Y9cbmxldCBsYXN0TWVhc3VyZWREaXN0YW5jZSA9IDA7IC8vINCf0L7RgdC70LXQtNC90LXQtSDQuNC30LzQtdGA0LXQvdC90L7QtSDRgNCw0YHRgdGC0L7Rj9C90LjQtSDQtNC70Y8g0LvQvtCz0LjRgNC+0LLQsNC90LjRj1xubGV0IHR1cm5pbmdBY3RpdmUgPSBmYWxzZTsgLy8g0KTQu9Cw0LMg0LDQutGC0LjQstC90L7Qs9C+INC/0L7QstC+0YDQvtGC0LAg0LTQu9GPINC70L7Qs9C40YDQvtCy0LDQvdC40Y9cblxuLy8g0JTQvtCx0LDQstC40Lwg0L3QvtCy0YPRjiDQv9C10YDQtdC80LXQvdC90YPRjiDQtNC70Y8g0YHQs9C70LDQttC40LLQsNC90LjRjyDRgtC+0YfQutC4LCDQvdCwINC60L7RgtC+0YDRg9GOINGB0LzQvtGC0YDQuNGCINC60LDQvNC10YDQsFxubGV0IHNtb290aExvb2tBdFRhcmdldCA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0Q2FtZXJhKCkge1xuICAgIC8vINCh0L7Qt9C00LDQtdC8INC60LDQvNC10YDRg1xuICAgIGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYShcbiAgICAgICAgNjAsXG4gICAgICAgIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LFxuICAgICAgICAwLjIsXG4gICAgICAgIDIwMDBcbiAgICApO1xuICAgIFxuICAgIC8vINCj0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdC8INC90LDRh9Cw0LvRjNC90YPRjiDQv9C+0LfQuNGG0LjRjlxuICAgIGNhbWVyYS5wb3NpdGlvbi5zZXQoMCwgQ0FNRVJBX0hFSUdIVCwgQ0FNRVJBX0RJU1RBTkNFKTtcbiAgICBjYW1lcmEubG9va0F0KDAsIDAsIDApO1xuICAgIFxuICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDQvtCx0YDQsNCx0L7RgtGH0LjQuiDQuNC30LzQtdC90LXQvdC40Y8g0YDQsNC30LzQtdGA0LAg0L7QutC90LBcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25XaW5kb3dSZXNpemUpO1xuICAgIFxuICAgIC8vINCY0L3QuNGG0LjQsNC70LjQt9C40YDRg9C10Lwg0LfQvdCw0YfQtdC90LjQtSBjdXJyZW50UXVhZHJhdGljRmFjdG9yXG4gICAgY3VycmVudFF1YWRyYXRpY0ZhY3RvciA9IFFVQURSQVRJQ19GQUNUT1I7XG4gICAgXG4gICAgY29uc29sZS5sb2coXCJbQ2FtZXJhXSDQmtCw0LzQtdGA0LAg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC90LBcIik7XG4gICAgcmV0dXJuIGNhbWVyYTtcbn1cblxuZnVuY3Rpb24gb25XaW5kb3dSZXNpemUoKSB7XG4gICAgaWYgKCFjYW1lcmEpIHJldHVybjtcbiAgICBjYW1lcmEuYXNwZWN0ID0gd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbn1cblxuLy8g0KTRg9C90LrRhtC40Y8g0LTQu9GPINCy0YvRh9C40YHQu9C10L3QuNGPINGD0LPQu9CwINC80LXQttC00YMg0LTQstGD0LzRjyDQvdCw0L/RgNCw0LLQu9C10L3QuNGP0LzQuCDQsiAzRFxuZnVuY3Rpb24gYW5nbGVCZXR3ZWVuRGlyZWN0aW9ucyhkaXIxLCBkaXIyKSB7XG4gICAgLy8g0J3QvtGA0LzQsNC70LjQt9GD0LXQvCDQstC10LrRgtC+0YDRiyDQtNC70Y8g0LrQvtGA0YDQtdC60YLQvdC+0LPQviDQstGL0YfQuNGB0LvQtdC90LjRjyDRg9Cz0LvQsFxuICAgIGNvbnN0IHYxID0gZGlyMS5jbG9uZSgpLm5vcm1hbGl6ZSgpO1xuICAgIGNvbnN0IHYyID0gZGlyMi5jbG9uZSgpLm5vcm1hbGl6ZSgpO1xuICAgIFxuICAgIC8vINCS0YvRh9C40YHQu9GP0LXQvCDRg9Cz0L7QuyDQvNC10LbQtNGDINCy0LXQutGC0L7RgNCw0LzQuFxuICAgIHJldHVybiBNYXRoLmFjb3MoTWF0aC5taW4oMSwgTWF0aC5tYXgoLTEsIHYxLmRvdCh2MikpKSk7XG59XG5cbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDQstGL0YfQuNGB0LvQtdC90LjRjyDQsNC00LDQv9GC0LjQstC90L7Qs9C+INGE0LDQutGC0L7RgNCwINC00L7QstC+0YDQvtGC0LAg0YEg0LrQstCw0LTRgNCw0YLQuNGH0L3QvtC5INC30LDQstC40YHQuNC80L7RgdGC0YzRjlxuZnVuY3Rpb24gY2FsY3VsYXRlQWRhcHRpdmVSb3RhdGlvbkZhY3RvcihhbmdsZSwgZGlzdGFuY2UpIHtcbiAgICAvLyDQndC+0YDQvNCw0LvQuNC30YPQtdC8INGA0LDRgdGB0YLQvtGP0L3QuNC1ICjQv9GA0LXQtNC/0L7Qu9Cw0LPQsNC10LwsINGH0YLQviDQvNCw0LrRgdC40LzQsNC70YzQvdC+0LUg0LfQvdCw0YfQuNC80L7QtSDRgNCw0YHRgdGC0L7Rj9C90LjQtSAtIDEwMClcbiAgICBjb25zdCBub3JtYWxpemVkRGlzdGFuY2UgPSBNYXRoLm1pbihkaXN0YW5jZSwgMTAwKSAvIDEwMDtcbiAgICBcbiAgICAvLyDQktGL0YfQuNGB0LvRj9C10Lwg0L7RgtC90L7RgdC40YLQtdC70YzQvdGD0Y4g0YHQutC+0YDQvtGB0YLRjCDQv9C+0LLQvtGA0L7RgtCwINGBINGD0YfQtdGC0L7QvCDRg9Cz0LvQsFxuICAgIGNvbnN0IGFuZ2xlUmF0aW8gPSBhbmdsZSAvIERFQURfWk9ORV9BTkdMRTtcbiAgICBcbiAgICAvLyDQn9GA0LjQvNC10L3Rj9C10Lwg0LrQstCw0LTRgNCw0YLQuNGH0L3Rg9GOINC30LDQstC40YHQuNC80L7RgdGC0Ywg0L7RgiDRgNCw0YHRgdGC0L7Rj9C90LjRjyDRgSDQvdCw0YHRgtGA0LDQuNCy0LDQtdC80YvQvCDQutC+0Y3RhNGE0LjRhtC40LXQvdGC0L7QvFxuICAgIC8vINCa0L7Qs9C00LAgY3VycmVudFF1YWRyYXRpY0ZhY3RvciA9IDAsINC30LDQstC40YHQuNC80L7RgdGC0Ywg0LvQuNC90LXQudC90LDRj1xuICAgIC8vINCa0L7Qs9C00LAgY3VycmVudFF1YWRyYXRpY0ZhY3RvciA9IDEsINC30LDQstC40YHQuNC80L7RgdGC0Ywg0L/QvtC70L3QvtGB0YLRjNGOINC60LLQsNC00YDQsNGC0LjRh9C90LDRj1xuICAgIGNvbnN0IGRpc3RhbmNlRmFjdG9yID0gbm9ybWFsaXplZERpc3RhbmNlICogKDEgLSBjdXJyZW50UXVhZHJhdGljRmFjdG9yKSArIFxuICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdyhub3JtYWxpemVkRGlzdGFuY2UsIDIpICogY3VycmVudFF1YWRyYXRpY0ZhY3RvcjtcbiAgICBcbiAgICAvLyDQmtC+0LzQsdC40L3QuNGA0YPQtdC8INGE0LDQutGC0L7RgNGLINGD0LPQu9CwINC4INGA0LDRgdGB0YLQvtGP0L3QuNGPXG4gICAgY29uc3QgY29tYmluZWRGYWN0b3IgPSBhbmdsZVJhdGlvICogZGlzdGFuY2VGYWN0b3I7XG4gICAgXG4gICAgLy8g0JjQvdGC0LXRgNC/0L7Qu9C40YDRg9C10Lwg0LzQtdC20LTRgyDQvNC40L3QuNC80LDQu9GM0L3Ri9C8INC4INC80LDQutGB0LjQvNCw0LvRjNC90YvQvCDRhNCw0LrRgtC+0YDQsNC80Lgg0LTQvtCy0L7RgNC+0YLQsFxuICAgIGNvbnN0IGFkYXB0aXZlRmFjdG9yID0gTUlOX0FEQVBUSVZFX0ZBQ1RPUiArIFxuICAgICAgICAoTUFYX0FEQVBUSVZFX0ZBQ1RPUiAtIE1JTl9BREFQVElWRV9GQUNUT1IpICogXG4gICAgICAgIE1hdGgubWluKDEuMCwgY29tYmluZWRGYWN0b3IpO1xuICAgIFxuICAgIHJldHVybiBhZGFwdGl2ZUZhY3Rvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUNhbWVyYSgpIHtcbiAgICBpZiAoIWNhbWVyYSkgcmV0dXJuO1xuICAgIFxuICAgIGNvbnN0IHBsYXllciA9IG9iamVjdHNbUExBWUVSX0lEXTtcbiAgICBcbiAgICBpZiAocGxheWVyICYmIHBsYXllci5tZXNoKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQbGF5ZXJQb3NpdGlvbiA9IHBsYXllci5tZXNoLnBvc2l0aW9uLmNsb25lKCk7XG4gICAgICAgIGNvbnN0IGFycm93RGlyZWN0aW9uID0gZ2V0QXJyb3dEaXJlY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCf0LvQsNCy0L3QviDQvtCx0L3QvtCy0LvRj9C10Lwg0YLQvtGH0LrRgywg0L3QsCDQutC+0YLQvtGA0YPRjiDRgdC80L7RgtGA0LjRgiDQutCw0LzQtdGA0LBcbiAgICAgICAgc21vb3RoTG9va0F0VGFyZ2V0LmxlcnAoY3VycmVudFBsYXllclBvc2l0aW9uLCBTTU9PVEhfRkFDVE9SKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChhcnJvd0RpcmVjdGlvbi5sZW5ndGgoKSA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGFuZ2xlID0gYW5nbGVCZXR3ZWVuRGlyZWN0aW9ucyhhcnJvd0RpcmVjdGlvbiwgbGFzdEFycm93RGlyZWN0aW9uKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGFuZ2xlID4gREVBRF9aT05FX0FOR0xFKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeUNvbXBvbmVudCA9IE1hdGgubWF4KE1JTl9ZX0FOR0xFLCBNYXRoLm1pbihNQVhfWV9BTkdMRSwgLWFycm93RGlyZWN0aW9uLnkpKTtcbiAgICAgICAgICAgICAgICB0YXJnZXRDYW1lcmFEaXJlY3Rpb24uc2V0KC1hcnJvd0RpcmVjdGlvbi54LCB5Q29tcG9uZW50LCAtYXJyb3dEaXJlY3Rpb24ueikubm9ybWFsaXplKCk7XG4gICAgICAgICAgICAgICAgbGFzdEFycm93RGlyZWN0aW9uLmNvcHkoYXJyb3dEaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgIHR1cm5pbmdBY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBhZGFwdGl2ZVJvdGF0aW9uRmFjdG9yID0gY2FsY3VsYXRlQWRhcHRpdmVSb3RhdGlvbkZhY3RvcihsYXN0TWVhc3VyZWRBbmdsZSwgbGFzdE1lYXN1cmVkRGlzdGFuY2UpO1xuICAgICAgICBsYXN0Q2FtZXJhRGlyZWN0aW9uLmxlcnAodGFyZ2V0Q2FtZXJhRGlyZWN0aW9uLCBhZGFwdGl2ZVJvdGF0aW9uRmFjdG9yKTtcbiAgICAgICAgbGFzdENhbWVyYURpcmVjdGlvbi5ub3JtYWxpemUoKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGhvcml6b250YWxEaXN0YW5jZSA9IENBTUVSQV9ESVNUQU5DRSAqIE1hdGguY29zKGxhc3RDYW1lcmFEaXJlY3Rpb24ueSk7XG4gICAgICAgIGNvbnN0IGNhbWVyYU9mZnNldCA9IG5ldyBUSFJFRS5WZWN0b3IzKFxuICAgICAgICAgICAgbGFzdENhbWVyYURpcmVjdGlvbi54ICogaG9yaXpvbnRhbERpc3RhbmNlLFxuICAgICAgICAgICAgQ0FNRVJBX0hFSUdIVCArIGxhc3RDYW1lcmFEaXJlY3Rpb24ueSAqIENBTUVSQV9ESVNUQU5DRSxcbiAgICAgICAgICAgIGxhc3RDYW1lcmFEaXJlY3Rpb24ueiAqIGhvcml6b250YWxEaXN0YW5jZVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgdGFyZ2V0UG9zaXRpb24gPSBjdXJyZW50UGxheWVyUG9zaXRpb24uY2xvbmUoKS5hZGQoY2FtZXJhT2Zmc2V0KTtcbiAgICAgICAgY2FtZXJhVGFyZ2V0LmxlcnAodGFyZ2V0UG9zaXRpb24sIFNNT09USF9GQUNUT1IpO1xuICAgICAgICBjYW1lcmEucG9zaXRpb24uY29weShjYW1lcmFUYXJnZXQpO1xuICAgICAgICBcbiAgICAgICAgLy8g0JrQsNC80LXRgNCwINGC0LXQv9C10YDRjCDRgdC80L7RgtGA0LjRgiDQvdCwINGB0LPQu9Cw0LbQtdC90L3Rg9GOINC/0L7Qt9C40YbQuNGOXG4gICAgICAgIGNhbWVyYS5sb29rQXQoc21vb3RoTG9va0F0VGFyZ2V0KTtcbiAgICAgICAgXG4gICAgICAgIGxhc3RLbm93blBvc2l0aW9uLmNvcHkoY3VycmVudFBsYXllclBvc2l0aW9uKTtcbiAgICB9XG59XG5cbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDQuNC30LzQtdC90LXQvdC40Y8g0LrQvtGN0YTRhNC40YbQuNC10L3RgtCwINC60LLQsNC00YDQsNGC0LjRh9C90L7QuSDQt9Cw0LLQuNGB0LjQvNC+0YHRgtC4XG5leHBvcnQgZnVuY3Rpb24gc2V0UXVhZHJhdGljRmFjdG9yKHZhbHVlKSB7XG4gICAgLy8g0J7Qs9GA0LDQvdC40YfQuNCy0LDQtdC8INC30L3QsNGH0LXQvdC40LUg0L7RgiAwINC00L4gMVxuICAgIGNvbnN0IG5ld1ZhbHVlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdmFsdWUpKTtcbiAgICBjb25zb2xlLmxvZyhgW0NhbWVyYV0g0JjQt9C80LXQvdC10L3QuNC1INC60L7RjdGE0YTQuNGG0LjQtdC90YLQsCDQutCy0LDQtNGA0LDRgtC40YfQvdC+0Lkg0LfQsNCy0LjRgdC40LzQvtGB0YLQuDogJHtjdXJyZW50UXVhZHJhdGljRmFjdG9yLnRvRml4ZWQoMil9IC0+ICR7bmV3VmFsdWUudG9GaXhlZCgyKX1gKTtcbiAgICBjdXJyZW50UXVhZHJhdGljRmFjdG9yID0gbmV3VmFsdWU7XG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xufVxuXG4vLyDQpNGD0L3QutGG0LjRjyDQtNC70Y8g0L/QvtC70YPRh9C10L3QuNGPINGC0LXQutGD0YnQtdCz0L4g0LrQvtGN0YTRhNC40YbQuNC10L3RgtCwINC60LLQsNC00YDQsNGC0LjRh9C90L7QuSDQt9Cw0LLQuNGB0LjQvNC+0YHRgtC4XG5leHBvcnQgZnVuY3Rpb24gZ2V0UXVhZHJhdGljRmFjdG9yKCkge1xuICAgIHJldHVybiBjdXJyZW50UXVhZHJhdGljRmFjdG9yO1xufVxuXG4vLyBEZWJ1Zy3RhNGD0L3QutGG0LjRjyDQtNC70Y8g0LLRi9Cy0L7QtNCwINGA0LDRgdGI0LjRgNC10L3QvdC+0Lkg0LjQvdGE0L7RgNC80LDRhtC40Lgg0L4g0LrQsNC80LXRgNC1XG5leHBvcnQgZnVuY3Rpb24gbG9nQ2FtZXJhU3RhdHVzKCkge1xuICAgIGlmICghY2FtZXJhKSByZXR1cm47XG4gICAgXG4gICAgY29uc29sZS5sb2coYFtDYW1lcmFdIFBvc2l0aW9uOiAoJHtjYW1lcmEucG9zaXRpb24ueC50b0ZpeGVkKDIpfSwgJHtjYW1lcmEucG9zaXRpb24ueS50b0ZpeGVkKDIpfSwgJHtjYW1lcmEucG9zaXRpb24uei50b0ZpeGVkKDIpfSlgKTtcbiAgICBjb25zb2xlLmxvZyhgW0NhbWVyYV0gRGlyZWN0aW9uOiAoJHtsYXN0Q2FtZXJhRGlyZWN0aW9uLngudG9GaXhlZCgyKX0sICR7bGFzdENhbWVyYURpcmVjdGlvbi55LnRvRml4ZWQoMil9LCAke2xhc3RDYW1lcmFEaXJlY3Rpb24uei50b0ZpeGVkKDIpfSlgKTtcbiAgICBjb25zb2xlLmxvZyhgW0NhbWVyYV0gVGFyZ2V0IERpcmVjdGlvbjogKCR7dGFyZ2V0Q2FtZXJhRGlyZWN0aW9uLngudG9GaXhlZCgyKX0sICR7dGFyZ2V0Q2FtZXJhRGlyZWN0aW9uLnkudG9GaXhlZCgyKX0sICR7dGFyZ2V0Q2FtZXJhRGlyZWN0aW9uLnoudG9GaXhlZCgyKX0pYCk7XG4gICAgY29uc29sZS5sb2coYFtDYW1lcmFdIEFycm93IERpcmVjdGlvbjogKCR7bGFzdEFycm93RGlyZWN0aW9uLngudG9GaXhlZCgyKX0sICR7bGFzdEFycm93RGlyZWN0aW9uLnkudG9GaXhlZCgyKX0sICR7bGFzdEFycm93RGlyZWN0aW9uLnoudG9GaXhlZCgyKX0pYCk7XG4gICAgY29uc29sZS5sb2coYFtDYW1lcmFdIExvb2tpbmcgYXQ6ICgke2xhc3RLbm93blBvc2l0aW9uLngudG9GaXhlZCgyKX0sICR7bGFzdEtub3duUG9zaXRpb24ueS50b0ZpeGVkKDIpfSwgJHtsYXN0S25vd25Qb3NpdGlvbi56LnRvRml4ZWQoMil9KWApO1xuICAgIGNvbnNvbGUubG9nKGBbQ2FtZXJhXSBUdXJuaW5nIEFjdGl2ZTogJHt0dXJuaW5nQWN0aXZlfSwgTGFzdCBBbmdsZTogJHtsYXN0TWVhc3VyZWRBbmdsZS50b0ZpeGVkKDMpfSDRgNCw0LQgKCR7KGxhc3RNZWFzdXJlZEFuZ2xlICogMTgwIC8gTWF0aC5QSSkudG9GaXhlZCgxKX3CsClgKTtcbiAgICBjb25zb2xlLmxvZyhgW0NhbWVyYV0gTGFzdCBEaXN0YW5jZTogJHtsYXN0TWVhc3VyZWREaXN0YW5jZS50b0ZpeGVkKDEpfSwgUXVhZHJhdGljIEZhY3RvcjogJHtjdXJyZW50UXVhZHJhdGljRmFjdG9yLnRvRml4ZWQoMil9LCBEZWZhdWx0OiAke1FVQURSQVRJQ19GQUNUT1IudG9GaXhlZCgyKX1gKTtcbiAgICBjb25zb2xlLmxvZyhgW0NhbWVyYV0gQWRhcHRpdmUgRmFjdG9yOiAke2NhbGN1bGF0ZUFkYXB0aXZlUm90YXRpb25GYWN0b3IobGFzdE1lYXN1cmVkQW5nbGUsIGxhc3RNZWFzdXJlZERpc3RhbmNlKS50b0ZpeGVkKDMpfWApO1xuICAgIFxuICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCDQvdCw0LvQuNGH0LjQtSDQuNCz0YDQvtC60LBcbiAgICBjb25zdCBwbGF5ZXIgPSBvYmplY3RzW1BMQVlFUl9JRF07XG4gICAgaWYgKHBsYXllciAmJiBwbGF5ZXIubWVzaCkge1xuICAgICAgICBjb25zb2xlLmxvZyhgW0NhbWVyYV0gUGxheWVyIGZvdW5kIGF0OiAoJHtwbGF5ZXIubWVzaC5wb3NpdGlvbi54LnRvRml4ZWQoMil9LCAke3BsYXllci5tZXNoLnBvc2l0aW9uLnkudG9GaXhlZCgyKX0sICR7cGxheWVyLm1lc2gucG9zaXRpb24uei50b0ZpeGVkKDIpfSlgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhgW0NhbWVyYV0gUGxheWVyIHdpdGggSUQgXCIke1BMQVlFUl9JRH1cIiBub3QgZm91bmQhYCk7XG4gICAgfVxufSAiLCIvLyBnYW1lc3RhdGVtYW5hZ2VyLmpzXG5cbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgeyBpbml0R2FtZXBhZCB9IGZyb20gJy4vZ2FtZXBhZCc7XG5pbXBvcnQgeyBjYW1lcmEgfSBmcm9tICcuL2NhbWVyYSc7XG5pbXBvcnQge3NjZW5lfSBmcm9tICcuL3NjZW5lJztcblxuY2xhc3MgR2FtZVN0YXRlTWFuYWdlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgY29uc3RydWN0b3Iod3MpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy50ZXJyYWluTWVzaENyZWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wbGF5ZXJNZXNoQ3JlYXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRlcnJhaW5NZXNoID0gbnVsbDtcbiAgICAgICAgdGhpcy5wbGF5ZXJNZXNoID0gbnVsbDtcbiAgICAgICAgdGhpcy53cyA9IHdzO1xuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgfVxuXG4gICAgc2V0VGVycmFpbk1lc2gobWVzaCkge1xuICAgICAgICB0aGlzLnRlcnJhaW5NZXNoID0gbWVzaDtcbiAgICAgICAgdGhpcy50ZXJyYWluTWVzaENyZWF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmNoZWNrR2FtZVN0YXRlKCk7XG4gICAgfVxuXG4gICAgc2V0UGxheWVyTWVzaChtZXNoKSB7XG4gICAgICAgIHRoaXMucGxheWVyTWVzaCA9IG1lc2g7XG4gICAgICAgIHRoaXMucGxheWVyTWVzaENyZWF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmNoZWNrR2FtZVN0YXRlKCk7XG4gICAgfVxuXG4gICAgY2hlY2tHYW1lU3RhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnRlcnJhaW5NZXNoQ3JlYXRlZCAmJiB0aGlzLnBsYXllck1lc2hDcmVhdGVkKSB7XG4gICAgICAgICAgICBpbml0R2FtZXBhZChjYW1lcmEsIHRoaXMudGVycmFpbk1lc2gsIHRoaXMucGxheWVyTWVzaCwgdGhpcy53cywgdGhpcy5zY2VuZSk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2dhbWVJbml0aWFsaXplZCcpO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiW0dhbWUgU3RhdGUgTWFuYWdlcl0gZ2FtZSBpbml0aWFsaXplZCEhIVwiKVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyDQodC+0LfQtNCw0LXQvCDRjdC60LfQtdC80L/Qu9GP0YAgR2FtZVN0YXRlTWFuYWdlciDRgSB3c1xuZXhwb3J0IGxldCBnYW1lU3RhdGVNYW5hZ2VyO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdEdhbWVTdGF0ZU1hbmFnZXIod3MsIHNjZW5lKXtcbiAgICBnYW1lU3RhdGVNYW5hZ2VyID0gbmV3IEdhbWVTdGF0ZU1hbmFnZXIod3MsIHNjZW5lKTtcbn0iLCIvLyBvYmplY3RzLmpzXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBzY2VuZSB9IGZyb20gJy4vc2NlbmUnO1xuaW1wb3J0IHsgbG9jYWxQaHlzaWNzV29ybGQgfSBmcm9tICcuL3BoeXNpY3MnO1xuaW1wb3J0IHsgZ2FtZVN0YXRlTWFuYWdlciB9IGZyb20gJy4vZ2FtZXN0YXRlbWFuYWdlcic7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xuXG5leHBvcnQgY29uc3QgdGVycmFpbkNyZWF0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5leHBvcnQgY29uc3QgcGxheWVyQ3JlYXRlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuZXhwb3J0IGxldCBvYmplY3RzID0ge307IC8vINCh0LvQvtCy0LDRgNGMINC+0LHRitC10LrRgtC+0LI6IGlkIC0+IHsgbWVzaCwgYm9keSwgc2VydmVyUG9zLCAuLi4gfVxuZXhwb3J0IGxldCB0ZXJyYWluTWVzaDsgLy8g0K3QutGB0L/QvtGA0YLQuNGA0YPQtdC8IHRlcnJhaW5NZXNoXG5leHBvcnQgbGV0IHBsYXllck1lc2g7IC8vINCt0LrRgdC/0L7RgNGC0LjRgNGD0LXQvCBwbGF5ZXJNZXNoXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNZXNoQW5kQm9keUZvck9iamVjdChkYXRhKSB7XG4gICAgaWYgKCFkYXRhIHx8ICFkYXRhLm9iamVjdF90eXBlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJJbnZhbGlkIGRhdGEgcmVjZWl2ZWQgZm9yIG9iamVjdCBjcmVhdGlvbjpcIiwgZGF0YSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHR5cGUgPSBkYXRhLm9iamVjdF90eXBlO1xuICAgIGxldCBtZXNoID0gbnVsbCwgYm9keSA9IG51bGw7XG5cbiAgICB0cnkge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ0ZXJyYWluXCI6XG4gICAgICAgICAgICAgICAgbWVzaCA9IGNyZWF0ZVRlcnJhaW5NZXNoKGRhdGEpO1xuICAgICAgICAgICAgICAgIGJvZHkgPSBjcmVhdGVQaHlzaWNzQm9keUZvclRlcnJhaW4oZGF0YSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic3BoZXJlXCI6XG4gICAgICAgICAgICAgICAgbWVzaCA9IGNyZWF0ZVNwaGVyZU1lc2goZGF0YSk7XG4gICAgICAgICAgICAgICAgYm9keSA9IGNyZWF0ZVBoeXNpY3NCb2R5Rm9yU3BoZXJlKGRhdGEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInRyZWVcIjpcbiAgICAgICAgICAgICAgICBtZXNoID0gY3JlYXRlVHJlZU1lc2goZGF0YSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYm94XCI6XG4gICAgICAgICAgICAgICAgbWVzaCA9IGNyZWF0ZUJveE1lc2goZGF0YSk7XG4gICAgICAgICAgICAgICAgYm9keSA9IGNyZWF0ZVBoeXNpY3NCb2R5Rm9yQm94KGRhdGEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFVua25vd24gb2JqZWN0IHR5cGU6ICR7dHlwZX1gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCwg0YfRgtC+IG1lc2gg0LHRi9C7INGD0YHQv9C10YjQvdC+INGB0L7Qt9C00LDQvVxuICAgICAgICBpZiAoIW1lc2gpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBjcmVhdGUgbWVzaCBmb3Igb2JqZWN0IHR5cGU6ICR7dHlwZX1gKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NlbmUuYWRkKG1lc2gpO1xuICAgICAgICBcbiAgICAgICAgLy8g0KHQvtGF0YDQsNC90Y/QtdC8INCyINC+0LHRitC10LrRgtC1INC40YHRhdC+0LTQvdGL0LUg0LTQsNC90L3Ri9C1LCDQstC60LvRjtGH0LDRjyDQvNCw0YHRgdGDXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgXG4gICAgICAgICAgICBtZXNoLCBcbiAgICAgICAgICAgIGJvZHksIFxuICAgICAgICAgICAgb2JqZWN0X3R5cGU6IHR5cGUsIFxuICAgICAgICAgICAgbWFzczogZGF0YS5tYXNzIHx8IDAgLy8g0KHQvtGF0YDQsNC90Y/QtdC8INC80LDRgdGB0YMg0LjQtyDQtNCw0L3QvdGL0YUg0YHQtdGA0LLQtdGA0LBcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihg0J7RiNC40LHQutCwINC/0YDQuCDRgdC+0LfQtNCw0L3QuNC4INC+0LHRitC10LrRgtCwINGC0LjQv9CwICR7dHlwZX06YCwgZXJyb3IpO1xuICAgICAgICAvLyDQldGB0LvQuCBtZXNoINCx0YvQuyDRgdC+0LfQtNCw0L0sINC90L4g0L/RgNC+0LjQt9C+0YjQu9CwINC+0YjQuNCx0LrQsCwg0YPQtNCw0LvRj9C10Lwg0LXQs9C+INC40Lcg0YHRhtC10L3Ri1xuICAgICAgICBpZiAobWVzaCkge1xuICAgICAgICAgICAgc2NlbmUucmVtb3ZlKG1lc2gpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlUGh5c2ljc0JvZHlGb3JUZXJyYWluKGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIEFtbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0FtbW8uanMg0L3QtSDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0L0nKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFsb2NhbFBoeXNpY3NXb3JsZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCfQpNC40LfQuNGH0LXRgdC60LjQuSDQvNC40YAg0L3QtSDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0L0nKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgdyA9IGRhdGEuaGVpZ2h0bWFwX3c7XG4gICAgY29uc3QgaCA9IGRhdGEuaGVpZ2h0bWFwX2g7XG4gICAgY29uc3Qgc2NhbGVYID0gZGF0YS5zY2FsZV94O1xuICAgIGNvbnN0IHNjYWxlWiA9IGRhdGEuc2NhbGVfejtcblxuICAgIC8vINCh0L7Qt9C00LDQtdC8INCx0YPRhNC10YAg0LIg0L/QsNC80Y/RgtC4IEFtbW8g0LTQu9GPINC00LDQvdC90YvRhSDQstGL0YHQvtGCXG4gICAgY29uc3QgYW1tb0hlaWdodERhdGEgPSBBbW1vLl9tYWxsb2MoNCAqIHcgKiBoKTtcbiAgICBcbiAgICAvLyDQmtC+0L/QuNGA0YPQtdC8INC00LDQvdC90YvQtSDQstGL0YHQvtGCINCyINC/0LDQvNGP0YLRjCBBbW1vXG4gICAgbGV0IHAgPSAwO1xuICAgIGxldCBwMiA9IDA7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBoOyBqKyspIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3OyBpKyspIHtcbiAgICAgICAgICAgIEFtbW8uSEVBUEYzMlthbW1vSGVpZ2h0RGF0YSArIHAyID4+IDJdID0gZGF0YS5oZWlnaHRfZGF0YVtwXTtcbiAgICAgICAgICAgIHArKztcbiAgICAgICAgICAgIHAyICs9IDQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDQodC+0LfQtNCw0LXQvCDRhNC+0YDQvNGDINGC0LXRgNGA0LXQudC90LBcbiAgICBjb25zdCBzaGFwZSA9IG5ldyBBbW1vLmJ0SGVpZ2h0ZmllbGRUZXJyYWluU2hhcGUoXG4gICAgICAgIHcsXG4gICAgICAgIGgsXG4gICAgICAgIGFtbW9IZWlnaHREYXRhLFxuICAgICAgICAxLCAgLy8gaGVpZ2h0U2NhbGVcbiAgICAgICAgZGF0YS5taW5faGVpZ2h0LFxuICAgICAgICBkYXRhLm1heF9oZWlnaHQsXG4gICAgICAgIDEsICAvLyB1cCBheGlzID0gMSDQtNC70Y8gWVxuICAgICAgICBBbW1vLlBIWV9GTE9BVCxcbiAgICAgICAgZmFsc2UgIC8vIGZsaXBRdWFkRWRnZXNcbiAgICApO1xuXG4gICAgLy8g0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10Lwg0LzQsNGB0YjRgtCw0LHQuNGA0L7QstCw0L3QuNC1XG4gICAgc2hhcGUuc2V0TG9jYWxTY2FsaW5nKG5ldyBBbW1vLmJ0VmVjdG9yMyhzY2FsZVgsIGRhdGEuc2NhbGVfeSwgc2NhbGVaKSk7XG4gICAgXG4gICAgLy8g0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10LwgbWFyZ2luINC00LvRjyDRgtC10YDRgNC10LnQvdCwICgwLjUg0LLQvNC10YHRgtC+IDIuMCwg0YLQsNC6INC60LDQuiDRgtC10YDRgNC10LnQvSDQvNC10L3RjNGI0LUpXG4gICAgc2hhcGUuc2V0TWFyZ2luKDAuNSk7XG4gICAgXG4gICAgY29uc29sZS5sb2coXCJbVGVycmFpbl0g0KPRgdGC0LDQvdC+0LLQu9C10L0gbWFyZ2luINGC0LXRgNGA0LXQudC90LA6XCIsIDAuNSk7XG5cbiAgICAvLyDQodC+0LfQtNCw0LXQvCDRgtGA0LDQvdGB0YTQvtGA0LzQsNGG0LjRjlxuICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyBBbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgdHJhbnNmb3JtLnNldElkZW50aXR5KCk7XG4gICAgXG4gICAgY29uc3QgbWFzcyA9IDA7IC8vINCh0YLQsNGC0LjRh9C10YHQutC+0LUg0YLQtdC70L5cbiAgICBjb25zdCBsb2NhbEluZXJ0aWEgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgY29uc3QgbW90aW9uU3RhdGUgPSBuZXcgQW1tby5idERlZmF1bHRNb3Rpb25TdGF0ZSh0cmFuc2Zvcm0pO1xuICAgIGNvbnN0IHJiSW5mbyA9IG5ldyBBbW1vLmJ0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mbyhtYXNzLCBtb3Rpb25TdGF0ZSwgc2hhcGUsIGxvY2FsSW5lcnRpYSk7XG4gICAgY29uc3QgYm9keSA9IG5ldyBBbW1vLmJ0UmlnaWRCb2R5KHJiSW5mbyk7XG5cbiAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0YLQtdC70L4g0LIg0YTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAXG4gICAgY29uc3QgVEVSUkFJTl9HUk9VUCA9IDE7XG4gICAgbG9jYWxQaHlzaWNzV29ybGQuYWRkUmlnaWRCb2R5KGJvZHksIFRFUlJBSU5fR1JPVVAsIC0xKTsgLy8g0KLQtdGA0YDQtdC50L0g0YHRgtCw0LvQutC40LLQsNC10YLRgdGPINGB0L4g0LLRgdC10LzQuFxuXG4gICAgLy8g0J7Rh9C40YHRgtC60LAg0L/QsNC80Y/RgtC4XG4gICAgQW1tby5kZXN0cm95KHJiSW5mbyk7XG4gICAgQW1tby5kZXN0cm95KGxvY2FsSW5lcnRpYSk7XG5cbiAgICBjb25zb2xlLmxvZyhcIltUZXJyYWluXSDQpNC40LfQuNGH0LXRgdC60L7QtSDRgtC10LvQviDRgdC+0LfQtNCw0L3QvjpcIiwge1xuICAgICAgICDRgNCw0LfQvNC10YDRizogeyB3LCBoIH0sXG4gICAgICAgINC80LDRgdGI0YLQsNCxOiB7IHg6IGRhdGEuc2NhbGVYLCB5OiBkYXRhLnNjYWxlX3ksIHo6IGRhdGEuc2NhbGVaIH0sXG4gICAgICAgINC/0L7Qt9C40YbQuNGPOiB7IFxuICAgICAgICAgICAgeDogZGF0YS54IHx8IDAsIFxuICAgICAgICAgICAgeTogKGRhdGEubWluX2hlaWdodCArIGRhdGEubWF4X2hlaWdodCkgLyAyLFxuICAgICAgICAgICAgejogZGF0YS56IHx8IDAgXG4gICAgICAgIH0sXG4gICAgICAgINC80LjQvdCS0YvRgdC+0YLQsDogZGF0YS5taW5faGVpZ2h0LFxuICAgICAgICDQvNCw0LrRgdCS0YvRgdC+0YLQsDogZGF0YS5tYXhfaGVpZ2h0XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYm9keTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGVycmFpbk1lc2goZGF0YSkge1xuICAgIGNvbnN0IHcgPSBkYXRhLmhlaWdodG1hcF93IHx8IDY0O1xuICAgIGNvbnN0IGggPSBkYXRhLmhlaWdodG1hcF9oIHx8IDY0O1xuICAgIGNvbnN0IGdlbyA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KFxuICAgICAgICB3ICogZGF0YS5zY2FsZV94LFxuICAgICAgICBoICogZGF0YS5zY2FsZV96LFxuICAgICAgICB3IC0gMSxcbiAgICAgICAgaCAtIDFcbiAgICApO1xuICAgIGdlby5yb3RhdGVYKC1NYXRoLlBJIC8gMik7XG5cbiAgICBpZiAoZGF0YS5oZWlnaHRfZGF0YSkge1xuICAgICAgICBjb25zdCB2ZXJ0cyA9IGdlby5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZlcnRzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICBjb25zdCBpeCA9IChpIC8gMykgJSB3O1xuICAgICAgICAgICAgY29uc3QgaXogPSBNYXRoLmZsb29yKGkgLyAzIC8gdyk7XG4gICAgICAgICAgICB2ZXJ0c1tpICsgMV0gPSBkYXRhLmhlaWdodF9kYXRhW2l6ICogdyArIGl4XSAqIGRhdGEuc2NhbGVfeTtcbiAgICAgICAgfVxuICAgICAgICBnZW8uY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcbiAgICB9XG5cbiAgICB0ZXJyYWluTWVzaCA9IG5ldyBUSFJFRS5NZXNoKCAvLyDQn9GA0LjRgdCy0LDQuNCy0LDQtdC8IG1lc2gg0L/QtdGA0LXQvNC10L3QvdC+0LkgdGVycmFpbk1lc2hcbiAgICAgICAgZ2VvLFxuICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe1xuICAgICAgICAgICAgY29sb3I6IHBhcnNlQ29sb3IoZGF0YS5jb2xvciB8fCBcIiMwMDAwZmZcIiksXG4gICAgICAgICAgICB3aXJlZnJhbWU6IGZhbHNlLFxuICAgICAgICAgICAgZmxhdFNoYWRpbmc6IHRydWVcbiAgICAgICAgfSlcbiAgICApO1xuICAgIFxuICAgIC8vINCS0LrQu9GO0YfQsNC10Lwg0YLQtdC90Lgg0LTQu9GPINGC0LXRgNGA0LXQudC90LBcbiAgICB0ZXJyYWluTWVzaC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcblxuICAgIGdhbWVTdGF0ZU1hbmFnZXIuc2V0VGVycmFpbk1lc2godGVycmFpbk1lc2gpO1xuICAgIHJldHVybiB0ZXJyYWluTWVzaDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNwaGVyZU1lc2goZGF0YSkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGdlbyA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeShkYXRhLnJhZGl1cyB8fCAxLCAzMiwgMzIpO1xuICAgICAgICBjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goXG4gICAgICAgICAgICBnZW8sXG4gICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoeyBcbiAgICAgICAgICAgICAgICBjb2xvcjogcGFyc2VDb2xvcihkYXRhLmNvbG9yIHx8IFwiIzg4ODg4OFwiKSxcbiAgICAgICAgICAgICAgICBzaGluaW5lc3M6IDMwXG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgLy8g0JLQutC70Y7Rh9Cw0LXQvCDRgtC10L3QuCDQtNC70Y8g0YHRhNC10YBcbiAgICAgICAgbWVzaC5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICAgICAgbWVzaC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcbiAgICAgICAgXG4gICAgICAgIGlmIChkYXRhLmlkID09PSBcIm1haW5QbGF5ZXIxXCIpIHtcbiAgICAgICAgICAgIHBsYXllck1lc2ggPSBtZXNoXG4gICAgICAgICAgICBnYW1lU3RhdGVNYW5hZ2VyLnNldFBsYXllck1lc2gocGxheWVyTWVzaCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWVzaDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwi0J7RiNC40LHQutCwINC/0YDQuCDRgdC+0LfQtNCw0L3QuNC4INC80LXRiNCwINGB0YTQtdGA0Ys6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVCb3hNZXNoKGRhdGEpIHtcbiAgICBjb25zdCBnZW8gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMSwgMSwgMSk7XG4gICAgcmV0dXJuIG5ldyBUSFJFRS5NZXNoKFxuICAgICAgICBnZW8sXG4gICAgICAgIG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHsgY29sb3I6IHBhcnNlQ29sb3IoZGF0YS5jb2xvciB8fCBcIiM4ODg4ODhcIikgfSlcbiAgICApO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVQaHlzaWNzQm9keUZvclNwaGVyZShkYXRhKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBBbW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignQW1tby5qcyDQvdC1INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvScpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWxvY2FsUGh5c2ljc1dvcmxkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCfQpNC40LfQuNGH0LXRgdC60LjQuSDQvNC40YAg0L3QtSDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0L0nKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g0JHQtdC30L7Qv9Cw0YHQvdCw0Y8g0L/RgNC+0LLQtdGA0LrQsCB3aW5kb3cuQW1tb1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5BbW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignd2luZG93LkFtbW8g0L3QtSDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0L0nKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmFkaXVzID0gZGF0YS5yYWRpdXMgfHwgMTtcbiAgICAgICAgLy8g0KPQstC10LvQuNGH0LjQstCw0LXQvCDQvNCw0YHRgdGDINCyINGC0YDQuCDRgNCw0LfQsCDQtNC70Y8g0LvRg9GH0YjQtdC5INGE0LjQt9C40LrQuFxuICAgICAgICBjb25zdCBtYXNzID0gZGF0YS5tYXNzIHx8IDE1LjA7IC8vINCj0LLQtdC70LjRh9C40LLQsNC10Lwg0YEgNS4wINC00L4gMTUuMFxuXG4gICAgICAgIC8vINCh0L7Qt9C00LDQtdC8INCy0YHQtSBBbW1vINC+0LHRitC10LrRgtGLINGH0LXRgNC10Lcgd2luZG93LkFtbW9cbiAgICAgICAgY29uc3Qgc2hhcGUgPSBuZXcgd2luZG93LkFtbW8uYnRTcGhlcmVTaGFwZShyYWRpdXMpO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBuZXcgd2luZG93LkFtbW8uYnRUcmFuc2Zvcm0oKTtcbiAgICAgICAgdHJhbnNmb3JtLnNldElkZW50aXR5KCk7XG4gICAgICAgIHRyYW5zZm9ybS5zZXRPcmlnaW4obmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMyhkYXRhLnggfHwgMCwgZGF0YS55IHx8IDAsIGRhdGEueiB8fCAwKSk7XG5cbiAgICAgICAgY29uc3QgbG9jYWxJbmVydGlhID0gbmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgc2hhcGUuY2FsY3VsYXRlTG9jYWxJbmVydGlhKG1hc3MsIGxvY2FsSW5lcnRpYSk7XG5cbiAgICAgICAgY29uc3QgbW90aW9uU3RhdGUgPSBuZXcgd2luZG93LkFtbW8uYnREZWZhdWx0TW90aW9uU3RhdGUodHJhbnNmb3JtKTtcbiAgICAgICAgY29uc3QgcmJJbmZvID0gbmV3IHdpbmRvdy5BbW1vLmJ0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mbyhcbiAgICAgICAgICAgIG1hc3MsXG4gICAgICAgICAgICBtb3Rpb25TdGF0ZSxcbiAgICAgICAgICAgIHNoYXBlLFxuICAgICAgICAgICAgbG9jYWxJbmVydGlhXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGJvZHkgPSBuZXcgd2luZG93LkFtbW8uYnRSaWdpZEJvZHkocmJJbmZvKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCwg0YfRgtC+INGC0LXQu9C+INC40LzQtdC10YIg0L3QtdC+0LHRhdC+0LTQuNC80YvQtSDQvNC10YLQvtC00YtcbiAgICAgICAgaWYgKCFib2R5IHx8IHR5cGVvZiBib2R5LmdldE1vdGlvblN0YXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCfQntGI0LjQsdC60LA6INGB0L7Qt9C00LDQvdC90L7QtSDRhNC40LfQuNGH0LXRgdC60L7QtSDRgtC10LvQviDQvdC10LTQtdC50YHRgtCy0LjRgtC10LvRjNC90L4nKTtcbiAgICAgICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3kocmJJbmZvKTtcbiAgICAgICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3kobG9jYWxJbmVydGlhKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyDQo9GB0YLQsNC90LDQstC70LjQstCw0LXQvCDQtNC+0L/QvtC70L3QuNGC0LXQu9GM0L3Ri9C1INGB0LLQvtC50YHRgtCy0LBcbiAgICAgICAgYm9keS5zZXRGcmljdGlvbigwLjAyKTsgICAgICAgICAvLyDQo9C80LXQvdGM0YjQsNC10Lwg0YLRgNC10L3QuNC1INC00LvRjyDQu9GD0YfRiNC10LPQviDRgdC60L7Qu9GM0LbQtdC90LjRj1xuICAgICAgICBib2R5LnNldFJlc3RpdHV0aW9uKDEuMCk7ICAgICAgIC8vINCc0LDQutGB0LjQvNCw0LvRjNC90LDRjyDRg9C/0YDRg9Cz0L7RgdGC0Ywg0LTQu9GPINC80L7RidC90L7Qs9C+INC+0YLRgdC60L7QutCwXG4gICAgICAgIGJvZHkuc2V0Um9sbGluZ0ZyaWN0aW9uKDAuMDEpOyAgLy8g0J7Rh9C10L3RjCDQvdC40LfQutC+0LUg0YHQvtC/0YDQvtGC0LjQstC70LXQvdC40LUg0LrQsNGH0LXQvdC40Y5cbiAgICAgICAgYm9keS5zZXREYW1waW5nKDAuMCwgMC4wKTsgICAgICAvLyDQo9Cx0LjRgNCw0LXQvCDQt9Cw0YLRg9GF0LDQvdC40LUg0LTQu9GPINGB0L7RhdGA0LDQvdC10L3QuNGPINGN0L3QtdGA0LPQuNC4XG4gICAgICAgIFxuICAgICAgICAvLyDQntGC0LrQu9GO0YfQsNC10Lwg0LTQtdCw0LrRgtC40LLQsNGG0LjRjlxuICAgICAgICBib2R5LnNldEFjdGl2YXRpb25TdGF0ZSg0KTsgLy8gRElTQUJMRV9ERUFDVElWQVRJT05cbiAgICAgICAgXG4gICAgICAgIC8vINCU0LvRjyDQvdC10LHQvtC70YzRiNC40YUg0YHRhNC10YAg0LLQutC70Y7Rh9Cw0LXQvCBDQ0QgKGNvbnRpbnVvdXMgY29sbGlzaW9uIGRldGVjdGlvbiksXG4gICAgICAgIC8vINGH0YLQvtCx0Ysg0L/RgNC10LTQvtGC0LLRgNCw0YLQuNGC0Ywg0L/RgNC+0LLQsNC70LjQstCw0L3QuNC1INGB0LrQstC+0LfRjCDQv9C+0LLQtdGA0YXQvdC+0YHRgtC4INC/0YDQuCDQstGL0YHQvtC60L7QuSDRgdC60L7RgNC+0YHRgtC4XG4gICAgICAgIGJvZHkuc2V0Q2NkTW90aW9uVGhyZXNob2xkKHJhZGl1cyAqIDAuNyk7XG4gICAgICAgIGJvZHkuc2V0Q2NkU3dlcHRTcGhlcmVSYWRpdXMocmFkaXVzICogMC42KTtcblxuICAgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0YLQtdC70L4g0LIg0YTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAXG4gICAgICAgIGNvbnN0IFNQSEVSRV9HUk9VUCA9IDI7XG4gICAgICAgIGxvY2FsUGh5c2ljc1dvcmxkLmFkZFJpZ2lkQm9keShib2R5LCBTUEhFUkVfR1JPVVAsIC0xKTsgLy8g0KHRhNC10YDRiyDRgdGC0LDQu9C60LjQstCw0Y7RgtGB0Y8g0YHQviDQstGB0LXQvNC4XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhcIltTcGhlcmVdINCk0LjQt9C40YfQtdGB0LrQvtC1INGC0LXQu9C+INGB0L7Qt9C00LDQvdC+OlwiLCB7XG4gICAgICAgICAgICByYWRpdXMsXG4gICAgICAgICAgICBtYXNzLFxuICAgICAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICB4OiBkYXRhLnggfHwgMCxcbiAgICAgICAgICAgICAgICB5OiBkYXRhLnkgfHwgMCxcbiAgICAgICAgICAgICAgICB6OiBkYXRhLnogfHwgMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNjZDoge1xuICAgICAgICAgICAgICAgIG1vdGlvblRocmVzaG9sZDogcmFkaXVzICogMC43LFxuICAgICAgICAgICAgICAgIHN3ZXB0U3BoZXJlUmFkaXVzOiByYWRpdXMgKiAwLjZcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmcmljdGlvbjogMC4wMixcbiAgICAgICAgICAgIHJlc3RpdHV0aW9uOiAxLjBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8g0J7Rh9C40YHRgtC60LAg0L/QsNC80Y/RgtC4XG4gICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3kocmJJbmZvKTtcbiAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveShsb2NhbEluZXJ0aWEpO1xuXG4gICAgICAgIHJldHVybiBib2R5O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ9Ce0YjQuNCx0LrQsCDQv9GA0Lgg0YHQvtC30LTQsNC90LjQuCDRhNC40LfQuNGH0LXRgdC60L7Qs9C+INGC0LXQu9CwOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVQaHlzaWNzQm9keUZvckJveChkYXRhKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBBbW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignQW1tby5qcyDQvdC1INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvScpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWxvY2FsUGh5c2ljc1dvcmxkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCfQpNC40LfQuNGH0LXRgdC60LjQuSDQvNC40YAg0L3QtSDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0L0nKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmFkaXVzID0gZGF0YS5yYWRpdXMgfHwgMTtcbiAgICAgICAgY29uc3QgbWFzcyA9IGRhdGEubWFzcyB8fCAxO1xuXG4gICAgICAgIC8vINCh0L7Qt9C00LDQtdC8INCy0YHQtSBBbW1vINC+0LHRitC10LrRgtGLINGH0LXRgNC10Lcgd2luZG93LkFtbW9cbiAgICAgICAgY29uc3Qgc2hhcGUgPSBuZXcgd2luZG93LkFtbW8uYnRTcGhlcmVTaGFwZShyYWRpdXMpO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBuZXcgd2luZG93LkFtbW8uYnRUcmFuc2Zvcm0oKTtcbiAgICAgICAgdHJhbnNmb3JtLnNldElkZW50aXR5KCk7XG4gICAgICAgIHRyYW5zZm9ybS5zZXRPcmlnaW4obmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMyhkYXRhLnggfHwgMCwgZGF0YS55IHx8IDAsIGRhdGEueiB8fCAwKSk7XG5cbiAgICAgICAgY29uc3QgbG9jYWxJbmVydGlhID0gbmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgc2hhcGUuY2FsY3VsYXRlTG9jYWxJbmVydGlhKG1hc3MsIGxvY2FsSW5lcnRpYSk7XG5cbiAgICAgICAgY29uc3QgbW90aW9uU3RhdGUgPSBuZXcgd2luZG93LkFtbW8uYnREZWZhdWx0TW90aW9uU3RhdGUodHJhbnNmb3JtKTtcbiAgICAgICAgY29uc3QgcmJJbmZvID0gbmV3IHdpbmRvdy5BbW1vLmJ0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mbyhcbiAgICAgICAgICAgIG1hc3MsXG4gICAgICAgICAgICBtb3Rpb25TdGF0ZSxcbiAgICAgICAgICAgIHNoYXBlLFxuICAgICAgICAgICAgbG9jYWxJbmVydGlhXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGJvZHkgPSBuZXcgd2luZG93LkFtbW8uYnRSaWdpZEJvZHkocmJJbmZvKTtcbiAgICAgICAgXG4gICAgICAgIC8vIC8vINCd0LDRgdGC0YDQsNC40LLQsNC10Lwg0YTQuNC30LjRh9C10YHQutC40LUg0YHQstC+0LnRgdGC0LLQsFxuICAgICAgICAvLyBib2R5LnNldEZyaWN0aW9uKDAuNSk7XG4gICAgICAgIC8vIGJvZHkuc2V0Um9sbGluZ0ZyaWN0aW9uKDAuMSk7XG4gICAgICAgIC8vIGJvZHkuc2V0UmVzdGl0dXRpb24oMC4yKTsgLy8g0J3QtdC80L3QvtCz0L4g0YPQvNC10L3RjNGI0LDQtdC8INGD0L/RgNGD0LPQvtGB0YLRjCDQtNC70Y8g0YHRgtCw0LHQuNC70YzQvdC+0YHRgtC4XG4gICAgICAgIC8vIGJvZHkuc2V0RGFtcGluZygwLjAxLCAwLjAxKTsgLy8g0J3QtdCx0L7Qu9GM0YjQvtC1INC70LjQvdC10LnQvdC+0LUg0Lgg0YPQs9C70L7QstC+0LUg0LfQsNGC0YPRhdCw0L3QuNC1XG4gICAgICAgIFxuICAgICAgICAvLyDQktC60LvRjtGH0LDQtdC8IENDRCDQtNC70Y8g0L/RgNC10LTQvtGC0LLRgNCw0YnQtdC90LjRjyDQv9GA0L7QstCw0LvQuNCy0LDQvdC40Y8g0YHQutCy0L7Qt9GMINGC0LXRgNGA0LXQudC9XG4gICAgICAgIC8vINCU0LvRjyDQvNC10L3RjNGI0LXQs9C+INC80LDRgdGI0YLQsNCx0LAgKDEwMCDQstC80LXRgdGC0L4gMTUwMDApINGN0YLQuCDQt9C90LDRh9C10L3QuNGPINCx0L7Qu9C10LUg0L7Qv9GC0LjQvNCw0LvRjNC90YtcbiAgICAgICAgLy8gYm9keS5zZXRDY2RNb3Rpb25UaHJlc2hvbGQocmFkaXVzICogMC44KTsgLy8g0KPQstC10LvQuNGH0LjQstCw0LXQvCDQv9C+0YDQvtCzINC00LvRjyDQsNC60YLQuNCy0LDRhtC40LggQ0NEXG4gICAgICAgIC8vIGJvZHkuc2V0Q2NkU3dlcHRTcGhlcmVSYWRpdXMocmFkaXVzICogMC43KTsgLy8g0KDQsNC00LjRg9GBINGB0YTQtdGA0Ysg0LTQu9GPIENDRFxuICAgICAgICBcbiAgICAgICAgLy8g0J7RgtC60LvRjtGH0LDQtdC8INC00LXQsNC60YLQuNCy0LDRhtC40Y5cbiAgICAgICAgYm9keS5zZXRBY3RpdmF0aW9uU3RhdGUoNCk7IC8vIERJU0FCTEVfREVBQ1RJVkFUSU9OXG5cbiAgICAgICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INGC0LXQu9C+INCyINGE0LjQt9C40YfQtdGB0LrQuNC5INC80LjRgFxuICAgICAgICBjb25zdCBTUEhFUkVfR1JPVVAgPSAyO1xuICAgICAgICBsb2NhbFBoeXNpY3NXb3JsZC5hZGRSaWdpZEJvZHkoYm9keSwgU1BIRVJFX0dST1VQLCAtMSk7IC8vINCh0YTQtdGA0Ysg0YHRgtCw0LvQutC40LLQsNGO0YLRgdGPINGB0L4g0LLRgdC10LzQuFxuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coXCJbU3BoZXJlXSDQpNC40LfQuNGH0LXRgdC60L7QtSDRgtC10LvQviDRgdC+0LfQtNCw0L3QvjpcIiwge1xuICAgICAgICAgICAgcmFkaXVzLFxuICAgICAgICAgICAgbWFzcyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgeDogZGF0YS54IHx8IDAsXG4gICAgICAgICAgICAgICAgeTogZGF0YS55IHx8IDAsXG4gICAgICAgICAgICAgICAgejogZGF0YS56IHx8IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjY2Q6IHtcbiAgICAgICAgICAgICAgICBtb3Rpb25UaHJlc2hvbGQ6IHJhZGl1cyAqIDAuOCxcbiAgICAgICAgICAgICAgICBzd2VwdFNwaGVyZVJhZGl1czogcmFkaXVzICogMC43XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnJpY3Rpb246IDAuNSxcbiAgICAgICAgICAgIHJlc3RpdHV0aW9uOiAwLjJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8g0J7Rh9C40YHRgtC60LAg0L/QsNC80Y/RgtC4XG4gICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3kocmJJbmZvKTtcbiAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveShsb2NhbEluZXJ0aWEpO1xuXG4gICAgICAgIHJldHVybiBib2R5O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ9Ce0YjQuNCx0LrQsCDQv9GA0Lgg0YHQvtC30LTQsNC90LjQuCDRhNC40LfQuNGH0LXRgdC60L7Qs9C+INGC0LXQu9CwOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZUNvbG9yKGNvbG9yU3RyKSB7XG4gICAgaWYgKCFjb2xvclN0cikgcmV0dXJuIDB4ODg4ODg4O1xuICAgIGlmIChjb2xvclN0ci5zdGFydHNXaXRoKFwiI1wiKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoY29sb3JTdHIuc2xpY2UoMSksIDE2KTtcbiAgICB9XG4gICAgcmV0dXJuIDB4ODg4ODg4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGVzdFNwaGVyZSgpIHtcbiAgICAvLyDQodC+0LfQtNCw0LXQvCDQstC40LfRg9Cw0LvRjNC90YPRjiDRgdGE0LXRgNGDXG4gICAgY29uc3QgcmFkaXVzID0gMTtcbiAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeShyYWRpdXMsIDMyLCAzMik7XG4gICAgY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoeyBcbiAgICAgICAgY29sb3I6IDB4ZmYwMGZmLFxuICAgICAgICBzaGluaW5lc3M6IDMwXG4gICAgfSk7XG4gICAgY29uc3QgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XG4gICAgXG4gICAgLy8g0JLQutC70Y7Rh9Cw0LXQvCDRgtC10L3QuCDQtNC70Y8g0YLQtdGB0YLQvtCy0L7QuSDRgdGE0LXRgNGLXG4gICAgbWVzaC5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICBtZXNoLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuICAgIFxuICAgIC8vINCf0L7Qt9C40YbQuNC+0L3QuNGA0YPQtdC8INGB0YTQtdGA0YMg0LLRi9GB0L7QutC+INC90LDQtCDRgtC10YDRgNC10LnQvdC+0LxcbiAgICBjb25zdCBzdGFydFkgPSA1ODsgLy8g0JLRi9GB0L7RgtCwINC90LDQtCDRgtC10YDRgNC10LnQvdC+0LxcbiAgICBtZXNoLnBvc2l0aW9uLnNldCgwLCBzdGFydFksIDApO1xuICAgIHNjZW5lLmFkZChtZXNoKTtcblxuICAgIC8vINCh0L7Qt9C00LDQtdC8INGE0LjQt9C40YfQtdGB0LrQvtC1INGC0LXQu9C+XG4gICAgY29uc3Qgc2hhcGUgPSBuZXcgQW1tby5idFNwaGVyZVNoYXBlKHJhZGl1cyk7XG4gICAgY29uc3QgbWFzcyA9IDU7IC8vINCj0LLQtdC70LjRh9C40LLQsNC10Lwg0LzQsNGB0YHRgyDRgSAzINC00L4gNVxuICAgIFxuICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyBBbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgdHJhbnNmb3JtLnNldElkZW50aXR5KCk7XG4gICAgdHJhbnNmb3JtLnNldE9yaWdpbihuZXcgQW1tby5idFZlY3RvcjMoMCwgc3RhcnRZLCAwKSk7XG5cbiAgICBjb25zdCBsb2NhbEluZXJ0aWEgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgc2hhcGUuY2FsY3VsYXRlTG9jYWxJbmVydGlhKG1hc3MsIGxvY2FsSW5lcnRpYSk7XG5cbiAgICBjb25zdCBtb3Rpb25TdGF0ZSA9IG5ldyBBbW1vLmJ0RGVmYXVsdE1vdGlvblN0YXRlKHRyYW5zZm9ybSk7XG4gICAgY29uc3QgcmJJbmZvID0gbmV3IEFtbW8uYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvKG1hc3MsIG1vdGlvblN0YXRlLCBzaGFwZSwgbG9jYWxJbmVydGlhKTtcbiAgICBjb25zdCBib2R5ID0gbmV3IEFtbW8uYnRSaWdpZEJvZHkocmJJbmZvKTtcblxuICAgIC8vINCS0LDQttC90YvQtSDQvdCw0YHRgtGA0L7QudC60Lgg0LTQu9GPINGE0LjQt9C40YfQtdGB0LrQvtCz0L4g0YLQtdC70LBcbiAgICBib2R5LnNldEFjdGl2YXRpb25TdGF0ZSg0KTsgLy8gRElTQUJMRV9ERUFDVElWQVRJT05cbiAgICBib2R5LnNldEZyaWN0aW9uKDAuMik7ICAgICAgLy8g0KPQvNC10L3RjNGI0LDQtdC8INGBIDAuMyDQtNC+IDAuMlxuICAgIGJvZHkuc2V0Um9sbGluZ0ZyaWN0aW9uKDAuMDMpOyAvLyDQo9C80LXQvdGM0YjQsNC10Lwg0YEgMC4wNSDQtNC+IDAuMDNcbiAgICBib2R5LnNldFJlc3RpdHV0aW9uKDAuOTkpOyAgICAvLyDQo9Cy0LXQu9C40YfQuNCy0LDQtdC8INC00L4g0LzQsNC60YHQuNC80YPQvNCwXG4gICAgYm9keS5zZXREYW1waW5nKDAuMCwgMC4wKTsgICAgLy8g0J7RgtC60LvRjtGH0LDQtdC8INC30LDRgtGD0YXQsNC90LjQtSDQv9C+0LvQvdC+0YHRgtGM0Y5cblxuICAgIC8vINCS0LrQu9GO0YfQsNC10LwgQ0NEINC00LvRjyDQv9GA0LXQtNC+0YLQstGA0LDRidC10L3QuNGPINC/0YDQvtCy0LDQu9C40LLQsNC90LjRjyDRgdC60LLQvtC30Ywg0L7QsdGK0LXQutGC0YtcbiAgICBib2R5LnNldENjZE1vdGlvblRocmVzaG9sZChyYWRpdXMgKiAwLjYpO1xuICAgIGJvZHkuc2V0Q2NkU3dlcHRTcGhlcmVSYWRpdXMocmFkaXVzICogMC41KTtcblxuICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDRgtC10LvQviDQsiDRhNC40LfQuNGH0LXRgdC60LjQuSDQvNC40YBcbiAgICBjb25zdCBTUEhFUkVfR1JPVVAgPSAyO1xuICAgIGxvY2FsUGh5c2ljc1dvcmxkLmFkZFJpZ2lkQm9keShib2R5LCBTUEhFUkVfR1JPVVAsIC0xKTsgLy8g0KLQtdGB0YLQvtCy0LDRjyDRgdGE0LXRgNCwINGB0YLQsNC70LrQuNCy0LDQtdGC0YHRjyDRgdC+INCy0YHQtdC80LhcblxuICAgIC8vINCe0YfQuNGB0YLQutCwINC/0LDQvNGP0YLQuFxuICAgIEFtbW8uZGVzdHJveShyYkluZm8pO1xuICAgIEFtbW8uZGVzdHJveShsb2NhbEluZXJ0aWEpO1xuXG4gICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC+0LHRitC10LrRgiDQsiDQvdCw0Ygg0YHQv9C40YHQvtC6INC+0LHRitC10LrRgtC+0LJcbiAgICBjb25zdCB0ZXN0U3BoZXJlT2JqID0ge1xuICAgICAgICBtZXNoLFxuICAgICAgICBib2R5LFxuICAgICAgICBvYmplY3RfdHlwZTogXCJ0ZXN0X3NwaGVyZVwiLFxuICAgICAgICBwaHlzaWNzQnk6IFwiYW1tb1wiIC8vINCY0LfQvNC10L3QtdC90L4g0YEgXCJib3RoXCIg0L3QsCBcImFtbW9cIiwg0YfRgtC+0LHRiyDRg9C/0YDQsNCy0LvRj9C70L7RgdGMINGC0L7Qu9GM0LrQviDQu9C+0LrQsNC70YzQvdC+0Lkg0YTQuNC30LjQutC+0LlcbiAgICB9O1xuICAgIG9iamVjdHNbXCJ0ZXN0X3NwaGVyZVwiXSA9IHRlc3RTcGhlcmVPYmo7XG5cbiAgICByZXR1cm4gdGVzdFNwaGVyZU9iajtcbn0iLCIvL3Rocm90dGxlZGxvZy5qc1xuXG4vLyDQodC40YHRgtC10LzQsCDQu9C+0LPQuNGA0L7QstCw0L3QuNGPINGBINC+0LPRgNCw0L3QuNGH0LXQvdC40LXQvCDRh9Cw0YHRgtC+0YLRi1xuY29uc3QgTE9HX0lOVEVSVkFMID0gNTAwMDsgLy8gMSDRgdC10LrRg9C90LTQsCDQvNC10LbQtNGDINC70L7Qs9Cw0LzQuFxuY29uc3QgbG9nVGltZXJzID0ge307XG5cbmV4cG9ydCBmdW5jdGlvbiB0aHJvdHRsZWRMb2coY2F0ZWdvcnksIG1lc3NhZ2UsIGRhdGEgPSBudWxsKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBcbiAgICAvLyDQn9GA0L7QstC10YDRj9C10LwsINC/0YDQvtGI0LvQviDQu9C4INC00L7RgdGC0LDRgtC+0YfQvdC+INCy0YDQtdC80LXQvdC4INGBINC/0L7RgdC70LXQtNC90LXQs9C+INC70L7Qs9CwINC00LvRjyDRjdGC0L7QuSDQutCw0YLQtdCz0L7RgNC40LhcbiAgICBpZiAoIWxvZ1RpbWVyc1tjYXRlZ29yeV0gfHwgbm93IC0gbG9nVGltZXJzW2NhdGVnb3J5XSA+PSBMT0dfSU5URVJWQUwpIHtcbiAgICAgICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INGC0LDQudC80LXRgCDQtNC70Y8g0Y3RgtC+0Lkg0LrQsNGC0LXQs9C+0YDQuNC4XG4gICAgICAgIGxvZ1RpbWVyc1tjYXRlZ29yeV0gPSBub3c7XG4gICAgICAgIFxuICAgICAgICAvLyDQpNC+0YDQvNCw0YLQuNGA0YPQtdC8INC4INCy0YvQstC+0LTQuNC8INGB0L7QvtCx0YnQtdC90LjQtVxuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFske2NhdGVnb3J5fV0gJHttZXNzYWdlfWAsIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFske2NhdGVnb3J5fV0gJHttZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdHJ1ZTsgLy8g0JvQvtCzINCx0YvQuyDQstGL0LLQtdC00LXQvVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZmFsc2U7IC8vINCb0L7QsyDQsdGL0Lsg0L/RgNC+0L/Rg9GJ0LXQvSDQuNC3LdC30LAg0L7Qs9GA0LDQvdC40YfQtdC90LjRjyDRh9Cw0YHRgtC+0YLRi1xufVxuXG4vLyDQpNGD0L3QutGG0LjRjyDQtNC70Y8g0LvQvtCz0LjRgNC+0LLQsNC90LjRjyDQtNCw0L3QvdGL0YUg0L4g0LPQu9Cw0LLQvdC+0Lwg0LjQs9GA0L7QutC1XG5leHBvcnQgZnVuY3Rpb24gbG9nTWFpblBsYXllckluZm8oKSB7XG4gICAgY29uc3QgbWFpblBsYXllciA9IG9iamVjdHNbXCJtYWluUGxheWVyMVwiXTtcbiAgICBpZiAoIW1haW5QbGF5ZXIgfHwgIW1haW5QbGF5ZXIubWVzaCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHBvcyA9IG1haW5QbGF5ZXIubWVzaC5wb3NpdGlvbjtcbiAgICBcbiAgICAvLyDQn9C+0LvRg9GH0LDQtdC8INGB0LrQvtGA0L7RgdGC0YwsINC10YHQu9C4INC00L7RgdGC0YPQv9C90LAg0YTQuNC30LjQutCwXG4gICAgbGV0IHZlbCA9IHsgeDogMCwgeTogMCwgejogMCB9O1xuICAgIGlmIChtYWluUGxheWVyLmJvZHkpIHtcbiAgICAgICAgY29uc3QgdmVsb2NpdHkgPSBtYWluUGxheWVyLmJvZHkuZ2V0TGluZWFyVmVsb2NpdHkoKTtcbiAgICAgICAgdmVsID0geyBcbiAgICAgICAgICAgIHg6IHZlbG9jaXR5LngoKSxcbiAgICAgICAgICAgIHk6IHZlbG9jaXR5LnkoKSxcbiAgICAgICAgICAgIHo6IHZlbG9jaXR5LnooKVxuICAgICAgICB9O1xuICAgICAgICB3aW5kb3cuQW1tby5kZXN0cm95KHZlbG9jaXR5KTtcbiAgICB9XG4gICAgXG4gICAgLy8g0JLRi9Cy0L7QtNC40Lwg0LIg0YTQvtGA0LzQsNGC0LUsINC90LDQv9C+0LzQuNC90LDRjtGJ0LXQvCBDKysg0LLRi9Cy0L7QtFxuICAgIHRocm90dGxlZExvZyhcIk1haW5QbGF5ZXJcIiwgXG4gICAgICAgIGBQb3NpdGlvbjogKCR7cG9zLngudG9GaXhlZCgyKX0sICR7cG9zLnkudG9GaXhlZCgyKX0sICR7cG9zLnoudG9GaXhlZCgyKX0pLCBgICtcbiAgICAgICAgYFZlbG9jaXR5OiAoJHt2ZWwueC50b0ZpeGVkKDIpfSwgJHt2ZWwueS50b0ZpeGVkKDIpfSwgJHt2ZWwuei50b0ZpeGVkKDIpfSlgXG4gICAgKTtcbn0iLCIvLyBwaHlzaWNzLmpzXG5cbmltcG9ydCB7IG9iamVjdHMgfSBmcm9tICcuL29iamVjdHMnO1xuaW1wb3J0IHsgc3RhcnRQaHlzaWNzU2ltdWxhdGlvbiB9IGZyb20gJy4vbmV0d29yayc7XG5pbXBvcnQgeyB0aHJvdHRsZWRMb2csIGxvZ01haW5QbGF5ZXJJbmZvfSBmcm9tICcuL3Rocm90dGxlZGxvZyc7XG5cbmV4cG9ydCBsZXQgbG9jYWxQaHlzaWNzV29ybGQgPSBudWxsO1xubGV0IGFtbW9Qcm9taXNlID0gbnVsbDtcblxuLy8g0J3QsNGB0YLRgNC+0LnQutC4INC00LvRjyDQutC+0YDRgNC10LrRhtC40Lgg0L/QvtC30LjRhtC40LhcbmNvbnN0IERFQURfWk9ORSA9IDEwOyBcbmNvbnN0IENPUlJFQ1RJT05fU1RSRU5HVEggPSA1MC4wOyBcbmNvbnN0IFRFTEVQT1JUX1RIUkVTSE9MRCA9IDUuMDsgXG5cbi8vINCU0L7QsdCw0LLQu9GP0LXQvCDQvdCw0YHRgtGA0L7QudC60Lgg0LTQu9GPIGNsaWVudC1zaWRlIHByZWRpY3Rpb25cbmNvbnN0IFBSRURJQ1RJT05fU01PT1RIX0ZBQ1RPUiA9IDEwOyBcbmNvbnN0IFBSRURJQ1RJT05fTUFYX0VSUk9SID0gMTAuMDsgXG5jb25zdCBESVNUQU5DRV9CQVNFRF9TTU9PVEhfRkFDVE9SID0gdHJ1ZTsgLy8g0JjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGMINC00LjQvdCw0LzQuNGH0LXRgdC60LjQuSDQutC+0Y3RhNGE0LjRhtC40LXQvdGCINGB0LPQu9Cw0LbQuNCy0LDQvdC40Y9cbmNvbnN0IE5FV19PQkpFQ1RfVElNRU9VVCA9IDIwMDA7IC8vIDIg0YHQtdC60YPQvdC00Ysg0LTQu9GPIFwi0L3QvtCy0YvRhVwiINC+0LHRitC10LrRgtC+0LJcblxuLy8g0JjRgdGC0L7RgNC40Y8g0LrQvtC80LDQvdC0INC00LvRjyDQv9GA0LXQtNGB0LrQsNC30LDQvdC40Y9cbmxldCBpbnB1dEhpc3RvcnkgPSBbXTsgXG5sZXQgbGFzdFNlcXVlbmNlTnVtYmVyID0gMDsgLy8g0KHRh9C10YLRh9C40Log0L/QvtGB0LvQtdC00L7QstCw0YLQtdC70YzQvdC+0YHRgtC4INC00LvRjyDQutC+0LzQsNC90LRcbmxldCBsYXN0U2VydmVyVXBkYXRlVGltZSA9IDA7IC8vINCS0YDQtdC80Y8g0L/QvtGB0LvQtdC00L3QtdCz0L4g0YHQtdGA0LLQtdGA0L3QvtCz0L4g0L7QsdC90L7QstC70LXQvdC40Y9cblxuXG5cbi8vINCU0L7QsdCw0LLQu9GP0LXQvCDQvNCw0YDQutC10YAg0LLRgNC10LzQtdC90Lgg0YHQvtC30LTQsNC90LjRjyDQvtCx0YrQtdC60YLQvtCyXG5jb25zdCBvYmplY3RDcmVhdGlvblRpbWVzID0gbmV3IE1hcCgpO1xuXG4vLyDQpNGD0L3QutGG0LjRjyDQtNC70Y8g0L3QsNGB0YLRgNC+0LnQutC4INGE0LjQt9C40YfQtdGB0LrQvtCz0L4g0LzQuNGA0LBcbmZ1bmN0aW9uIHNldHVwUGh5c2ljc1dvcmxkKCkge1xuICAgIGlmICghd2luZG93LkFtbW8pIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIltQaHlzaWNzXSBBbW1vLmpzINC90LUg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC9XCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vINCh0L7Qt9C00LDQtdC8INGE0LjQt9C40YfQtdGB0LrQuNC5INC80LjRgFxuICAgIGNvbnN0IGNvbGxpc2lvbkNvbmZpZ3VyYXRpb24gPSBuZXcgd2luZG93LkFtbW8uYnREZWZhdWx0Q29sbGlzaW9uQ29uZmlndXJhdGlvbigpO1xuICAgIGNvbnN0IGRpc3BhdGNoZXIgPSBuZXcgd2luZG93LkFtbW8uYnRDb2xsaXNpb25EaXNwYXRjaGVyKGNvbGxpc2lvbkNvbmZpZ3VyYXRpb24pO1xuICAgIGNvbnN0IGJyb2FkcGhhc2UgPSBuZXcgd2luZG93LkFtbW8uYnREYnZ0QnJvYWRwaGFzZSgpO1xuICAgIGNvbnN0IHNvbHZlciA9IG5ldyB3aW5kb3cuQW1tby5idFNlcXVlbnRpYWxJbXB1bHNlQ29uc3RyYWludFNvbHZlcigpO1xuICAgIFxuICAgIGxvY2FsUGh5c2ljc1dvcmxkID0gbmV3IHdpbmRvdy5BbW1vLmJ0RGlzY3JldGVEeW5hbWljc1dvcmxkKFxuICAgICAgICBkaXNwYXRjaGVyLFxuICAgICAgICBicm9hZHBoYXNlLFxuICAgICAgICBzb2x2ZXIsXG4gICAgICAgIGNvbGxpc2lvbkNvbmZpZ3VyYXRpb25cbiAgICApO1xuICAgIFxuICAgIC8vINCj0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdC8INCz0YDQsNCy0LjRgtCw0YbQuNGOXG4gICAgbG9jYWxQaHlzaWNzV29ybGQuc2V0R3Jhdml0eShuZXcgd2luZG93LkFtbW8uYnRWZWN0b3IzKDAsIC05LjgxLCAwKSk7XG4gICAgXG4gICAgY29uc29sZS5sb2coXCJbUGh5c2ljc10g0KTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAINGD0YHQv9C10YjQvdC+INGB0L7Qt9C00LDQvVwiKTtcbiAgICBcbiAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0Y3RhNGE0LXQutGCINC+0YLRgdC60L7QutCwINC/0L7RgdC70LUg0YHQvtC30LTQsNC90LjRjyDQvNC40YDQsFxuICAgIC8vIFRPRE86INCg0LXQsNC70LjQt9Cw0YbQuNGPINC+0YLRgdC60L7QutCwINC+0YLQu9C+0LbQtdC90LAg0L3QsCDQsdGD0LTRg9GJ0LXQtVxuICAgIC8vIGFkZENvbGxpc2lvbkJvdW5jZUVmZmVjdCgpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdEFtbW8oKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBBbW1vICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0FtbW8uanMg0YPQttC1INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvScpO1xuICAgICAgICAgICAgc2V0dXBQaHlzaWNzV29ybGQoKTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGUubG9nKCfQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyBBbW1vLmpzLi4uJyk7XG4gICAgICAgIGNvbnN0IGFtbW9TY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgYW1tb1NjcmlwdC5zcmMgPSAnL2FtbW8vYW1tby53YXNtLmpzJztcbiAgICAgICAgYW1tb1NjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgICAgIGFtbW9TY3JpcHQub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ9Ch0LrRgNC40L/RgiBBbW1vLmpzINC30LDQs9GA0YPQttC10L0sINC40L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPLi4uJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdpbmRvdy5BbW1vKCkudGhlbigoQW1tbykgPT4ge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5BbW1vID0gQW1tbztcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQW1tby5qcyDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0L0g0YPRgdC/0LXRiNC90L4nKTtcbiAgICAgICAgICAgICAgICBzZXR1cFBoeXNpY3NXb3JsZCgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vINCX0LDQv9GD0YHQutCw0LXQvCDRhNC40LfQuNGH0LXRgdC60YPRjiDRgdC40LzRg9C70Y/RhtC40Y4g0YEg0LfQsNC00LXRgNC20LrQvtC5INCyIDEg0YHQtdC60YPQvdC00YMsXG4gICAgICAgICAgICAgICAgLy8g0YfRgtC+0LHRiyDQs9Cw0YDQsNC90YLQuNGA0L7QstCw0YLRjCDQv9C+0LvRg9GH0LXQvdC40LUg0LrQvtC+0YDQtNC40L3QsNGCINC+0YIg0YHQtdGA0LLQtdGA0LBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltQaHlzaWNzXSDQl9Cw0LTQtdGA0LbQuNCy0LDQtdC8INC30LDQv9GD0YHQuiDRhNC40LfQuNC60Lgg0L3QsCAxINGB0LXQutGD0L3QtNGDINC00LvRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0YHQtdGA0LLQtdGA0L3Ri9GFINC60L7QvtGA0LTQuNC90LDRgi4uLlwiKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRQaHlzaWNzU2ltdWxhdGlvbigpO1xuICAgICAgICAgICAgICAgIH0sIDEwMDApO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcign0J7RiNC40LHQutCwINC40L3QuNGG0LjQsNC70LjQt9Cw0YbQuNC4IEFtbW8uanM6JywgZXJyKTtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBhbW1vU2NyaXB0Lm9uZXJyb3IgPSAoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCfQntGI0LjQsdC60LAg0LfQsNCz0YDRg9C30LrQuCBBbW1vLmpzOicsIGVycik7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYW1tb1NjcmlwdCk7XG4gICAgfSk7XG59XG5cbi8vINCe0LHRgNCw0LHQvtGC0LrQsCDRiNCw0LPQsCDRhNC40LfQuNC60LhcbmV4cG9ydCBmdW5jdGlvbiBzdGVwUGh5c2ljcyhkZWx0YVRpbWUpIHtcbiAgICBpZiAoIWxvY2FsUGh5c2ljc1dvcmxkKSByZXR1cm47XG5cbiAgICB0cnkge1xuICAgICAgICAvLyDQn9GA0L7QstC10YDRj9C10Lwg0LrQvtGA0YDQtdC60YLQvdC+0YHRgtGMIGRlbHRhVGltZVxuICAgICAgICBpZiAoIWRlbHRhVGltZSB8fCBpc05hTihkZWx0YVRpbWUpIHx8IGRlbHRhVGltZSA8PSAwIHx8IGRlbHRhVGltZSA+IDEpIHtcbiAgICAgICAgICAgIGRlbHRhVGltZSA9IDEvNjA7IC8vINCX0L3QsNGH0LXQvdC40LUg0L/QviDRg9C80L7Qu9GH0LDQvdC40Y5cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8g0J7Qs9GA0LDQvdC40YfQuNCy0LDQtdC8INC80LDQutGB0LjQvNCw0LvRjNC90YvQuSDRiNCw0LMg0LTQu9GPINGB0YLQsNCx0LjQu9GM0L3QvtGB0YLQuFxuICAgICAgICBjb25zdCBtYXhTdGVwID0gMS82MDsgLy8g0J3QtSDQsdC+0LvRjNGI0LUgMzDQvNGBINC00LvRjyDQvtC00L3QvtCz0L4g0YjQsNCz0LBcbiAgICAgICAgY29uc3QgZWZmZWN0aXZlU3RlcCA9IE1hdGgubWluKGRlbHRhVGltZSwgbWF4U3RlcCk7XG4gICAgICAgIFxuICAgICAgICAvLyDQmNGB0L/QvtC70YzQt9GD0LXQvCDRhNC40LrRgdC40YDQvtCy0LDQvdC90YvQuSDRiNCw0LMg0Lgg0L/QtdGA0LXQvNC10L3QvdC+0LUg0LrQvtC70LjRh9C10YHRgtCy0L4g0L/QvtC00YjQsNCz0L7QsiDQtNC70Y8g0YLQvtGH0L3QvtGB0YLQuFxuICAgICAgICBjb25zdCBmaXhlZFN0ZXAgPSAxLzEyMDsgLy8gMTIwINCT0YYg0LLQvdGD0YLRgNC10L3QvdC40LUg0YjQsNCz0LhcbiAgICAgICAgY29uc3QgbWF4U3ViU3RlcHMgPSBNYXRoLmNlaWwoZWZmZWN0aXZlU3RlcCAvIGZpeGVkU3RlcCk7XG4gICAgICAgIFxuICAgICAgICAvLyDQktGL0L/QvtC70L3Rj9C10Lwg0YjQsNCzINGB0LjQvNGD0LvRj9GG0LjQuCDRgSDQt9Cw0LTQsNC90L3Ri9C80Lgg0L/QsNGA0LDQvNC10YLRgNCw0LzQuFxuICAgICAgICBsb2NhbFBoeXNpY3NXb3JsZC5zdGVwU2ltdWxhdGlvbihlZmZlY3RpdmVTdGVwLCBtYXhTdWJTdGVwcywgZml4ZWRTdGVwKTtcblxuICAgICAgICAvLyDQn9GA0LjQvNC10L3Rj9C10Lwg0L7Qs9GA0LDQvdC40YfQtdC90LjRjyDRgdC60L7RgNC+0YHRgtC4XG4gICAgICAgIGFwcGx5U3BlZWRMaW1pdHMoKTtcblxuICAgICAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0YTQuNC30LjRh9C10YHQutC40LUg0L7QsdGK0LXQutGC0YtcbiAgICAgICAgdXBkYXRlUGh5c2ljc09iamVjdHMob2JqZWN0cywgZGVsdGFUaW1lKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCfQntGI0LjQsdC60LAg0L/RgNC4INC+0LHQvdC+0LLQu9C10L3QuNC4INGE0LjQt9C40LrQuDonLCBlcnJvcik7XG4gICAgfVxufVxuXG4vLyDQpNGD0L3QutGG0LjRjyDQtNC70Y8g0L7Qs9GA0LDQvdC40YfQtdC90LjRjyDRgdC60L7RgNC+0YHRgtC4INCyIEFtbW8uanNcbmV4cG9ydCBmdW5jdGlvbiBhcHBseVNwZWVkTGltaXRzKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICghb2JqZWN0cyB8fCAhd2luZG93LkFtbW8gfHwgIXdpbmRvdy5QSFlTSUNTX0NPTkZJRykgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgLy8g0JjRgdC/0L7Qu9GM0LfRg9C10Lwg0LzQsNC60YHQuNC80LDQu9GM0L3Rg9GOINGB0LrQvtGA0L7RgdGC0Ywg0LjQtyDQutC+0L3RhNC40LPRg9GA0LDRhtC40LhcbiAgICAgICAgY29uc3QgTUFYX1NQRUVEID0gd2luZG93LlBIWVNJQ1NfQ09ORklHLk1heFNwZWVkIHx8IDgwLjA7XG4gICAgICAgIFxuICAgICAgICBmb3IgKGxldCBpZCBpbiBvYmplY3RzKSB7XG4gICAgICAgICAgICBjb25zdCBvYmogPSBvYmplY3RzW2lkXTtcbiAgICAgICAgICAgIGlmICghb2JqIHx8ICFvYmouYm9keSkgY29udGludWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCf0YDQvtC/0YPRgdC60LDQtdC8INGB0YLQsNGC0LjRh9C10YHQutC40LUg0L7QsdGK0LXQutGC0Ysg0LjQu9C4INGC0LXRgNGA0LXQudC9XG4gICAgICAgICAgICBpZiAob2JqLm9iamVjdF90eXBlID09PSBcInRlcnJhaW5cIikgY29udGludWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCf0L7Qu9GD0YfQsNC10Lwg0YLQtdC60YPRidGD0Y4g0LvQuNC90LXQudC90YPRjiDRgdC60L7RgNC+0YHRgtGMXG4gICAgICAgICAgICBjb25zdCB2ZWxvY2l0eSA9IG9iai5ib2R5LmdldExpbmVhclZlbG9jaXR5KCk7XG4gICAgICAgICAgICBjb25zdCBzcGVlZFNxID0gdmVsb2NpdHkueCgpICogdmVsb2NpdHkueCgpICsgdmVsb2NpdHkueSgpICogdmVsb2NpdHkueSgpICsgdmVsb2NpdHkueigpICogdmVsb2NpdHkueigpO1xuICAgICAgICAgICAgY29uc3Qgc3BlZWQgPSBNYXRoLnNxcnQoc3BlZWRTcSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCV0YHQu9C4INGB0LrQvtGA0L7RgdGC0Ywg0L/RgNC10LLRi9GI0LDQtdGCINC80LDQutGB0LjQvNCw0LvRjNC90YPRjiwg0L7Qs9GA0LDQvdC40YfQuNCy0LDQtdC8INC10ZFcbiAgICAgICAgICAgIGlmIChzcGVlZCA+IE1BWF9TUEVFRCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcImFwcGx5IHNwZWVkIGxpbWl0IDpcIiwgc3BlZWQpXG4gICAgICAgICAgICAgICAgY29uc3Qgc2NhbGUgPSBNQVhfU1BFRUQgLyBzcGVlZDtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdWZWxvY2l0eSA9IG5ldyB3aW5kb3cuQW1tby5idFZlY3RvcjMoXG4gICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5LngoKSAqIHNjYWxlLFxuICAgICAgICAgICAgICAgICAgICB2ZWxvY2l0eS55KCkgKiBzY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHkueigpICogc2NhbGVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIG9iai5ib2R5LnNldExpbmVhclZlbG9jaXR5KG5ld1ZlbG9jaXR5KTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuQW1tby5kZXN0cm95KG5ld1ZlbG9jaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0JXRgdC70Lgg0Y3RgtC+INC40LPRgNC+0LosINC+0LHQvdC+0LLQu9GP0LXQvCDQvtGC0L7QsdGA0LDQttC10L3QuNC1INGB0LrQvtGA0L7RgdGC0LhcbiAgICAgICAgICAgIGlmIChpZC5zdGFydHNXaXRoKCdtYWluUGxheWVyMScpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFzcyA9IG9iai5tYXNzIHx8IDUuMDtcbiAgICAgICAgICAgICAgICB1cGRhdGVQbGF5ZXJTcGVlZERpc3BsYXkoc3BlZWQsIE1BWF9TUEVFRCwgbWFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3kodmVsb2NpdHkpO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwi0J7RiNC40LHQutCwINC/0YDQuCDQvtCx0YDQsNCx0L7RgtC60LUg0YHQutC+0YDQvtGB0YLQuDpcIiwgZSk7XG4gICAgfVxufVxuXG4vLyDQpNGD0L3QutGG0LjRjyDQtNC70Y8g0L7QsdC90L7QstC70LXQvdC40Y8g0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDRgdC60L7RgNC+0YHRgtC4INC40LPRgNC+0LrQsFxuZnVuY3Rpb24gdXBkYXRlUGxheWVyU3BlZWREaXNwbGF5KHNwZWVkLCBtYXhTcGVlZCwgbWFzcykge1xuICAgIGNvbnN0IHNwZWVkRGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGF5ZXItc3BlZWQnKTtcbiAgICBjb25zdCBtYXhTcGVlZERpc3BsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGxheWVyLW1heC1zcGVlZCcpO1xuICAgIGNvbnN0IG1hc3NEaXNwbGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllci1tYXNzJyk7XG4gICAgXG4gICAgaWYgKHNwZWVkRGlzcGxheSkge1xuICAgICAgICAvLyDQpNC+0YDQvNCw0YLQuNGA0YPQtdC8INC00L4gMiDQt9C90LDQutC+0LIg0L/QvtGB0LvQtSDQt9Cw0L/Rj9GC0L7QuSDQtNC70Y8g0LHQvtC70YzRiNC10Lkg0YLQvtGH0L3QvtGB0YLQuCDQv9GA0Lgg0LzQsNC70YvRhSDRgdC60L7RgNC+0YHRgtGP0YVcbiAgICAgICAgc3BlZWREaXNwbGF5LnRleHRDb250ZW50ID0gYNCh0LrQvtGA0L7RgdGC0Yw6ICR7c3BlZWQudG9GaXhlZCgyKX0g0Lwv0YFgO1xuICAgICAgICBcbiAgICAgICAgLy8g0JzQtdC90Y/QtdC8INGG0LLQtdGCINCyINC30LDQstC40YHQuNC80L7RgdGC0Lgg0L7RgiDRgdC60L7RgNC+0YHRgtC4XG4gICAgICAgIGNvbnN0IHNwZWVkUmF0aW8gPSBzcGVlZCAvIG1heFNwZWVkO1xuICAgICAgICBpZiAoc3BlZWRSYXRpbyA8IDAuNSkge1xuICAgICAgICAgICAgc3BlZWREaXNwbGF5LnN0eWxlLmNvbG9yID0gJ3doaXRlJzsgLy8g0J7QsdGL0YfQvdCw0Y8g0YHQutC+0YDQvtGB0YLRjFxuICAgICAgICB9IGVsc2UgaWYgKHNwZWVkUmF0aW8gPCAwLjgpIHtcbiAgICAgICAgICAgIHNwZWVkRGlzcGxheS5zdHlsZS5jb2xvciA9ICd5ZWxsb3cnOyAvLyDQktGL0YHQvtC60LDRjyDRgdC60L7RgNC+0YHRgtGMXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzcGVlZERpc3BsYXkuc3R5bGUuY29sb3IgPSAnb3JhbmdlJzsgLy8g0J/RgNC40LHQu9C40LbQtdC90LjQtSDQuiDQvNCw0LrRgdC40LzRg9C80YNcbiAgICAgICAgICAgIGlmIChzcGVlZFJhdGlvID4gMC45NSkge1xuICAgICAgICAgICAgICAgIHNwZWVkRGlzcGxheS5zdHlsZS5jb2xvciA9ICdyZWQnOyAvLyDQn9C+0YfRgtC4INC80LDQutGB0LjQvNCw0LvRjNC90LDRj1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGlmIChtYXhTcGVlZERpc3BsYXkpIHtcbiAgICAgICAgbWF4U3BlZWREaXNwbGF5LnRleHRDb250ZW50ID0gYNCc0LDQutGBLiDRgdC60L7RgNC+0YHRgtGMOiAke21heFNwZWVkLnRvRml4ZWQoMSl9INC8L9GBYDtcbiAgICB9XG4gICAgXG4gICAgaWYgKG1hc3NEaXNwbGF5KSB7XG4gICAgICAgIG1hc3NEaXNwbGF5LnRleHRDb250ZW50ID0gYNCc0LDRgdGB0LA6ICR7bWFzcy50b0ZpeGVkKDEpfSDQutCzYDtcbiAgICB9XG4gICAgXG4gICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC+0YLQu9Cw0LTQutGDINC00LvRjyDQvtGC0YHQu9C10LbQuNCy0LDQvdC40Y8g0LfQvdCw0YfQtdC90LjQuVxuICAgIGNvbnNvbGUubG9nKGBbU3BlZWRdIEN1cnJlbnQ6ICR7c3BlZWQudG9GaXhlZCgyKX0gbS9zLCBNYXg6ICR7bWF4U3BlZWR9IG0vcywgTWFzczogJHttYXNzfSBrZ2ApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlUGh5c2ljc09iamVjdHMob2JqZWN0cywgZGVsdGFUaW1lKSB7XG4gICAgLy8g0J/QtdGA0LXQvNC10L3QvdGL0LUg0LTQu9GPINC00LjQsNCz0L3QvtGB0YLQuNC60LhcbiAgICBsZXQgbWFpblNwaGVyZVBvcyA9IG51bGw7XG4gICAgbGV0IGFtbW9TaGFkb3dQb3MgPSBudWxsO1xuICAgIGxldCBidWxsZXRTaGFkb3dQb3MgPSBudWxsO1xuXG4gICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INCy0YHQtSDQvtCx0YrQtdC60YLRi1xuICAgIGZvciAobGV0IGlkIGluIG9iamVjdHMpIHtcbiAgICAgICAgY29uc3Qgb2JqID0gb2JqZWN0c1tpZF07XG4gICAgICAgIGlmICghb2JqLm1lc2gpIGNvbnRpbnVlO1xuICAgICAgICBcbiAgICAgICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8LCDQvdC+0LLRi9C5INC70Lgg0Y3RgtC+INC+0LHRitC10LrRglxuICAgICAgICBjb25zdCBpc05ld09iamVjdCA9IG9iamVjdENyZWF0aW9uVGltZXMuaGFzKGlkKSAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKERhdGUubm93KCkgLSBvYmplY3RDcmVhdGlvblRpbWVzLmdldChpZCkgPCBORVdfT0JKRUNUX1RJTUVPVVQpO1xuICAgICAgICBcbiAgICAgICAgLy8g0J/RgNC+0L/Rg9GB0LrQsNC10Lwg0L7QsdGA0LDQsdC+0YLQutGDINGC0LXRgNGA0LXQudC90LAgKNC+0L0g0YHRgtCw0YLQuNGH0LXQvSlcbiAgICAgICAgaWYgKG9iai5vYmplY3RfdHlwZSA9PT0gXCJ0ZXJyYWluXCIpIGNvbnRpbnVlO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgY3VycmVudFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgICAgIC8vINCf0YDQvtC/0YPRgdC60LDQtdC8INC+0LHRgNCw0LHQvtGC0LrRgywg0LXRgdC70Lgg0LTQsNC90L3Ri9C1INGB0LvQuNGI0LrQvtC8INGB0YLQsNGA0YvQtVxuICAgICAgICBpZiAoIW9iai5oYXNOZXdTZXJ2ZXJEYXRhICYmICghb2JqLmxhc3RTZXJ2ZXJVcGRhdGUgfHwgY3VycmVudFRpbWUgLSBvYmoubGFzdFNlcnZlclVwZGF0ZSA+IDEwMDApKSB7XG4gICAgICAgICAgICBjb250aW51ZTsgLy8g0J/QtdGA0LXRhdC+0LTQuNC8INC6INGB0LvQtdC00YPRjtGJ0LXQvNGDINC+0LHRitC10LrRgtGDXG4gICAgICAgIH1cblxuICAgICAgICAvLyDQldGB0LvQuCDRgdC10YDQstC10YDQvdCw0Y8g0L/QvtC30LjRhtC40Y8g0L3QtSDQuNC30LzQtdC90LjQu9Cw0YHRjCDRgSDQv9GA0L7RiNC70L7Qs9C+INC+0LHQvdC+0LLQu9C10L3QuNGPLCDQv9GA0L7Qv9GD0YHQutCw0LXQvCDQutC+0YDRgNC10LrRhtC40Y5cbiAgICAgICAgaWYgKG9iai5wcmV2U2VydmVyUG9zICYmIG9iai5zZXJ2ZXJQb3MgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKG9iai5wcmV2U2VydmVyUG9zLnggLSBvYmouc2VydmVyUG9zLngpIDwgMC4wMDEgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKG9iai5wcmV2U2VydmVyUG9zLnkgLSBvYmouc2VydmVyUG9zLnkpIDwgMC4wMDEgJiZcbiAgICAgICAgICAgIE1hdGguYWJzKG9iai5wcmV2U2VydmVyUG9zLnogLSBvYmouc2VydmVyUG9zLnopIDwgMC4wMDEpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGDQodC10YDQstC10YDQvdCw0Y8g0L/QvtC30LjRhtC40Y8g0L3QtSDQuNC30LzQtdC90LjQu9Cw0YHRjCDQtNC70Y8gJHtpZH0sINC/0YDQvtC/0YPRgdC60LDQtdC8INC60L7RgNGA0LXQutGG0LjRjmApO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKG9iai5waHlzaWNzQnkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJhbW1vXCI6XG4gICAgICAgICAgICAgICAgLy8g0J7QsdC90L7QstC70LXQvdC40LUg0YLQvtC70YzQutC+INC/0L4g0YTQuNC30LjQutC1IEFtbW8uanNcbiAgICAgICAgICAgICAgICBpZiAob2JqLmJvZHkgJiYgb2JqLm9iamVjdF90eXBlICE9PSBcInRlcnJhaW5cIikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFucyA9IG5ldyB3aW5kb3cuQW1tby5idFRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICBvYmouYm9keS5nZXRNb3Rpb25TdGF0ZSgpLmdldFdvcmxkVHJhbnNmb3JtKHRyYW5zKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2NYID0gdHJhbnMuZ2V0T3JpZ2luKCkueCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2NZID0gdHJhbnMuZ2V0T3JpZ2luKCkueSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2NaID0gdHJhbnMuZ2V0T3JpZ2luKCkueigpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHF4ID0gdHJhbnMuZ2V0Um90YXRpb24oKS54KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHF5ID0gdHJhbnMuZ2V0Um90YXRpb24oKS55KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHF6ID0gdHJhbnMuZ2V0Um90YXRpb24oKS56KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHF3ID0gdHJhbnMuZ2V0Um90YXRpb24oKS53KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgb2JqLm1lc2gucG9zaXRpb24uc2V0KGxvY1gsIGxvY1ksIGxvY1opO1xuICAgICAgICAgICAgICAgICAgICBvYmoubWVzaC5xdWF0ZXJuaW9uLnNldChxeCwgcXksIHF6LCBxdyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyDQodC+0YXRgNCw0L3Rj9C10Lwg0LTQu9GPINC00LjQsNCz0L3QvtGB0YLQuNC60LhcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkID09PSBcImFtbW9fc2hhZG93XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFtbW9TaGFkb3dQb3MgPSB7IHg6IGxvY1gsIHk6IGxvY1ksIHo6IGxvY1ogfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGNhc2UgXCJidWxsZXRcIjpcbiAgICAgICAgICAgICAgICAvLyDQntCx0L3QvtCy0LvQtdC90LjQtSDQv9C+INGB0LXRgNCy0LXRgNC90YvQvCDQtNCw0L3QvdGL0Lwg0LHQtdC3INC40L3RgtC10YDQv9C+0LvRj9GG0LjQuFxuICAgICAgICAgICAgICAgIGlmIChvYmouc2VydmVyUG9zICYmIG9iai5vYmplY3RfdHlwZSAhPT0gXCJ0ZXJyYWluXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8g0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10Lwg0YLQvtGH0L3Rg9GOINC/0L7Qt9C40YbQuNGOINC80LXRiNCwINC40Lcg0YHQtdGA0LLQtdGA0L3Ri9GFINC00LDQvdC90YvRhVxuICAgICAgICAgICAgICAgICAgICBvYmoubWVzaC5wb3NpdGlvbi5zZXQoXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouc2VydmVyUG9zLngsXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouc2VydmVyUG9zLnksXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouc2VydmVyUG9zLnpcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDRhNC40LfQuNGH0LXRgdC60L7QtSDRgtC10LvQvlxuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLmJvZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyB3aW5kb3cuQW1tby5idFRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtLnNldElkZW50aXR5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm0uc2V0T3JpZ2luKG5ldyB3aW5kb3cuQW1tby5idFZlY3RvcjMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNlcnZlclBvcy54LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zZXJ2ZXJQb3MueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2VydmVyUG9zLnpcbiAgICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQn9GA0LjQvNC10L3Rj9C10Lwg0YLRgNCw0L3RgdGE0L7RgNC80LDRhtC40Y4g0Log0YTQuNC30LjRh9C10YHQutC+0LzRgyDRgtC10LvRg1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmJvZHkuZ2V0TW90aW9uU3RhdGUoKS5zZXRXb3JsZFRyYW5zZm9ybSh0cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQldGB0LvQuCDQtdGB0YLRjCDRgdC10YDQstC10YDQvdCw0Y8g0YHQutC+0YDQvtGB0YLRjCwg0L/RgNC40LzQtdC90Y/QtdC8INC10ZFcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmouc2VydmVyVmVsb2NpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2ZWxvY2l0eSA9IG5ldyB3aW5kb3cuQW1tby5idFZlY3RvcjMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zZXJ2ZXJWZWxvY2l0eS54LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2VydmVyVmVsb2NpdHkueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNlcnZlclZlbG9jaXR5LnpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LnNldExpbmVhclZlbG9jaXR5KHZlbG9jaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuQW1tby5kZXN0cm95KHZlbG9jaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveSh0cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyDQodC+0YXRgNCw0L3Rj9C10Lwg0LTQu9GPINC00LjQsNCz0L3QvtGB0YLQuNC60LhcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkID09PSBcImJ1bGxldF9zaGFkb3dcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVsbGV0U2hhZG93UG9zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IG9iai5zZXJ2ZXJQb3MueCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBvYmouc2VydmVyUG9zLnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgejogb2JqLnNlcnZlclBvcy56XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSBcImJvdGhcIjpcbiAgICAgICAgICAgICAgICAvLyDQk9C40LHRgNC40LTQvdGL0Lkg0L/QvtC00YXQvtC0INC00LvRjyDQvtCx0YrQtdC60YLQvtCyLCDRg9C/0YDQsNCy0LvRj9C10LzRi9GFINC+0LHQvtC40LzQuCDQuNGB0YLQvtGH0L3QuNC60LDQvNC4XG4gICAgICAgICAgICAgICAgaWYgKG9iai5zZXJ2ZXJQb3MgJiYgb2JqLm9iamVjdF90eXBlICE9PSBcInRlcnJhaW5cIiAmJiBvYmouYm9keSkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8g0KHQvtGF0YDQsNC90Y/QtdC8INC/0L7Qt9C40YbQuNGOINC+0YHQvdC+0LLQvdC+0Lkg0YHRhNC10YDRiyDQtNC70Y8g0LTQuNCw0LPQvdC+0YHRgtC40LrQuFxuICAgICAgICAgICAgICAgICAgICBpZiAoaWQgPT09IFwibWFpblBsYXllcjFcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFpblNwaGVyZVBvcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBvYmoubWVzaC5wb3NpdGlvbi54LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IG9iai5tZXNoLnBvc2l0aW9uLnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgejogb2JqLm1lc2gucG9zaXRpb24ueixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJYOiBvYmouc2VydmVyUG9zLngsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyWTogb2JqLnNlcnZlclBvcy55LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlclo6IG9iai5zZXJ2ZXJQb3MuelxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8g0J/QvtC70YPRh9Cw0LXQvCDRgtC10LrRg9GJ0YPRjiDQv9C+0LfQuNGG0LjRjiDQuNC3INGE0LjQt9C40YfQtdGB0LrQvtCz0L4g0YLQtdC70LBcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IHdpbmRvdy5BbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LmdldE1vdGlvblN0YXRlKCkuZ2V0V29ybGRUcmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vINCS0YvRh9C40YHQu9GP0LXQvCDRgNCw0LfQvdC40YbRgyDQvNC10LbQtNGDINGB0LXRgNCy0LXRgNC90L7QuSDQuCDRgtC10LrRg9GJ0LXQuSDQv9C+0LfQuNGG0LjQtdC5INGE0LjQt9C40YfQtdGB0LrQvtCz0L4g0YLQtdC70LBcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFggPSB0cmFuc2Zvcm0uZ2V0T3JpZ2luKCkueCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50WSA9IHRyYW5zZm9ybS5nZXRPcmlnaW4oKS55KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRaID0gdHJhbnNmb3JtLmdldE9yaWdpbigpLnooKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vINCd0LDQvCDQstCw0LbQvdC+INC30L3QsNGC0Ywg0YHQutC+0YDQvtGB0YLRjCDQvtCx0YrQtdC60YLQsCDQtNC70Y8g0LLRi9Cx0L7RgNCwINC+0L/RgtC40LzQsNC70YzQvdC+0Lkg0YHRgtGA0LDRgtC10LPQuNC4INC60L7RgNGA0LXQutGG0LjQuFxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2ZWxvY2l0eSA9IG9iai5ib2R5LmdldExpbmVhclZlbG9jaXR5KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwZWVkU3EgPSB2ZWxvY2l0eS54KCkgKiB2ZWxvY2l0eS54KCkgKyB2ZWxvY2l0eS55KCkgKiB2ZWxvY2l0eS55KCkgKyB2ZWxvY2l0eS56KCkgKiB2ZWxvY2l0eS56KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwZWVkID0gTWF0aC5zcXJ0KHNwZWVkU3EpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc01vdmluZ0Zhc3QgPSBzcGVlZFNxID4gNC4wOyAvLyDQldGB0LvQuCDRgdC60L7RgNC+0YHRgtGMINCx0L7Qu9GM0YjQtSAyINC8L9GBXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0WCA9IG9iai5zZXJ2ZXJQb3MueDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhcmdldFkgPSBvYmouc2VydmVyUG9zLnk7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0YXJnZXRaID0gb2JqLnNlcnZlclBvcy56O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmouc2VydmVyVmVsb2NpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vINCS0YvRh9C40YHQu9GP0LXQvCDQv9GA0L7Qs9C90L7Qt9C40YDRg9C10LzRg9GOINC/0L7Qt9C40YbQuNGOINC90LAg0L7RgdC90L7QstC1INGB0LXRgNCy0LXRgNC90L7QuSDRgdC60L7RgNC+0YHRgtC4XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmVkaWN0ZWRYID0gb2JqLnNlcnZlclBvcy54ICsgb2JqLnNlcnZlclZlbG9jaXR5LnggKiBkZWx0YVRpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmVkaWN0ZWRZID0gb2JqLnNlcnZlclBvcy55ICsgb2JqLnNlcnZlclZlbG9jaXR5LnkgKiBkZWx0YVRpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmVkaWN0ZWRaID0gb2JqLnNlcnZlclBvcy56ICsgb2JqLnNlcnZlclZlbG9jaXR5LnogKiBkZWx0YVRpbWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vINCS0YvRh9C40YHQu9GP0LXQvCDRgNCw0LfQvdC40YbRgyDQvNC10LbQtNGDINC/0YDQvtCz0L3QvtC30LjRgNGD0LXQvNC+0Lkg0Lgg0YLQtdC60YPRidC10Lkg0L/QvtC30LjRhtC40Y/QvNC4XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkeFByZWRpY3RlZCA9IHByZWRpY3RlZFggLSBjdXJyZW50WDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGR5UHJlZGljdGVkID0gcHJlZGljdGVkWSAtIGN1cnJlbnRZO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZHpQcmVkaWN0ZWQgPSBwcmVkaWN0ZWRaIC0gY3VycmVudFo7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vINCS0YvRh9C40YHQu9GP0LXQvCDRgNCw0YHRgdGC0L7Rj9C90LjQtVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlzdGFuY2VQcmVkaWN0ZWQgPSBNYXRoLnNxcnQoZHhQcmVkaWN0ZWQqZHhQcmVkaWN0ZWQgKyBkeVByZWRpY3RlZCpkeVByZWRpY3RlZCArIGR6UHJlZGljdGVkKmR6UHJlZGljdGVkKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g0JjRgdC/0L7Qu9GM0LfRg9C10Lwg0L/RgNC+0LPQvdC+0LfQuNGA0YPQtdC80YPRjiDQv9C+0LfQuNGG0LjRjiwg0LXRgdC70Lgg0L7QvdCwINCx0LvQuNC20LUg0Log0YLQtdC60YPRidC10LlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZVByZWRpY3RlZCA8IGRpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0WCA9IHByZWRpY3RlZFg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0WSA9IHByZWRpY3RlZFk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0WiA9IHByZWRpY3RlZFo7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyDQotC10L/QtdGA0Ywg0YDQsNC30L3QuNGG0YMg0YHRh9C40YLQsNC10Lwg0L7RgiDRhtC10LvQtdCy0L7QuSDQv9C+0LfQuNGG0LjQuCwg0LAg0L3QtSDQvtGCINGB0LXRgNCy0LXRgNC90L7QuVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkeCA9IHRhcmdldFggLSBjdXJyZW50WDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZHkgPSB0YXJnZXRZIC0gY3VycmVudFk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGR6ID0gdGFyZ2V0WiAtIGN1cnJlbnRaO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vINCS0YvRh9C40YHQu9GP0LXQvCDRgNCw0YHRgdGC0L7Rj9C90LjQtVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydChkeCpkeCArIGR5KmR5ICsgZHoqZHopO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8g0JvQvtCz0LjRgNGD0LXQvCDRgtC+0LvRjNC60L4g0L/RgNC4INC30L3QsNGH0LjRgtC10LvRjNC90YvRhSDRgNCw0YHRhdC+0LbQtNC10L3QuNGP0YVcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlID4gREVBRF9aT05FIHx8IGlzTW92aW5nRmFzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3R0bGVkTG9nKFwiUGh5c2ljc1wiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBg0J7QsdGK0LXQutGCICR7aWR9OiDQoNCw0YHRgdGC0L7Rj9C90LjQtTogJHtkaXN0YW5jZS50b0ZpeGVkKDMpfSwg0KHQutC+0YDQvtGB0YLRjDogJHtzcGVlZC50b0ZpeGVkKDMpfSwg0JHRi9GB0YLRgNC+OiAke2lzTW92aW5nRmFzdH0sINCa0LvQuNC10L3Rgjoge3g6ICR7Y3VycmVudFgudG9GaXhlZCgyKX0sIHk6ICR7Y3VycmVudFkudG9GaXhlZCgyKX0sIHo6ICR7Y3VycmVudFoudG9GaXhlZCgyKX19LCDQodC10YDQstC10YA6IHt4OiAke29iai5zZXJ2ZXJQb3MueC50b0ZpeGVkKDIpfSwgeTogJHtvYmouc2VydmVyUG9zLnkudG9GaXhlZCgyKX0sIHo6ICR7b2JqLnNlcnZlclBvcy56LnRvRml4ZWQoMil9fWBcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vINCf0YDQuNC80LXQvdGP0LXQvCBjbGllbnQtc2lkZSBwcmVkaWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA+IE1hdGgubWF4KFBSRURJQ1RJT05fTUFYX0VSUk9SLCBzcGVlZCAqIDAuMSkgfHwgaXNOZXdPYmplY3QgJiYgZGlzdGFuY2UgPiA1LjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDRg9GH0LXRgiDRgdC60L7RgNC+0YHRgtC4INC/0YDQuCDQvtC/0YDQtdC00LXQu9C10L3QuNC4INC90LXQvtCx0YXQvtC00LjQvNC+0YHRgtC4INGB0LHRgNC+0YHQsFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BlZWRCYXNlZEVycm9yID0gTWF0aC5tYXgoUFJFRElDVElPTl9NQVhfRVJST1IsIHNwZWVkICogMC4yKTsgLy8g0JTQvtC/0YPRgdC60LDQtdC8INCx0L7Qu9GM0YjRg9GOINC+0YjQuNCx0LrRgyDQv9GA0Lgg0LLRi9GB0L7QutC+0Lkg0YHQutC+0YDQvtGB0YLQuFxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQntC/0YDQtdC00LXQu9GP0LXQvCDQutC+0Y3RhNGE0LjRhtC40LXQvdGCINGB0LPQu9Cw0LbQuNCy0LDQvdC40Y8g0L3QsCDQvtGB0L3QvtCy0LUg0YHQvtGB0YLQvtGP0L3QuNGPINC+0LHRitC10LrRgtCwXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc21vb3RoRmFjdG9yID0gUFJFRElDVElPTl9TTU9PVEhfRkFDVE9SO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQlNC70Y8g0L3QvtCy0YvRhSDQvtCx0YrQtdC60YLQvtCyINC40YHQv9C+0LvRjNC30YPQtdC8INCx0L7Qu9C10LUg0LbQtdGB0YLQutGD0Y4g0LrQvtGA0YDQtdC60YbQuNGOXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOZXdPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbW9vdGhGYWN0b3IgPSAwLjg7IC8vIDgwJSDRgdC10YDQstC10YDQvdC+0Lkg0L/QvtC30LjRhtC40LhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aHJvdHRsZWRMb2coXCJQaHlzaWNzXCIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBg0J3QvtCy0YvQuSDQvtCx0YrQtdC60YIgJHtpZH0sINC/0YDQuNC80LXQvdGP0LXQvCDQttC10YHRgtC60YPRjiDQutC+0YDRgNC10LrRhtC40Y4gKCR7c21vb3RoRmFjdG9yfSlgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoRElTVEFOQ0VfQkFTRURfU01PT1RIX0ZBQ1RPUikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCn0LXQvCDQsdC+0LvRjNGI0LUg0YDQsNGB0YXQvtC20LTQtdC90LjQtSwg0YLQtdC8INCx0L7Qu9GM0YjQtSDQutC+0Y3RhNGE0LjRhtC40LXQvdGCXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc21vb3RoRmFjdG9yID0gTWF0aC5taW4oZGlzdGFuY2UgLyAyMC4wLCAwLjUpOyAvLyDQnNCw0LrRgdC40LzRg9C8IDAuNVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQlNC70Y8g0LHQvtC70YzRiNC40YUg0YDQsNGB0YXQvtC20LTQtdC90LjQuSDQuNC70Lgg0L3QvtCy0YvRhSDQvtCx0YrQtdC60YLQvtCyINC/0YDQuNC80LXQvdGP0LXQvCDRgtC10LvQtdC/0L7RgNGC0LDRhtC40Y5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA+IHNwZWVkQmFzZWRFcnJvciB8fCBpc05ld09iamVjdCAmJiBkaXN0YW5jZSA+IDUuMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcImFwcGx5IHRlbGVwb3J0YXRpb24gOlwiLCBkaXN0YW5jZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQotC10LvQtdC/0L7RgNGC0LjRgNGD0LXQvCDQvtCx0YrQtdC60YJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm0uc2V0T3JpZ2luKG5ldyB3aW5kb3cuQW1tby5idFZlY3RvcjMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zZXJ2ZXJQb3MueCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNlcnZlclBvcy55LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2VydmVyUG9zLnpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouYm9keS5nZXRNb3Rpb25TdGF0ZSgpLnNldFdvcmxkVHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0J/RgNC+0LLQtdGA0LjQvCwg0LHRi9C70LAg0LvQuCDQv9GA0LjQvNC10L3QtdC90LAg0YLQtdC70LXQv9C+0YDRgtCw0YbQuNGPXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWZ0ZXJUZWxlcG9ydCA9IG5ldyB3aW5kb3cuQW1tby5idFRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LmdldE1vdGlvblN0YXRlKCkuZ2V0V29ybGRUcmFuc2Zvcm0oYWZ0ZXJUZWxlcG9ydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVsZXBvcnRYID0gYWZ0ZXJUZWxlcG9ydC5nZXRPcmlnaW4oKS54KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVsZXBvcnRZID0gYWZ0ZXJUZWxlcG9ydC5nZXRPcmlnaW4oKS55KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVsZXBvcnRaID0gYWZ0ZXJUZWxlcG9ydC5nZXRPcmlnaW4oKS56KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQn9GA0L7QstC10YDQuNC8LCDQvdCw0YHQutC+0LvRjNC60L4g0YLQtdC70LXQv9C+0YDRgtCw0YbQuNGPINCx0YvQu9CwINGD0YHQv9C10YjQvdC+0LlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZWxlcG9ydFN1Y2Nlc3MgPSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5hYnModGVsZXBvcnRYIC0gb2JqLnNlcnZlclBvcy54KSA8IDAuMSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmFicyh0ZWxlcG9ydFkgLSBvYmouc2VydmVyUG9zLnkpIDwgMC4xICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguYWJzKHRlbGVwb3J0WiAtIG9iai5zZXJ2ZXJQb3MueikgPCAwLjE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW1BoeXNpY3NdINCi0LXQu9C10L/QvtGA0YLQsNGG0LjRjyAke3RlbGVwb3J0U3VjY2VzcyA/ICfRg9GB0L/QtdGI0L3QsCcgOiAn0L3QtdGD0LTQsNGH0L3QsCd9IC0g0KbQtdC70Yw6IHt4OiAke29iai5zZXJ2ZXJQb3MueC50b0ZpeGVkKDIpfSwgeTogJHtvYmouc2VydmVyUG9zLnkudG9GaXhlZCgyKX0sIHo6ICR7b2JqLnNlcnZlclBvcy56LnRvRml4ZWQoMil9fSwg0KTQsNC60YLQuNGH0LXRgdC60Lg6IHt4OiAke3RlbGVwb3J0WC50b0ZpeGVkKDIpfSwgeTogJHt0ZWxlcG9ydFkudG9GaXhlZCgyKX0sIHo6ICR7dGVsZXBvcnRaLnRvRml4ZWQoMil9fWApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveShhZnRlclRlbGVwb3J0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQodCx0YDQsNGB0YvQstCw0LXQvCDRgdC60L7RgNC+0YHRgtGMINGC0L7Qu9GM0LrQviDQv9GA0Lgg0YHRg9GJ0LXRgdGC0LLQtdC90L3Ri9GFINGA0LDRgdGF0L7QttC00LXQvdC40Y/RhVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA+IHNwZWVkQmFzZWRFcnJvciAqIDEuNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lU2luY2VMYXN0VXBkYXRlID0gRGF0ZS5ub3coKSAtIG9iai5sYXN0U2VydmVyVXBkYXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFtSZXNldCBWZWxvY2l0eV0g0J7QsdGK0LXQutGCICR7aWR9OiBkaXN0YW5jZT0ke2Rpc3RhbmNlLnRvRml4ZWQoMil9LCB0aHJlc2hvbGQ9JHtzcGVlZEJhc2VkRXJyb3IudG9GaXhlZCgyKX0sIHRpbWVTaW5jZVVwZGF0ZT0ke3RpbWVTaW5jZUxhc3RVcGRhdGV9bXNgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCf0YDQuCDQvtGH0LXQvdGMINCx0L7Qu9GM0YjQuNGFINGA0LDRgdGF0L7QttC00LXQvdC40Y/RhSDQv9C+0LvQvdC+0YHRgtGM0Y4g0YHQsdGA0LDRgdGL0LLQsNC10Lwg0YHQutC+0YDQvtGB0YLRjFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB6ZXJvID0gbmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmJvZHkuc2V0TGluZWFyVmVsb2NpdHkoemVybyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LnNldEFuZ3VsYXJWZWxvY2l0eSh6ZXJvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveSh6ZXJvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9iai5zZXJ2ZXJWZWxvY2l0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQldGB0LvQuCDQtdGB0YLRjCDRgNCw0YHRgdGH0LjRgtCw0L3QvdCw0Y8g0YHQtdGA0LLQtdGA0L3QsNGPINGB0LrQvtGA0L7RgdGC0YwsINC/0YDQuNC80LXQvdGP0LXQvCDQtdGRXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcImFwcGx5IHNlcnZlciB2ZWxvY2l0eSA6XCIsIG9iai5zZXJ2ZXJWZWxvY2l0eSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VydmVyVmVsID0gbmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zZXJ2ZXJWZWxvY2l0eS54LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNlcnZlclZlbG9jaXR5LnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2VydmVyVmVsb2NpdHkuelxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouYm9keS5zZXRMaW5lYXJWZWxvY2l0eShzZXJ2ZXJWZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuQW1tby5kZXN0cm95KHNlcnZlclZlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0JjQvdCw0YfQtSDRg9C80LXQvdGM0YjQsNC10Lwg0YLQtdC60YPRidGD0Y4g0YHQutC+0YDQvtGB0YLRjFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJhcHBseSBkYW1wZWQgdmVsb2NpdHkgOlwiLCB2ZWxvY2l0eSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGFtcGVkVmVsb2NpdHkgPSBuZXcgd2luZG93LkFtbW8uYnRWZWN0b3IzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHkueCgpICogMC41LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHkueSgpICogMC41LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHkueigpICogMC41XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LnNldExpbmVhclZlbG9jaXR5KGRhbXBlZFZlbG9jaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveShkYW1wZWRWZWxvY2l0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCd0LXQvNC10LTQu9C10L3QvdC+INGB0LjQvdGF0YDQvtC90LjQt9C40YDRg9C10Lwg0LzQtdGIINGBINGE0LjQt9C40YfQtdGB0LrQuNC8INGC0LXQu9C+0LxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkVHJhbnNmb3JtID0gbmV3IHdpbmRvdy5BbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmJvZHkuZ2V0TW90aW9uU3RhdGUoKS5nZXRXb3JsZFRyYW5zZm9ybSh1cGRhdGVkVHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBweCA9IHVwZGF0ZWRUcmFuc2Zvcm0uZ2V0T3JpZ2luKCkueCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHB5ID0gdXBkYXRlZFRyYW5zZm9ybS5nZXRPcmlnaW4oKS55KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHogPSB1cGRhdGVkVHJhbnNmb3JtLmdldE9yaWdpbigpLnooKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoubWVzaC5wb3NpdGlvbi5zZXQocHgsIHB5LCBweik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveSh1cGRhdGVkVHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGlzdGFuY2UgPiBURUxFUE9SVF9USFJFU0hPTEQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQnNGP0LPQutCw0Y8g0LrQvtGA0YDQtdC60YbQuNGPINC00LvRjyDRgdGA0LXQtNC90LjRhSDRgNCw0YHRhdC+0LbQtNC10L3QuNC5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0KHQvNC10YjQuNCy0LDQtdC8INGC0LXQutGD0YnRg9GOINC/0L7Qt9C40YbQuNGOINGBINGB0LXRgNCy0LXRgNC90L7QuVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvcnJlY3Rpb25YID0gb2JqLnNlcnZlclBvcy54ICogc21vb3RoRmFjdG9yICsgY3VycmVudFggKiAoMSAtIHNtb290aEZhY3Rvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29ycmVjdGlvblkgPSBvYmouc2VydmVyUG9zLnkgKiBzbW9vdGhGYWN0b3IgKyBjdXJyZW50WSAqICgxIC0gc21vb3RoRmFjdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb3JyZWN0aW9uWiA9IG9iai5zZXJ2ZXJQb3MueiAqIHNtb290aEZhY3RvciArIGN1cnJlbnRaICogKDEgLSBzbW9vdGhGYWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvcnJlY3Rpb25WZWN0b3IgPSBuZXcgd2luZG93LkFtbW8uYnRWZWN0b3IzKGNvcnJlY3Rpb25YLCBjb3JyZWN0aW9uWSwgY29ycmVjdGlvblopO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcInNtb290aCBjb3JyZWN0aW9uXCIsIGNvcnJlY3Rpb25WZWN0b3IpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtLnNldE9yaWdpbihuZXcgd2luZG93LkFtbW8uYnRWZWN0b3IzKGNvcnJlY3Rpb25YLCBjb3JyZWN0aW9uWSwgY29ycmVjdGlvblopKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouYm9keS5nZXRNb3Rpb25TdGF0ZSgpLnNldFdvcmxkVHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0JXRgdC70Lgg0LzRiyDQv9C10YDQtdC80LXRidCw0LXQvCDQvtCx0YrQtdC60YIsINC+0LHQvdC+0LLQu9GP0LXQvCBtZXNoINC90LXQv9C+0YHRgNC10LTRgdGC0LLQtdC90L3QviDQtNC70Y8g0LHQvtC70YzRiNC10Lkg0L/Qu9Cw0LLQvdC+0YHRgtC4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm1lc2gucG9zaXRpb24uc2V0KGNvcnJlY3Rpb25YLCBjb3JyZWN0aW9uWSwgY29ycmVjdGlvblopO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDRgdC60L7RgNC+0YHRgtGMLCDRh9GC0L7QsdGLINC+0L3QsCDRg9GH0LjRgtGL0LLQsNC70LAg0L3QsNC/0YDQsNCy0LvQtdC90LjQtSDRgdC10YDQstC10YDQvdC+0LPQviDQtNCy0LjQttC10L3QuNGPXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5zZXJ2ZXJWZWxvY2l0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBibGVuZGVkVmVsb2NpdHkgPSBuZXcgd2luZG93LkFtbW8uYnRWZWN0b3IzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHkueCgpICogKDEgLSBzbW9vdGhGYWN0b3IpICsgb2JqLnNlcnZlclZlbG9jaXR5LnggKiBzbW9vdGhGYWN0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWxvY2l0eS55KCkgKiAoMSAtIHNtb290aEZhY3RvcikgKyBvYmouc2VydmVyVmVsb2NpdHkueSAqIHNtb290aEZhY3RvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5LnooKSAqICgxIC0gc21vb3RoRmFjdG9yKSArIG9iai5zZXJ2ZXJWZWxvY2l0eS56ICogc21vb3RoRmFjdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LnNldExpbmVhclZlbG9jaXR5KGJsZW5kZWRWZWxvY2l0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3koYmxlbmRlZFZlbG9jaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCU0LvRjyDQvdC10LHQvtC70YzRiNC40YUg0YDQsNGB0YXQvtC20LTQtdC90LjQuSAtINC60L7RgNGA0LXQutGC0LjRgNGD0Y7RidCw0Y8g0YHQuNC70LBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQkdC+0LvQtdC1INC/0LvQsNCy0L3QsNGPINC60L7RgNGA0LXQutGG0LjRjyDQtNC70Y8g0LzQtdC00LvQtdC90L3QviDQtNCy0LjQttGD0YnQuNGF0YHRjyDQvtCx0YrQtdC60YLQvtCyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRhcHRpdmVTdHJlbmd0aCA9IGlzTW92aW5nRmFzdCA/IENPUlJFQ1RJT05fU1RSRU5HVEggOiBDT1JSRUNUSU9OX1NUUkVOR1RIICogMC43O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hZ25pdHVkZSA9IGRpc3RhbmNlICogYWRhcHRpdmVTdHJlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQlNC70Y8g0L7QsdGK0LXQutGC0L7QsiDQvdCwINC30LXQvNC70LUg0L3QtSDQv9GA0LjQvNC10L3Rj9C10Lwg0LLQtdGA0YLQuNC60LDQu9GM0L3Rg9GOINC60L7RgNGA0LXQutGG0LjRjixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQtdGB0LvQuCDQvtC90Lgg0L3QsNGF0L7QtNGP0YLRgdGPINC90LAg0L/QvtCy0LXRgNGF0L3QvtGB0YLQuCDRgSDQvdC10LHQvtC70YzRiNC+0Lkg0YDQsNC30L3QuNGG0LXQuSDQv9C+INCy0YvRgdC+0YLQtVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb3JyZWN0WSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKGR5KSA8IERFQURfWk9ORSAmJiBNYXRoLmFicyh2ZWxvY2l0eS55KCkpIDwgMC41KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcnJlY3RZID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcmNlID0gbmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHggKiBtYWduaXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcnJlY3RZID8gZHkgKiBtYWduaXR1ZGUgOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkeiAqIG1hZ25pdHVkZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0JDQutGC0LjQstC40YDRg9C10Lwg0YLQtdC70L4g0Lgg0L/RgNC40LzQtdC90Y/QtdC8INGB0LjQu9GDXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmJvZHkuYWN0aXZhdGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmJvZHkuYXBwbHlDZW50cmFsRm9yY2UoZm9yY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3koZm9yY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0L/QvtC00YDQvtCx0L3Rg9GOINC00LjQsNCz0L3QvtGB0YLQuNC60YMg0LTQu9GPINC+0YHQvdC+0LLQvdC+0LPQviDQuNCz0YDQvtC60LBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkID09PSBcIm1haW5QbGF5ZXIxXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoYFtQaHlzaWNzIERlYnVnXSAke2lkfTogZGlzdGFuY2U9JHtkaXN0YW5jZS50b0ZpeGVkKDIpfSwgc3BlZWQ9JHtzcGVlZC50b0ZpeGVkKDIpfSwgdGhyZXNob2xkPSR7TWF0aC5tYXgoUFJFRElDVElPTl9NQVhfRVJST1IsIHNwZWVkICogMC4xKS50b0ZpeGVkKDIpfSwgaXNOZXdPYmplY3Q9JHtpc05ld09iamVjdH1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveSh2ZWxvY2l0eSk7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3kodHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vdGhyb3R0bGVkTG9nKFwiRXJyb3JcIiwgYNCd0LXQuNC30LLQtdGB0YLQvdGL0Lkg0YLQuNC/IHBoeXNpY3NCeSDQtNC70Y8g0L7QsdGK0LXQutGC0LAgJHtpZH06ICR7b2JqLnBoeXNpY3NCeX1gKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vINCSINC60L7QvdGG0LUg0L7QsdGA0LDQsdC+0YLQutC4INC+0LHRitC10LrRgtCwXG4gICAgICAgIG9iai5oYXNOZXdTZXJ2ZXJEYXRhID0gZmFsc2U7IC8vINCh0LHRgNCw0YHRi9Cy0LDQtdC8INGE0LvQsNCzLCDQv9C+0LrQsNC30YvQstCw0Y8g0YfRgtC+INC80Ysg0L7QsdGA0LDQsdC+0YLQsNC70Lgg0L3QvtCy0YvQtSDQtNCw0L3QvdGL0LVcbiAgICB9XG4gICAgXG4gICAgLy8g0JLRi9Cy0L7QtNC40Lwg0LTQuNCw0LPQvdC+0YHRgtC40YfQtdGB0LrRg9GOINC40L3RhNC+0YDQvNCw0YbQuNGOINC+INGA0LDRgdGF0L7QttC00LXQvdC40Y/RhVxuICAgIGlmIChtYWluU3BoZXJlUG9zICYmIGFtbW9TaGFkb3dQb3MgJiYgYnVsbGV0U2hhZG93UG9zKSB7XG4gICAgICAgIC8vINCS0YvRh9C40YHQu9GP0LXQvCDRgNCw0YHRhdC+0LbQtNC10L3QuNGPINC80LXQttC00YMg0LTQuNCw0LPQvdC+0YHRgtC40YfQtdGB0LrQuNC80Lgg0YHRhNC10YDQsNC80LhcbiAgICAgICAgY29uc3QgbWFpblRvQW1tb0Rpc3RhbmNlID0gTWF0aC5zcXJ0KFxuICAgICAgICAgICAgTWF0aC5wb3cobWFpblNwaGVyZVBvcy54IC0gYW1tb1NoYWRvd1Bvcy54LCAyKSArXG4gICAgICAgICAgICBNYXRoLnBvdyhtYWluU3BoZXJlUG9zLnkgLSBhbW1vU2hhZG93UG9zLnksIDIpICtcbiAgICAgICAgICAgIE1hdGgucG93KG1haW5TcGhlcmVQb3MueiAtIGFtbW9TaGFkb3dQb3MueiwgMilcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG1haW5Ub0J1bGxldERpc3RhbmNlID0gTWF0aC5zcXJ0KFxuICAgICAgICAgICAgTWF0aC5wb3cobWFpblNwaGVyZVBvcy54IC0gYnVsbGV0U2hhZG93UG9zLngsIDIpICtcbiAgICAgICAgICAgIE1hdGgucG93KG1haW5TcGhlcmVQb3MueSAtIGJ1bGxldFNoYWRvd1Bvcy55LCAyKSArXG4gICAgICAgICAgICBNYXRoLnBvdyhtYWluU3BoZXJlUG9zLnogLSBidWxsZXRTaGFkb3dQb3MueiwgMilcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHNlcnZlclRvTWFpbkRpc3RhbmNlID0gTWF0aC5zcXJ0KFxuICAgICAgICAgICAgTWF0aC5wb3cobWFpblNwaGVyZVBvcy5zZXJ2ZXJYIC0gbWFpblNwaGVyZVBvcy54LCAyKSArXG4gICAgICAgICAgICBNYXRoLnBvdyhtYWluU3BoZXJlUG9zLnNlcnZlclkgLSBtYWluU3BoZXJlUG9zLnksIDIpICtcbiAgICAgICAgICAgIE1hdGgucG93KG1haW5TcGhlcmVQb3Muc2VydmVyWiAtIG1haW5TcGhlcmVQb3MueiwgMilcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCS0YvQstC+0LTQuNC8INGB0YLQsNGC0LjRgdGC0LjQutGDINGC0L7Qu9GM0LrQviDQv9GA0LjQvNC10YDQvdC+INGA0LDQtyDQsiDRgdC10LrRg9C90LTRgyAo0YfRgtC+0LHRiyDQvdC1INGB0L/QsNC80LjRgtGMINC60L7QvdGB0L7Qu9GMKVxuICAgICAgICBpZiAoTWF0aC5yYW5kb20oKSA8IDAuMDE2KSB7IC8vINC/0YDQuNC80LXRgNC90L4g0L/RgNC4IDYwIEZQUyDQsdGD0LTQtdGCINCy0YvQstC+0LTQuNGC0Ywg0YDQsNC3INCyINGB0LXQutGD0L3QtNGDXG4gICAgICAgICAgICB0aHJvdHRsZWRMb2coXCJQaHlzaWNzXCIsIFwi0JTQuNCw0LPQvdC+0YHRgtC40LrQsCDRgNCw0YHRhdC+0LbQtNC10L3QuNC5OlwiLCB7XG4gICAgICAgICAgICAgICAgXCLQntGB0L3QvtCy0L3QsNGPINGB0YTQtdGA0LAgLT4gQW1tby3RgtC10L3RjFwiOiBtYWluVG9BbW1vRGlzdGFuY2UudG9GaXhlZCgzKSxcbiAgICAgICAgICAgICAgICBcItCe0YHQvdC+0LLQvdCw0Y8g0YHRhNC10YDQsCAtPiBCdWxsZXQt0YLQtdC90YxcIjogbWFpblRvQnVsbGV0RGlzdGFuY2UudG9GaXhlZCgzKSxcbiAgICAgICAgICAgICAgICBcItCh0LXRgNCy0LXRgNC90LDRjyDQv9C+0LfQuNGG0LjRjyAtPiDQntGB0L3QvtCy0L3QsNGPINGB0YTQtdGA0LBcIjogc2VydmVyVG9NYWluRGlzdGFuY2UudG9GaXhlZCgzKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gfVxuXG5cbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDQv9GA0LjQvNC10L3QtdC90LjRjyDQuNC80L/Rg9C70YzRgdCwXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlJbXB1bHNlVG9TcGhlcmUoaWQsIGRpcmVjdGlvbiwgc3RyZW5ndGgpIHtcbiAgICBjb25zdCBvYmplY3QgPSBvYmplY3RzW2lkXTtcbiAgICBpZiAoIW9iamVjdCB8fCAhb2JqZWN0LmJvZHkpIHJldHVybjtcbiAgICBcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIEFtbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdBbW1vLmpzINC90LUg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC9Jyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vINCd0L7RgNC80LDQu9C40LfRg9C10Lwg0L3QsNC/0YDQsNCy0LvQtdC90LjQtSDQuCDQv9GA0LjQvNC10L3Rj9C10Lwg0YHQuNC70YNcbiAgICAgICAgY29uc3QgaW1wdWxzZVZlYyA9IG5ldyBBbW1vLmJ0VmVjdG9yMyhcbiAgICAgICAgICAgIGRpcmVjdGlvbi54ICogc3RyZW5ndGgsXG4gICAgICAgICAgICBkaXJlY3Rpb24ueSAqIHN0cmVuZ3RoLCBcbiAgICAgICAgICAgIGRpcmVjdGlvbi56ICogc3RyZW5ndGhcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCf0YDQuNC80LXQvdGP0LXQvCDQuNC80L/Rg9C70YzRgSDQuiDRgtC10LvRg1xuICAgICAgICBvYmplY3QuYm9keS5hcHBseUNlbnRyYWxJbXB1bHNlKGltcHVsc2VWZWMpO1xuICAgICAgICBcbiAgICAgICAgLy8g0JLRi9Cy0L7QtNC40Lwg0LjQvdGE0L7RgNC80LDRhtC40Y4g0L4g0L/RgNC40LzQtdC90LXQvdC90L7QvCDQuNC80L/Rg9C70YzRgdC1XG4gICAgICAgIGNvbnNvbGUubG9nKGBbUGh5c2ljc10g0JjQvNC/0YPQu9GM0YEg0L/RgNC40LzQtdC90LXQvSDQuiAke2lkfTogXG4gICAgICAgICAgICDQndCw0L/RgNCw0LLQu9C10L3QuNC1OiAoJHtkaXJlY3Rpb24ueC50b0ZpeGVkKDIpfSwgJHtkaXJlY3Rpb24ueS50b0ZpeGVkKDIpfSwgJHtkaXJlY3Rpb24uei50b0ZpeGVkKDIpfSlcbiAgICAgICAgICAgINCh0LjQu9CwOiAke3N0cmVuZ3RoLnRvRml4ZWQoMil9YCk7XG4gICAgICAgIFxuICAgICAgICAvLyDQntGB0LLQvtCx0L7QttC00LDQtdC8INC/0LDQvNGP0YLRjFxuICAgICAgICBBbW1vLmRlc3Ryb3koaW1wdWxzZVZlYyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcign0J7RiNC40LHQutCwINC/0YDQuCDQv9GA0LjQvNC10L3QtdC90LjQuCDQuNC80L/Rg9C70YzRgdCwOicsIGVycm9yKTtcbiAgICB9XG59XG5cbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0L7QsdC90L7QstC70LXQvdC40Lkg0YEg0YHQtdGA0LLQtdGA0LBcbmV4cG9ydCBmdW5jdGlvbiByZWNlaXZlT2JqZWN0VXBkYXRlKGRhdGEpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyDQn9GA0L7QstC10YDRj9C10LwsINCyINC60LDQutC+0Lwg0YTQvtGA0LzQsNGC0LUg0L/RgNC40YjQu9C4INC00LDQvdC90YvQtVxuICAgICAgICBpZiAoZGF0YS5vYmplY3RzKSB7XG4gICAgICAgICAgICAvLyDQodGC0LDQvdC00LDRgNGC0L3Ri9C5INGE0L7RgNC80LDRgiDRgSDQv9C+0LvQtdC8IG9iamVjdHNcbiAgICAgICAgICAgIGNvbnN0IG9iamVjdElkcyA9IE9iamVjdC5rZXlzKGRhdGEub2JqZWN0cyk7XG4gICAgICAgICAgICBpZiAob2JqZWN0SWRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIltQaHlzaWNzXSDQn9C+0LvRg9GH0LXQvSDQv9GD0YHRgtC+0Lkg0YHQv9C40YHQvtC6INC+0LHRitC10LrRgtC+0LJcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQntCx0YDQsNCx0LDRgtGL0LLQsNC10Lwg0LrQsNC20LTRi9C5INC+0LHRitC10LrRglxuICAgICAgICAgICAgZm9yIChjb25zdCBpZCBvZiBvYmplY3RJZHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvYmplY3REYXRhID0gZGF0YS5vYmplY3RzW2lkXTtcbiAgICAgICAgICAgICAgICB1cGRhdGVTaW5nbGVPYmplY3QoaWQsIG9iamVjdERhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRhdGEuaWQpIHtcbiAgICAgICAgICAgIC8vINCQ0LvRjNGC0LXRgNC90LDRgtC40LLQvdGL0Lkg0YTQvtGA0LzQsNGCLCDQs9C00LUg0LTQsNC90L3Ri9C1INC90LDQv9GA0Y/QvNGD0Y4g0LIg0LrQvtGA0L3QtSDQvtCx0YrQtdC60YLQsFxuICAgICAgICAgICAgLy8g0KHQvtC30LTQsNC10Lwg0LLRgNC10LzQtdC90L3Rg9GOINGB0YLRgNGD0LrRgtGD0YDRgyDQtNC70Y8g0YHQvtCy0LzQtdGB0YLQuNC80L7RgdGC0LhcbiAgICAgICAgICAgIGNvbnN0IGlkID0gZGF0YS5pZDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc29sZS5sb2coYFtQaHlzaWNzXSDQmNGB0YXQvtC00L3Ri9C1INC00LDQvdC90YvQtSDRgSDRgdC10YDQstC10YDQsCDQtNC70Y8gJHtpZH06YCwge1xuICAgICAgICAgICAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBkYXRhLnggIT09IHVuZGVmaW5lZCA/IHsgeDogZGF0YS54LCB5OiBkYXRhLnksIHo6IGRhdGEueiB9IDogXCLQvdC1INGD0LrQsNC30LDQvdCwXCIsXG4gICAgICAgICAgICAgICAgdmVsb2NpdHk6IGRhdGEudnggIT09IHVuZGVmaW5lZCA/IHsgdng6IGRhdGEudngsIHZ5OiBkYXRhLnZ5LCB2ejogZGF0YS52eiB9IDogXCLQvdC1INGD0LrQsNC30LDQvdCwXCIsXG4gICAgICAgICAgICAgICAgcmF3OiB7IC4uLmRhdGEgfSAvLyDQmtC+0L/QuNGA0YPQtdC8INCy0YHQtSDQv9C+0LvRjyDQvtCx0YrQtdC60YLQsCDQtNC70Y8g0LTQuNCw0LPQvdC+0YHRgtC40LrQuFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCf0YDQtdC+0LHRgNCw0LfRg9C10Lwg0LTQsNC90L3Ri9C1INCyINGE0L7RgNC80LDRgiwg0L7QttC40LTQsNC10LzRi9C5INGE0YPQvdC60YbQuNC10LkgdXBkYXRlU2luZ2xlT2JqZWN0XG4gICAgICAgICAgICBjb25zdCBvYmplY3REYXRhID0ge1xuICAgICAgICAgICAgICAgIHZlbG9jaXR5OiBkYXRhLnZ4ICE9PSB1bmRlZmluZWQgPyB7IFxuICAgICAgICAgICAgICAgICAgICB4OiBkYXRhLnZ4LCBcbiAgICAgICAgICAgICAgICAgICAgeTogZGF0YS52eSwgXG4gICAgICAgICAgICAgICAgICAgIHo6IGRhdGEudnogXG4gICAgICAgICAgICAgICAgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogZGF0YS54ICE9PSB1bmRlZmluZWQgPyB7IFxuICAgICAgICAgICAgICAgICAgICB4OiBkYXRhLngsIFxuICAgICAgICAgICAgICAgICAgICB5OiBkYXRhLnksIFxuICAgICAgICAgICAgICAgICAgICB6OiBkYXRhLnogXG4gICAgICAgICAgICAgICAgfSA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC+0YLQu9Cw0LTQvtGH0L3Rg9GOINC40L3RhNC+0YDQvNCw0YbQuNGOXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgW1BoeXNpY3NdINCe0LHRgNCw0LHQvtGC0LrQsCDQtNCw0L3QvdGL0YUg0LIg0LDQu9GM0YLQtdGA0L3QsNGC0LjQstC90L7QvCDRhNC+0YDQvNCw0YLQtSDQtNC70Y8gJHtpZH06YCwgZGF0YSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCe0LHRgNCw0LHQsNGC0YvQstCw0LXQvCDQvtCx0YrQtdC60YJcbiAgICAgICAgICAgIHVwZGF0ZVNpbmdsZU9iamVjdChpZCwgb2JqZWN0RGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJbUGh5c2ljc10g0J/QvtC70YPRh9C10L3RiyDQtNCw0L3QvdGL0LUg0LIg0L3QtdC40LfQstC10YHRgtC90L7QvCDRhNC+0YDQvNCw0YLQtTpcIiwgZGF0YSk7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbUGh5c2ljc10g0J7RiNC40LHQutCwINC/0YDQuCDQvtCx0YDQsNCx0L7RgtC60LUg0L7QsdC90L7QstC70LXQvdC40Y8g0L7QsdGK0LXQutGC0L7QsjpcIiwgZSk7XG4gICAgfVxufVxuXG4vLyDQktGB0L/QvtC80L7Qs9Cw0YLQtdC70YzQvdCw0Y8g0YTRg9C90LrRhtC40Y8g0LTQu9GPINC+0LHQvdC+0LLQu9C10L3QuNGPINC+0LTQvdC+0LPQviDQvtCx0YrQtdC60YLQsFxuZnVuY3Rpb24gdXBkYXRlU2luZ2xlT2JqZWN0KGlkLCBvYmplY3REYXRhKSB7XG4gICAgY29uc3Qgb2JqID0gb2JqZWN0c1tpZF07XG4gICAgXG4gICAgLy8g0JXRgdC70Lgg0L7QsdGK0LXQutGCINC10YnQtSDQvdC1INGB0L7Qt9C00LDQvSwg0L/RgNC+0L/Rg9GB0LrQsNC10Lwg0LXQs9C+XG4gICAgaWYgKCFvYmopIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBbUGh5c2ljc10g0J/QvtC70YPRh9C10L3QviDQvtCx0L3QvtCy0LvQtdC90LjQtSDQtNC70Y8g0L3QtdGB0YPRidC10YHRgtCy0YPRjtGJ0LXQs9C+INC+0LHRitC10LrRgtCwOiAke2lkfWApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCDQvdCw0LvQuNGH0LjQtSDQtNCw0L3QvdGL0YUg0L4g0YHQutC+0YDQvtGB0YLQuFxuICAgIGlmIChvYmplY3REYXRhLnZlbG9jaXR5KSB7XG4gICAgICAgIGNvbnN0IHZlbCA9IG9iamVjdERhdGEudmVsb2NpdHk7XG4gICAgICAgIFxuICAgICAgICAvLyDQktGL0LLQvtC00LjQvCDQv9C+0LTRgNC+0LHQvdGD0Y4g0LjQvdGE0L7RgNC80LDRhtC40Y4g0L4g0L/QvtC70YPRh9C10L3QvdC+0Lkg0YHQutC+0YDQvtGB0YLQuFxuICAgICAgICBjb25zb2xlLmxvZyhgW1BoeXNpY3NdINCf0L7Qu9GD0YfQtdC90LAg0YHQutC+0YDQvtGB0YLRjCDQtNC70Y8gJHtpZH06IGAgKyBcbiAgICAgICAgICAgIGB4PSR7dmVsLngudG9GaXhlZCgyKX0sIHk9JHt2ZWwueS50b0ZpeGVkKDIpfSwgej0ke3ZlbC56LnRvRml4ZWQoMil9YCk7XG4gICAgICAgIFxuICAgICAgICAvLyDQktGL0YfQuNGB0LvRj9C10Lwg0LLQtdC70LjRh9C40L3RgyDRgdC60L7RgNC+0YHRgtC4XG4gICAgICAgIGNvbnN0IHNwZWVkID0gTWF0aC5zcXJ0KHZlbC54KnZlbC54ICsgdmVsLnkqdmVsLnkgKyB2ZWwueip2ZWwueik7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbUGh5c2ljc10g0KLQtdC60YPRidCw0Y8g0YHQutC+0YDQvtGB0YLRjCAke2lkfTogJHtzcGVlZC50b0ZpeGVkKDIpfSDQvC/RgWApO1xuICAgICAgICBcbiAgICAgICAgLy8g0KHQvtGF0YDQsNC90Y/QtdC8INGB0LrQvtGA0L7RgdGC0Ywg0LIg0L7QsdGK0LXQutGC0LVcbiAgICAgICAgb2JqLnNlcnZlclZlbG9jaXR5ID0ge1xuICAgICAgICAgICAgeDogdmVsLngsXG4gICAgICAgICAgICB5OiB2ZWwueSxcbiAgICAgICAgICAgIHo6IHZlbC56XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0L7RgtC+0LHRgNCw0LbQtdC90LjQtSDRgdC60L7RgNC+0YHRgtC4LCDQtdGB0LvQuCDRjdGC0L4g0LjQs9GA0L7QulxuICAgICAgICBpZiAoaWQuc3RhcnRzV2l0aCgnbWFpblBsYXllcjEnKSkge1xuICAgICAgICAgICAgLy8g0JjRgdC/0L7Qu9GM0LfRg9C10Lwg0LfQvdCw0YfQtdC90LjQtSDQvNCw0YHRgdGLINC40Lcg0L7QsdGK0LXQutGC0LBcbiAgICAgICAgICAgIGNvbnN0IG1heERpc3BsYXlTcGVlZCA9IDEwMDAuMDsgLy8g0JHQvtC70YzRiNC+0LUg0LfQvdCw0YfQtdC90LjQtSDQtNC70Y8g0YHQvdGP0YLQuNGPINC+0LPRgNCw0L3QuNGH0LXQvdC40LlcbiAgICAgICAgICAgIGNvbnN0IG1hc3MgPSBvYmoubWFzcyB8fCA1LjA7IC8vINCY0YHQv9C+0LvRjNC30YPQtdC8INC80LDRgdGB0YMg0LjQtyDQvtCx0YrQtdC60YLQsCDQuNC70Lgg0YHRgtCw0L3QtNCw0YDRgtC90L7QtSDQt9C90LDRh9C10L3QuNC1XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQvtGC0L7QsdGA0LDQttC10L3QuNC1XG4gICAgICAgICAgICAvL3VwZGF0ZVBsYXllclNwZWVkRGlzcGxheShzcGVlZCwgbWF4RGlzcGxheVNwZWVkLCBtYXNzKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0JvQvtCz0LjRgNGD0LXQvCDQvtGH0LXQvdGMINCy0YvRgdC+0LrQuNC1INGB0LrQvtGA0L7RgdGC0LgsINC90L4g0L3QtSDQvtCz0YDQsNC90LjRh9C40LLQsNC10LxcbiAgICAgICAgICAgIGlmIChzcGVlZCA+IDUwMCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbUGh5c2ljc10g0JLRi9GB0L7QutCw0Y8g0YHQutC+0YDQvtGB0YLRjCAke2lkfTogJHtzcGVlZC50b0ZpeGVkKDIpfSDQvC/RgWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vINCe0LHRgNCw0LHQsNGC0YvQstCw0LXQvCDQtNCw0L3QvdGL0LUg0L4g0L/QvtC30LjRhtC40LhcbiAgICBpZiAob2JqZWN0RGF0YS5wb3NpdGlvbikge1xuICAgICAgICAvLyDQodC+0YXRgNCw0L3Rj9C10Lwg0L/RgNC10LTRi9C00YPRidGD0Y4g0YHQtdGA0LLQtdGA0L3Rg9GOINC/0L7Qt9C40YbQuNGOINC00LvRjyDRgdGA0LDQstC90LXQvdC40Y9cbiAgICAgICAgaWYgKG9iai5zZXJ2ZXJQb3MpIHtcbiAgICAgICAgICAgIG9iai5wcmV2U2VydmVyUG9zID0ge1xuICAgICAgICAgICAgICAgIHg6IG9iai5zZXJ2ZXJQb3MueCxcbiAgICAgICAgICAgICAgICB5OiBvYmouc2VydmVyUG9zLnksXG4gICAgICAgICAgICAgICAgejogb2JqLnNlcnZlclBvcy56XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBvYmouc2VydmVyUG9zID0ge1xuICAgICAgICAgICAgeDogb2JqZWN0RGF0YS5wb3NpdGlvbi54LFxuICAgICAgICAgICAgeTogb2JqZWN0RGF0YS5wb3NpdGlvbi55LFxuICAgICAgICAgICAgejogb2JqZWN0RGF0YS5wb3NpdGlvbi56XG4gICAgICAgIH07XG4gICAgICAgIG9iai5sYXN0U2VydmVyVXBkYXRlID0gRGF0ZS5ub3coKTtcbiAgICAgICAgb2JqLmhhc05ld1NlcnZlckRhdGEgPSB0cnVlOyAvLyDQpNC70LDQsywg0YPQutCw0LfRi9Cy0LDRjtGJ0LjQuSDQvdCwINC90L7QstGL0LUg0LTQsNC90L3Ri9C1XG4gICAgfVxuXG4gICAgLy8g0JTQvtCx0LDQstC40YLRjCDQv9C+0YHQu9C1INC+0LHRgNCw0LHQvtGC0LrQuCBwb3NpdGlvblxuICAgIGlmIChvYmplY3REYXRhLnF1YXRlcm5pb24pIHtcbiAgICAgICAgLy8g0KHQvtGF0YDQsNC90Y/QtdC8INC+0YDQuNC10L3RgtCw0YbQuNGOXG4gICAgICAgIG9iai5zZXJ2ZXJRdWF0ZXJuaW9uID0ge1xuICAgICAgICAgICAgdzogb2JqZWN0RGF0YS5xdWF0ZXJuaW9uLncsXG4gICAgICAgICAgICB4OiBvYmplY3REYXRhLnF1YXRlcm5pb24ueCxcbiAgICAgICAgICAgIHk6IG9iamVjdERhdGEucXVhdGVybmlvbi55LFxuICAgICAgICAgICAgejogb2JqZWN0RGF0YS5xdWF0ZXJuaW9uLnpcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8vINCf0YDQuNC80LXQvdGP0LXQvCDQuiDQvNC10YjQtSwg0LXRgdC70Lgg0L7QvdCwINGB0YPRidC10YHRgtCy0YPQtdGCXG4gICAgICAgIGlmIChvYmoubWVzaCkge1xuICAgICAgICAgICAgb2JqLm1lc2gucXVhdGVybmlvbi5zZXQoXG4gICAgICAgICAgICAgICAgb2JqZWN0RGF0YS5xdWF0ZXJuaW9uLngsXG4gICAgICAgICAgICAgICAgb2JqZWN0RGF0YS5xdWF0ZXJuaW9uLnksXG4gICAgICAgICAgICAgICAgb2JqZWN0RGF0YS5xdWF0ZXJuaW9uLnosXG4gICAgICAgICAgICAgICAgb2JqZWN0RGF0YS5xdWF0ZXJuaW9uLndcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vINCf0YDQuNC80LXQvdGP0LXQvCDQuiDRhNC40LfQuNGH0LXRgdC60L7QvNGDINGC0LXQu9GDLCDQtdGB0LvQuCDQvtC90L4g0YHRg9GJ0LXRgdGC0LLRg9C10YJcbiAgICAgICAgaWYgKG9iai5ib2R5KSB7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBuZXcgd2luZG93LkFtbW8uYnRUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgIG9iai5ib2R5LmdldE1vdGlvblN0YXRlKCkuZ2V0V29ybGRUcmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgcXVhdGVybmlvbiA9IG5ldyB3aW5kb3cuQW1tby5idFF1YXRlcm5pb24oXG4gICAgICAgICAgICAgICAgb2JqZWN0RGF0YS5xdWF0ZXJuaW9uLngsXG4gICAgICAgICAgICAgICAgb2JqZWN0RGF0YS5xdWF0ZXJuaW9uLnksXG4gICAgICAgICAgICAgICAgb2JqZWN0RGF0YS5xdWF0ZXJuaW9uLnosXG4gICAgICAgICAgICAgICAgb2JqZWN0RGF0YS5xdWF0ZXJuaW9uLndcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRyYW5zZm9ybS5zZXRSb3RhdGlvbihxdWF0ZXJuaW9uKTtcbiAgICAgICAgICAgIG9iai5ib2R5LmdldE1vdGlvblN0YXRlKCkuc2V0V29ybGRUcmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveShxdWF0ZXJuaW9uKTtcbiAgICAgICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3kodHJhbnNmb3JtKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vINCf0L7Qu9GD0YfQsNC10Lwg0YLQtdC60YPRidGD0Y4g0L/QvtC30LjRhtC40Y4g0L7QsdGK0LXQutGC0LBcbiAgICBpZiAob2JqLmJvZHkpIHtcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IHdpbmRvdy5BbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgICAgIG9iai5ib2R5LmdldE1vdGlvblN0YXRlKCkuZ2V0V29ybGRUcmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHBvc1ggPSB0cmFuc2Zvcm0uZ2V0T3JpZ2luKCkueCgpO1xuICAgICAgICBjb25zdCBwb3NZID0gdHJhbnNmb3JtLmdldE9yaWdpbigpLnkoKTtcbiAgICAgICAgY29uc3QgcG9zWiA9IHRyYW5zZm9ybS5nZXRPcmlnaW4oKS56KCk7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhgW1BoeXNpY3NdINCf0L7Qt9C40YbQuNGPINGB0YDQsNCy0L3QtdC90LjQtSAtINCa0LvQuNC10L3Rgjoge3g6ICR7cG9zWC50b0ZpeGVkKDIpfSwgeTogJHtwb3NZLnRvRml4ZWQoMil9LCB6OiAke3Bvc1oudG9GaXhlZCgyKX19LCDQodC10YDQstC10YA6IHt4OiAke29iamVjdERhdGEucG9zaXRpb24/LngudG9GaXhlZCgyKSB8fCBcItC9L9C0XCJ9LCB5OiAke29iamVjdERhdGEucG9zaXRpb24/LnkudG9GaXhlZCgyKSB8fCBcItC9L9C0XCJ9LCB6OiAke29iamVjdERhdGEucG9zaXRpb24/LnoudG9GaXhlZCgyKSB8fCBcItC9L9C0XCJ9fWApO1xuICAgICAgICBcbiAgICAgICAgLy8g0JXRgdC70Lgg0L/QvtC30LjRhtC40L7QvdC90YvQtSDQtNCw0L3QvdGL0LUg0YHRg9GJ0LXRgdGC0LLRg9GO0YIsINC/0YDQvtCy0LXRgNC40Lwg0YDQsNGB0YXQvtC20LTQtdC90LjQtVxuICAgICAgICBpZiAob2JqZWN0RGF0YS5wb3NpdGlvbikge1xuICAgICAgICAgICAgY29uc3QgZHggPSBvYmplY3REYXRhLnBvc2l0aW9uLnggLSBwb3NYO1xuICAgICAgICAgICAgY29uc3QgZHkgPSBvYmplY3REYXRhLnBvc2l0aW9uLnkgLSBwb3NZO1xuICAgICAgICAgICAgY29uc3QgZHogPSBvYmplY3REYXRhLnBvc2l0aW9uLnogLSBwb3NaO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydChkeCpkeCArIGR5KmR5ICsgZHoqZHopO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFtQaHlzaWNzXSDQoNCw0YHRhdC+0LbQtNC10L3QuNC1INC80LXQttC00YMg0LrQu9C40LXQvdGC0L7QvCDQuCDRgdC10YDQstC10YDQvtC8OiAke2Rpc3RhbmNlLnRvRml4ZWQoMil9INC10LTQuNC90LjRhmApO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB3aW5kb3cuQW1tby5kZXN0cm95KHRyYW5zZm9ybSk7XG4gICAgfVxuXG4gICAgLy8g0JXRgdC70Lgg0LzRiyDQvtCx0L3QvtCy0LvRj9C10Lwg0L/QvtC30LjRhtC40Y5cbiAgICBpZiAob2JqZWN0RGF0YS5wb3NpdGlvbiAmJiBvYmouYm9keSkge1xuICAgICAgICAvLyDQl9Cw0L/QvtC80L3QuNC8INC40YHRhdC+0LTQvdGD0Y4g0L/QvtC30LjRhtC40Y4g0L/QtdGA0LXQtCDQvtCx0L3QvtCy0LvQtdC90LjQtdC8XG4gICAgICAgIGNvbnN0IG9sZFRyYW5zZm9ybSA9IG5ldyB3aW5kb3cuQW1tby5idFRyYW5zZm9ybSgpO1xuICAgICAgICBvYmouYm9keS5nZXRNb3Rpb25TdGF0ZSgpLmdldFdvcmxkVHJhbnNmb3JtKG9sZFRyYW5zZm9ybSk7XG4gICAgICAgIGNvbnN0IG9sZFggPSBvbGRUcmFuc2Zvcm0uZ2V0T3JpZ2luKCkueCgpO1xuICAgICAgICBjb25zdCBvbGRZID0gb2xkVHJhbnNmb3JtLmdldE9yaWdpbigpLnkoKTtcbiAgICAgICAgY29uc3Qgb2xkWiA9IG9sZFRyYW5zZm9ybS5nZXRPcmlnaW4oKS56KCk7XG4gICAgICAgIFxuICAgICAgICAvLyDQn9GA0LjQvNC10L3Rj9C10Lwg0L3QvtCy0YPRjiDQv9C+0LfQuNGG0LjRjlxuICAgICAgICBjb25zdCBuZXdUcmFuc2Zvcm0gPSBuZXcgd2luZG93LkFtbW8uYnRUcmFuc2Zvcm0oKTtcbiAgICAgICAgbmV3VHJhbnNmb3JtLnNldElkZW50aXR5KCk7XG4gICAgICAgIG5ld1RyYW5zZm9ybS5zZXRPcmlnaW4obmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMyhcbiAgICAgICAgICAgIG9iamVjdERhdGEucG9zaXRpb24ueCxcbiAgICAgICAgICAgIG9iamVjdERhdGEucG9zaXRpb24ueSxcbiAgICAgICAgICAgIG9iamVjdERhdGEucG9zaXRpb24uelxuICAgICAgICApKTtcbiAgICAgICAgb2JqLmJvZHkuZ2V0TW90aW9uU3RhdGUoKS5zZXRXb3JsZFRyYW5zZm9ybShuZXdUcmFuc2Zvcm0pO1xuICAgICAgICBcbiAgICAgICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8LCDQuNC30LzQtdC90LjQu9Cw0YHRjCDQu9C4INC/0L7Qt9C40YbQuNGPXG4gICAgICAgIGNvbnN0IGNoZWNrVHJhbnNmb3JtID0gbmV3IHdpbmRvdy5BbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgICAgIG9iai5ib2R5LmdldE1vdGlvblN0YXRlKCkuZ2V0V29ybGRUcmFuc2Zvcm0oY2hlY2tUcmFuc2Zvcm0pO1xuICAgICAgICBjb25zdCBuZXdYID0gY2hlY2tUcmFuc2Zvcm0uZ2V0T3JpZ2luKCkueCgpO1xuICAgICAgICBjb25zdCBuZXdZID0gY2hlY2tUcmFuc2Zvcm0uZ2V0T3JpZ2luKCkueSgpO1xuICAgICAgICBjb25zdCBuZXdaID0gY2hlY2tUcmFuc2Zvcm0uZ2V0T3JpZ2luKCkueigpO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coYFtQaHlzaWNzXSDQotC10LvQtdC/0L7RgNGC0LDRhtC40Y8gLSDQlNC+OiB7eDogJHtvbGRYLnRvRml4ZWQoMil9LCB5OiAke29sZFkudG9GaXhlZCgyKX0sIHo6ICR7b2xkWi50b0ZpeGVkKDIpfX0sINCf0L7RgdC70LU6IHt4OiAke25ld1gudG9GaXhlZCgyKX0sIHk6ICR7bmV3WS50b0ZpeGVkKDIpfSwgejogJHtuZXdaLnRvRml4ZWQoMil9fSwg0KbQtdC70Yw6IHt4OiAke29iamVjdERhdGEucG9zaXRpb24ueC50b0ZpeGVkKDIpfSwgeTogJHtvYmplY3REYXRhLnBvc2l0aW9uLnkudG9GaXhlZCgyKX0sIHo6ICR7b2JqZWN0RGF0YS5wb3NpdGlvbi56LnRvRml4ZWQoMil9fWApO1xuICAgICAgICBcbiAgICAgICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8INGD0YHQv9C10YjQvdC+0YHRgtGMXG4gICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBcbiAgICAgICAgICAgIE1hdGguYWJzKG5ld1ggLSBvYmplY3REYXRhLnBvc2l0aW9uLngpIDwgMC4xICYmXG4gICAgICAgICAgICBNYXRoLmFicyhuZXdZIC0gb2JqZWN0RGF0YS5wb3NpdGlvbi55KSA8IDAuMSAmJlxuICAgICAgICAgICAgTWF0aC5hYnMobmV3WiAtIG9iamVjdERhdGEucG9zaXRpb24ueikgPCAwLjE7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhgW1BoeXNpY3NdINCi0LXQu9C10L/QvtGA0YLQsNGG0LjRjyAke3N1Y2Nlc3MgPyAn0YPRgdC/0LXRiNC90LAnIDogJ9C90LXRg9C00LDRh9C90LAnfWApO1xuICAgICAgICBcbiAgICAgICAgLy8g0J7Rh9C40YnQsNC10Lwg0YDQtdGB0YPRgNGB0YtcbiAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveShvbGRUcmFuc2Zvcm0pO1xuICAgICAgICB3aW5kb3cuQW1tby5kZXN0cm95KG5ld1RyYW5zZm9ybSk7XG4gICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3koY2hlY2tUcmFuc2Zvcm0pO1xuICAgIH1cbn1cblxuLy8g0JIg0YTQsNC50LvQtSBwaHlzaWNzLmpzINC00L7QsdCw0LLQu9GP0LXQvCDRhNGD0L3QutGG0LjRjiDQtNC70Y8g0YHQvtC30LTQsNC90LjRjyDRgdC70YPRh9Cw0LnQvdC+0Lkg0YHQuNC70Ysg0L/RgNC4INGB0YLQvtC70LrQvdC+0LLQtdC90LjQuFxuLy8gVE9ETzog0KDQtdCw0LvQuNC30LDRhtC40Y8g0L7RgtC70L7QttC10L3QsCDQvdCwINCx0YPQtNGD0YnQtdC1XG4vKlxuZXhwb3J0IGZ1bmN0aW9uIGFkZENvbGxpc2lvbkJvdW5jZUVmZmVjdCgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIEFtbW8gPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gICAgICAgIFxuICAgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0L7QsdGA0LDQsdC+0YLRh9C40Log0YHRgtC+0LvQutC90L7QstC10L3QuNC5LCDQutC+0YLQvtGA0YvQuSDQsdGD0LTQtdGCINC00L7QsdCw0LLQu9GP0YLRjCDRgdC70YPRh9Cw0LnQvdGD0Y4g0YHQuNC70YNcbiAgICAgICAgLy8g0K3RgtCwINGE0YPQvdC60YbQuNGPINC80L7QttC10YIg0LHRi9GC0Ywg0LLRi9C30LLQsNC90LAg0LIg0L3QsNGH0LDQu9C1INGB0LjQvNGD0LvRj9GG0LjQuFxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY29sbGlzaW9ucycsIChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGJvZHkxLCBib2R5MiB9ID0gZS5kZXRhaWw7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDRgdC70YPRh9Cw0LnQvdGL0Lkg0LjQvNC/0YPQu9GM0YEg0L/RgNC4INGB0YLQvtC70LrQvdC+0LLQtdC90LjQuFxuICAgICAgICAgICAgaWYgKGJvZHkxICYmIGJvZHkxLmdldFR5cGUoKSA9PT0gQW1tby5idFJpZ2lkQm9keSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhbmRvbUltcHVsc2UgPSBuZXcgQW1tby5idFZlY3RvcjMoXG4gICAgICAgICAgICAgICAgICAgIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDE1LCAvLyDQo9Cy0LXQu9C40YfQuNCy0LDQtdC8INGBIDEwINC00L4gMTVcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5yYW5kb20oKSAqIDgsICAgICAgICAgIC8vINCj0LLQtdC70LjRh9C40LLQsNC10Lwg0YEgNSDQtNC+IDhcbiAgICAgICAgICAgICAgICAgICAgKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMTUgIC8vINCj0LLQtdC70LjRh9C40LLQsNC10Lwg0YEgMTAg0LTQviAxNVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYm9keTEuYXBwbHlDZW50cmFsSW1wdWxzZShyYW5kb21JbXB1bHNlKTtcbiAgICAgICAgICAgICAgICBBbW1vLmRlc3Ryb3kocmFuZG9tSW1wdWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChib2R5MiAmJiBib2R5Mi5nZXRUeXBlKCkgPT09IEFtbW8uYnRSaWdpZEJvZHkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByYW5kb21JbXB1bHNlID0gbmV3IEFtbW8uYnRWZWN0b3IzKFxuICAgICAgICAgICAgICAgICAgICAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAxNSwgLy8g0KPQstC10LvQuNGH0LjQstCw0LXQvCDRgSAxMCDQtNC+IDE1XG4gICAgICAgICAgICAgICAgICAgIE1hdGgucmFuZG9tKCkgKiA4LCAgICAgICAgICAvLyDQo9Cy0LXQu9C40YfQuNCy0LDQtdC8INGBIDUg0LTQviA4XG4gICAgICAgICAgICAgICAgICAgIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDE1ICAvLyDQo9Cy0LXQu9C40YfQuNCy0LDQtdC8INGBIDEwINC00L4gMTVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJvZHkyLmFwcGx5Q2VudHJhbEltcHVsc2UocmFuZG9tSW1wdWxzZSk7XG4gICAgICAgICAgICAgICAgQW1tby5kZXN0cm95KHJhbmRvbUltcHVsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKFwi0JTQvtCx0LDQstC70LXQvSDRjdGE0YTQtdC60YIg0L7RgtGB0LrQvtC60LAg0L/RgNC4INGB0YLQvtC70LrQvdC+0LLQtdC90LjRj9GFXCIpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ9Ce0YjQuNCx0LrQsCDQv9GA0Lgg0LTQvtCx0LDQstC70LXQvdC40Lgg0Y3RhNGE0LXQutGC0LAg0L7RgtGB0LrQvtC60LA6JywgZXJyb3IpO1xuICAgIH1cbn1cbiovXG5cbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDQv9GA0LjQvNC10L3QtdC90LjRjyDQutC+0L3RhNC40LPRg9GA0LDRhtC40Lgg0YTQuNC30LjQutC4XG5leHBvcnQgZnVuY3Rpb24gYXBwbHlQaHlzaWNzQ29uZmlnKGNvbmZpZykge1xuICAgIGlmICghY29uZmlnKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIltQaHlzaWNzXSDQn9C+0LvRg9GH0LXQvdCwINC/0YPRgdGC0LDRjyDQutC+0L3RhNC40LPRg9GA0LDRhtC40Y8g0YTQuNC30LjQutC4XCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coXCJbUGh5c2ljc10g0J/RgNC40LzQtdC90Y/QtdC8INC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjiDRhNC40LfQuNC60Lg6XCIsIGNvbmZpZyk7XG5cbiAgICAvLyDQn9GA0LjQvNC10L3Rj9C10Lwg0L3QsNGB0YLRgNC+0LnQutC4INC60L4g0LLRgdC10Lwg0L7QsdGK0LXQutGC0LDQvFxuICAgIGZvciAobGV0IGlkIGluIG9iamVjdHMpIHtcbiAgICAgICAgY29uc3Qgb2JqID0gb2JqZWN0c1tpZF07XG4gICAgICAgIGlmICghb2JqIHx8ICFvYmouYm9keSkgY29udGludWU7XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INC80LDRgdGB0YMg0L7QsdGK0LXQutGC0LBcbiAgICAgICAgICAgIGlmIChpZC5zdGFydHNXaXRoKCdtYWluUGxheWVyJykpIHtcbiAgICAgICAgICAgICAgICAvLyDQmNCz0YDQvtC60Lgg0L/QvtC70YPRh9Cw0Y7RgiDQvNCw0YHRgdGDINC40Lcg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNC4XG4gICAgICAgICAgICAgICAgY29uc3QgbWFzcyA9IGNvbmZpZy5wbGF5ZXJfbWFzcyB8fCAxNS4wO1xuICAgICAgICAgICAgICAgIG9iai5tYXNzID0gbWFzcztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAob2JqLmJvZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8g0KHQvtGF0YDQsNC90Y/QtdC8INGC0LXQutGD0YnQtdC1INGB0L7RgdGC0L7Rj9C90LjQtSDQtNCy0LjQttC10L3QuNGPXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IHZlbG9jaXR5ID0gb2JqLmJvZHkuZ2V0TGluZWFyVmVsb2NpdHkoKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIC8vINCh0L7Qt9C00LDQtdC8INC90L7QstGD0Y4g0LjQvdGE0L7RgNC80LDRhtC40Y4g0L4g0LjQvdC10YDRhtC40LhcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc3Qgc2hhcGUgPSBvYmouYm9keS5nZXRDb2xsaXNpb25TaGFwZSgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCBsb2NhbEluZXJ0aWEgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNoYXBlLmNhbGN1bGF0ZUxvY2FsSW5lcnRpYShtYXNzLCBsb2NhbEluZXJ0aWEpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gLy8g0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10Lwg0L3QvtCy0YPRjiDQvNCw0YHRgdGDXG4gICAgICAgICAgICAgICAgICAgIC8vIG9iai5ib2R5LnNldE1hc3NQcm9wcyhtYXNzLCBsb2NhbEluZXJ0aWEpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gLy8g0JLQvtGB0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdC8INGB0LrQvtGA0L7RgdGC0YxcbiAgICAgICAgICAgICAgICAgICAgLy8gb2JqLmJvZHkuc2V0TGluZWFyVmVsb2NpdHkodmVsb2NpdHkpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8g0JDQutGC0LjQstC40YDRg9C10Lwg0L7QsdGK0LXQutGCINC00LvRjyDQvtCx0L3QvtCy0LvQtdC90LjRjyDRhNC40LfQuNC60LhcbiAgICAgICAgICAgICAgICAgICAgb2JqLmJvZHkuYWN0aXZhdGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW1BoeXNpY3NdINCj0YHRgtCw0L3QvtCy0LvQtdC90LAg0LzQsNGB0YHQsCAke2lkfTogJHttYXNzfSDQutCzYCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyDQntGB0LLQvtCx0L7QttC00LDQtdC8INGA0LXRgdGD0YDRgdGLXG4gICAgICAgICAgICAgICAgICAgIEFtbW8uZGVzdHJveShsb2NhbEluZXJ0aWEpO1xuICAgICAgICAgICAgICAgICAgICBBbW1vLmRlc3Ryb3kodmVsb2NpdHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaWQuaW5jbHVkZXMoJ2JveCcpKSB7XG4gICAgICAgICAgICAgICAgLy8g0JHQvtC60YHRiyDQv9C+0LvRg9GH0LDRjtGCINGB0LLQvtGOINC80LDRgdGB0YMg0LjQtyDQutC+0L3RhNC40LPRg9GA0LDRhtC40LhcbiAgICAgICAgICAgICAgICBjb25zdCBtYXNzID0gY29uZmlnLmRlZmF1bHRfYm94X21hc3MgfHwgNS4wO1xuICAgICAgICAgICAgICAgIG9iai5tYXNzID0gbWFzcztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAob2JqLmJvZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8g0JDQvdCw0LvQvtCz0LjRh9C90L4g0LTQu9GPINC60L7RgNC+0LHQvtC6XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZlbG9jaXR5ID0gb2JqLmJvZHkuZ2V0TGluZWFyVmVsb2NpdHkoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2hhcGUgPSBvYmouYm9keS5nZXRDb2xsaXNpb25TaGFwZSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2NhbEluZXJ0aWEgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIHNoYXBlLmNhbGN1bGF0ZUxvY2FsSW5lcnRpYShtYXNzLCBsb2NhbEluZXJ0aWEpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgb2JqLmJvZHkuc2V0TWFzc1Byb3BzKG1hc3MsIGxvY2FsSW5lcnRpYSk7XG4gICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LnNldExpbmVhclZlbG9jaXR5KHZlbG9jaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgb2JqLmJvZHkuYWN0aXZhdGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW1BoeXNpY3NdINCj0YHRgtCw0L3QvtCy0LvQtdC90LAg0LzQsNGB0YHQsCAke2lkfTogJHttYXNzfSDQutCzYCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBBbW1vLmRlc3Ryb3kobG9jYWxJbmVydGlhKTtcbiAgICAgICAgICAgICAgICAgICAgQW1tby5kZXN0cm95KHZlbG9jaXR5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCc0L7QttC90L4g0YLQsNC60LbQtSDQvtCx0L3QvtCy0LjRgtGMINC00YDRg9Cz0LjQtSDRgdCy0L7QudGB0YLQstCwICjRgtGA0LXQvdC40LUsINC+0YLRgdC60L7QuiDQuCDRgi7QtC4pXG4gICAgICAgICAgICBpZiAob2JqLmJvZHkpIHtcbiAgICAgICAgICAgICAgICAvLyDQo9GB0YLQsNC90LDQstC70LjQstCw0LXQvCDQvtGC0YHQutC+0LogKHJlc3RpdHV0aW9uKVxuICAgICAgICAgICAgICAgIG9iai5ib2R5LnNldFJlc3RpdHV0aW9uKGNvbmZpZy5yZXN0aXR1dGlvbiB8fCAwLjkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vINCj0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdC8INGC0YDQtdC90LjQtSAoZnJpY3Rpb24pXG4gICAgICAgICAgICAgICAgb2JqLmJvZHkuc2V0RnJpY3Rpb24oY29uZmlnLmZyaWN0aW9uIHx8IDAuNSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtQaHlzaWNzXSDQntGI0LjQsdC60LAg0L/RgNC4INC/0YDQuNC80LXQvdC10L3QuNC4INC60L7QvdGE0LjQs9GD0YDQsNGG0LjQuCDQuiAke2lkfTpgLCBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyDQodC+0YXRgNCw0L3Rj9C10Lwg0LPQu9C+0LHQsNC70YzQvdGL0LUg0L/QsNGA0LDQvNC10YLRgNGLINC00LvRjyDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjRjyDQv9GA0Lgg0YHQvtC30LTQsNC90LjQuCDQvdC+0LLRi9GFINC+0LHRitC10LrRgtC+0LJcbiAgICB3aW5kb3cuUEhZU0lDU19DT05GSUcgPSBjb25maWc7XG4gICAgXG4gICAgY29uc29sZS5sb2coXCJbUGh5c2ljc10g0JrQvtC90YTQuNCz0YPRgNCw0YbQuNGPINGE0LjQt9C40LrQuCDRg9GB0L/QtdGI0L3QviDQv9GA0LjQvNC10L3QtdC90LBcIik7XG59IiwiLy8gaW5kZXguanNcbmltcG9ydCB7IGluaXRTY2VuZSwgc2NlbmUsIHJlbmRlcmVyLCB1cGRhdGVTaGFkb3dDYW1lcmEgfSBmcm9tICcuL3NjZW5lJztcbmltcG9ydCB7IGluaXRBbW1vLCBzdGVwUGh5c2ljcywgdXBkYXRlUGh5c2ljc09iamVjdHMgfSBmcm9tICcuL3BoeXNpY3MnO1xuaW1wb3J0IHsgaW5pdE5ldHdvcmsgfSBmcm9tICcuL25ldHdvcmsnO1xuaW1wb3J0IHsgb2JqZWN0cywgcGxheWVyTWVzaH0gZnJvbSAnLi9vYmplY3RzJztcbmltcG9ydCB7IGluaXRDYW1lcmEsIGNhbWVyYSwgdXBkYXRlQ2FtZXJhLCBsb2dDYW1lcmFTdGF0dXMsIHNldFF1YWRyYXRpY0ZhY3RvciB9IGZyb20gJy4vY2FtZXJhJztcbmltcG9ydCB7IGluaXRHYW1lU3RhdGVNYW5hZ2VyLCBnYW1lU3RhdGVNYW5hZ2VyIH0gZnJvbSAnLi9nYW1lc3RhdGVtYW5hZ2VyJztcbmltcG9ydCB7IGluaXRHYW1lcGFkLCB1cGRhdGVBcnJvd0hlbHBlciB9IGZyb20gJy4vZ2FtZXBhZCc7IFxuaW1wb3J0IFN0YXRzIGZyb20gJ3N0YXRzLmpzJztcblxuXG5jb25zdCBzdGF0cyA9IG5ldyBTdGF0cygpO1xuc3RhdHMuc2hvd1BhbmVsKDApOyAvLyAwOiBGUFMsIDE6IG1zLCAyOiBtZW1vcnlcbmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc3RhdHMuZG9tKTtcblxuXG5mdW5jdGlvbiBhbmltYXRlKCkge1xuICAgIHN0YXRzLmJlZ2luKCk7IFxuICAgIFxuXG4gICAgc3RlcFBoeXNpY3MoMSAvIDYwKTtcbiAgICB1cGRhdGVQaHlzaWNzT2JqZWN0cyhvYmplY3RzKTtcblxuICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQutCw0LzQtdGA0YMg0LjQtyDQvdC+0LLQvtCz0L4g0LzQvtC00YPQu9GPXG4gICAgdXBkYXRlQ2FtZXJhKCk7XG4gICAgXG4gICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INC/0L7Qu9C+0LbQtdC90LjQtSDQuNGB0YLQvtGH0L3QuNC60LAg0YHQstC10YLQsCDQvtGC0L3QvtGB0LjRgtC10LvRjNC90L4g0LrQsNC80LXRgNGLLCDQutCw0Log0YHQvtC70L3RhtC1XG4gICAgdXBkYXRlU2hhZG93Q2FtZXJhKGNhbWVyYSk7XG5cbiAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCBBcnJvd0hlbHBlclxuICAgIGlmIChnYW1lU3RhdGVNYW5hZ2VyLnBsYXllck1lc2gpIHtcbiAgICAgICB1cGRhdGVBcnJvd0hlbHBlcihnYW1lU3RhdGVNYW5hZ2VyLnBsYXllck1lc2gpO1xuICAgIH1cblxuICAgIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTtcblxuICAgIHN0YXRzLmVuZCgpOyAvLyDQl9Cw0LLQtdGA0YjQsNC10Lwg0LfQsNC80LXRgFxuICAgIFxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgY29uc29sZS5sb2coXCJTdGFydFwiKTtcbiAgICBpbml0U2NlbmUoKTtcbiAgICBcbiAgICAvLyDQmNC90LjRhtC40LDQu9C40LfQuNGA0YPQtdC8INC60LDQvNC10YDRgyDQuNC3INC90L7QstC+0LPQviDQvNC+0LTRg9C70Y9cbiAgICBpbml0Q2FtZXJhKCk7XG4gICAgXG4gICAgLy8g0JjQvdC40YbQuNCw0LvQuNC30LjRgNGD0LXQvCDRjdC70LXQvNC10L3RgtGLINC40L3RgtC10YDRhNC10LnRgdCwINC00LvRjyDQvtGC0L7QsdGA0LDQttC10L3QuNGPINGB0LrQvtGA0L7RgdGC0Lgg0Lgg0LTRgNGD0LPQuNGFINC/0LDRgNCw0LzQtdGC0YDQvtCyXG4gICAgY29uc29sZS5sb2coXCLQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRjdC70LXQvNC10L3RgtC+0LIg0LjQvdGC0LXRgNGE0LXQudGB0LAuLi5cIik7XG4gICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8LCDRgdGD0YnQtdGB0YLQstGD0Y7RgiDQu9C4INGD0LbQtSDRjdC70LXQvNC10L3RgtGLXG4gICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGxheWVyLXNwZWVkJykpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCLQrdC70LXQvNC10L3RgtGLINC40L3RgtC10YDRhNC10LnRgdCwINC40LPRgNC+0LrQsCDQvdC1INC90LDQudC00LXQvdGLLCDRgdC+0LfQtNCw0LXQvC4uLlwiKTtcbiAgICAgICAgY29uc3QgcGxheWVySW5mbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbGF5ZXItaW5mbycpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFwbGF5ZXJJbmZvKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwi0K3Qu9C10LzQtdC90YIgcGxheWVyLWluZm8g0L3QtSDQvdCw0LnQtNC10L0hINCh0L7Qt9C00LDQtdC8INC10LPQvi4uLlwiKTtcbiAgICAgICAgICAgIGNvbnN0IHBsYXllckluZm9EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHBsYXllckluZm9EaXYuaWQgPSAncGxheWVyLWluZm8nO1xuICAgICAgICAgICAgcGxheWVySW5mb0Rpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgICAgICBwbGF5ZXJJbmZvRGl2LnN0eWxlLnRvcCA9ICcwcHgnO1xuICAgICAgICAgICAgcGxheWVySW5mb0Rpdi5zdHlsZS5sZWZ0ID0gJzI5MHB4JztcbiAgICAgICAgICAgIHBsYXllckluZm9EaXYuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3JnYmEoMCwgMCwgMCwgMC41KSc7XG4gICAgICAgICAgICBwbGF5ZXJJbmZvRGl2LnN0eWxlLmNvbG9yID0gJ3doaXRlJztcbiAgICAgICAgICAgIHBsYXllckluZm9EaXYuc3R5bGUucGFkZGluZyA9ICc1cHggMTBweCc7XG4gICAgICAgICAgICBwbGF5ZXJJbmZvRGl2LnN0eWxlLmJvcmRlclJhZGl1cyA9ICc1cHgnO1xuICAgICAgICAgICAgcGxheWVySW5mb0Rpdi5zdHlsZS5mb250RmFtaWx5ID0gJ0FyaWFsLCBzYW5zLXNlcmlmJztcbiAgICAgICAgICAgIHBsYXllckluZm9EaXYuc3R5bGUuZm9udFNpemUgPSAnMTRweCc7XG4gICAgICAgICAgICBwbGF5ZXJJbmZvRGl2LnN0eWxlLnpJbmRleCA9ICcxMDAwJztcbiAgICAgICAgICAgIHBsYXllckluZm9EaXYuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgICAgICAgIHBsYXllckluZm9EaXYuc3R5bGUuZmxleERpcmVjdGlvbiA9ICdjb2x1bW4nO1xuICAgICAgICAgICAgcGxheWVySW5mb0Rpdi5zdHlsZS5nYXAgPSAnNXB4JztcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocGxheWVySW5mb0Rpdik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHBsYXllckluZm9FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BsYXllci1pbmZvJykgfHwgcGxheWVySW5mbztcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHNwZWVkRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHNwZWVkRGl2LmlkID0gJ3BsYXllci1zcGVlZCc7XG4gICAgICAgIHNwZWVkRGl2LnRleHRDb250ZW50ID0gJ9Ch0LrQvtGA0L7RgdGC0Yw6IC0tINC8L9GBJztcbiAgICAgICAgcGxheWVySW5mb0VsZW1lbnQuYXBwZW5kQ2hpbGQoc3BlZWREaXYpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbWF4U3BlZWREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgbWF4U3BlZWREaXYuaWQgPSAncGxheWVyLW1heC1zcGVlZCc7XG4gICAgICAgIG1heFNwZWVkRGl2LnRleHRDb250ZW50ID0gJ9Cc0LDQutGBLiDRgdC60L7RgNC+0YHRgtGMOiAtLSDQvC/RgSc7XG4gICAgICAgIHBsYXllckluZm9FbGVtZW50LmFwcGVuZENoaWxkKG1heFNwZWVkRGl2KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG1hc3NEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgbWFzc0Rpdi5pZCA9ICdwbGF5ZXItbWFzcyc7XG4gICAgICAgIG1hc3NEaXYudGV4dENvbnRlbnQgPSAn0JzQsNGB0YHQsDogLS0g0LrQsyc7XG4gICAgICAgIHBsYXllckluZm9FbGVtZW50LmFwcGVuZENoaWxkKG1hc3NEaXYpO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coXCLQrdC70LXQvNC10L3RgtGLINC40L3RgtC10YDRhNC10LnRgdCwINC40LPRgNC+0LrQsCDRgdC+0LfQtNCw0L3Ri1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcItCt0LvQtdC80LXQvdGC0Ysg0LjQvdGC0LXRgNGE0LXQudGB0LAg0LjQs9GA0L7QutCwINGD0LbQtSDRgdGD0YnQtdGB0YLQstGD0Y7RglwiKTtcbiAgICB9XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC90LXQsdC+0LvRjNGI0YPRjiDQt9Cw0LTQtdGA0LbQutGDINC/0LXRgNC10LQg0LjQvdC40YbQuNCw0LvQuNC30LDRhtC40LXQuVxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgNTAwKSk7XG4gICAgICAgIGF3YWl0IGluaXRBbW1vKCk7XG4gICAgICAgIFxuICAgICAgICAvLyDQmNC90LjRhtC40LDQu9C40LfQuNGA0YPQtdC8INGB0LXRgtC10LLQvtC1INGB0L7QtdC00LjQvdC10L3QuNC1XG4gICAgICAgIGNvbnN0IHdzID0gYXdhaXQgaW5pdE5ldHdvcmsoKVxuICAgICAgICAgICAgXG4gICAgICAgIGluaXRHYW1lU3RhdGVNYW5hZ2VyKHdzLCBzY2VuZSk7XG5cbiAgICAgICAgZ2FtZVN0YXRlTWFuYWdlci5vbignZ2FtZUluaXRpYWxpemVkJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdnYW1lIGluaXRpYWxpemVkJylcbiAgICAgICAgICAgIGFuaW1hdGUoKTtcbiAgICAgICAgfSk7IFxuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcItCe0YjQuNCx0LrQsCDQv9GA0Lgg0LjQvdC40YbQuNCw0LvQuNC30LDRhtC40LggQW1tby5qczpcIiwgZXJyb3IpO1xuICAgIH1cbn1cblxuc3RhcnQoKTsiXSwibmFtZXMiOlsiVEhSRUUiLCJzY2VuZSIsInJlbmRlcmVyIiwiZGlyZWN0aW9uYWxMaWdodCIsImluaXRTY2VuZSIsImNvbnNvbGUiLCJsb2ciLCJTY2VuZSIsImJhY2tncm91bmQiLCJDb2xvciIsIldlYkdMUmVuZGVyZXIiLCJhbnRpYWxpYXMiLCJzZXRTaXplIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwic2hhZG93TWFwIiwiZW5hYmxlZCIsInR5cGUiLCJQQ0ZTb2Z0U2hhZG93TWFwIiwiZG9jdW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJkb21FbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uV2luZG93UmVzaXplIiwiYW1iaWVudCIsIkFtYmllbnRMaWdodCIsImFkZCIsIkRpcmVjdGlvbmFsTGlnaHQiLCJwb3NpdGlvbiIsInNldCIsImNhc3RTaGFkb3ciLCJzaGFkb3ciLCJjYW1lcmEiLCJuZWFyIiwiZmFyIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwibWFwU2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwiZmlsbExpZ2h0IiwidXBkYXRlU2hhZG93Q2FtZXJhIiwiY2FtZXJhRGlyZWN0aW9uIiwiVmVjdG9yMyIsImdldFdvcmxkRGlyZWN0aW9uIiwic3VuT2Zmc2V0Iiwic3VuUG9zaXRpb24iLCJjbG9uZSIsImNvcHkiLCJ0YXJnZXRPZmZzZXQiLCJtdWx0aXBseVNjYWxhciIsInRhcmdldFBvc2l0aW9uIiwidGFyZ2V0IiwidXBkYXRlTWF0cml4V29ybGQiLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4IiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsImUiLCJ0IiwiciIsIk9iamVjdCIsInByb3RvdHlwZSIsIm4iLCJoYXNPd25Qcm9wZXJ0eSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiaSIsIlN5bWJvbCIsImEiLCJpdGVyYXRvciIsImMiLCJhc3luY0l0ZXJhdG9yIiwidSIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwid3JhcCIsIkdlbmVyYXRvciIsImNyZWF0ZSIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJhcmciLCJjYWxsIiwiaCIsImwiLCJmIiwicyIsInkiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwicCIsImQiLCJnZXRQcm90b3R5cGVPZiIsInYiLCJ2YWx1ZXMiLCJnIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiaW52b2tlIiwiX3R5cGVvZiIsInJlc29sdmUiLCJfX2F3YWl0IiwidGhlbiIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiRXJyb3IiLCJkb25lIiwibWV0aG9kIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsImlzTmFOIiwibGVuZ3RoIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJrZXlzIiwicmV2ZXJzZSIsInBvcCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJydmFsIiwiaGFuZGxlIiwiY29tcGxldGUiLCJmaW5pc2giLCJfY2F0Y2giLCJkZWxlZ2F0ZVlpZWxkIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJBcnJheSIsImlzQXJyYXkiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbiIsIkYiLCJfYXJyYXlMaWtlVG9BcnJheSIsInRvU3RyaW5nIiwiZnJvbSIsInRlc3QiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJfYXN5bmNUb0dlbmVyYXRvciIsImFyZ3VtZW50cyIsImFwcGx5IiwiX25leHQiLCJfdGhyb3ciLCJvYmplY3RzIiwiY3JlYXRlTWVzaEFuZEJvZHlGb3JPYmplY3QiLCJhcHBseUltcHVsc2VUb1NwaGVyZSIsInJlY2VpdmVPYmplY3RVcGRhdGUiLCJsb2NhbFBoeXNpY3NXb3JsZCIsImFwcGx5UGh5c2ljc0NvbmZpZyIsIndzIiwicGh5c2ljc1N0YXJ0ZWQiLCJwZW5kaW5nT2JqZWN0cyIsInNlcnZlclRpbWVPZmZzZXQiLCJzZXJ2ZXJUaW1lT2Zmc2V0U2FtcGxlcyIsIk1BWF9PRkZTRVRfU0FNUExFUyIsInBpbmdIaXN0b3J5IiwiTUFYX1BJTkdfU0FNUExFUyIsInBoeXNpY3NDb25maWciLCJnZXRQaHlzaWNzQ29uZmlnIiwiZXN0aW1hdGVTZXJ2ZXJUaW1lIiwiRGF0ZSIsIm5vdyIsInVwZGF0ZVNlcnZlclRpbWVPZmZzZXQiLCJzZXJ2ZXJUaW1lIiwiY3VycmVudE9mZnNldCIsInNoaWZ0Iiwic29ydGVkT2Zmc2V0cyIsImNvbmNhdCIsInNvcnQiLCJiIiwibWVkaWFuT2Zmc2V0IiwiTWF0aCIsImZsb29yIiwidXBkYXRlVGltZURpc3BsYXkiLCJ1cGRhdGVQaW5nRGlzcGxheSIsInBpbmdWYWx1ZSIsInBpbmdEaXNwbGF5IiwiZ2V0RWxlbWVudEJ5SWQiLCJ0ZXh0Q29udGVudCIsInRvRml4ZWQiLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciIsInNlcnZlclRpbWVFbGVtIiwidGltZU9mZnNldEVsZW0iLCJlc3RTZXJ2ZXJUaW1lIiwic2VydmVyRGF0ZSIsInRvTG9jYWxlVGltZVN0cmluZyIsInRpbWVEaXNwbGF5SW50ZXJ2YWwiLCJzZXJ2ZXJEZWxheSIsInVwZGF0ZVNlcnZlckRlbGF5RGlzcGxheSIsImRlbGF5IiwiZGVsYXlEaXNwbGF5IiwiaGFuZGxlTWVzc2FnZSIsImRhdGEiLCJzZXJ2ZXJfdGltZSIsImNvbmZpZyIsInJvdW5kVHJpcFRpbWUiLCJjbGllbnRfdGltZSIsImF2Z1BpbmciLCJyZWR1Y2UiLCJzdW0iLCJwaW5nIiwiaWQiLCJ3YXJuIiwieCIsInoiLCJvYmoiLCJwaHlzaWNzQnkiLCJwaHlzaWNzX2J5Iiwic2VydmVyUG9zIiwic2VydmVyQ3JlYXRpb25UaW1lIiwiY2xpZW50Q3JlYXRpb25UaW1lIiwiY3JlYXRlZEF0IiwiYWN0aXZhdGUiLCJBbW1vIiwiZXJyb3IiLCJ0cmFuc2Zvcm0iLCJidFRyYW5zZm9ybSIsImdldE1vdGlvblN0YXRlIiwiZ2V0V29ybGRUcmFuc2Zvcm0iLCJzZXRPcmlnaW4iLCJidFZlY3RvcjMiLCJzZXRXb3JsZFRyYW5zZm9ybSIsIm1lc2giLCJkZXN0cm95Iiwib2JqZWN0X3R5cGUiLCJjbWQiLCJzdGFjayIsImhhbmRsZUtleURvd24iLCJyZWFkeVN0YXRlIiwiV2ViU29ja2V0IiwiT1BFTiIsImZvcmNlWCIsImZvcmNlWSIsImZvcmNlWiIsImtleSIsImNsaWVudFRpbWUiLCJjb21tYW5kT2JqIiwic2VuZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZW9tZXRyeSIsImluaXROZXR3b3JrIiwiX2luaXROZXR3b3JrIiwiX2NhbGxlZSIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJvbm9wZW4iLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJzZW5kUGluZyIsIm9ubWVzc2FnZSIsImV2dCIsInBhcnNlIiwib25lcnJvciIsIm1lc3NhZ2UiLCJldmVudFBoYXNlIiwib25jbG9zZSIsImV2ZW50IiwiY29kZSIsInJlYXNvbiIsIndhc0NsZWFuIiwidDAiLCJwaW5nT2JqIiwic3RhcnRQaHlzaWNzU2ltdWxhdGlvbiIsIl9pdGVyYXRvciIsIl9zdGVwIiwiZXJyIiwiREVCVUdfTU9ERSIsIk1JTl9BUlJPV19MRU5HVEgiLCJNQVhfQVJST1dfTEVOR1RIIiwiU0VORF9JTlRFUlZBTCIsIkFSUk9XX0hFSUdIVF9PRkZTRVQiLCJSQVlfVVBEQVRFX0lOVEVSVkFMIiwiS0VZX0ZPUkNFIiwiYXJyb3dIZWxwZXIiLCJsYXN0U2VudFBvc2l0aW9uIiwibGFzdFNlbmRUaW1lIiwicmF5Y2FzdGVyIiwiUmF5Y2FzdGVyIiwibW91c2UiLCJWZWN0b3IyIiwiY2FtZXJhTGFzdFBvc2l0aW9uIiwibGFzdFJheVVwZGF0ZVRpbWUiLCJsYXN0SW50ZXJzZWN0UG9pbnQiLCJpc01vdXNlQWN0aXZlIiwidyIsImN1cnJlbnREaXJlY3Rpb24iLCJkaXJlY3Rpb25OZWVkc1VwZGF0ZSIsInRlcnJhaW5NZXNoUmVmIiwicGxheWVyTWVzaFJlZiIsImNhbWVyYVJlZiIsInNvY2tldFJlZiIsImdldEFycm93RGlyZWN0aW9uIiwiaW5pdEdhbWVwYWQiLCJ0ZXJyYWluTWVzaCIsInBsYXllck1lc2giLCJzb2NrZXQiLCJBcnJvd0hlbHBlciIsIm9uTW91c2VNb3ZlIiwib25LZXlEb3duIiwib25LZXlVcCIsImFuaW1hdGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ1cGRhdGVBcnJvd0hlbHBlciIsImVxdWFscyIsInVwZGF0ZVJheUZyb21MYXN0TW91c2UiLCJwcm9jZXNzS2V5Ym9hcmRJbnB1dCIsImRpcmVjdGlvbiIsIm5vcm1hbGl6ZSIsImtleUZvcmNlIiwiaW1wdWxzZV9tdWx0aXBsaWVyIiwiYmFzZV9pbXB1bHNlIiwic2VuZERpcmVjdGlvblRvU2VydmVyIiwidXNlckRhdGEiLCJkaXN0YW5jZSIsInRvTG93ZXJDYXNlIiwiY2xpZW50WCIsImNsaWVudFkiLCJjYXN0UmF5QW5kVXBkYXRlRGlyZWN0aW9uIiwic2V0RnJvbUNhbWVyYSIsImludGVyc2VjdHMiLCJpbnRlcnNlY3RPYmplY3RzIiwicG9pbnQiLCJlbmhhbmNlZERpc3RhbmNlIiwibWluIiwib2JqZWN0X2lkIiwic2V0RGVidWdNb2RlIiwidmlzaWJsZSIsImdldERlYnVnTW9kZSIsImFycm93UG9zaXRpb24iLCJzZXREaXJlY3Rpb24iLCJhcnJvd0xlbmd0aCIsIm1heCIsInNldExlbmd0aCIsIkNBTUVSQV9IRUlHSFQiLCJDQU1FUkFfRElTVEFOQ0UiLCJTTU9PVEhfRkFDVE9SIiwiUk9UQVRJT05fU01PT1RIX0ZBQ1RPUiIsIkRFQURfWk9ORV9BTkdMRSIsIk1JTl9ZX0FOR0xFIiwiTUFYX1lfQU5HTEUiLCJNSU5fQURBUFRJVkVfRkFDVE9SIiwiTUFYX0FEQVBUSVZFX0ZBQ1RPUiIsIlFVQURSQVRJQ19GQUNUT1IiLCJjdXJyZW50UXVhZHJhdGljRmFjdG9yIiwiUExBWUVSX0lEIiwibGFzdEtub3duUG9zaXRpb24iLCJsYXN0Q2FtZXJhUG9zaXRpb24iLCJsYXN0Q2FtZXJhRGlyZWN0aW9uIiwidGFyZ2V0Q2FtZXJhRGlyZWN0aW9uIiwiY2FtZXJhVGFyZ2V0IiwibGFzdEFycm93RGlyZWN0aW9uIiwibGFzdE1lYXN1cmVkQW5nbGUiLCJsYXN0TWVhc3VyZWREaXN0YW5jZSIsInR1cm5pbmdBY3RpdmUiLCJzbW9vdGhMb29rQXRUYXJnZXQiLCJpbml0Q2FtZXJhIiwiUGVyc3BlY3RpdmVDYW1lcmEiLCJsb29rQXQiLCJhc3BlY3QiLCJhbmdsZUJldHdlZW5EaXJlY3Rpb25zIiwiZGlyMSIsImRpcjIiLCJ2MSIsInYyIiwiYWNvcyIsImRvdCIsImNhbGN1bGF0ZUFkYXB0aXZlUm90YXRpb25GYWN0b3IiLCJhbmdsZSIsIm5vcm1hbGl6ZWREaXN0YW5jZSIsImFuZ2xlUmF0aW8iLCJkaXN0YW5jZUZhY3RvciIsInBvdyIsImNvbWJpbmVkRmFjdG9yIiwiYWRhcHRpdmVGYWN0b3IiLCJ1cGRhdGVDYW1lcmEiLCJwbGF5ZXIiLCJjdXJyZW50UGxheWVyUG9zaXRpb24iLCJhcnJvd0RpcmVjdGlvbiIsImxlcnAiLCJ5Q29tcG9uZW50IiwiYWRhcHRpdmVSb3RhdGlvbkZhY3RvciIsImhvcml6b250YWxEaXN0YW5jZSIsImNvcyIsImNhbWVyYU9mZnNldCIsInNldFF1YWRyYXRpY0ZhY3RvciIsIm5ld1ZhbHVlIiwiZ2V0UXVhZHJhdGljRmFjdG9yIiwibG9nQ2FtZXJhU3RhdHVzIiwiUEkiLCJFdmVudEVtaXR0ZXIiLCJHYW1lU3RhdGVNYW5hZ2VyIiwiX0V2ZW50RW1pdHRlciIsIl90aGlzIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NhbGxTdXBlciIsInRlcnJhaW5NZXNoQ3JlYXRlZCIsInBsYXllck1lc2hDcmVhdGVkIiwiX2luaGVyaXRzIiwiX2NyZWF0ZUNsYXNzIiwic2V0VGVycmFpbk1lc2giLCJjaGVja0dhbWVTdGF0ZSIsInNldFBsYXllck1lc2giLCJlbWl0IiwiZ2FtZVN0YXRlTWFuYWdlciIsImluaXRHYW1lU3RhdGVNYW5hZ2VyIiwidGVycmFpbkNyZWF0ZWQiLCJwbGF5ZXJDcmVhdGVkIiwiY3JlYXRlVGVycmFpbk1lc2giLCJjcmVhdGVQaHlzaWNzQm9keUZvclRlcnJhaW4iLCJjcmVhdGVTcGhlcmVNZXNoIiwiY3JlYXRlUGh5c2ljc0JvZHlGb3JTcGhlcmUiLCJjcmVhdGVUcmVlTWVzaCIsImNyZWF0ZUJveE1lc2giLCJjcmVhdGVQaHlzaWNzQm9keUZvckJveCIsInJlc3VsdCIsIm1hc3MiLCJyZW1vdmUiLCJoZWlnaHRtYXBfdyIsImhlaWdodG1hcF9oIiwic2NhbGVYIiwic2NhbGVfeCIsInNjYWxlWiIsInNjYWxlX3oiLCJhbW1vSGVpZ2h0RGF0YSIsIl9tYWxsb2MiLCJwMiIsImoiLCJIRUFQRjMyIiwiaGVpZ2h0X2RhdGEiLCJzaGFwZSIsImJ0SGVpZ2h0ZmllbGRUZXJyYWluU2hhcGUiLCJtaW5faGVpZ2h0IiwibWF4X2hlaWdodCIsIlBIWV9GTE9BVCIsInNldExvY2FsU2NhbGluZyIsInNjYWxlX3kiLCJzZXRNYXJnaW4iLCJzZXRJZGVudGl0eSIsImxvY2FsSW5lcnRpYSIsIm1vdGlvblN0YXRlIiwiYnREZWZhdWx0TW90aW9uU3RhdGUiLCJyYkluZm8iLCJidFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm8iLCJidFJpZ2lkQm9keSIsIlRFUlJBSU5fR1JPVVAiLCJhZGRSaWdpZEJvZHkiLCLRgNCw0LfQvNC10YDRiyIsItC80LDRgdGI0YLQsNCxIiwi0L/QvtC30LjRhtC40Y8iLCLQvNC40L3QktGL0YHQvtGC0LAiLCLQvNCw0LrRgdCS0YvRgdC+0YLQsCIsImdlbyIsIlBsYW5lR2VvbWV0cnkiLCJyb3RhdGVYIiwidmVydHMiLCJhdHRyaWJ1dGVzIiwiYXJyYXkiLCJpeCIsIml6IiwiY29tcHV0ZVZlcnRleE5vcm1hbHMiLCJNZXNoIiwiTWVzaFBob25nTWF0ZXJpYWwiLCJjb2xvciIsInBhcnNlQ29sb3IiLCJ3aXJlZnJhbWUiLCJmbGF0U2hhZGluZyIsInJlY2VpdmVTaGFkb3ciLCJTcGhlcmVHZW9tZXRyeSIsInJhZGl1cyIsInNoaW5pbmVzcyIsIkJveEdlb21ldHJ5IiwiTWVzaExhbWJlcnRNYXRlcmlhbCIsImJ0U3BoZXJlU2hhcGUiLCJjYWxjdWxhdGVMb2NhbEluZXJ0aWEiLCJzZXRGcmljdGlvbiIsInNldFJlc3RpdHV0aW9uIiwic2V0Um9sbGluZ0ZyaWN0aW9uIiwic2V0RGFtcGluZyIsInNldEFjdGl2YXRpb25TdGF0ZSIsInNldENjZE1vdGlvblRocmVzaG9sZCIsInNldENjZFN3ZXB0U3BoZXJlUmFkaXVzIiwiU1BIRVJFX0dST1VQIiwiY2NkIiwibW90aW9uVGhyZXNob2xkIiwic3dlcHRTcGhlcmVSYWRpdXMiLCJmcmljdGlvbiIsInJlc3RpdHV0aW9uIiwiY29sb3JTdHIiLCJzdGFydHNXaXRoIiwicGFyc2VJbnQiLCJjcmVhdGVUZXN0U3BoZXJlIiwibWF0ZXJpYWwiLCJzdGFydFkiLCJ0ZXN0U3BoZXJlT2JqIiwiTE9HX0lOVEVSVkFMIiwibG9nVGltZXJzIiwidGhyb3R0bGVkTG9nIiwiY2F0ZWdvcnkiLCJ1bmRlZmluZWQiLCJsb2dNYWluUGxheWVySW5mbyIsIm1haW5QbGF5ZXIiLCJwb3MiLCJ2ZWwiLCJ2ZWxvY2l0eSIsImdldExpbmVhclZlbG9jaXR5Iiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9vYmplY3RTcHJlYWQiLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIl90b1Byb3BlcnR5S2V5IiwiX3RvUHJpbWl0aXZlIiwidG9QcmltaXRpdmUiLCJTdHJpbmciLCJOdW1iZXIiLCJhbW1vUHJvbWlzZSIsIkRFQURfWk9ORSIsIkNPUlJFQ1RJT05fU1RSRU5HVEgiLCJURUxFUE9SVF9USFJFU0hPTEQiLCJQUkVESUNUSU9OX1NNT09USF9GQUNUT1IiLCJQUkVESUNUSU9OX01BWF9FUlJPUiIsIkRJU1RBTkNFX0JBU0VEX1NNT09USF9GQUNUT1IiLCJORVdfT0JKRUNUX1RJTUVPVVQiLCJpbnB1dEhpc3RvcnkiLCJsYXN0U2VxdWVuY2VOdW1iZXIiLCJsYXN0U2VydmVyVXBkYXRlVGltZSIsIm9iamVjdENyZWF0aW9uVGltZXMiLCJNYXAiLCJzZXR1cFBoeXNpY3NXb3JsZCIsImNvbGxpc2lvbkNvbmZpZ3VyYXRpb24iLCJidERlZmF1bHRDb2xsaXNpb25Db25maWd1cmF0aW9uIiwiZGlzcGF0Y2hlciIsImJ0Q29sbGlzaW9uRGlzcGF0Y2hlciIsImJyb2FkcGhhc2UiLCJidERidnRCcm9hZHBoYXNlIiwic29sdmVyIiwiYnRTZXF1ZW50aWFsSW1wdWxzZUNvbnN0cmFpbnRTb2x2ZXIiLCJidERpc2NyZXRlRHluYW1pY3NXb3JsZCIsInNldEdyYXZpdHkiLCJpbml0QW1tbyIsIl9pbml0QW1tbyIsInJlamVjdCIsImFtbW9TY3JpcHQiLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwib25sb2FkIiwic2V0VGltZW91dCIsInN0ZXBQaHlzaWNzIiwiZGVsdGFUaW1lIiwibWF4U3RlcCIsImVmZmVjdGl2ZVN0ZXAiLCJmaXhlZFN0ZXAiLCJtYXhTdWJTdGVwcyIsImNlaWwiLCJzdGVwU2ltdWxhdGlvbiIsImFwcGx5U3BlZWRMaW1pdHMiLCJ1cGRhdGVQaHlzaWNzT2JqZWN0cyIsIlBIWVNJQ1NfQ09ORklHIiwiTUFYX1NQRUVEIiwiTWF4U3BlZWQiLCJzcGVlZFNxIiwic3BlZWQiLCJzcXJ0Iiwic2NhbGUiLCJuZXdWZWxvY2l0eSIsInNldExpbmVhclZlbG9jaXR5IiwidXBkYXRlUGxheWVyU3BlZWREaXNwbGF5IiwibWF4U3BlZWQiLCJzcGVlZERpc3BsYXkiLCJtYXhTcGVlZERpc3BsYXkiLCJtYXNzRGlzcGxheSIsInNwZWVkUmF0aW8iLCJtYWluU3BoZXJlUG9zIiwiYW1tb1NoYWRvd1BvcyIsImJ1bGxldFNoYWRvd1BvcyIsImlzTmV3T2JqZWN0IiwiaGFzIiwiZ2V0IiwiY3VycmVudFRpbWUiLCJoYXNOZXdTZXJ2ZXJEYXRhIiwibGFzdFNlcnZlclVwZGF0ZSIsInByZXZTZXJ2ZXJQb3MiLCJhYnMiLCJ0cmFucyIsImxvY1giLCJnZXRPcmlnaW4iLCJsb2NZIiwibG9jWiIsInF4IiwiZ2V0Um90YXRpb24iLCJxeSIsInF6IiwicXciLCJxdWF0ZXJuaW9uIiwic2VydmVyVmVsb2NpdHkiLCJzZXJ2ZXJYIiwic2VydmVyWSIsInNlcnZlcloiLCJjdXJyZW50WCIsImN1cnJlbnRZIiwiY3VycmVudFoiLCJpc01vdmluZ0Zhc3QiLCJ0YXJnZXRYIiwidGFyZ2V0WSIsInRhcmdldFoiLCJwcmVkaWN0ZWRYIiwicHJlZGljdGVkWSIsInByZWRpY3RlZFoiLCJkeFByZWRpY3RlZCIsImR5UHJlZGljdGVkIiwiZHpQcmVkaWN0ZWQiLCJkaXN0YW5jZVByZWRpY3RlZCIsImR4IiwiZHkiLCJkeiIsInNwZWVkQmFzZWRFcnJvciIsInNtb290aEZhY3RvciIsImFmdGVyVGVsZXBvcnQiLCJ0ZWxlcG9ydFgiLCJ0ZWxlcG9ydFkiLCJ0ZWxlcG9ydFoiLCJ0ZWxlcG9ydFN1Y2Nlc3MiLCJ0aW1lU2luY2VMYXN0VXBkYXRlIiwiemVybyIsInNldEFuZ3VsYXJWZWxvY2l0eSIsInNlcnZlclZlbCIsImRhbXBlZFZlbG9jaXR5IiwidXBkYXRlZFRyYW5zZm9ybSIsInB4IiwicHkiLCJweiIsImNvcnJlY3Rpb25YIiwiY29ycmVjdGlvblkiLCJjb3JyZWN0aW9uWiIsImNvcnJlY3Rpb25WZWN0b3IiLCJibGVuZGVkVmVsb2NpdHkiLCJhZGFwdGl2ZVN0cmVuZ3RoIiwibWFnbml0dWRlIiwiY29ycmVjdFkiLCJmb3JjZSIsImFwcGx5Q2VudHJhbEZvcmNlIiwiZGVidWciLCJtYWluVG9BbW1vRGlzdGFuY2UiLCJtYWluVG9CdWxsZXREaXN0YW5jZSIsInNlcnZlclRvTWFpbkRpc3RhbmNlIiwicmFuZG9tIiwic3RyZW5ndGgiLCJvYmplY3QiLCJpbXB1bHNlVmVjIiwiYXBwbHlDZW50cmFsSW1wdWxzZSIsIm9iamVjdElkcyIsIl9pIiwiX29iamVjdElkcyIsIm9iamVjdERhdGEiLCJ1cGRhdGVTaW5nbGVPYmplY3QiLCJ2eCIsInZ5IiwidnoiLCJyYXciLCJtYXhEaXNwbGF5U3BlZWQiLCJzZXJ2ZXJRdWF0ZXJuaW9uIiwiYnRRdWF0ZXJuaW9uIiwic2V0Um90YXRpb24iLCJfb2JqZWN0RGF0YSRwb3NpdGlvbiIsIl9vYmplY3REYXRhJHBvc2l0aW9uMiIsIl9vYmplY3REYXRhJHBvc2l0aW9uMyIsInBvc1giLCJwb3NZIiwicG9zWiIsIm9sZFRyYW5zZm9ybSIsIm9sZFgiLCJvbGRZIiwib2xkWiIsIm5ld1RyYW5zZm9ybSIsImNoZWNrVHJhbnNmb3JtIiwibmV3WCIsIm5ld1kiLCJuZXdaIiwic3VjY2VzcyIsInBsYXllcl9tYXNzIiwiaW5jbHVkZXMiLCJkZWZhdWx0X2JveF9tYXNzIiwiZ2V0Q29sbGlzaW9uU2hhcGUiLCJzZXRNYXNzUHJvcHMiLCJTdGF0cyIsInN0YXRzIiwic2hvd1BhbmVsIiwiZG9tIiwiYmVnaW4iLCJyZW5kZXIiLCJlbmQiLCJzdGFydCIsIl9zdGFydCIsInBsYXllckluZm8iLCJwbGF5ZXJJbmZvRGl2IiwicGxheWVySW5mb0VsZW1lbnQiLCJzcGVlZERpdiIsIm1heFNwZWVkRGl2IiwibWFzc0RpdiIsInBhZGRpbmciLCJib3JkZXJSYWRpdXMiLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJ6SW5kZXgiLCJkaXNwbGF5IiwiZmxleERpcmVjdGlvbiIsImdhcCIsIm9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///617\n')},7:module=>{"use strict";eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n")},571:function(module){eval('// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){ true?module.exports=e():0})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?"block":"none";l=a}var l=0,c=document.createElement("div");c.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";c.addEventListener("click",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel("FPS","#0ff","#002")),h=e(new f.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var t=e(new f.Panel("MB","#f08","#201"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement("canvas");q.width=r;q.height=h;q.style.cssText="width:80px;height:48px";var b=q.getContext("2d");b.font="bold "+9*a+"px Helvetica,Arial,sans-serif";b.textBaseline="top";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+" "+e+" ("+g(c)+"-"+g(k)+")",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTcxLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZUFBZSxLQUFzRCxvQkFBb0IsQ0FBNEQsQ0FBQyxrQkFBa0IsaUJBQWlCLGNBQWMscUJBQXFCLFNBQVMsY0FBYyxZQUFZLG9CQUFvQixxREFBcUQsSUFBSSx3Q0FBd0MsZ0NBQWdDLE1BQU0sT0FBTyxlQUFlLFlBQVksZUFBZSx1Q0FBdUM7QUFDbGYseUJBQXlCLEtBQUssbUhBQW1ILHNGQUFzRixLQUFLLE9BQU8sMERBQTBELDRCQUE0QixnQkFBZ0IsSUFBSSxnQ0FBZ0Msa0JBQWtCLG1EQUFtRCx5QkFBeUI7QUFDM2QsbUNBQW1DLFNBQVMsbUJBQW1CLGFBQWEsMEJBQTBCLHdCQUF3Qix3SkFBd0osVUFBVSxXQUFXLDRCQUE0QixhQUFhLHlCQUF5QixtREFBbUQscUJBQXFCLGNBQWMsb0JBQW9CLGNBQWM7QUFDcmUsb0JBQW9CLGNBQWMsaUJBQWlCLG9CQUFvQixPQUFPLDJCQUEyQixnQkFBZ0IsZ0JBQWdCLGNBQWMsZ0JBQWdCLG9CQUFvQixjQUFjLGtEQUFrRCxxQ0FBcUMsd0JBQXdCLGNBQWMsaUJBQWlCLHNDQUFzQyxTQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4vbm9kZV9tb2R1bGVzL3N0YXRzLmpzL2J1aWxkL3N0YXRzLm1pbi5qcz8zMTkxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0YXRzLmpzIC0gaHR0cDovL2dpdGh1Yi5jb20vbXJkb29iL3N0YXRzLmpzXG4oZnVuY3Rpb24oZixlKXtcIm9iamVjdFwiPT09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKTpmLlN0YXRzPWUoKX0pKHRoaXMsZnVuY3Rpb24oKXt2YXIgZj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoYSl7Yy5hcHBlbmRDaGlsZChhLmRvbSk7cmV0dXJuIGF9ZnVuY3Rpb24gdShhKXtmb3IodmFyIGQ9MDtkPGMuY2hpbGRyZW4ubGVuZ3RoO2QrKyljLmNoaWxkcmVuW2RdLnN0eWxlLmRpc3BsYXk9ZD09PWE/XCJibG9ja1wiOlwibm9uZVwiO2w9YX12YXIgbD0wLGM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtjLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjpmaXhlZDt0b3A6MDtsZWZ0OjA7Y3Vyc29yOnBvaW50ZXI7b3BhY2l0eTowLjk7ei1pbmRleDoxMDAwMFwiO2MuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsZnVuY3Rpb24oYSl7YS5wcmV2ZW50RGVmYXVsdCgpO1xudSgrK2wlYy5jaGlsZHJlbi5sZW5ndGgpfSwhMSk7dmFyIGs9KHBlcmZvcm1hbmNlfHxEYXRlKS5ub3coKSxnPWssYT0wLHI9ZShuZXcgZi5QYW5lbChcIkZQU1wiLFwiIzBmZlwiLFwiIzAwMlwiKSksaD1lKG5ldyBmLlBhbmVsKFwiTVNcIixcIiMwZjBcIixcIiMwMjBcIikpO2lmKHNlbGYucGVyZm9ybWFuY2UmJnNlbGYucGVyZm9ybWFuY2UubWVtb3J5KXZhciB0PWUobmV3IGYuUGFuZWwoXCJNQlwiLFwiI2YwOFwiLFwiIzIwMVwiKSk7dSgwKTtyZXR1cm57UkVWSVNJT046MTYsZG9tOmMsYWRkUGFuZWw6ZSxzaG93UGFuZWw6dSxiZWdpbjpmdW5jdGlvbigpe2s9KHBlcmZvcm1hbmNlfHxEYXRlKS5ub3coKX0sZW5kOmZ1bmN0aW9uKCl7YSsrO3ZhciBjPShwZXJmb3JtYW5jZXx8RGF0ZSkubm93KCk7aC51cGRhdGUoYy1rLDIwMCk7aWYoYz5nKzFFMyYmKHIudXBkYXRlKDFFMyphLyhjLWcpLDEwMCksZz1jLGE9MCx0KSl7dmFyIGQ9cGVyZm9ybWFuY2UubWVtb3J5O3QudXBkYXRlKGQudXNlZEpTSGVhcFNpemUvXG4xMDQ4NTc2LGQuanNIZWFwU2l6ZUxpbWl0LzEwNDg1NzYpfXJldHVybiBjfSx1cGRhdGU6ZnVuY3Rpb24oKXtrPXRoaXMuZW5kKCl9LGRvbUVsZW1lbnQ6YyxzZXRNb2RlOnV9fTtmLlBhbmVsPWZ1bmN0aW9uKGUsZixsKXt2YXIgYz1JbmZpbml0eSxrPTAsZz1NYXRoLnJvdW5kLGE9Zyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb3x8MSkscj04MCphLGg9NDgqYSx0PTMqYSx2PTIqYSxkPTMqYSxtPTE1KmEsbj03NCphLHA9MzAqYSxxPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7cS53aWR0aD1yO3EuaGVpZ2h0PWg7cS5zdHlsZS5jc3NUZXh0PVwid2lkdGg6ODBweDtoZWlnaHQ6NDhweFwiO3ZhciBiPXEuZ2V0Q29udGV4dChcIjJkXCIpO2IuZm9udD1cImJvbGQgXCIrOSphK1wicHggSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWZcIjtiLnRleHRCYXNlbGluZT1cInRvcFwiO2IuZmlsbFN0eWxlPWw7Yi5maWxsUmVjdCgwLDAscixoKTtiLmZpbGxTdHlsZT1mO2IuZmlsbFRleHQoZSx0LHYpO1xuYi5maWxsUmVjdChkLG0sbixwKTtiLmZpbGxTdHlsZT1sO2IuZ2xvYmFsQWxwaGE9Ljk7Yi5maWxsUmVjdChkLG0sbixwKTtyZXR1cm57ZG9tOnEsdXBkYXRlOmZ1bmN0aW9uKGgsdyl7Yz1NYXRoLm1pbihjLGgpO2s9TWF0aC5tYXgoayxoKTtiLmZpbGxTdHlsZT1sO2IuZ2xvYmFsQWxwaGE9MTtiLmZpbGxSZWN0KDAsMCxyLG0pO2IuZmlsbFN0eWxlPWY7Yi5maWxsVGV4dChnKGgpK1wiIFwiK2UrXCIgKFwiK2coYykrXCItXCIrZyhrKStcIilcIix0LHYpO2IuZHJhd0ltYWdlKHEsZCthLG0sbi1hLHAsZCxtLG4tYSxwKTtiLmZpbGxSZWN0KGQrbi1hLG0sYSxwKTtiLmZpbGxTdHlsZT1sO2IuZ2xvYmFsQWxwaGE9Ljk7Yi5maWxsUmVjdChkK24tYSxtLGEsZygoMS1oL3cpKnApKX19fTtyZXR1cm4gZn0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///571\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var B=__webpack_module_cache__[Q];if(void 0!==B)return B.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,B,F,U)=>{if(!B){var C=1/0;for(t=0;t<deferred.length;t++){for(var[B,F,U]=deferred[t],g=!0,I=0;I<B.length;I++)(!1&U||C>=U)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](B[I])))?B.splice(I--,1):(g=!1,U<C&&(C=U));if(g){deferred.splice(t--,1);var L=F();void 0!==L&&(Q=L)}}return Q}U=U||0;for(var t=deferred.length;t>0&&deferred[t-1][2]>U;t--)deferred[t]=deferred[t-1];deferred[t]=[B,F,U]},__webpack_require__.n=Q=>{var B=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(B,{a:B}),B},__webpack_require__.d=(Q,B)=>{for(var F in B)__webpack_require__.o(B,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:B[F]})},__webpack_require__.o=(Q,B)=>Object.prototype.hasOwnProperty.call(Q,B),(()=>{var Q={792:0};__webpack_require__.O.j=B=>0===Q[B];var B=(B,F)=>{var U,C,[g,I,L]=F,t=0;if(g.some((B=>0!==Q[B]))){for(U in I)__webpack_require__.o(I,U)&&(__webpack_require__.m[U]=I[U]);if(L)var s=L(__webpack_require__)}for(B&&B(F);t<g.length;t++)C=g[t],__webpack_require__.o(Q,C)&&Q[C]&&Q[C][0](),Q[C]=0;return __webpack_require__.O(s)},F=self.webpackChunkweb=self.webpackChunkweb||[];F.forEach(B.bind(null,0)),F.push=B.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[233],(()=>__webpack_require__(617)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();