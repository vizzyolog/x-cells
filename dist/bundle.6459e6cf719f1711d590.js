(()=>{"use strict";var __webpack_modules__={251:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.core.js\nvar three_core = __webpack_require__(922);\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(437);\n;// ./src/scene.js\n// scene.js\n\nvar scene_scene, camera, renderer;\nvar directionalLight; // Экспортируем свет для доступности в других модулях\n\nfunction initScene() {\n  console.log("try to initScene");\n  scene_scene = new three_core/* Scene */.Z58();\n  scene_scene.background = new three_core/* Color */.Q1f(0x88ccff);\n  camera = new three_core/* PerspectiveCamera */.ubm(60, window.innerWidth / window.innerHeight, 0.2, 2000);\n  camera.position.set(0, 50, 100);\n  camera.lookAt(0, 0, 0);\n  renderer = new three_module/* WebGLRenderer */.JeP({\n    antialias: true\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  // Включаем поддержку теней\n  renderer.shadowMap.enabled = true;\n  renderer.shadowMap.type = three_core/* PCFSoftShadowMap */.Wk7;\n  document.body.appendChild(renderer.domElement);\n  window.addEventListener(\'resize\', onWindowResize);\n\n  // Настраиваем освещение\n  var ambient = new three_core/* AmbientLight */.$p8(0xffffff, 0.5);\n  scene_scene.add(ambient);\n\n  // Основной направленный свет с тенями\n  directionalLight = new three_core/* DirectionalLight */.ZyN(0xffffff, 1);\n  directionalLight.position.set(50, 100, 50);\n  directionalLight.castShadow = true;\n\n  // Настраиваем параметры теней для охвата большой области\n  directionalLight.shadow.camera.near = 0.1;\n  directionalLight.shadow.camera.far = 2000; // Увеличиваем максимальную дальность теней\n  directionalLight.shadow.camera.left = -1000; // Значительно увеличиваем размер области теней\n  directionalLight.shadow.camera.right = 1000;\n  directionalLight.shadow.camera.top = 1000;\n  directionalLight.shadow.camera.bottom = -1000;\n  directionalLight.shadow.mapSize.width = 2048; // Большее разрешение для лучшего качества\n  directionalLight.shadow.mapSize.height = 2048;\n  directionalLight.shadow.bias = -0.0001; // Уменьшаем артефакты тени\n  scene_scene.add(directionalLight);\n\n  // Добавляем вспомогательный свет для подсветки теней\n  var fillLight = new three_core/* DirectionalLight */.ZyN(0xffffff, 0.3);\n  fillLight.position.set(-50, 50, -50);\n  scene_scene.add(fillLight);\n\n  // Можно добавить помощник для отладки теней (раскомментируйте при необходимости)\n  // const helper = new THREE.CameraHelper(directionalLight.shadow.camera);\n  // scene.add(helper);\n}\nfunction onWindowResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\n// Добавляем функцию для обновления положения источника света относительно камеры, как солнце\nfunction updateShadowCamera() {\n  if (!directionalLight || !camera) return;\n\n  // Получаем направление взгляда камеры\n  var cameraDirection = new three_core/* Vector3 */.Pq0();\n  camera.getWorldDirection(cameraDirection);\n\n  // Создаем позицию "солнца" относительно камеры\n  // Поднимаем "солнце" на 200 единиц вверх от позиции камеры и смещаем немного в сторону и назад\n  var sunOffset = new three_core/* Vector3 */.Pq0(100, 200, -50);\n  var sunPosition = camera.position.clone().add(sunOffset);\n\n  // Обновляем позицию света\n  directionalLight.position.copy(sunPosition);\n\n  // Определяем точку, куда направлен свет - перед камерой на расстоянии 100 единиц\n  var targetOffset = cameraDirection.clone().multiplyScalar(100);\n  var targetPosition = camera.position.clone().add(targetOffset);\n  directionalLight.target.position.copy(targetPosition);\n\n  // Обновляем матрицу трансформации цели света\n  directionalLight.target.updateMatrixWorld();\n\n  // Обновляем матрицу камеры теней\n  directionalLight.shadow.camera.updateProjectionMatrix();\n}\n\n;// ./src/objects.js\n// objects.js\n\n\n\nvar objects_objects = {}; // Словарь объектов: id -> { mesh, body, serverPos, ... }\n\nfunction createMeshAndBodyForObject(data) {\n  if (!data || !data.object_type) {\n    console.error("Invalid data received for object creation:", data);\n    return null;\n  }\n  var type = data.object_type;\n  var mesh,\n    body = null;\n  switch (type) {\n    case "terrain":\n      mesh = createTerrainMesh(data);\n      body = createPhysicsBodyForTerrain(data);\n      break;\n    case "sphere":\n      mesh = createSphereMesh(data);\n      body = createPhysicsBodyForSphere(data);\n      break;\n    case "tree":\n      mesh = createTreeMesh(data);\n      break;\n    default:\n      console.warn("Unknown object type: ".concat(type));\n      mesh = createDefaultMesh(data);\n      break;\n  }\n  scene_scene.add(mesh);\n  return {\n    mesh: mesh,\n    body: body\n  };\n}\nfunction createPhysicsBodyForTerrain(data) {\n  if (typeof Ammo === \'undefined\') {\n    console.error(\'Ammo.js не инициализирован\');\n    return null;\n  }\n  if (!physics_localPhysicsWorld) {\n    console.error(\'Физический мир не инициализирован\');\n    return null;\n  }\n  var w = data.heightmap_w;\n  var h = data.heightmap_h;\n  var scaleX = data.scale_x;\n  var scaleZ = data.scale_z;\n\n  // Создаем буфер в памяти Ammo для данных высот\n  var ammoHeightData = Ammo._malloc(4 * w * h);\n\n  // Копируем данные высот в память Ammo\n  var p = 0;\n  var p2 = 0;\n  for (var j = 0; j < h; j++) {\n    for (var i = 0; i < w; i++) {\n      Ammo.HEAPF32[ammoHeightData + p2 >> 2] = data.height_data[p];\n      p++;\n      p2 += 4;\n    }\n  }\n\n  // Создаем форму террейна\n  var shape = new Ammo.btHeightfieldTerrainShape(w, h, ammoHeightData, 1,\n  // heightScale\n  data.min_height, data.max_height, 1,\n  // up axis = 1 для Y\n  Ammo.PHY_FLOAT, false // flipQuadEdges\n  );\n\n  // Устанавливаем масштабирование\n  shape.setLocalScaling(new Ammo.btVector3(scaleX, data.scale_y, scaleZ));\n\n  // Устанавливаем margin для террейна (0.5 вместо 2.0, так как террейн меньше)\n  shape.setMargin(0.5);\n  console.log("[Terrain] Установлен margin террейна:", 0.5);\n\n  // Создаем трансформацию\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n\n  // Важно! Смещаем террейн, так как Bullet центрирует его по ограничивающему боксу\n  transform.setOrigin(new Ammo.btVector3(data.x || 0, (data.min_height + data.max_height) / 2, data.z || 0));\n  var mass = 0; // Статическое тело\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Добавляем тело в физический мир\n  var TERRAIN_GROUP = 1;\n  physics_localPhysicsWorld.addRigidBody(body, TERRAIN_GROUP, -1); // Террейн сталкивается со всеми\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n  console.log("[Terrain] Физическое тело создано:", {\n    размеры: {\n      w: w,\n      h: h\n    },\n    масштаб: {\n      x: scaleX,\n      y: data.scale_y,\n      z: scaleZ\n    },\n    позиция: {\n      x: data.x || 0,\n      y: (data.min_height + data.max_height) / 2,\n      z: data.z || 0\n    },\n    минВысота: data.min_height,\n    максВысота: data.max_height\n  });\n  return body;\n}\nfunction createTerrainMesh(data) {\n  var w = data.heightmap_w || 64;\n  var h = data.heightmap_h || 64;\n  var geo = new three_core/* PlaneGeometry */.bdM(w * data.scale_x, h * data.scale_z, w - 1, h - 1);\n  geo.rotateX(-Math.PI / 2);\n  if (data.height_data) {\n    var verts = geo.attributes.position.array;\n    for (var i = 0; i < verts.length; i += 3) {\n      var ix = i / 3 % w;\n      var iz = Math.floor(i / 3 / w);\n      verts[i + 1] = data.height_data[iz * w + ix] * data.scale_y;\n    }\n    geo.computeVertexNormals();\n  }\n  var mesh = new three_core/* Mesh */.eaF(geo, new three_core/* MeshPhongMaterial */.tXL({\n    color: parseColor(data.color || "#888888"),\n    wireframe: false,\n    flatShading: true\n  }));\n\n  // Включаем тени для террейна\n  mesh.receiveShadow = true;\n  return mesh;\n}\nfunction createSphereMesh(data) {\n  var geo = new three_core/* SphereGeometry */.Gu$(data.radius || 1, 32, 32);\n  var mesh = new three_core/* Mesh */.eaF(geo, new three_core/* MeshPhongMaterial */.tXL({\n    color: parseColor(data.color || "#888888"),\n    shininess: 30\n  }));\n\n  // Включаем тени для сфер\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n  return mesh;\n}\nfunction createTreeMesh(data) {\n  var group = new three_core/* Group */.YJl();\n  if (data.branches && Array.isArray(data.branches)) {\n    data.branches.forEach(function (branch, index) {\n      if (branch.startX === undefined || branch.startY === undefined || branch.startZ === undefined || branch.endX === undefined || branch.endY === undefined || branch.endZ === undefined) {\n        console.warn("Branch coordinates are missing or invalid at index ".concat(index, ":"), branch);\n        return;\n      }\n      var branchGeo = new three_core/* CylinderGeometry */.Ho_(branch.radiusTop || branch.radius || 0.1,\n      // верхний радиус\n      branch.radiusBottom || branch.radius || 0.2,\n      // нижний радиус\n      1, 8);\n      var branchMat = new three_core/* MeshPhongMaterial */.tXL({\n        color: parseColor(branch.color || "#654321"),\n        shininess: 10\n      });\n      var branchMesh = new three_core/* Mesh */.eaF(branchGeo, branchMat);\n\n      // Включаем тени для веток\n      branchMesh.castShadow = true;\n      branchMesh.receiveShadow = true;\n      var midX = (branch.startX + branch.endX) / 2;\n      var midY = (branch.startY + branch.endY) / 2;\n      var midZ = (branch.startZ + branch.endZ) / 2;\n      branchMesh.position.set(midX, midY, midZ);\n      branchMesh.lookAt(new three_core/* Vector3 */.Pq0(branch.endX, branch.endY, branch.endZ));\n      var length = new three_core/* Vector3 */.Pq0(branch.endX - branch.startX, branch.endY - branch.startY, branch.endZ - branch.startZ).length();\n      branchMesh.scale.set(1, length, 1);\n      group.add(branchMesh);\n    });\n  }\n  return group;\n}\nfunction createDefaultMesh(data) {\n  var geo = new three_core/* BoxGeometry */.iNn(1, 1, 1);\n  return new three_core/* Mesh */.eaF(geo, new three_core/* MeshLambertMaterial */.G_z({\n    color: parseColor(data.color || "#888888")\n  }));\n}\nfunction createPhysicsBodyForSphere(data) {\n  try {\n    if (typeof Ammo === \'undefined\') {\n      console.error(\'Ammo.js не инициализирован\');\n      return null;\n    }\n    if (!physics_localPhysicsWorld) {\n      console.error(\'Физический мир не инициализирован\');\n      return null;\n    }\n    var radius = data.radius || 1;\n    var mass = data.mass || 1;\n\n    // Создаем все Ammo объекты через window.Ammo\n    var shape = new window.Ammo.btSphereShape(radius);\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(data.x || 0, data.y || 0, data.z || 0));\n    var localInertia = new window.Ammo.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    var motionState = new window.Ammo.btDefaultMotionState(transform);\n    var rbInfo = new window.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    var body = new window.Ammo.btRigidBody(rbInfo);\n\n    // Настраиваем физические свойства\n    body.setFriction(0.5);\n    body.setRollingFriction(0.1);\n    body.setRestitution(0.2); // Немного уменьшаем упругость для стабильности\n    body.setDamping(0.01, 0.01); // Небольшое линейное и угловое затухание\n\n    // Включаем CCD для предотвращения проваливания сквозь террейн\n    // Для меньшего масштаба (100 вместо 15000) эти значения более оптимальны\n    body.setCcdMotionThreshold(radius * 0.8); // Увеличиваем порог для активации CCD\n    body.setCcdSweptSphereRadius(radius * 0.7); // Радиус сферы для CCD\n\n    // Отключаем деактивацию\n    body.setActivationState(4); // DISABLE_DEACTIVATION\n\n    // Добавляем тело в физический мир\n    var SPHERE_GROUP = 2;\n    physics_localPhysicsWorld.addRigidBody(body, SPHERE_GROUP, -1); // Сферы сталкиваются со всеми\n\n    console.log("[Sphere] Физическое тело создано:", {\n      radius: radius,\n      mass: mass,\n      position: {\n        x: data.x || 0,\n        y: data.y || 0,\n        z: data.z || 0\n      },\n      ccd: {\n        motionThreshold: radius * 0.8,\n        sweptSphereRadius: radius * 0.7\n      },\n      friction: 0.5,\n      restitution: 0.2\n    });\n\n    // Очистка памяти\n    window.Ammo.destroy(rbInfo);\n    window.Ammo.destroy(localInertia);\n    return body;\n  } catch (error) {\n    console.error(\'Ошибка при создании физического тела:\', error);\n    return null;\n  }\n}\nfunction parseColor(colorStr) {\n  if (!colorStr) return 0x888888;\n  if (colorStr.startsWith("#")) {\n    return parseInt(colorStr.slice(1), 16);\n  }\n  return 0x888888;\n}\nfunction createTestSphere() {\n  // Создаем визуальную сферу\n  var radius = 1;\n  var geometry = new THREE.SphereGeometry(radius, 32, 32);\n  var material = new THREE.MeshPhongMaterial({\n    color: 0xff00ff,\n    shininess: 30\n  });\n  var mesh = new THREE.Mesh(geometry, material);\n\n  // Включаем тени для тестовой сферы\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n\n  // Позиционируем сферу высоко над террейном\n  var startY = 58; // Высота над террейном\n  mesh.position.set(0, startY, 0);\n  scene.add(mesh);\n\n  // Создаем физическое тело\n  var shape = new Ammo.btSphereShape(radius);\n  var mass = 1;\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n  transform.setOrigin(new Ammo.btVector3(0, startY, 0));\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  shape.calculateLocalInertia(mass, localInertia);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Важные настройки для физического тела\n  body.setActivationState(4); // DISABLE_DEACTIVATION\n  body.setFriction(0.5);\n  body.setRollingFriction(0.1);\n  body.setRestitution(0.5); // Упругость\n\n  // Добавляем тело в физический мир\n  var SPHERE_GROUP = 2;\n  localPhysicsWorld.addRigidBody(body, SPHERE_GROUP, -1); // Тестовая сфера сталкивается со всеми\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n\n  // Добавляем объект в наш список объектов\n  var testSphereObj = {\n    mesh: mesh,\n    body: body,\n    object_type: "test_sphere",\n    physicsBy: "ammo" // Изменено с "both" на "ammo", чтобы управлялось только локальной физикой\n  };\n  objects_objects["test_sphere"] = testSphereObj;\n  return testSphereObj;\n}\n;// ./src/physics.js\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// physics.js\n\n\n\nvar physics_localPhysicsWorld = null;\nvar ammoPromise = null;\n\n// Настройки для коррекции позиции\nvar DEAD_ZONE = 0.5; // Увеличиваем мертвую зону для уменьшения телепортаций\nvar CORRECTION_STRENGTH = 6.0; // Уменьшаем силу корректировки для более плавного движения\nvar TELEPORT_THRESHOLD = 2.0; // Увеличиваем порог телепортации\n\nfunction initAmmo() {\n  return _initAmmo.apply(this, arguments);\n}\nfunction _initAmmo() {\n  _initAmmo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!ammoPromise) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt("return", ammoPromise);\n        case 2:\n          ammoPromise = new Promise(function (resolve, reject) {\n            var script = document.createElement(\'script\');\n            script.src = \'/ammo/ammo.wasm.js\'; // путь от корня веб-сервера\n            script.async = true;\n            script.onload = function () {\n              console.log("[Ammo] Скрипт загружен, инициализация...");\n              Ammo().then(function (AmmoLib) {\n                window.Ammo = AmmoLib;\n\n                // Инициализируем физический мир после загрузки Ammo\n                var collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n                var dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n                var broadphase = new AmmoLib.btDbvtBroadphase();\n                var solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n                physics_localPhysicsWorld = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n                physics_localPhysicsWorld.setGravity(new AmmoLib.btVector3(0, -9.81, 0));\n                console.log("[Ammo] Инициализация успешна");\n                resolve(AmmoLib);\n              })["catch"](reject);\n            };\n            script.onerror = function (error) {\n              console.error("[Ammo] Ошибка загрузки скрипта:", error);\n              reject(error);\n            };\n            document.body.appendChild(script);\n          });\n          return _context.abrupt("return", ammoPromise);\n        case 4:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _initAmmo.apply(this, arguments);\n}\nfunction stepPhysics(deltaTime) {\n  // Проверяем корректность deltaTime\n  if (!deltaTime || isNaN(deltaTime) || deltaTime <= 0 || deltaTime > 1) {\n    deltaTime = 1 / 60; // Значение по умолчанию\n  }\n\n  // Ограничиваем максимальный шаг для стабильности\n  var maxStep = 1 / 30; // Не больше 30мс для одного шага\n  var effectiveStep = Math.min(deltaTime, maxStep);\n\n  // Используем фиксированный шаг и переменное количество подшагов для точности\n  var fixedStep = 1 / 120; // 120 Гц внутренние шаги\n  var maxSubSteps = Math.ceil(effectiveStep / fixedStep);\n\n  // Визуализируем расхождения между двигателями физики\n  visualizeDivergence(objects_objects);\n\n  // Выполняем шаг симуляции с заданными параметрами\n  physics_localPhysicsWorld.stepSimulation(effectiveStep, maxSubSteps, fixedStep);\n\n  // Низкочастотный лог для отладки\n  var now = Date.now();\n  if (!window.lastPhysicsStepLog || now - window.lastPhysicsStepLog > 5000) {\n    console.log("[Physics] \\u0428\\u0430\\u0433 \\u0441\\u0438\\u043C\\u0443\\u043B\\u044F\\u0446\\u0438\\u0438:", {\n      deltaTime: deltaTime.toFixed(5),\n      effectiveStep: effectiveStep.toFixed(5),\n      fixedStep: fixedStep,\n      maxSubSteps: maxSubSteps,\n      realSubSteps: Math.ceil(effectiveStep / fixedStep)\n    });\n    window.lastPhysicsStepLog = now;\n  }\n\n  // Обновляем физические объекты\n  updatePhysicsObjects(objects_objects);\n}\nfunction updatePhysicsObjects(objects) {\n  // Переменные для диагностики\n  var mainSpherePos = null;\n  var ammoShadowPos = null;\n  var bulletShadowPos = null;\n\n  // Обновляем все объекты\n  for (var id in objects) {\n    var obj = objects[id];\n    if (!obj.mesh) continue;\n    switch (obj.physicsBy) {\n      case "ammo":\n        // Обновление только по физике Ammo.js\n        if (obj.body && obj.object_type !== "terrain") {\n          var trans = new window.Ammo.btTransform();\n          obj.body.getMotionState().getWorldTransform(trans);\n          var locX = trans.getOrigin().x();\n          var locY = trans.getOrigin().y();\n          var locZ = trans.getOrigin().z();\n          var qx = trans.getRotation().x();\n          var qy = trans.getRotation().y();\n          var qz = trans.getRotation().z();\n          var qw = trans.getRotation().w();\n          obj.mesh.position.set(locX, locY, locZ);\n          obj.mesh.quaternion.set(qx, qy, qz, qw);\n\n          // Сохраняем для диагностики\n          if (id === "ammo_shadow") {\n            ammoShadowPos = {\n              x: locX,\n              y: locY,\n              z: locZ\n            };\n          }\n        }\n        break;\n      case "bullet":\n        // Обновление по серверным данным с простой интерполяцией\n        if (obj.serverPos && obj.object_type !== "terrain") {\n          // Простая линейная интерполяция\n          var interpolationFactor = 0.2; // Можно настроить под ваши нужды\n\n          obj.mesh.position.x += (obj.serverPos.x - obj.mesh.position.x) * interpolationFactor;\n          obj.mesh.position.y += (obj.serverPos.y - obj.mesh.position.y) * interpolationFactor;\n          obj.mesh.position.z += (obj.serverPos.z - obj.mesh.position.z) * interpolationFactor;\n\n          // Сохраняем для диагностики\n          if (id === "bullet_shadow") {\n            bulletShadowPos = {\n              x: obj.mesh.position.x,\n              y: obj.mesh.position.y,\n              z: obj.mesh.position.z\n            };\n          }\n        }\n        break;\n      case "both":\n        // Гибридный подход для объектов, управляемых обоими источниками\n        if (obj.serverPos && obj.object_type !== "terrain" && obj.body) {\n          // Сохраняем позицию основной сферы для диагностики\n          if (id === "mainPlayer1") {\n            mainSpherePos = {\n              x: obj.mesh.position.x,\n              y: obj.mesh.position.y,\n              z: obj.mesh.position.z,\n              serverX: obj.serverPos.x,\n              serverY: obj.serverPos.y,\n              serverZ: obj.serverPos.z\n            };\n          }\n\n          // Получаем текущую позицию из физического тела\n          var transform = new window.Ammo.btTransform();\n          obj.body.getMotionState().getWorldTransform(transform);\n\n          // Вычисляем разницу между серверной и текущей позицией физического тела\n          var currentX = transform.getOrigin().x();\n          var currentY = transform.getOrigin().y();\n          var currentZ = transform.getOrigin().z();\n\n          // Нам важно знать скорость объекта для выбора оптимальной стратегии коррекции\n          var velocity = obj.body.getLinearVelocity();\n          var speedSq = velocity.x() * velocity.x() + velocity.y() * velocity.y() + velocity.z() * velocity.z();\n          var isMovingFast = speedSq > 4.0; // Если скорость больше 2 м/с\n\n          var dx = obj.serverPos.x - currentX;\n          var dy = obj.serverPos.y - currentY;\n          var dz = obj.serverPos.z - currentZ;\n\n          // Вычисляем расстояние\n          var distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\n\n          // Логируем только при значительных расхождениях\n          if (distance > DEAD_ZONE || isMovingFast) {\n            console.log("[Physics] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(id, ":"), {\n              расстояние: distance.toFixed(3),\n              скорость: Math.sqrt(speedSq).toFixed(3),\n              быстро: isMovingFast,\n              клиент: {\n                x: currentX.toFixed(2),\n                y: currentY.toFixed(2),\n                z: currentZ.toFixed(2)\n              },\n              сервер: {\n                x: obj.serverPos.x.toFixed(2),\n                y: obj.serverPos.y.toFixed(2),\n                z: obj.serverPos.z.toFixed(2)\n              }\n            });\n          }\n\n          // Применяем гибридный подход\n          if (distance > DEAD_ZONE) {\n            if (distance > TELEPORT_THRESHOLD || isMovingFast && distance > TELEPORT_THRESHOLD * 0.5) {\n              // Телепортация для больших расхождений или при быстром движении\n              console.log("[Physics] \\u0422\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0430\\u0446\\u0438\\u044F \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(id, ", \\u0440\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435: ").concat(distance.toFixed(2)));\n              transform.setOrigin(new window.Ammo.btVector3(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z));\n              obj.body.getMotionState().setWorldTransform(transform);\n\n              // Сбрасываем скорость только при существенных расхождениях\n              if (distance > TELEPORT_THRESHOLD * 1.5) {\n                var zero = new window.Ammo.btVector3(0, 0, 0);\n                obj.body.setLinearVelocity(zero);\n                obj.body.setAngularVelocity(zero);\n                window.Ammo.destroy(zero);\n              } else {\n                // Иначе уменьшаем скорость, но не обнуляем полностью\n                var dampedVelocity = new window.Ammo.btVector3(velocity.x() * 0.5, velocity.y() * 0.5, velocity.z() * 0.5);\n                obj.body.setLinearVelocity(dampedVelocity);\n                window.Ammo.destroy(dampedVelocity);\n              }\n\n              // Немедленно синхронизируем меш с физическим телом\n              var updatedTransform = new window.Ammo.btTransform();\n              obj.body.getMotionState().getWorldTransform(updatedTransform);\n              var px = updatedTransform.getOrigin().x();\n              var py = updatedTransform.getOrigin().y();\n              var pz = updatedTransform.getOrigin().z();\n              obj.mesh.position.set(px, py, pz);\n              window.Ammo.destroy(updatedTransform);\n            } else {\n              // Корректирующая сила для средних расхождений\n              // Более плавная коррекция для медленно движущихся объектов\n              var adaptiveStrength = isMovingFast ? CORRECTION_STRENGTH : CORRECTION_STRENGTH * 0.7;\n              var magnitude = distance * adaptiveStrength;\n\n              // Для объектов на земле не применяем вертикальную коррекцию,\n              // если они находятся на поверхности с небольшой разницей по высоте\n              var correctY = true;\n              if (Math.abs(dy) < DEAD_ZONE && Math.abs(velocity.y()) < 0.5) {\n                correctY = false;\n              }\n              var force = new window.Ammo.btVector3(dx * magnitude, correctY ? dy * magnitude : 0, dz * magnitude);\n\n              // Активируем тело и применяем силу\n              obj.body.activate(true);\n              obj.body.applyCentralForce(force);\n              window.Ammo.destroy(force);\n\n              // Для очень медленной коррекции также немного двигаем меш напрямую\n              if (!isMovingFast && distance < TELEPORT_THRESHOLD * 0.3) {\n                obj.mesh.position.lerp(new three_core/* Vector3 */.Pq0(obj.serverPos.x, correctY ? obj.serverPos.y : obj.mesh.position.y, obj.serverPos.z), 0.1);\n              }\n            }\n          }\n          window.Ammo.destroy(velocity);\n          window.Ammo.destroy(transform);\n        }\n        break;\n      default:\n        console.warn("[Physics] \\u041D\\u0435\\u0438\\u0437\\u0432\\u0435\\u0441\\u0442\\u043D\\u044B\\u0439 \\u0442\\u0438\\u043F physicsBy \\u0434\\u043B\\u044F \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(id, ": ").concat(obj.physicsBy));\n        break;\n    }\n  }\n\n  // Выводим диагностическую информацию о расхождениях\n  if (mainSpherePos && ammoShadowPos && bulletShadowPos) {\n    // Вычисляем расхождения между диагностическими сферами\n    var mainToAmmoDistance = Math.sqrt(Math.pow(mainSpherePos.x - ammoShadowPos.x, 2) + Math.pow(mainSpherePos.y - ammoShadowPos.y, 2) + Math.pow(mainSpherePos.z - ammoShadowPos.z, 2));\n    var mainToBulletDistance = Math.sqrt(Math.pow(mainSpherePos.x - bulletShadowPos.x, 2) + Math.pow(mainSpherePos.y - bulletShadowPos.y, 2) + Math.pow(mainSpherePos.z - bulletShadowPos.z, 2));\n    var serverToMainDistance = Math.sqrt(Math.pow(mainSpherePos.serverX - mainSpherePos.x, 2) + Math.pow(mainSpherePos.serverY - mainSpherePos.y, 2) + Math.pow(mainSpherePos.serverZ - mainSpherePos.z, 2));\n\n    // Выводим статистику только примерно раз в секунду (чтобы не спамить консоль)\n    if (Math.random() < 0.016) {\n      // примерно при 60 FPS будет выводить раз в секунду\n      console.log("[Physics] Диагностика расхождений:", {\n        "Основная сфера -> Ammo-тень": mainToAmmoDistance.toFixed(3),\n        "Основная сфера -> Bullet-тень": mainToBulletDistance.toFixed(3),\n        "Серверная позиция -> Основная сфера": serverToMainDistance.toFixed(3)\n      });\n    }\n  }\n\n  // Добавляем расчет и визуализацию расхождений между движками\n  visualizeDivergence(objects);\n}\n\n// Функция для визуализации расхождений между движками\nfunction visualizeDivergence(objects) {\n  // Проверяем наличие всех необходимых объектов\n  var mainSphere = objects["mainPlayer1"];\n  var ammoShadow = objects["ammo_shadow"];\n  var bulletShadow = objects["bullet_shadow"];\n  if (!mainSphere || !ammoShadow || !bulletShadow) return;\n\n  // Получаем позиции\n  var mainPos = mainSphere.mesh.position;\n  var ammoPos = ammoShadow.mesh.position;\n  var bulletPos = bulletShadow.mesh.position;\n\n  // Расчет расстояний\n  var distMainToAmmo = Math.sqrt(Math.pow(mainPos.x - ammoPos.x, 2) + Math.pow(mainPos.y - ammoPos.y, 2) + Math.pow(mainPos.z - ammoPos.z, 2));\n  var distMainToBullet = Math.sqrt(Math.pow(mainPos.x - bulletPos.x, 2) + Math.pow(mainPos.y - bulletPos.y, 2) + Math.pow(mainPos.z - bulletPos.z, 2));\n  var distAmmoBullet = Math.sqrt(Math.pow(ammoPos.x - bulletPos.x, 2) + Math.pow(ammoPos.y - ammoPos.y, 2) + Math.pow(ammoPos.z - bulletPos.z, 2));\n\n  // Ограничим вывод лога, чтобы не спамить консоль (примерно раз в секунду)\n  if (!window.lastDivergenceLog || Date.now() - window.lastDivergenceLog > 1000) {\n    console.log("[Physics] Расхождения между движками:");\n    console.log("  \\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0439 \\u0448\\u0430\\u0440 (".concat(mainSphere.physicsBy, "): x=").concat(mainPos.x.toFixed(2), ", y=").concat(mainPos.y.toFixed(2), ", z=").concat(mainPos.z.toFixed(2)));\n    console.log("  \\u0422\\u0435\\u043D\\u044C Ammo: x=".concat(ammoPos.x.toFixed(2), ", y=").concat(ammoPos.y.toFixed(2), ", z=").concat(ammoPos.z.toFixed(2)));\n    console.log("  \\u0422\\u0435\\u043D\\u044C Bullet: x=".concat(bulletPos.x.toFixed(2), ", y=").concat(bulletPos.y.toFixed(2), ", z=").concat(bulletPos.z.toFixed(2)));\n    console.log("  \\u0420\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435 \\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0439-Ammo: ".concat(distMainToAmmo.toFixed(3)));\n    console.log("  \\u0420\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435 \\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0439-Bullet: ".concat(distMainToBullet.toFixed(3)));\n    console.log("  \\u0420\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435 Ammo-Bullet: ".concat(distAmmoBullet.toFixed(3)));\n\n    // Визуальное отображение расхождений\n    if (distMainToAmmo > DEAD_ZONE) {\n      console.warn("  [!] \\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0439 \\u0448\\u0430\\u0440 \\u0440\\u0430\\u0441\\u0445\\u043E\\u0434\\u0438\\u0442\\u0441\\u044F \\u0441 Ammo \\u043D\\u0430 ".concat(distMainToAmmo.toFixed(3), " (> ").concat(DEAD_ZONE, ")"));\n    }\n    if (distMainToBullet > DEAD_ZONE) {\n      console.warn("  [!] \\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0439 \\u0448\\u0430\\u0440 \\u0440\\u0430\\u0441\\u0445\\u043E\\u0434\\u0438\\u0442\\u0441\\u044F \\u0441 Bullet \\u043D\\u0430 ".concat(distMainToBullet.toFixed(3), " (> ").concat(DEAD_ZONE, ")"));\n    }\n    if (distAmmoBullet > DEAD_ZONE) {\n      console.warn("  [!] Ammo \\u0440\\u0430\\u0441\\u0445\\u043E\\u0434\\u0438\\u0442\\u0441\\u044F \\u0441 Bullet \\u043D\\u0430 ".concat(distAmmoBullet.toFixed(3), " (> ").concat(DEAD_ZONE, ")"));\n    }\n\n    // Обновляем время последнего лога\n    window.lastDivergenceLog = Date.now();\n  }\n\n  // Рисуем линии между объектами для визуализации расхождений\n  visualizeDivergenceLines(objects, mainPos, ammoPos, bulletPos);\n}\n\n// Функция для рисования линий, показывающих расхождения\nfunction visualizeDivergenceLines(objects, mainPos, ammoPos, bulletPos) {\n  // Проверяем наличие линий в объектах\n  if (!objects.divergenceLines) {\n    // Создаем материалы для линий\n    var mainToAmmoMaterial = new three_core/* LineBasicMaterial */.mrM({\n      color: 0xff0000\n    }); // красный\n    var mainToBulletMaterial = new three_core/* LineBasicMaterial */.mrM({\n      color: 0x00ff00\n    }); // зеленый\n    var ammoBulletMaterial = new three_core/* LineBasicMaterial */.mrM({\n      color: 0x0000ff\n    }); // синий\n\n    // Создаем геометрии и линии\n    var mainToAmmoGeometry = new three_core/* BufferGeometry */.LoY();\n    var mainToBulletGeometry = new three_core/* BufferGeometry */.LoY();\n    var ammoBulletGeometry = new three_core/* BufferGeometry */.LoY();\n    var mainToAmmoLine = new three_core/* Line */.N1A(mainToAmmoGeometry, mainToAmmoMaterial);\n    var mainToBulletLine = new three_core/* Line */.N1A(mainToBulletGeometry, mainToBulletMaterial);\n    var ammoBulletLine = new three_core/* Line */.N1A(ammoBulletGeometry, ammoBulletMaterial);\n\n    // Добавляем линии на сцену\n    if (objects.mainPlayer1 && objects.mainPlayer1.mesh.parent) {\n      var scene = objects.mainPlayer1.mesh.parent;\n      scene.add(mainToAmmoLine);\n      scene.add(mainToBulletLine);\n      scene.add(ammoBulletLine);\n    }\n\n    // Сохраняем линии в объекты\n    objects.divergenceLines = {\n      mainToAmmo: {\n        line: mainToAmmoLine,\n        geometry: mainToAmmoGeometry\n      },\n      mainToBullet: {\n        line: mainToBulletLine,\n        geometry: mainToBulletGeometry\n      },\n      ammoBullet: {\n        line: ammoBulletLine,\n        geometry: ammoBulletGeometry\n      }\n    };\n  }\n\n  // Обновляем позиции линий\n  if (objects.divergenceLines) {\n    // Линия Основной-Ammo\n    updateLine(objects.divergenceLines.mainToAmmo.geometry, mainPos, ammoPos);\n\n    // Линия Основной-Bullet\n    updateLine(objects.divergenceLines.mainToBullet.geometry, mainPos, bulletPos);\n\n    // Линия Ammo-Bullet\n    updateLine(objects.divergenceLines.ammoBullet.geometry, ammoPos, bulletPos);\n  }\n}\n\n// Функция для обновления позиций линии\nfunction updateLine(geometry, startPos, endPos) {\n  var positions = new Float32Array([startPos.x, startPos.y, startPos.z, endPos.x, endPos.y, endPos.z]);\n  geometry.setAttribute(\'position\', new three_core/* BufferAttribute */.THS(positions, 3));\n  geometry.attributes.position.needsUpdate = true;\n}\nfunction applyImpulseToSphere(cmd, objects) {\n  console.log("[Debug] Переданные объекты в applyImpulseToSphere:", objects);\n  // Проверяем, что objects передан и является объектом\n  if (!objects || _typeof(objects) !== \'object\') {\n    console.warn("[Physics] Некорректные объекты переданы в applyImpulseToSphere");\n    return;\n  }\n\n  // Базовые значения импульсов\n  var baseImpulseHorizontal = 5.0;\n  var baseImpulseVertical = 10.0;\n\n  // Проходим по всем объектам и применяем импульс только к шарам с physicsBy: "ammo"\n  for (var id in objects) {\n    var obj = objects[id];\n    if (obj && obj.mesh && obj.mesh.geometry && obj.mesh.geometry.type === "SphereGeometry" && obj.body && obj.physicsBy === "ammo" // Только для локально управляемых объектов\n    ) {\n      obj.body.activate(true);\n\n      // Получаем текущую скорость\n      var velocity = obj.body.getLinearVelocity();\n      var speedSq = velocity.x() * velocity.x() + velocity.y() * velocity.y() + velocity.z() * velocity.z();\n      var currentSpeed = Math.sqrt(speedSq);\n\n      // Адаптивное значение импульса в зависимости от текущей скорости\n      // Чем выше скорость, тем меньше дополнительный импульс\n      var speedFactor = Math.max(0.5, 1.0 - currentSpeed / 20.0);\n\n      // Проверка, находится ли объект на земле для прыжка\n      var transform = new window.Ammo.btTransform();\n      obj.body.getMotionState().getWorldTransform(transform);\n      var pos = transform.getOrigin();\n      var isGrounded = Math.abs(velocity.y()) < 0.2 && pos.y() < 5; // Примерное определение "на земле"\n\n      // Создаем импульс с учетом адаптивности и состояния\n      var impulse = new window.Ammo.btVector3(0, 0, 0);\n      if (cmd === "LEFT") impulse.setValue(-baseImpulseHorizontal * speedFactor, 0, 0);\n      if (cmd === "RIGHT") impulse.setValue(baseImpulseHorizontal * speedFactor, 0, 0);\n      if (cmd === "UP") impulse.setValue(0, 0, -baseImpulseHorizontal * speedFactor);\n      if (cmd === "DOWN") impulse.setValue(0, 0, baseImpulseHorizontal * speedFactor);\n\n      // Для прыжка проверяем, находится ли объект на земле\n      if (cmd === "SPACE" && isGrounded) {\n        impulse.setValue(0, baseImpulseVertical, 0);\n      } else if (cmd === "SPACE") {\n        // Если в воздухе, даем меньший импульс для контроля\n        impulse.setValue(0, baseImpulseVertical * 0.3, 0);\n      }\n\n      // Применяем импульс\n      obj.body.applyCentralImpulse(impulse);\n\n      // Добавляем диагностику для каждого шара\n      console.log("[Physics] Применен импульс к шару:", {\n        id: id,\n        команда: cmd,\n        скорость: currentSpeed.toFixed(2),\n        множитель: speedFactor.toFixed(2),\n        наЗемле: isGrounded,\n        позиция: {\n          x: pos.x().toFixed(2),\n          y: pos.y().toFixed(2),\n          z: pos.z().toFixed(2)\n        },\n        импульс: {\n          x: impulse.x().toFixed(2),\n          y: impulse.y().toFixed(2),\n          z: impulse.z().toFixed(2)\n        }\n      });\n\n      // Очистка памяти\n      window.Ammo.destroy(impulse);\n      window.Ammo.destroy(velocity);\n      window.Ammo.destroy(transform);\n    }\n  }\n\n  // Синхронизируем диагностические сферы если команда нажата (только при наличии команды)\n  if (cmd && objects["mainPlayer1"] && objects["ammo_shadow"]) {\n    syncDiagnosticSpheres(objects);\n  }\n}\n\n// Синхронизация диагностических сфер с основной сферой\nfunction syncDiagnosticSpheres(objects) {\n  // Получаем основную сферу\n  var mainSphere = objects["mainPlayer1"];\n  if (!mainSphere || !mainSphere.mesh) return;\n  var mainPos = mainSphere.mesh.position;\n\n  // Синхронизируем ammo-тень с основной сферой\n  if (objects["ammo_shadow"] && objects["ammo_shadow"].body) {\n    console.log("[Physics] Синхронизация ammo-тени с основной сферой");\n    var ammoShadow = objects["ammo_shadow"];\n\n    // Создаем трансформацию с позицией основной сферы\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(mainPos.x, mainPos.y, mainPos.z));\n\n    // Устанавливаем трансформацию\n    ammoShadow.body.getMotionState().setWorldTransform(transform);\n\n    // Также применяем такую же скорость\n    if (mainSphere.body) {\n      var mainVelocity = mainSphere.body.getLinearVelocity();\n      var mainAngularVelocity = mainSphere.body.getAngularVelocity();\n      ammoShadow.body.setLinearVelocity(mainVelocity);\n      ammoShadow.body.setAngularVelocity(mainAngularVelocity);\n    }\n\n    // Активируем тело\n    ammoShadow.body.activate(true);\n    window.Ammo.destroy(transform);\n  }\n\n  // Синхронизируем bullet-тень с основной сферой (просто устанавливаем serverPos)\n  if (objects["bullet_shadow"]) {\n    console.log("[Physics] Синхронизация bullet-тени с основной сферой");\n    var bulletShadow = objects["bullet_shadow"];\n    bulletShadow.serverPos = {\n      x: mainPos.x,\n      y: mainPos.y,\n      z: mainPos.z\n    };\n  }\n}\nfunction receiveObjectUpdate(data) {\n  // Извлекаем id из данных обновления\n  var id = data.id;\n\n  // Проверяем, существует ли объект\n  var obj = objects_objects[id];\n  if (!obj) {\n    console.warn("[Physics] \\u041F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u043E \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0434\\u043B\\u044F \\u043D\\u0435\\u0441\\u0443\\u0449\\u0435\\u0441\\u0442\\u0432\\u0443\\u044E\\u0449\\u0435\\u0433\\u043E \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430: ".concat(id));\n    return;\n  }\n  console.log("[Physics] \\u041E\\u0431\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0430 \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u044F \\u0434\\u043B\\u044F \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(id, ", \\u0442\\u0438\\u043F: ").concat(obj.physicsBy));\n\n  // Обновляем серверную позицию\n  obj.serverPos = {\n    x: data.x !== undefined ? data.x : obj.mesh.position.x,\n    y: data.y !== undefined ? data.y : obj.mesh.position.y,\n    z: data.z !== undefined ? data.z : obj.mesh.position.z\n  };\n\n  // На этом этапе только сохраняем позицию, не применяем коррекцию\n  // Коррекция будет применяться в updatePhysicsObjects\n}\n\n// Новая функция для создания диагностических сфер\nfunction physics_createDiagnosticScene(scene) {\n  console.log("[Physics] Создание диагностической сцены");\n\n  // Создаем теневую сферу только с Ammo-физикой для сравнения с сервером\n  createDiagnosticSphere(scene, "ammo_shadow", 0, 60, 0, 0x00ff00, "ammo");\n\n  // Создаем теневую сферу с такими же начальными условиями как у серверной\n  // но с другим менеджментом физики\n  createDiagnosticSphere(scene, "bullet_shadow", 3, 60, 0, 0x0000ff, "bullet");\n  console.log("[Physics] Диагностическая сцена создана");\n}\n\n// Вспомогательная функция для создания диагностической сферы\nfunction createDiagnosticSphere(scene, id, x, y, z, color, physicsBy) {\n  console.log("[Physics] \\u0421\\u043E\\u0437\\u0434\\u0430\\u043D\\u0438\\u0435 \\u0434\\u0438\\u0430\\u0433\\u043D\\u043E\\u0441\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u043E\\u0439 \\u0441\\u0444\\u0435\\u0440\\u044B ".concat(id));\n\n  // Создаем сферу\n  var radius = 1;\n  var geometry = new THREE.SphereGeometry(radius, 32, 32);\n  var material = new THREE.MeshPhongMaterial({\n    color: color,\n    shininess: 30,\n    transparent: true,\n    opacity: 0.8 // Делаем полупрозрачной для лучшей видимости\n  });\n  var mesh = new THREE.Mesh(geometry, material);\n  mesh.position.set(x, y, z);\n\n  // Включаем тени\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n  scene.add(mesh);\n  console.log("[Physics] \\u0414\\u0438\\u0430\\u0433\\u043D\\u043E\\u0441\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u0430\\u044F \\u0441\\u0444\\u0435\\u0440\\u0430 ".concat(id, " \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u0430 \\u043D\\u0430 \\u0441\\u0446\\u0435\\u043D\\u0443"));\n\n  // Создаем физическое тело\n  var body = null;\n  if (physicsBy === "ammo" && physics_localPhysicsWorld) {\n    // Создаем физическое тело для Ammo-физики\n    var shape = new window.Ammo.btSphereShape(radius);\n    var mass = 1;\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(x, y, z));\n    var localInertia = new window.Ammo.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    var motionState = new window.Ammo.btDefaultMotionState(transform);\n    var rbInfo = new window.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    body = new window.Ammo.btRigidBody(rbInfo);\n\n    // Настраиваем физические свойства\n    body.setActivationState(4); // DISABLE_DEACTIVATION\n    body.setFriction(0.5);\n    body.setRollingFriction(0.1);\n    body.setRestitution(0.2); // Упругость (уменьшена для стабильности)\n    body.setDamping(0.01, 0.01); // Небольшое затухание\n\n    // Включаем CCD для предотвращения проваливания на меньшем масштабе\n    body.setCcdMotionThreshold(radius * 0.8);\n    body.setCcdSweptSphereRadius(radius * 0.7);\n\n    // Добавляем тело в физический мир\n    physics_localPhysicsWorld.addRigidBody(body);\n    console.log("[Physics] \\u0424\\u0438\\u0437\\u0438\\u0447\\u0435\\u0441\\u043A\\u043E\\u0435 \\u0442\\u0435\\u043B\\u043E \\u0434\\u043B\\u044F \\u0434\\u0438\\u0430\\u0433\\u043D\\u043E\\u0441\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u043E\\u0439 \\u0441\\u0444\\u0435\\u0440\\u044B ".concat(id, " \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D\\u043E \\u0441 CCD"));\n\n    // Очистка памяти\n    window.Ammo.destroy(rbInfo);\n    window.Ammo.destroy(localInertia);\n  }\n\n  // Сохраняем объект\n  var diagnosticObject = {\n    id: id,\n    mesh: mesh,\n    body: body,\n    object_type: "diagnostic_sphere",\n    physicsBy: physicsBy,\n    // Для сфер с bullet-физикой устанавливаем начальную серверную позицию\n    serverPos: physicsBy === "bullet" ? {\n      x: x,\n      y: y,\n      z: z\n    } : null\n  };\n\n  // Добавляем в общий словарь объектов\n  objects[id] = diagnosticObject;\n  console.log("[Physics] \\u0414\\u0438\\u0430\\u0433\\u043D\\u043E\\u0441\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u0430\\u044F \\u0441\\u0444\\u0435\\u0440\\u0430 ".concat(id, " \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D\\u0430 \\u0441 \\u0442\\u0438\\u043F\\u043E\\u043C ").concat(physicsBy));\n  return diagnosticObject;\n}\n;// ./src/network.js\nfunction network_typeof(o) { "@babel/helpers - typeof"; return network_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, network_typeof(o); }\n// network.js\n\n\nvar ws = null;\nfunction handleMessage(data) {\n  try {\n    if (data.type === "create" && data.id) {\n      console.log("[WS] Обработка create сообщения для id:", data.id);\n\n      // Создаем объект и добавляем его в список объектов\n      var obj = createMeshAndBodyForObject(data);\n      obj.physicsBy = data.physics_by || "both"; // Убедитесь, что свойство устанавливается\n      objects_objects[data.id] = obj;\n      console.log("[WS] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, " \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D \\u0441 physicsBy: ").concat(obj.physicsBy)); // Логирование установленного свойства\n    } else if (data.type === "update" && data.id && objects_objects[data.id]) {\n      console.log("[WS] Обработка update сообщения для id:", data.id);\n      var _obj = objects_objects[data.id];\n      _obj.serverPos = {\n        x: data.x || 0,\n        y: data.y || 0,\n        z: data.z || 0\n      };\n    }\n  } catch (error) {\n    console.error("[WS] Ошибка при обработке сообщения:", error);\n    console.error("[WS] Стек вызовов:", error.stack);\n  }\n}\nfunction handleKeyDown(e) {\n  if (!ws || ws.readyState !== WebSocket.OPEN) return;\n  var cmd = "";\n  switch (e.key) {\n    case "ArrowLeft":\n      cmd = "LEFT";\n      break;\n    case "ArrowRight":\n      cmd = "RIGHT";\n      break;\n    case "ArrowUp":\n      cmd = "UP";\n      break;\n    case "ArrowDown":\n      cmd = "DOWN";\n      break;\n    case " ":\n      cmd = "SPACE";\n      break;\n    default:\n      return;\n  }\n  try {\n    console.log("[WS] \\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430 \\u043A\\u043E\\u043C\\u0430\\u043D\\u0434\\u044B: ".concat(cmd));\n    ws.send(JSON.stringify({\n      type: "cmd",\n      cmd: cmd\n    }));\n\n    // Применяем импульс локально для всех объектов, включая serverPlayer\n    for (var id in objects_objects) {\n      var obj = objects_objects[id];\n      if (obj && obj.body && obj.mesh && obj.mesh.geometry && obj.mesh.geometry.type === "SphereGeometry") {\n        console.log("[WS] \\u041F\\u0440\\u0438\\u043C\\u0435\\u043D\\u044F\\u0435\\u043C \\u0438\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441 \\u043A \\u0441\\u0444\\u0435\\u0440\\u0435 ".concat(id, " \\u0441 physicsBy=").concat(obj.physicsBy));\n\n        // Создаем импульс\n        var impulse = new window.Ammo.btVector3(0, 0, 0);\n        if (cmd === "LEFT") impulse.setValue(-5, 0, 0);\n        if (cmd === "RIGHT") impulse.setValue(5, 0, 0);\n        if (cmd === "UP") impulse.setValue(0, 0, -5);\n        if (cmd === "DOWN") impulse.setValue(0, 0, 5);\n        if (cmd === "SPACE") impulse.setValue(0, 10, 0);\n\n        // Активируем тело и применяем импульс\n        obj.body.activate(true);\n        obj.body.applyCentralImpulse(impulse);\n\n        // Очищаем память\n        window.Ammo.destroy(impulse);\n      }\n    }\n  } catch (error) {\n    console.error("[WS] Ошибка отправки:", error);\n  }\n}\nfunction initNetwork() {\n  try {\n    console.log("[WS] Начало инициализации WebSocket");\n    ws = new WebSocket("ws://localhost:8080/ws");\n    ws.onopen = function () {\n      console.log("[WS] connected");\n      // Отправим тестовое сообщение\n      try {\n        ws.send(JSON.stringify({\n          type: "ping"\n        }));\n        console.log("[WS] Отправлено тестовое сообщение");\n      } catch (e) {\n        console.error("[WS] Ошибка отправки тестового сообщения:", e);\n      }\n    };\n    ws.onmessage = function (evt) {\n      try {\n        var data = JSON.parse(evt.data);\n        if (!data || network_typeof(data) !== \'object\') {\n          throw new Error(\'Неверный формат данных\');\n        }\n\n        // Если приходит сообщение с id и object_type, но без type - это объект создания\n        if (!data.type && data.id && data.object_type) {\n          console.log(\'[WS] Получен объект без type, считаем это create:\', data);\n          // Добавляем тип для совместимости с существующим кодом\n          data.type = "create";\n          // Обрабатываем как create\n          handleMessage(data);\n        }\n        // Обрабатываем update сообщения через нашу новую функцию\n        else if (data.type === "update" && data.id) {\n          console.log("[WS] \\u041F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u043E \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0434\\u043B\\u044F ".concat(data.id, ":"), {\n            x: data.x,\n            y: data.y,\n            z: data.z\n          });\n          receiveObjectUpdate(data);\n        } else if (data.type === "create" && data.id) {\n          // Оставляем существующую логику создания объектов\n          handleMessage(data);\n        }\n      } catch (error) {\n        console.error("[WS] Ошибка при обработке сообщения:", error);\n      }\n    };\n    ws.onerror = function (error) {\n      console.error("[WS] WebSocket error:", error);\n      console.error("[WS] Детали ошибки:", {\n        message: error.message,\n        type: error.type,\n        eventPhase: error.eventPhase\n      });\n    };\n    ws.onclose = function (event) {\n      console.log("[WS] Соединение закрыто:", {\n        code: event.code,\n        reason: event.reason,\n        wasClean: event.wasClean\n      });\n    };\n    document.addEventListener("keydown", handleKeyDown);\n  } catch (error) {\n    console.error("[WS] Ошибка при создании WebSocket:", error);\n    console.error("[WS] Стек вызовов:", error.stack);\n  }\n}\n;// ./src/index.js\nfunction src_typeof(o) { "@babel/helpers - typeof"; return src_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, src_typeof(o); }\nfunction src_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ src_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == src_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(src_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction src_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction src_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// index.js\n\n\n\n\n\n\n\n// Добавляем флаг для диагностического режима\nvar diagnosticMode = false;\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Выполняем шаг физической симуляции (например, 1/60 секунды)\n  stepPhysics(1 / 60);\n  updatePhysicsObjects(objects_objects);\n\n  // Пример обновления камеры: следим за первым найденным шаром\n  var targetObject = null;\n  for (var id in objects_objects) {\n    var obj = objects_objects[id];\n    if (obj && obj.mesh && obj.mesh.geometry && obj.mesh.geometry.type === "SphereGeometry") {\n      targetObject = obj;\n      break;\n    }\n  }\n  if (targetObject) {\n    var targetPos = targetObject.mesh.position;\n    var offset = new three_core/* Vector3 */.Pq0(0, 50, 100);\n    var cameraTarget = targetPos.clone().add(offset);\n    camera.position.lerp(cameraTarget, 0.1);\n    camera.lookAt(targetPos);\n  }\n\n  // Обновляем положение источника света относительно камеры, как солнце\n  updateShadowCamera();\n  renderer.render(scene_scene, camera);\n}\nfunction start() {\n  return _start.apply(this, arguments);\n} // Функция для создания пользовательского интерфейса диагностики\nfunction _start() {\n  _start = src_asyncToGenerator(/*#__PURE__*/src_regeneratorRuntime().mark(function _callee() {\n    return src_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          console.log("Start");\n          initScene();\n          _context.prev = 2;\n          _context.next = 5;\n          return new Promise(function (resolve) {\n            return setTimeout(resolve, 500);\n          });\n        case 5:\n          _context.next = 7;\n          return initAmmo();\n        case 7:\n          // Инициализируем сетевое соединение\n          initNetwork();\n\n          // Добавляем интерфейс для управления диагностическим режимом\n          // createDiagnosticUI();\n\n          // Создаем диагностическую сцену если включен режим\n          // if (diagnosticMode) {\n          //    createDiagnosticScene(scene);\n          // }\n\n          animate();\n          _context.next = 14;\n          break;\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context["catch"](2);\n          console.error("Ошибка при инициализации Ammo.js:", _context.t0);\n        case 14:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[2, 11]]);\n  }));\n  return _start.apply(this, arguments);\n}\nfunction createDiagnosticUI() {\n  // Создаем контейнер для элементов управления\n  var container = document.createElement(\'div\');\n  container.style.position = \'absolute\';\n  container.style.top = \'10px\';\n  container.style.left = \'10px\';\n  container.style.backgroundColor = \'rgba(0, 0, 0, 0.5)\';\n  container.style.padding = \'10px\';\n  container.style.borderRadius = \'5px\';\n  container.style.color = \'white\';\n  container.style.fontFamily = \'Arial, sans-serif\';\n\n  // Создаем заголовок\n  var title = document.createElement(\'div\');\n  title.textContent = \'Настройки диагностики\';\n  title.style.fontWeight = \'bold\';\n  title.style.marginBottom = \'10px\';\n  container.appendChild(title);\n\n  // Создаем чекбокс для включения/выключения диагностики\n  var diagnosticCheckbox = document.createElement(\'input\');\n  diagnosticCheckbox.type = \'checkbox\';\n  diagnosticCheckbox.id = \'diagnostic-toggle\';\n  diagnosticCheckbox.checked = diagnosticMode;\n\n  // Создаем лейбл для чекбокса\n  var diagnosticLabel = document.createElement(\'label\');\n  diagnosticLabel.htmlFor = \'diagnostic-toggle\';\n  diagnosticLabel.textContent = \'Показать диагностические тени\';\n\n  // Добавляем обработчик событий для чекбокса\n  diagnosticCheckbox.addEventListener(\'change\', function () {\n    diagnosticMode = this.checked;\n    console.log(\'Диагностический режим:\', diagnosticMode ? \'включен\' : \'выключен\');\n\n    // Если режим включен, создаем диагностическую сцену\n    if (diagnosticMode) {\n      createDiagnosticScene(scene);\n    } else {\n      // Удаляем диагностические объекты если они есть\n      if (objects["ammo_shadow"]) {\n        scene.remove(objects["ammo_shadow"].mesh);\n        delete objects["ammo_shadow"];\n      }\n      if (objects["bullet_shadow"]) {\n        scene.remove(objects["bullet_shadow"].mesh);\n        delete objects["bullet_shadow"];\n      }\n\n      // Удаляем линии визуализации\n      if (objects.divergenceLines) {\n        Object.values(objects.divergenceLines).forEach(function (item) {\n          if (item.line) {\n            scene.remove(item.line);\n          }\n        });\n        delete objects.divergenceLines;\n      }\n    }\n  });\n\n  // Создаем контейнер для чекбокса с лейблом\n  var checkboxContainer = document.createElement(\'div\');\n  checkboxContainer.appendChild(diagnosticCheckbox);\n  checkboxContainer.appendChild(diagnosticLabel);\n  container.appendChild(checkboxContainer);\n\n  // Добавляем информацию о расхождениях\n  var divergenceInfo = document.createElement(\'div\');\n  divergenceInfo.id = \'divergence-info\';\n  divergenceInfo.textContent = \'Расхождения: нет данных\';\n  divergenceInfo.style.marginTop = \'10px\';\n  divergenceInfo.style.fontSize = \'12px\';\n  container.appendChild(divergenceInfo);\n\n  // Добавляем контейнер на страницу\n  document.body.appendChild(container);\n\n  // Обновляем информацию о расхождениях периодически\n  setInterval(updateDivergenceInfo, 1000);\n}\n\n// Функция для обновления информации о расхождениях\nfunction updateDivergenceInfo() {\n  if (!diagnosticMode) return;\n  var mainSphere = objects["mainPlayer1"];\n  var ammoShadow = objects["ammo_shadow"];\n  var bulletShadow = objects["bullet_shadow"];\n  if (!mainSphere || !ammoShadow || !bulletShadow) return;\n\n  // Получаем позиции\n  var mainPos = mainSphere.mesh.position;\n  var ammoPos = ammoShadow.mesh.position;\n  var bulletPos = bulletShadow.mesh.position;\n\n  // Расчет расстояний\n  var distMainToAmmo = Math.sqrt(Math.pow(mainPos.x - ammoPos.x, 2) + Math.pow(mainPos.y - ammoPos.y, 2) + Math.pow(mainPos.z - ammoPos.z, 2));\n  var distMainToBullet = Math.sqrt(Math.pow(mainPos.x - bulletPos.x, 2) + Math.pow(mainPos.y - bulletPos.y, 2) + Math.pow(mainPos.z - bulletPos.z, 2));\n  var distAmmoBullet = Math.sqrt(Math.pow(ammoPos.x - bulletPos.x, 2) + Math.pow(ammoPos.y - ammoPos.y, 2) + Math.pow(ammoPos.z - bulletPos.z, 2));\n\n  // Обновляем информацию на интерфейсе\n  var divergenceInfo = document.getElementById(\'divergence-info\');\n  if (divergenceInfo) {\n    divergenceInfo.innerHTML = "\\n            <div>\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0439-Ammo: ".concat(distMainToAmmo.toFixed(3), "</div>\\n            <div>\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0439-Bullet: ").concat(distMainToBullet.toFixed(3), "</div>\\n            <div>Ammo-Bullet: ").concat(distAmmoBullet.toFixed(3), "</div>\\n        ");\n  }\n}\nstart();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///251\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var C=1/0;for(s=0;s<deferred.length;s++){for(var[U,F,B]=deferred[s],L=!0,g=0;g<U.length;g++)(!1&B||C>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[g])))?U.splice(g--,1):(L=!1,B<C&&(C=B));if(L){deferred.splice(s--,1);var I=F();void 0!==I&&(Q=I)}}return Q}B=B||0;for(var s=deferred.length;s>0&&deferred[s-1][2]>B;s--)deferred[s]=deferred[s-1];deferred[s]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),(()=>{var Q={792:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,C,[L,g,I]=F,s=0;if(L.some((U=>0!==Q[U]))){for(B in g)__webpack_require__.o(g,B)&&(__webpack_require__.m[B]=g[B]);if(I)var t=I(__webpack_require__)}for(U&&U(F);s<L.length;s++)C=L[s],__webpack_require__.o(Q,C)&&Q[C]&&Q[C][0](),Q[C]=0;return __webpack_require__.O(t)},F=self.webpackChunkweb=self.webpackChunkweb||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[233],(()=>__webpack_require__(251)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();