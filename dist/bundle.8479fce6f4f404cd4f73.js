(()=>{"use strict";var __webpack_modules__={712:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.core.js\nvar three_core = __webpack_require__(922);\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(437);\n;// ./src/scene.js\n// scene.js\n\nvar scene_scene, renderer;\nvar directionalLight; // Экспортируем свет для доступности в других модулях\n\nfunction initScene() {\n  console.log("try to initScene");\n  scene_scene = new three_core/* Scene */.Z58();\n  scene_scene.background = new three_core/* Color */.Q1f(0x88ccff);\n  renderer = new three_module/* WebGLRenderer */.JeP({\n    antialias: true\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  // Включаем поддержку теней\n  renderer.shadowMap.enabled = true;\n  renderer.shadowMap.type = three_core/* PCFSoftShadowMap */.Wk7;\n  document.body.appendChild(renderer.domElement);\n  window.addEventListener(\'resize\', onWindowResize);\n\n  // Настраиваем освещение\n  var ambient = new three_core/* AmbientLight */.$p8(0xffffff, 0.5);\n  scene_scene.add(ambient);\n\n  // Основной направленный свет с тенями\n  directionalLight = new three_core/* DirectionalLight */.ZyN(0xffffff, 1);\n  directionalLight.position.set(50, 100, 50);\n  directionalLight.castShadow = true;\n\n  // Настраиваем параметры теней для охвата большой области\n  directionalLight.shadow.camera.near = 0.1;\n  directionalLight.shadow.camera.far = 2000; // Увеличиваем максимальную дальность теней\n  directionalLight.shadow.camera.left = -1000; // Значительно увеличиваем размер области теней\n  directionalLight.shadow.camera.right = 1000;\n  directionalLight.shadow.camera.top = 1000;\n  directionalLight.shadow.camera.bottom = -1000;\n  directionalLight.shadow.mapSize.width = 2048; // Большее разрешение для лучшего качества\n  directionalLight.shadow.mapSize.height = 2048;\n  directionalLight.shadow.bias = -0.0001; // Уменьшаем артефакты тени\n  scene_scene.add(directionalLight);\n\n  // Добавляем вспомогательный свет для подсветки теней\n  var fillLight = new three_core/* DirectionalLight */.ZyN(0xffffff, 0.3);\n  fillLight.position.set(-50, 50, -50);\n  scene_scene.add(fillLight);\n\n  // Можно добавить помощник для отладки теней (раскомментируйте при необходимости)\n  // const helper = new THREE.CameraHelper(directionalLight.shadow.camera);\n  // scene.add(helper);\n}\nfunction onWindowResize() {\n  // Обработка изменения размера окна только для рендерера\n  // (камера обрабатывается в camera.js)\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\n// Добавляем функцию для обновления положения источника света относительно камеры, как солнце\nfunction updateShadowCamera(camera) {\n  if (!directionalLight || !camera) return;\n\n  // Получаем направление взгляда камеры\n  var cameraDirection = new three_core/* Vector3 */.Pq0();\n  camera.getWorldDirection(cameraDirection);\n\n  // Создаем позицию "солнца" относительно камеры\n  // Поднимаем "солнце" на 200 единиц вверх от позиции камеры и смещаем немного в сторону и назад\n  var sunOffset = new three_core/* Vector3 */.Pq0(100, 200, -50);\n  var sunPosition = camera.position.clone().add(sunOffset);\n\n  // Обновляем позицию света\n  directionalLight.position.copy(sunPosition);\n\n  // Определяем точку, куда направлен свет - перед камерой на расстоянии 100 единиц\n  var targetOffset = cameraDirection.clone().multiplyScalar(100);\n  var targetPosition = camera.position.clone().add(targetOffset);\n  directionalLight.target.position.copy(targetPosition);\n\n  // Обновляем матрицу трансформации цели света\n  directionalLight.target.updateMatrixWorld();\n\n  // Обновляем матрицу камеры теней\n  directionalLight.shadow.camera.updateProjectionMatrix();\n}\n\n;// ./src/objects.js\n// objects.js\n\n\n\nvar objects_objects = {}; // Словарь объектов: id -> { mesh, body, serverPos, ... }\n\nfunction createMeshAndBodyForObject(data) {\n  if (!data || !data.object_type) {\n    console.error("Invalid data received for object creation:", data);\n    return null;\n  }\n  var type = data.object_type;\n  var mesh,\n    body = null;\n  switch (type) {\n    case "terrain":\n      mesh = createTerrainMesh(data);\n      body = createPhysicsBodyForTerrain(data);\n      break;\n    case "sphere":\n      mesh = createSphereMesh(data);\n      body = createPhysicsBodyForSphere(data);\n      break;\n    case "tree":\n      mesh = createTreeMesh(data);\n      break;\n    default:\n      console.warn("Unknown object type: ".concat(type));\n      mesh = createDefaultMesh(data);\n      break;\n  }\n  scene_scene.add(mesh);\n  return {\n    mesh: mesh,\n    body: body\n  };\n}\nfunction createPhysicsBodyForTerrain(data) {\n  if (typeof Ammo === \'undefined\') {\n    console.error(\'Ammo.js не инициализирован\');\n    return null;\n  }\n  if (!physics_localPhysicsWorld) {\n    console.error(\'Физический мир не инициализирован\');\n    return null;\n  }\n  var w = data.heightmap_w;\n  var h = data.heightmap_h;\n  var scaleX = data.scale_x;\n  var scaleZ = data.scale_z;\n\n  // Создаем буфер в памяти Ammo для данных высот\n  var ammoHeightData = Ammo._malloc(4 * w * h);\n\n  // Копируем данные высот в память Ammo\n  var p = 0;\n  var p2 = 0;\n  for (var j = 0; j < h; j++) {\n    for (var i = 0; i < w; i++) {\n      Ammo.HEAPF32[ammoHeightData + p2 >> 2] = data.height_data[p];\n      p++;\n      p2 += 4;\n    }\n  }\n\n  // Создаем форму террейна\n  var shape = new Ammo.btHeightfieldTerrainShape(w, h, ammoHeightData, 1,\n  // heightScale\n  data.min_height, data.max_height, 1,\n  // up axis = 1 для Y\n  Ammo.PHY_FLOAT, false // flipQuadEdges\n  );\n\n  // Устанавливаем масштабирование\n  shape.setLocalScaling(new Ammo.btVector3(scaleX, data.scale_y, scaleZ));\n\n  // Устанавливаем margin для террейна (0.5 вместо 2.0, так как террейн меньше)\n  shape.setMargin(0.5);\n  console.log("[Terrain] Установлен margin террейна:", 0.5);\n\n  // Создаем трансформацию\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n\n  // Важно! Смещаем террейн, так как Bullet центрирует его по ограничивающему боксу\n  transform.setOrigin(new Ammo.btVector3(data.x || 0, (data.min_height + data.max_height) / 2, data.z || 0));\n  var mass = 0; // Статическое тело\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Добавляем тело в физический мир\n  var TERRAIN_GROUP = 1;\n  physics_localPhysicsWorld.addRigidBody(body, TERRAIN_GROUP, -1); // Террейн сталкивается со всеми\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n  console.log("[Terrain] Физическое тело создано:", {\n    размеры: {\n      w: w,\n      h: h\n    },\n    масштаб: {\n      x: scaleX,\n      y: data.scale_y,\n      z: scaleZ\n    },\n    позиция: {\n      x: data.x || 0,\n      y: (data.min_height + data.max_height) / 2,\n      z: data.z || 0\n    },\n    минВысота: data.min_height,\n    максВысота: data.max_height\n  });\n  return body;\n}\nfunction createTerrainMesh(data) {\n  var w = data.heightmap_w || 64;\n  var h = data.heightmap_h || 64;\n  var geo = new three_core/* PlaneGeometry */.bdM(w * data.scale_x, h * data.scale_z, w - 1, h - 1);\n  geo.rotateX(-Math.PI / 2);\n  if (data.height_data) {\n    var verts = geo.attributes.position.array;\n    for (var i = 0; i < verts.length; i += 3) {\n      var ix = i / 3 % w;\n      var iz = Math.floor(i / 3 / w);\n      verts[i + 1] = data.height_data[iz * w + ix] * data.scale_y;\n    }\n    geo.computeVertexNormals();\n  }\n  var mesh = new three_core/* Mesh */.eaF(geo, new three_core/* MeshPhongMaterial */.tXL({\n    color: parseColor(data.color || "#888888"),\n    wireframe: false,\n    flatShading: true\n  }));\n\n  // Включаем тени для террейна\n  mesh.receiveShadow = true;\n  return mesh;\n}\nfunction createSphereMesh(data) {\n  var geo = new three_core/* SphereGeometry */.Gu$(data.radius || 1, 32, 32);\n  var mesh = new three_core/* Mesh */.eaF(geo, new three_core/* MeshPhongMaterial */.tXL({\n    color: parseColor(data.color || "#888888"),\n    shininess: 30\n  }));\n\n  // Включаем тени для сфер\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n  return mesh;\n}\nfunction createTreeMesh(data) {\n  var group = new three_core/* Group */.YJl();\n  if (data.branches && Array.isArray(data.branches)) {\n    data.branches.forEach(function (branch, index) {\n      if (branch.startX === undefined || branch.startY === undefined || branch.startZ === undefined || branch.endX === undefined || branch.endY === undefined || branch.endZ === undefined) {\n        console.warn("Branch coordinates are missing or invalid at index ".concat(index, ":"), branch);\n        return;\n      }\n      var branchGeo = new three_core/* CylinderGeometry */.Ho_(branch.radiusTop || branch.radius || 0.1,\n      // верхний радиус\n      branch.radiusBottom || branch.radius || 0.2,\n      // нижний радиус\n      1, 8);\n      var branchMat = new three_core/* MeshPhongMaterial */.tXL({\n        color: parseColor(branch.color || "#654321"),\n        shininess: 10\n      });\n      var branchMesh = new three_core/* Mesh */.eaF(branchGeo, branchMat);\n\n      // Включаем тени для веток\n      branchMesh.castShadow = true;\n      branchMesh.receiveShadow = true;\n      var midX = (branch.startX + branch.endX) / 2;\n      var midY = (branch.startY + branch.endY) / 2;\n      var midZ = (branch.startZ + branch.endZ) / 2;\n      branchMesh.position.set(midX, midY, midZ);\n      branchMesh.lookAt(new three_core/* Vector3 */.Pq0(branch.endX, branch.endY, branch.endZ));\n      var length = new three_core/* Vector3 */.Pq0(branch.endX - branch.startX, branch.endY - branch.startY, branch.endZ - branch.startZ).length();\n      branchMesh.scale.set(1, length, 1);\n      group.add(branchMesh);\n    });\n  }\n  return group;\n}\nfunction createDefaultMesh(data) {\n  var geo = new three_core/* BoxGeometry */.iNn(1, 1, 1);\n  return new three_core/* Mesh */.eaF(geo, new three_core/* MeshLambertMaterial */.G_z({\n    color: parseColor(data.color || "#888888")\n  }));\n}\nfunction createPhysicsBodyForSphere(data) {\n  try {\n    if (typeof Ammo === \'undefined\') {\n      console.error(\'Ammo.js не инициализирован\');\n      return null;\n    }\n    if (!physics_localPhysicsWorld) {\n      console.error(\'Физический мир не инициализирован\');\n      return null;\n    }\n    var radius = data.radius || 1;\n    var mass = data.mass || 1;\n\n    // Создаем все Ammo объекты через window.Ammo\n    var shape = new window.Ammo.btSphereShape(radius);\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(data.x || 0, data.y || 0, data.z || 0));\n    var localInertia = new window.Ammo.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    var motionState = new window.Ammo.btDefaultMotionState(transform);\n    var rbInfo = new window.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    var body = new window.Ammo.btRigidBody(rbInfo);\n\n    // Настраиваем физические свойства\n    body.setFriction(0.5);\n    body.setRollingFriction(0.1);\n    body.setRestitution(0.2); // Немного уменьшаем упругость для стабильности\n    body.setDamping(0.01, 0.01); // Небольшое линейное и угловое затухание\n\n    // Включаем CCD для предотвращения проваливания сквозь террейн\n    // Для меньшего масштаба (100 вместо 15000) эти значения более оптимальны\n    body.setCcdMotionThreshold(radius * 0.8); // Увеличиваем порог для активации CCD\n    body.setCcdSweptSphereRadius(radius * 0.7); // Радиус сферы для CCD\n\n    // Отключаем деактивацию\n    body.setActivationState(4); // DISABLE_DEACTIVATION\n\n    // Добавляем тело в физический мир\n    var SPHERE_GROUP = 2;\n    physics_localPhysicsWorld.addRigidBody(body, SPHERE_GROUP, -1); // Сферы сталкиваются со всеми\n\n    console.log("[Sphere] Физическое тело создано:", {\n      radius: radius,\n      mass: mass,\n      position: {\n        x: data.x || 0,\n        y: data.y || 0,\n        z: data.z || 0\n      },\n      ccd: {\n        motionThreshold: radius * 0.8,\n        sweptSphereRadius: radius * 0.7\n      },\n      friction: 0.5,\n      restitution: 0.2\n    });\n\n    // Очистка памяти\n    window.Ammo.destroy(rbInfo);\n    window.Ammo.destroy(localInertia);\n    return body;\n  } catch (error) {\n    console.error(\'Ошибка при создании физического тела:\', error);\n    return null;\n  }\n}\nfunction parseColor(colorStr) {\n  if (!colorStr) return 0x888888;\n  if (colorStr.startsWith("#")) {\n    return parseInt(colorStr.slice(1), 16);\n  }\n  return 0x888888;\n}\nfunction createTestSphere() {\n  // Создаем визуальную сферу\n  var radius = 1;\n  var geometry = new THREE.SphereGeometry(radius, 32, 32);\n  var material = new THREE.MeshPhongMaterial({\n    color: 0xff00ff,\n    shininess: 30\n  });\n  var mesh = new THREE.Mesh(geometry, material);\n\n  // Включаем тени для тестовой сферы\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n\n  // Позиционируем сферу высоко над террейном\n  var startY = 58; // Высота над террейном\n  mesh.position.set(0, startY, 0);\n  scene.add(mesh);\n\n  // Создаем физическое тело\n  var shape = new Ammo.btSphereShape(radius);\n  var mass = 1;\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n  transform.setOrigin(new Ammo.btVector3(0, startY, 0));\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  shape.calculateLocalInertia(mass, localInertia);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Важные настройки для физического тела\n  body.setActivationState(4); // DISABLE_DEACTIVATION\n  body.setFriction(0.5);\n  body.setRollingFriction(0.1);\n  body.setRestitution(0.5); // Упругость\n\n  // Добавляем тело в физический мир\n  var SPHERE_GROUP = 2;\n  localPhysicsWorld.addRigidBody(body, SPHERE_GROUP, -1); // Тестовая сфера сталкивается со всеми\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n\n  // Добавляем объект в наш список объектов\n  var testSphereObj = {\n    mesh: mesh,\n    body: body,\n    object_type: "test_sphere",\n    physicsBy: "ammo" // Изменено с "both" на "ammo", чтобы управлялось только локальной физикой\n  };\n  objects_objects["test_sphere"] = testSphereObj;\n  return testSphereObj;\n}\n;// ./src/network.js\nfunction _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\n// network.js\n\n\nvar ws = null;\nvar physicsStarted = false;\nvar pendingObjects = [];\n\n// Добавляем переменные для работы с временными метками\nvar serverTimeOffset = 0; // Разница между серверным и клиентским временем\nvar serverTimeOffsetSamples = []; // Хранение образцов для вычисления среднего значения\nvar MAX_OFFSET_SAMPLES = 10; // Максимальное количество образцов\nvar pingHistory = []; // История пингов для анализа\nvar MAX_PING_SAMPLES = 10; // Максимальное количество образцов пинга\n\n// Вычисляем текущее серверное время на основе смещения\nfunction estimateServerTime() {\n  return Date.now() + serverTimeOffset;\n}\n\n// Обновление смещения времени сервера\nfunction updateServerTimeOffset(serverTime) {\n  var now = Date.now();\n  var currentOffset = serverTime - now;\n\n  // Добавляем новый образец\n  serverTimeOffsetSamples.push(currentOffset);\n\n  // Ограничиваем количество образцов\n  if (serverTimeOffsetSamples.length > MAX_OFFSET_SAMPLES) {\n    serverTimeOffsetSamples.shift();\n  }\n\n  // Используем медиану вместо среднего для устойчивости к выбросам\n  var sortedOffsets = [].concat(serverTimeOffsetSamples).sort(function (a, b) {\n    return a - b;\n  });\n  var medianOffset = sortedOffsets[Math.floor(sortedOffsets.length / 2)];\n  serverTimeOffset = medianOffset;\n\n  // Обновляем отображение времени\n  updateTimeDisplay();\n  console.log("[Time] \\u0421\\u0438\\u043D\\u0445\\u0440\\u043E\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F \\u0432\\u0440\\u0435\\u043C\\u0435\\u043D\\u0438: \\u0441\\u043C\\u0435\\u0449\\u0435\\u043D\\u0438\\u0435 = ".concat(medianOffset, " \\u043C\\u0441"));\n}\n\n// Добавляем функцию для обновления отображения пинга на экране\nfunction updatePingDisplay(pingValue) {\n  var pingDisplay = document.getElementById(\'ping-display\');\n  if (pingDisplay) {\n    pingDisplay.textContent = "\\u041F\\u0438\\u043D\\u0433: ".concat(pingValue.toFixed(0), " \\u043C\\u0441");\n\n    // Меняем цвет в зависимости от качества соединения\n    if (pingValue < 50) {\n      pingDisplay.style.backgroundColor = \'rgba(0, 128, 0, 0.5)\'; // Зеленый - хороший пинг\n    } else if (pingValue < 100) {\n      pingDisplay.style.backgroundColor = \'rgba(255, 165, 0, 0.5)\'; // Оранжевый - средний пинг\n    } else {\n      pingDisplay.style.backgroundColor = \'rgba(255, 0, 0, 0.5)\'; // Красный - плохой пинг\n    }\n  }\n}\n\n// Функция для обновления серверного времени на экране\nfunction updateTimeDisplay() {\n  var serverTimeElem = document.getElementById(\'server-time\');\n  var timeOffsetElem = document.getElementById(\'time-offset\');\n  if (serverTimeElem && timeOffsetElem) {\n    var estServerTime = estimateServerTime();\n    var serverDate = new Date(estServerTime);\n    serverTimeElem.textContent = "\\u0412\\u0440\\u0435\\u043C\\u044F \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430: ".concat(serverDate.toLocaleTimeString());\n    timeOffsetElem.textContent = "\\u0421\\u043C\\u0435\\u0449\\u0435\\u043D\\u0438\\u0435: ".concat(serverTimeOffset.toFixed(0), " \\u043C\\u0441");\n  }\n}\n\n// Создаем интервал для периодического обновления времени\nvar timeDisplayInterval;\nfunction handleMessage(data) {\n  try {\n    // Если сообщение содержит временную метку сервера, обновляем смещение\n    if (data.server_time) {\n      updateServerTimeOffset(data.server_time);\n    }\n\n    // Обрабатываем pong-сообщения для синхронизации времени\n    if (data.type === "pong") {\n      var now = Date.now();\n      var roundTripTime = now - data.client_time;\n\n      // Добавляем измерение пинга в историю\n      pingHistory.push(roundTripTime);\n      if (pingHistory.length > MAX_PING_SAMPLES) {\n        pingHistory.shift();\n      }\n\n      // Вычисляем средний пинг\n      var avgPing = pingHistory.reduce(function (sum, ping) {\n        return sum + ping;\n      }, 0) / pingHistory.length;\n\n      // Обновляем отображение пинга на экране\n      updatePingDisplay(avgPing);\n      console.log("[WS] \\u041F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D pong, RTT: ".concat(roundTripTime, "ms, \\u0421\\u0440\\u0435\\u0434\\u043D\\u0438\\u0439 RTT: ").concat(avgPing.toFixed(2), "ms"));\n\n      // Обновляем смещение серверного времени с учетом RTT/2 (предполагаем симметричную задержку)\n      updateServerTimeOffset(data.server_time + roundTripTime / 2);\n      return; // Прекращаем обработку этого сообщения\n    }\n    if (data.type === "create" && data.id) {\n      console.log("[WS] Получено сообщение о создании объекта:", data.id, "в координатах:", {\n        x: data.x || 0,\n        y: data.y || 0,\n        z: data.z || 0\n      }, "время сервера:", data.server_time);\n\n      // Создаем объект и добавляем его в список объектов\n      var obj = createMeshAndBodyForObject(data);\n      obj.physicsBy = data.physics_by || "both";\n      obj.serverPos = {\n        x: data.x || 0,\n        y: data.y || 0,\n        z: data.z || 0\n      };\n      // Добавляем временную метку сервера\n      obj.serverCreationTime = data.server_time;\n      obj.clientCreationTime = Date.now();\n      objects_objects[data.id] = obj;\n\n      // Запоминаем точное время создания объекта для дальнейшей синхронизации\n      obj.createdAt = Date.now();\n      console.log("[WS] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, " \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D \\u0441 physicsBy: ").concat(obj.physicsBy));\n\n      // Если физический мир активен, активируем тело\n      if (obj.body && physics_localPhysicsWorld) {\n        if (!physicsStarted) {\n          // Добавляем в список ожидающих, если физика еще не запущена\n          pendingObjects.push(data.id);\n          console.log("[WS] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, " \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D \\u0432 \\u0441\\u043F\\u0438\\u0441\\u043E\\u043A \\u043E\\u0436\\u0438\\u0434\\u0430\\u043D\\u0438\\u044F - \\u0444\\u0438\\u0437\\u0438\\u043A\\u0430 \\u0435\\u0449\\u0435 \\u043D\\u0435 \\u0430\\u043A\\u0442\\u0438\\u0432\\u043D\\u0430"));\n        } else {\n          // Активируем тело сразу\n          obj.body.activate(true);\n          // Устанавливаем начальную позицию точно по серверным координатам\n          if (obj.serverPos) {\n            var transform = new Ammo.btTransform();\n            obj.body.getMotionState().getWorldTransform(transform);\n            transform.setOrigin(new Ammo.btVector3(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z));\n            obj.body.getMotionState().setWorldTransform(transform);\n            obj.mesh.position.set(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z);\n            console.log("[WS] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, " \\u0442\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D \\u0432 \\u0438\\u0441\\u0445\\u043E\\u0434\\u043D\\u044B\\u0435 \\u043A\\u043E\\u043E\\u0440\\u0434\\u0438\\u043D\\u0430\\u0442\\u044B:"), {\n              x: obj.serverPos.x,\n              y: obj.serverPos.y,\n              z: obj.serverPos.z\n            });\n          }\n        }\n      }\n    } else if (data.type === "update" && data.id && objects_objects[data.id]) {\n      // Обработка обновлений делегирована в receiveObjectUpdate, передаем также временную метку\n      receiveObjectUpdate(data);\n    } else if (data.type === "cmd_ack") {\n      // Обрабатываем подтверждение команды с временной меткой\n      if (data.client_time && data.server_time) {\n        var _roundTripTime = Date.now() - data.client_time;\n\n        // Добавляем измерение пинга в историю\n        pingHistory.push(_roundTripTime);\n        if (pingHistory.length > MAX_PING_SAMPLES) {\n          pingHistory.shift();\n        }\n\n        // Вычисляем средний пинг\n        var _avgPing = pingHistory.reduce(function (sum, ping) {\n          return sum + ping;\n        }, 0) / pingHistory.length;\n\n        // Обновляем отображение пинга на экране\n        updatePingDisplay(_avgPing);\n        console.log("[WS] \\u041F\\u043E\\u0434\\u0442\\u0432\\u0435\\u0440\\u0436\\u0434\\u0435\\u043D\\u0438\\u0435 \\u043A\\u043E\\u043C\\u0430\\u043D\\u0434\\u044B: ".concat(data.cmd, ", RTT: ").concat(_roundTripTime, "ms, \\u0421\\u0440\\u0435\\u0434\\u043D\\u0438\\u0439 RTT: ").concat(_avgPing.toFixed(2), "ms"));\n\n        // Обновляем смещение серверного времени с учетом RTT/2 (предполагаем симметричную задержку)\n        updateServerTimeOffset(data.server_time + _roundTripTime / 2);\n      }\n    }\n  } catch (error) {\n    console.error("[WS] Ошибка при обработке сообщения:", error);\n    console.error("[WS] Стек вызовов:", error.stack);\n  }\n}\nfunction handleKeyDown(e) {\n  if (!ws || ws.readyState !== WebSocket.OPEN) return;\n  var cmd = "";\n  var forceX = 0,\n    forceY = 0,\n    forceZ = 0;\n  switch (e.key) {\n    case "ArrowLeft":\n      cmd = "LEFT";\n      forceX = -5;\n      break;\n    case "ArrowRight":\n      cmd = "RIGHT";\n      forceX = 5;\n      break;\n    case "ArrowUp":\n      cmd = "UP";\n      forceZ = -5;\n      break;\n    case "ArrowDown":\n      cmd = "DOWN";\n      forceZ = 5;\n      break;\n    case " ":\n      cmd = "SPACE";\n      forceY = 10;\n      break;\n    default:\n      return;\n  }\n  try {\n    // Добавляем временную метку клиента к команде\n    var clientTime = Date.now();\n    var commandObj = {\n      type: "cmd",\n      cmd: cmd,\n      client_time: clientTime // Добавляем временную метку клиента\n    };\n    console.log("[WS] \\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430 \\u043A\\u043E\\u043C\\u0430\\u043D\\u0434\\u044B: ".concat(cmd, ", \\u0432\\u0440\\u0435\\u043C\\u044F \\u043A\\u043B\\u0438\\u0435\\u043D\\u0442\\u0430: ").concat(clientTime));\n    ws.send(JSON.stringify(commandObj));\n\n    // Применяем импульс локально ко всем объектам сфер\n    for (var id in objects_objects) {\n      var obj = objects_objects[id];\n      if (obj && obj.body && obj.mesh && obj.mesh.geometry && obj.mesh.geometry.type === "SphereGeometry") {\n        console.log("[WS] \\u041F\\u0440\\u0438\\u043C\\u0435\\u043D\\u044F\\u0435\\u043C \\u0438\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441 \\u043A \\u0441\\u0444\\u0435\\u0440\\u0435 ".concat(id, " \\u0441 physicsBy=").concat(obj.physicsBy));\n\n        // Вызываем функцию применения импульса с обновленными параметрами\n        applyImpulseToSphere(cmd, forceX, forceY, forceZ, objects_objects, clientTime);\n      }\n    }\n  } catch (error) {\n    console.error("[WS] Ошибка отправки:", error);\n  }\n}\nfunction initNetwork() {\n  try {\n    console.log("[WS] Начало инициализации WebSocket");\n    ws = new WebSocket("ws://localhost:8080/ws");\n    ws.onopen = function () {\n      console.log("[WS] connected");\n      // Инициализируем индикатор пинга\n      updatePingDisplay(0);\n      // Обновляем информацию о времени\n      updateTimeDisplay();\n      // Запускаем интервал обновления времени\n      if (timeDisplayInterval) clearInterval(timeDisplayInterval);\n      timeDisplayInterval = setInterval(updateTimeDisplay, 1000);\n      // Отправим тестовое сообщение для синхронизации времени\n      sendPing();\n    };\n    ws.onmessage = function (evt) {\n      try {\n        var data = JSON.parse(evt.data);\n        if (!data || _typeof(data) !== \'object\') {\n          throw new Error(\'Неверный формат данных\');\n        }\n\n        // Если приходит сообщение с id и object_type, но без type - это объект создания\n        if (!data.type && data.id && data.object_type) {\n          console.log(\'[WS] Получен объект без type, считаем это create:\', data);\n          // Добавляем тип для совместимости с существующим кодом\n          data.type = "create";\n          // Обрабатываем как create\n          handleMessage(data);\n        }\n        // Обрабатываем update сообщения через нашу новую функцию\n        else if (data.type === "update" && data.id) {\n          receiveObjectUpdate(data);\n        } else if (data.type === "create" && data.id) {\n          // Оставляем существующую логику создания объектов\n          handleMessage(data);\n        } else if (data.type === "pong") {\n          // Обрабатываем pong сообщения для синхронизации времени\n          handleMessage(data);\n        } else {\n          // Обрабатываем другие типы сообщений, например "cmd_ack"\n          handleMessage(data);\n        }\n      } catch (error) {\n        console.error("[WS] Ошибка при обработке сообщения:", error);\n      }\n    };\n    ws.onerror = function (error) {\n      console.error("[WS] WebSocket error:", error);\n      console.error("[WS] Детали ошибки:", {\n        message: error.message,\n        type: error.type,\n        eventPhase: error.eventPhase\n      });\n    };\n    ws.onclose = function (event) {\n      console.log("[WS] Соединение закрыто:", {\n        code: event.code,\n        reason: event.reason,\n        wasClean: event.wasClean\n      });\n\n      // Останавливаем обновление времени при закрытии соединения\n      if (timeDisplayInterval) {\n        clearInterval(timeDisplayInterval);\n        timeDisplayInterval = null;\n      }\n    };\n    document.addEventListener("keydown", handleKeyDown);\n\n    // Запускаем периодическую синхронизацию времени\n    setInterval(sendPing, 10000); // Каждые 10 секунд\n  } catch (error) {\n    console.error("[WS] Ошибка при создании WebSocket:", error);\n    console.error("[WS] Стек вызовов:", error.stack);\n  }\n}\n\n// Функция для отправки ping-сообщения с временной меткой клиента\nfunction sendPing() {\n  if (!ws || ws.readyState !== WebSocket.OPEN) return;\n  var clientTime = Date.now();\n  var pingObj = {\n    type: "ping",\n    client_time: clientTime\n  };\n  try {\n    ws.send(JSON.stringify(pingObj));\n    console.log("[WS] \\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D ping \\u0434\\u043B\\u044F \\u0441\\u0438\\u043D\\u0445\\u0440\\u043E\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u0438 \\u0432\\u0440\\u0435\\u043C\\u0435\\u043D\\u0438, \\u0432\\u0440\\u0435\\u043C\\u044F \\u043A\\u043B\\u0438\\u0435\\u043D\\u0442\\u0430: ".concat(clientTime));\n  } catch (error) {\n    console.error("[WS] Ошибка отправки ping:", error);\n  }\n}\n\n// Новая функция для запуска физики с задержкой\nfunction startPhysicsSimulation() {\n  physicsStarted = true;\n\n  // Активируем все ожидающие объекты\n  var _iterator = _createForOfIteratorHelper(pendingObjects),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var id = _step.value;\n      var obj = objects_objects[id];\n      if (obj && obj.body) {\n        // Активируем тело\n        obj.body.activate(true);\n\n        // Телепортируем к последним известным серверным координатам\n        if (obj.serverPos) {\n          var transform = new Ammo.btTransform();\n          obj.body.getMotionState().getWorldTransform(transform);\n          transform.setOrigin(new Ammo.btVector3(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z));\n          obj.body.getMotionState().setWorldTransform(transform);\n          obj.mesh.position.set(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z);\n          console.log("[Physics] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(id, " \\u0430\\u043A\\u0442\\u0438\\u0432\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D \\u0438 \\u0442\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D \\u0432 \\u043A\\u043E\\u043E\\u0440\\u0434\\u0438\\u043D\\u0430\\u0442\\u044B:"), {\n            x: obj.serverPos.x,\n            y: obj.serverPos.y,\n            z: obj.serverPos.z\n          });\n        }\n      }\n    }\n\n    // Очищаем список ожидающих\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  pendingObjects = [];\n  console.log("[Physics] Физика активирована, все ожидающие объекты обработаны");\n}\n\n// Экспортируем функции для доступа из других модулей\n\n;// ./src/physics.js\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == physics_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(physics_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == physics_typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != physics_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != physics_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction physics_typeof(o) { "@babel/helpers - typeof"; return physics_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, physics_typeof(o); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// physics.js\n\n\n\n\nvar physics_localPhysicsWorld = null;\nvar ammoPromise = null;\n\n// Настройки для коррекции позиции\nvar DEAD_ZONE = 0.1; // Мертвая зона, в пределах которой не применяется коррекция\nvar CORRECTION_STRENGTH = 10.0; // Уменьшаем силу корректировки для более плавного движения\nvar TELEPORT_THRESHOLD = 3.0; // Порог для начала плавной коррекции\n\n// Добавляем настройки для client-side prediction\nvar PREDICTION_SMOOTH_FACTOR = 0.2; // Базовый коэффициент сглаживания\nvar PREDICTION_MAX_ERROR = 10.0; // Порог для жесткой телепортации\nvar DISTANCE_BASED_SMOOTH_FACTOR = true; // Использовать динамический коэффициент сглаживания\nvar NEW_OBJECT_TIMEOUT = 2000; // 2 секунды для "новых" объектов\n\n// История команд для предсказания\nvar inputHistory = [];\nvar lastSequenceNumber = 0; // Счетчик последовательности для команд\nvar lastServerUpdateTime = 0; // Время последнего серверного обновления\n\n// Система логирования с ограничением частоты\nvar LOG_INTERVAL = 5000; // 1 секунда между логами\nvar logTimers = {};\n\n// Добавляем маркер времени создания объектов\nvar objectCreationTimes = new Map();\n\n// Централизованная функция логирования с ограничением частоты\nfunction throttledLog(category, message) {\n  var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var now = Date.now();\n\n  // Проверяем, прошло ли достаточно времени с последнего лога для этой категории\n  if (!logTimers[category] || now - logTimers[category] >= LOG_INTERVAL) {\n    // Обновляем таймер для этой категории\n    logTimers[category] = now;\n\n    // Форматируем и выводим сообщение\n    if (data) {\n      console.log("[".concat(category, "] ").concat(message), data);\n    } else {\n      console.log("[".concat(category, "] ").concat(message));\n    }\n    return true; // Лог был выведен\n  }\n  return false; // Лог был пропущен из-за ограничения частоты\n}\n\n// Функция для логирования данных о главном игроке\nfunction logMainPlayerInfo() {\n  var mainPlayer = objects_objects["mainPlayer1"];\n  if (!mainPlayer || !mainPlayer.mesh) {\n    return;\n  }\n  var pos = mainPlayer.mesh.position;\n\n  // Получаем скорость, если доступна физика\n  var vel = {\n    x: 0,\n    y: 0,\n    z: 0\n  };\n  if (mainPlayer.body) {\n    var velocity = mainPlayer.body.getLinearVelocity();\n    vel = {\n      x: velocity.x(),\n      y: velocity.y(),\n      z: velocity.z()\n    };\n    window.Ammo.destroy(velocity);\n  }\n\n  // Выводим в формате, напоминающем C++ вывод\n  throttledLog("MainPlayer", "Position: (".concat(pos.x.toFixed(2), ", ").concat(pos.y.toFixed(2), ", ").concat(pos.z.toFixed(2), "), ") + "Velocity: (".concat(vel.x.toFixed(2), ", ").concat(vel.y.toFixed(2), ", ").concat(vel.z.toFixed(2), ")"));\n}\n\n// Функция для настройки физического мира\nfunction setupPhysicsWorld() {\n  if (!window.Ammo) {\n    console.error("[Physics] Ammo.js не инициализирован");\n    return;\n  }\n\n  // Создаем физический мир\n  var collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();\n  var dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration);\n  var broadphase = new Ammo.btDbvtBroadphase();\n  var solver = new Ammo.btSequentialImpulseConstraintSolver();\n  physics_localPhysicsWorld = new Ammo.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n\n  // Устанавливаем гравитацию\n  physics_localPhysicsWorld.setGravity(new Ammo.btVector3(0, -9.81, 0));\n  console.log("[Physics] Физический мир успешно создан");\n}\nfunction initAmmo() {\n  return _initAmmo.apply(this, arguments);\n}\nfunction _initAmmo() {\n  _initAmmo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt("return", new Promise(function (resolve, reject) {\n            if (typeof Ammo !== \'undefined\') {\n              console.log(\'Ammo.js уже инициализирован\');\n              setupPhysicsWorld();\n              resolve();\n              return;\n            }\n            console.log(\'Инициализация Ammo.js...\');\n            var ammoScript = document.createElement(\'script\');\n            ammoScript.src = \'/ammo/ammo.wasm.js\';\n            ammoScript.async = true;\n            ammoScript.onload = function () {\n              console.log(\'Скрипт Ammo.js загружен, инициализация...\');\n              window.Ammo().then(function (Ammo) {\n                window.Ammo = Ammo;\n                console.log(\'Ammo.js инициализирован успешно\');\n                setupPhysicsWorld();\n\n                // Запускаем физическую симуляцию с задержкой в 1 секунду,\n                // чтобы гарантировать получение координат от сервера\n                console.log("[Physics] Задерживаем запуск физики на 1 секунду для получения серверных координат...");\n                setTimeout(function () {\n                  startPhysicsSimulation();\n                }, 1000);\n                resolve();\n              })["catch"](function (err) {\n                console.error(\'Ошибка инициализации Ammo.js:\', err);\n                reject(err);\n              });\n            };\n            ammoScript.onerror = function (err) {\n              console.error(\'Ошибка загрузки Ammo.js:\', err);\n              reject(err);\n            };\n            document.body.appendChild(ammoScript);\n          }));\n        case 1:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _initAmmo.apply(this, arguments);\n}\nfunction stepPhysics(deltaTime) {\n  // Проверяем корректность deltaTime\n  if (!deltaTime || isNaN(deltaTime) || deltaTime <= 0 || deltaTime > 1) {\n    deltaTime = 1 / 60; // Значение по умолчанию\n  }\n\n  // Ограничиваем максимальный шаг для стабильности\n  var maxStep = 1 / 30; // Не больше 30мс для одного шага\n  var effectiveStep = Math.min(deltaTime, maxStep);\n\n  // Используем фиксированный шаг и переменное количество подшагов для точности\n  var fixedStep = 1 / 120; // 120 Гц внутренние шаги\n  var maxSubSteps = Math.ceil(effectiveStep / fixedStep);\n\n  // Выполняем шаг симуляции с заданными параметрами\n  physics_localPhysicsWorld.stepSimulation(effectiveStep, maxSubSteps, fixedStep);\n\n  // Выводим информацию о главном игроке\n  logMainPlayerInfo();\n\n  // Обновляем физические объекты (без лишних логов)\n  updatePhysicsObjects(objects_objects);\n}\nfunction updatePhysicsObjects(objects) {\n  // Переменные для диагностики\n  var mainSpherePos = null;\n  var ammoShadowPos = null;\n  var bulletShadowPos = null;\n\n  // Обновляем все объекты\n  for (var id in objects) {\n    var obj = objects[id];\n    if (!obj.mesh) continue;\n\n    // Проверяем, новый ли это объект\n    var isNewObject = objectCreationTimes.has(id) && Date.now() - objectCreationTimes.get(id) < NEW_OBJECT_TIMEOUT;\n\n    // Пропускаем обработку террейна (он статичен)\n    if (obj.object_type === "terrain") continue;\n    switch (obj.physicsBy) {\n      case "ammo":\n        // Обновление только по физике Ammo.js\n        if (obj.body && obj.object_type !== "terrain") {\n          var trans = new window.Ammo.btTransform();\n          obj.body.getMotionState().getWorldTransform(trans);\n          var locX = trans.getOrigin().x();\n          var locY = trans.getOrigin().y();\n          var locZ = trans.getOrigin().z();\n          var qx = trans.getRotation().x();\n          var qy = trans.getRotation().y();\n          var qz = trans.getRotation().z();\n          var qw = trans.getRotation().w();\n          obj.mesh.position.set(locX, locY, locZ);\n          obj.mesh.quaternion.set(qx, qy, qz, qw);\n\n          // Сохраняем для диагностики\n          if (id === "ammo_shadow") {\n            ammoShadowPos = {\n              x: locX,\n              y: locY,\n              z: locZ\n            };\n          }\n        }\n        break;\n      case "bullet":\n        // Обновление по серверным данным с простой интерполяцией\n        if (obj.serverPos && obj.object_type !== "terrain") {\n          // Простая линейная интерполяция\n          var interpolationFactor = 0.2; // Можно настроить под ваши нужды\n\n          obj.mesh.position.x += (obj.serverPos.x - obj.mesh.position.x) * interpolationFactor;\n          obj.mesh.position.y += (obj.serverPos.y - obj.mesh.position.y) * interpolationFactor;\n          obj.mesh.position.z += (obj.serverPos.z - obj.mesh.position.z) * interpolationFactor;\n\n          // Сохраняем для диагностики\n          if (id === "bullet_shadow") {\n            bulletShadowPos = {\n              x: obj.mesh.position.x,\n              y: obj.mesh.position.y,\n              z: obj.mesh.position.z\n            };\n          }\n        }\n        break;\n      case "both":\n        // Гибридный подход для объектов, управляемых обоими источниками\n        if (obj.serverPos && obj.object_type !== "terrain" && obj.body) {\n          // Сохраняем позицию основной сферы для диагностики\n          if (id === "mainPlayer1") {\n            mainSpherePos = {\n              x: obj.mesh.position.x,\n              y: obj.mesh.position.y,\n              z: obj.mesh.position.z,\n              serverX: obj.serverPos.x,\n              serverY: obj.serverPos.y,\n              serverZ: obj.serverPos.z\n            };\n          }\n\n          // Получаем текущую позицию из физического тела\n          var transform = new window.Ammo.btTransform();\n          obj.body.getMotionState().getWorldTransform(transform);\n\n          // Вычисляем разницу между серверной и текущей позицией физического тела\n          var currentX = transform.getOrigin().x();\n          var currentY = transform.getOrigin().y();\n          var currentZ = transform.getOrigin().z();\n\n          // Нам важно знать скорость объекта для выбора оптимальной стратегии коррекции\n          var velocity = obj.body.getLinearVelocity();\n          var speedSq = velocity.x() * velocity.x() + velocity.y() * velocity.y() + velocity.z() * velocity.z();\n          var isMovingFast = speedSq > 4.0; // Если скорость больше 2 м/с\n\n          var dx = obj.serverPos.x - currentX;\n          var dy = obj.serverPos.y - currentY;\n          var dz = obj.serverPos.z - currentZ;\n\n          // Вычисляем расстояние\n          var distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\n\n          // Логируем только при значительных расхождениях\n          if (distance > DEAD_ZONE || isMovingFast) {\n            throttledLog("Physics", "\\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(id, ": \\u0420\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435: ").concat(distance.toFixed(3), ", \\u0421\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C: ").concat(Math.sqrt(speedSq).toFixed(3), ", \\u0411\\u044B\\u0441\\u0442\\u0440\\u043E: ").concat(isMovingFast, ", \\u041A\\u043B\\u0438\\u0435\\u043D\\u0442: {x: ").concat(currentX.toFixed(2), ", y: ").concat(currentY.toFixed(2), ", z: ").concat(currentZ.toFixed(2), "}, \\u0421\\u0435\\u0440\\u0432\\u0435\\u0440: {x: ").concat(obj.serverPos.x.toFixed(2), ", y: ").concat(obj.serverPos.y.toFixed(2), ", z: ").concat(obj.serverPos.z.toFixed(2), "}"));\n          }\n\n          // Применяем client-side prediction\n          if (distance > DEAD_ZONE) {\n            // Определяем коэффициент сглаживания на основе состояния объекта\n            var smoothFactor = PREDICTION_SMOOTH_FACTOR;\n\n            // Для новых объектов используем более жесткую коррекцию\n            if (isNewObject) {\n              smoothFactor = 0.8; // 80% серверной позиции\n              throttledLog("Physics", "\\u041D\\u043E\\u0432\\u044B\\u0439 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(id, ", \\u043F\\u0440\\u0438\\u043C\\u0435\\u043D\\u044F\\u0435\\u043C \\u0436\\u0435\\u0441\\u0442\\u043A\\u0443\\u044E \\u043A\\u043E\\u0440\\u0440\\u0435\\u043A\\u0446\\u0438\\u044E (").concat(smoothFactor, ")"));\n            } else if (DISTANCE_BASED_SMOOTH_FACTOR) {\n              // Чем больше расхождение, тем больше коэффициент\n              smoothFactor = Math.min(distance / 20.0, 0.5); // Максимум 0.5\n            }\n\n            // Для больших расхождений или новых объектов применяем телепортацию\n            if (distance > PREDICTION_MAX_ERROR || isNewObject && distance > 5.0) {\n              // При экстремальных расхождениях - телепортация\n              throttledLog("Physics", "\\u042D\\u043A\\u0441\\u0442\\u0440\\u0435\\u043C\\u0430\\u043B\\u044C\\u043D\\u043E\\u0435 \\u0440\\u0430\\u0441\\u0445\\u043E\\u0436\\u0434\\u0435\\u043D\\u0438\\u0435 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(id, ", \\u0440\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435: ").concat(distance.toFixed(2), ", \\u043D\\u043E\\u0432\\u044B\\u0439: ").concat(isNewObject));\n\n              // Телепортируем объект\n              transform.setOrigin(new window.Ammo.btVector3(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z));\n              obj.body.getMotionState().setWorldTransform(transform);\n\n              // Сбрасываем скорость только при существенных расхождениях\n              if (distance > PREDICTION_MAX_ERROR * 1.5) {\n                // При очень больших расхождениях полностью сбрасываем скорость\n                var zero = new window.Ammo.btVector3(0, 0, 0);\n                obj.body.setLinearVelocity(zero);\n                obj.body.setAngularVelocity(zero);\n                window.Ammo.destroy(zero);\n              } else if (obj.serverVelocity) {\n                // Если есть рассчитанная серверная скорость, применяем её\n                var serverVel = new window.Ammo.btVector3(obj.serverVelocity.x, obj.serverVelocity.y, obj.serverVelocity.z);\n                obj.body.setLinearVelocity(serverVel);\n                window.Ammo.destroy(serverVel);\n              } else {\n                // Иначе уменьшаем текущую скорость\n                var dampedVelocity = new window.Ammo.btVector3(velocity.x() * 0.5, velocity.y() * 0.5, velocity.z() * 0.5);\n                obj.body.setLinearVelocity(dampedVelocity);\n                window.Ammo.destroy(dampedVelocity);\n              }\n\n              // Немедленно синхронизируем меш с физическим телом\n              var updatedTransform = new window.Ammo.btTransform();\n              obj.body.getMotionState().getWorldTransform(updatedTransform);\n              var px = updatedTransform.getOrigin().x();\n              var py = updatedTransform.getOrigin().y();\n              var pz = updatedTransform.getOrigin().z();\n              obj.mesh.position.set(px, py, pz);\n              window.Ammo.destroy(updatedTransform);\n            } else if (distance > TELEPORT_THRESHOLD) {\n              // Мягкая коррекция для средних расхождений\n              // Смешиваем текущую позицию с серверной\n              var correctionX = obj.serverPos.x * smoothFactor + currentX * (1 - smoothFactor);\n              var correctionY = obj.serverPos.y * smoothFactor + currentY * (1 - smoothFactor);\n              var correctionZ = obj.serverPos.z * smoothFactor + currentZ * (1 - smoothFactor);\n              transform.setOrigin(new window.Ammo.btVector3(correctionX, correctionY, correctionZ));\n              obj.body.getMotionState().setWorldTransform(transform);\n\n              // Если мы перемещаем объект, обновляем mesh непосредственно для большей плавности\n              obj.mesh.position.set(correctionX, correctionY, correctionZ);\n\n              // Обновляем скорость, чтобы она учитывала направление серверного движения\n              if (obj.serverVelocity) {\n                var blendedVelocity = new window.Ammo.btVector3(velocity.x() * (1 - smoothFactor) + obj.serverVelocity.x * smoothFactor, velocity.y() * (1 - smoothFactor) + obj.serverVelocity.y * smoothFactor, velocity.z() * (1 - smoothFactor) + obj.serverVelocity.z * smoothFactor);\n                obj.body.setLinearVelocity(blendedVelocity);\n                window.Ammo.destroy(blendedVelocity);\n              }\n            } else {\n              // Для небольших расхождений - корректирующая сила\n              // Более плавная коррекция для медленно движущихся объектов\n              var adaptiveStrength = isMovingFast ? CORRECTION_STRENGTH : CORRECTION_STRENGTH * 0.7;\n              var magnitude = distance * adaptiveStrength;\n\n              // Для объектов на земле не применяем вертикальную коррекцию,\n              // если они находятся на поверхности с небольшой разницей по высоте\n              var correctY = true;\n              if (Math.abs(dy) < DEAD_ZONE && Math.abs(velocity.y()) < 0.5) {\n                correctY = false;\n              }\n              var force = new window.Ammo.btVector3(dx * magnitude, correctY ? dy * magnitude : 0, dz * magnitude);\n\n              // Активируем тело и применяем силу\n              obj.body.activate(true);\n              obj.body.applyCentralForce(force);\n              window.Ammo.destroy(force);\n            }\n          }\n          window.Ammo.destroy(velocity);\n          window.Ammo.destroy(transform);\n        }\n        break;\n      default:\n        throttledLog("Error", "\\u041D\\u0435\\u0438\\u0437\\u0432\\u0435\\u0441\\u0442\\u043D\\u044B\\u0439 \\u0442\\u0438\\u043F physicsBy \\u0434\\u043B\\u044F \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(id, ": ").concat(obj.physicsBy));\n        break;\n    }\n  }\n\n  // Выводим диагностическую информацию о расхождениях\n  if (mainSpherePos && ammoShadowPos && bulletShadowPos) {\n    // Вычисляем расхождения между диагностическими сферами\n    var mainToAmmoDistance = Math.sqrt(Math.pow(mainSpherePos.x - ammoShadowPos.x, 2) + Math.pow(mainSpherePos.y - ammoShadowPos.y, 2) + Math.pow(mainSpherePos.z - ammoShadowPos.z, 2));\n    var mainToBulletDistance = Math.sqrt(Math.pow(mainSpherePos.x - bulletShadowPos.x, 2) + Math.pow(mainSpherePos.y - bulletShadowPos.y, 2) + Math.pow(mainSpherePos.z - bulletShadowPos.z, 2));\n    var serverToMainDistance = Math.sqrt(Math.pow(mainSpherePos.serverX - mainSpherePos.x, 2) + Math.pow(mainSpherePos.serverY - mainSpherePos.y, 2) + Math.pow(mainSpherePos.serverZ - mainSpherePos.z, 2));\n\n    // Выводим статистику только примерно раз в секунду (чтобы не спамить консоль)\n    if (Math.random() < 0.016) {\n      // примерно при 60 FPS будет выводить раз в секунду\n      throttledLog("Physics", "Диагностика расхождений:", {\n        "Основная сфера -> Ammo-тень": mainToAmmoDistance.toFixed(3),\n        "Основная сфера -> Bullet-тень": mainToBulletDistance.toFixed(3),\n        "Серверная позиция -> Основная сфера": serverToMainDistance.toFixed(3)\n      });\n    }\n  }\n\n  // Добавляем расчет и визуализацию расхождений между движками\n  visualizeDivergence(objects);\n}\n\n// Функция для визуализации расхождений между движками\nfunction visualizeDivergence(objects) {\n  // Проверяем наличие всех необходимых объектов\n  var mainSphere = objects["mainPlayer1"];\n  var ammoShadow = objects["ammo_shadow"];\n  var bulletShadow = objects["bullet_shadow"];\n  if (!mainSphere || !ammoShadow || !bulletShadow) return;\n\n  // Получаем позиции\n  var mainPos = mainSphere.mesh.position;\n  var ammoPos = ammoShadow.mesh.position;\n  var bulletPos = bulletShadow.mesh.position;\n\n  // Расчет расстояний\n  var distMainToAmmo = Math.sqrt(Math.pow(mainPos.x - ammoPos.x, 2) + Math.pow(mainPos.y - ammoPos.y, 2) + Math.pow(mainPos.z - ammoPos.z, 2));\n  var distMainToBullet = Math.sqrt(Math.pow(mainPos.x - bulletPos.x, 2) + Math.pow(mainPos.y - bulletPos.y, 2) + Math.pow(mainPos.z - bulletPos.z, 2));\n  var distAmmoBullet = Math.sqrt(Math.pow(ammoPos.x - bulletPos.x, 2) + Math.pow(ammoPos.y - ammoPos.y, 2) + Math.pow(ammoPos.z - bulletPos.z, 2));\n\n  // Ограничим вывод лога, чтобы не спамить консоль (примерно раз в секунду)\n  if (!window.lastDivergenceLog || Date.now() - window.lastDivergenceLog > 1000) {\n    throttledLog("Physics", "Расхождения между движками:");\n    throttledLog("Physics", "  \\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0439 \\u0448\\u0430\\u0440 (".concat(mainSphere.physicsBy, "): x=").concat(mainPos.x.toFixed(2), ", y=").concat(mainPos.y.toFixed(2), ", z=").concat(mainPos.z.toFixed(2)));\n    throttledLog("Physics", "  \\u0422\\u0435\\u043D\\u044C Ammo: x=".concat(ammoPos.x.toFixed(2), ", y=").concat(ammoPos.y.toFixed(2), ", z=").concat(ammoPos.z.toFixed(2)));\n    throttledLog("Physics", "  \\u0422\\u0435\\u043D\\u044C Bullet: x=".concat(bulletPos.x.toFixed(2), ", y=").concat(bulletPos.y.toFixed(2), ", z=").concat(bulletPos.z.toFixed(2)));\n    throttledLog("Physics", "  \\u0420\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435 \\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0439-Ammo: ".concat(distMainToAmmo.toFixed(3)));\n    throttledLog("Physics", "  \\u0420\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435 \\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0439-Bullet: ".concat(distMainToBullet.toFixed(3)));\n    throttledLog("Physics", "  \\u0420\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435 Ammo-Bullet: ".concat(distAmmoBullet.toFixed(3)));\n\n    // Визуальное отображение расхождений\n    if (distMainToAmmo > DEAD_ZONE) {\n      throttledLog("Warning", "  [!] \\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0439 \\u0448\\u0430\\u0440 \\u0440\\u0430\\u0441\\u0445\\u043E\\u0434\\u0438\\u0442\\u0441\\u044F \\u0441 Ammo \\u043D\\u0430 ".concat(distMainToAmmo.toFixed(3), " (> ").concat(DEAD_ZONE, ")"));\n    }\n    if (distMainToBullet > DEAD_ZONE) {\n      throttledLog("Warning", "  [!] \\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0439 \\u0448\\u0430\\u0440 \\u0440\\u0430\\u0441\\u0445\\u043E\\u0434\\u0438\\u0442\\u0441\\u044F \\u0441 Bullet \\u043D\\u0430 ".concat(distMainToBullet.toFixed(3), " (> ").concat(DEAD_ZONE, ")"));\n    }\n    if (distAmmoBullet > DEAD_ZONE) {\n      throttledLog("Warning", "  [!] Ammo \\u0440\\u0430\\u0441\\u0445\\u043E\\u0434\\u0438\\u0442\\u0441\\u044F \\u0441 Bullet \\u043D\\u0430 ".concat(distAmmoBullet.toFixed(3), " (> ").concat(DEAD_ZONE, ")"));\n    }\n\n    // Обновляем время последнего лога\n    window.lastDivergenceLog = Date.now();\n  }\n\n  // Рисуем линии между объектами для визуализации расхождений\n  visualizeDivergenceLines(objects, mainPos, ammoPos, bulletPos);\n}\n\n// Функция для рисования линий, показывающих расхождения\nfunction visualizeDivergenceLines(objects, mainPos, ammoPos, bulletPos) {\n  // Проверяем наличие линий в объектах\n  if (!objects.divergenceLines) {\n    // Создаем материалы для линий\n    var mainToAmmoMaterial = new three_core/* LineBasicMaterial */.mrM({\n      color: 0xff0000\n    }); // красный\n    var mainToBulletMaterial = new three_core/* LineBasicMaterial */.mrM({\n      color: 0x00ff00\n    }); // зеленый\n    var ammoBulletMaterial = new three_core/* LineBasicMaterial */.mrM({\n      color: 0x0000ff\n    }); // синий\n\n    // Создаем геометрии и линии\n    var mainToAmmoGeometry = new three_core/* BufferGeometry */.LoY();\n    var mainToBulletGeometry = new three_core/* BufferGeometry */.LoY();\n    var ammoBulletGeometry = new three_core/* BufferGeometry */.LoY();\n    var mainToAmmoLine = new three_core/* Line */.N1A(mainToAmmoGeometry, mainToAmmoMaterial);\n    var mainToBulletLine = new three_core/* Line */.N1A(mainToBulletGeometry, mainToBulletMaterial);\n    var ammoBulletLine = new three_core/* Line */.N1A(ammoBulletGeometry, ammoBulletMaterial);\n\n    // Добавляем линии на сцену\n    if (objects.mainPlayer1 && objects.mainPlayer1.mesh.parent) {\n      var scene = objects.mainPlayer1.mesh.parent;\n      scene.add(mainToAmmoLine);\n      scene.add(mainToBulletLine);\n      scene.add(ammoBulletLine);\n    }\n\n    // Сохраняем линии в объекты\n    objects.divergenceLines = {\n      mainToAmmo: {\n        line: mainToAmmoLine,\n        geometry: mainToAmmoGeometry\n      },\n      mainToBullet: {\n        line: mainToBulletLine,\n        geometry: mainToBulletGeometry\n      },\n      ammoBullet: {\n        line: ammoBulletLine,\n        geometry: ammoBulletGeometry\n      }\n    };\n  }\n\n  // Обновляем позиции линий\n  if (objects.divergenceLines) {\n    // Линия Основной-Ammo\n    updateLine(objects.divergenceLines.mainToAmmo.geometry, mainPos, ammoPos);\n\n    // Линия Основной-Bullet\n    updateLine(objects.divergenceLines.mainToBullet.geometry, mainPos, bulletPos);\n\n    // Линия Ammo-Bullet\n    updateLine(objects.divergenceLines.ammoBullet.geometry, ammoPos, bulletPos);\n  }\n}\n\n// Функция для обновления позиций линии\nfunction updateLine(geometry, startPos, endPos) {\n  var positions = new Float32Array([startPos.x, startPos.y, startPos.z, endPos.x, endPos.y, endPos.z]);\n  geometry.setAttribute(\'position\', new three_core/* BufferAttribute */.THS(positions, 3));\n  geometry.attributes.position.needsUpdate = true;\n}\n\n// Функция для применения импульса с сохранением в истории\nfunction applyImpulseToSphere(cmd, forceX, forceY, forceZ, objectsList, clientTime) {\n  console.log("[Debug] Переданные объекты в applyImpulseToSphere:", objectsList);\n  // Проверяем, что objects передан и является объектом\n  if (!objectsList || physics_typeof(objectsList) !== \'object\') {\n    console.error("[Physics] Ошибка в applyImpulseToSphere: objects не определены или некорректны");\n    return;\n  }\n  for (var id in objectsList) {\n    var obj = objectsList[id];\n\n    // Пропускаем объекты, которые не являются сферами или не имеют физики\n    if (!obj || !obj.body || !obj.mesh || !obj.mesh.geometry || obj.mesh.geometry.type !== "SphereGeometry") {\n      continue;\n    }\n\n    // Активируем тело\n    obj.body.activate(true);\n\n    // Применяем импульс в зависимости от команды и текущей скорости\n    // Получаем текущую скорость для сглаживания усилия\n    var velocity = obj.body.getLinearVelocity();\n    var vx = velocity.x();\n    var vy = velocity.y();\n    var vz = velocity.z();\n    var currentSpeed = Math.sqrt(vx * vx + vy * vy + vz * vz);\n\n    // Вычисляем множитель скорости - чем быстрее движется объект,\n    // тем меньше дополнительный импульс, чтобы избежать чрезмерных скоростей\n    var speedFactor = Math.max(0.5, 1.0 - currentSpeed * 0.05);\n\n    // Проверяем, находится ли объект на земле (простая проверка по Y-скорости)\n    var isGrounded = Math.abs(vy) < 0.1;\n\n    // Базовые значения импульсов\n    var baseImpulseHorizontal = 5.0;\n    var baseImpulseVertical = 10.0;\n\n    // Создаем импульс на основе переданных значений\n    var impulse = new window.Ammo.btVector3(forceX * speedFactor, forceY * (isGrounded ? 1.0 : 0.3) * speedFactor, forceZ * speedFactor);\n\n    // Активируем тело и применяем импульс\n    obj.body.activate(true);\n    obj.body.applyCentralImpulse(impulse);\n\n    // Очищаем память\n    window.Ammo.destroy(impulse);\n    window.Ammo.destroy(velocity);\n    console.log("[Physics] Применен импульс к шару:", {\n      id: id,\n      команда: cmd,\n      скорость: currentSpeed.toFixed(2),\n      множитель: speedFactor.toFixed(2),\n      импульс: {\n        x: forceX,\n        y: forceY,\n        z: forceZ\n      },\n      время_клиента: clientTime\n    });\n\n    // Сохраняем информацию о последней примененной команде\n    obj.lastImpulse = {\n      cmd: cmd,\n      force: {\n        x: forceX,\n        y: forceY,\n        z: forceZ\n      },\n      clientTime: clientTime\n    };\n  }\n\n  // Синхронизируем диагностические сферы если команда нажата\n  if (cmd && objectsList["mainPlayer1"] && objectsList["ammo_shadow"]) {\n    syncDiagnosticSpheres(objectsList);\n  }\n\n  // Добавляем команду в историю для client-side prediction\n  var sequenceNumber = ++lastSequenceNumber;\n  var timestamp = Date.now();\n  inputHistory.push({\n    sequenceNumber: sequenceNumber,\n    timestamp: timestamp,\n    clientTime: clientTime,\n    cmd: cmd,\n    impulse: {\n      x: forceX,\n      y: forceY,\n      z: forceZ\n    }\n  });\n\n  // Очищаем историю старше 2 секунд\n  var twoSecondsAgo = timestamp - 2000;\n  inputHistory = inputHistory.filter(function (entry) {\n    return entry.timestamp > twoSecondsAgo;\n  });\n}\n\n// Синхронизация диагностических сфер с основной сферой\nfunction syncDiagnosticSpheres(objects) {\n  // Получаем основную сферу\n  var mainSphere = objects["mainPlayer1"];\n  if (!mainSphere || !mainSphere.mesh) return;\n  var mainPos = mainSphere.mesh.position;\n\n  // Синхронизируем ammo-тень с основной сферой\n  if (objects["ammo_shadow"] && objects["ammo_shadow"].body) {\n    console.log("[Physics] Синхронизация ammo-тени с основной сферой");\n    var ammoShadow = objects["ammo_shadow"];\n\n    // Создаем трансформацию с позицией основной сферы\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(mainPos.x, mainPos.y, mainPos.z));\n\n    // Устанавливаем трансформацию\n    ammoShadow.body.getMotionState().setWorldTransform(transform);\n\n    // Также применяем такую же скорость\n    if (mainSphere.body) {\n      var mainVelocity = mainSphere.body.getLinearVelocity();\n      var mainAngularVelocity = mainSphere.body.getAngularVelocity();\n      ammoShadow.body.setLinearVelocity(mainVelocity);\n      ammoShadow.body.setAngularVelocity(mainAngularVelocity);\n    }\n\n    // Активируем тело\n    ammoShadow.body.activate(true);\n    window.Ammo.destroy(transform);\n  }\n\n  // Синхронизируем bullet-тень с основной сферой (просто устанавливаем serverPos)\n  if (objects["bullet_shadow"]) {\n    console.log("[Physics] Синхронизация bullet-тени с основной сферой");\n    var bulletShadow = objects["bullet_shadow"];\n    bulletShadow.serverPos = {\n      x: mainPos.x,\n      y: mainPos.y,\n      z: mainPos.z\n    };\n  }\n}\nfunction receiveObjectUpdate(data) {\n  var id = data.id;\n  var obj = objects_objects[id];\n  if (!obj) {\n    throttledLog("Error", "\\u041F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u043E \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0434\\u043B\\u044F \\u043D\\u0435\\u0441\\u0443\\u0449\\u0435\\u0441\\u0442\\u0432\\u0443\\u044E\\u0449\\u0435\\u0433\\u043E \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430: ".concat(id));\n    return;\n  }\n\n  // Проверяем, является ли объект новым\n  if (!objectCreationTimes.has(id)) {\n    objectCreationTimes.set(id, Date.now());\n    console.log("[Physics] \\u0423\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D \\u0442\\u0430\\u0439\\u043C\\u0435\\u0440 \\u0434\\u043B\\u044F \\u043D\\u043E\\u0432\\u043E\\u0433\\u043E \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(id));\n  }\n\n  // Получаем временную метку сервера\n  var serverTime = data.server_time;\n  if (!serverTime) {\n    throttledLog("Warning", "\\u041F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u043E \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0431\\u0435\\u0437 \\u0432\\u0440\\u0435\\u043C\\u0435\\u043D\\u043D\\u043E\\u0439 \\u043C\\u0435\\u0442\\u043A\\u0438 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430 \\u0434\\u043B\\u044F ".concat(id));\n  }\n\n  // Обновляем время последнего обновления\n  var now = Date.now();\n  var timeSinceLastUpdate = now - lastServerUpdateTime;\n  lastServerUpdateTime = now;\n\n  // Обновляем серверную позицию\n  var oldServerPos = obj.serverPos ? _objectSpread({}, obj.serverPos) : null;\n  obj.serverPos = {\n    x: data.x || 0,\n    y: data.y || 0,\n    z: data.z || 0\n  };\n\n  // Сохраняем временную метку сервера для этого обновления\n  obj.lastServerUpdate = {\n    time: serverTime,\n    clientTime: now,\n    position: _objectSpread({}, obj.serverPos)\n  };\n\n  // Если это первое обновление, просто принимаем серверную позицию\n  if (!oldServerPos) {\n    return;\n  }\n\n  // Рассчитываем скорость сервера, учитывая временные метки\n  if (obj.previousServerUpdate && serverTime && obj.previousServerUpdate.time) {\n    var timeDelta = (serverTime - obj.previousServerUpdate.time) / 1000; // в секундах\n\n    if (timeDelta > 0) {\n      obj.serverVelocity = {\n        x: (obj.serverPos.x - obj.previousServerUpdate.position.x) / timeDelta,\n        y: (obj.serverPos.y - obj.previousServerUpdate.position.y) / timeDelta,\n        z: (obj.serverPos.z - obj.previousServerUpdate.position.z) / timeDelta\n      };\n\n      // Логируем информацию о скорости только для главного игрока\n      if (id === "mainPlayer1") {\n        throttledLog("Physics", "\\u0412\\u044B\\u0447\\u0438\\u0441\\u043B\\u0435\\u043D\\u0430 \\u0441\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430 \\u0434\\u043B\\u044F ".concat(id, ": ") + "vx=".concat(obj.serverVelocity.x.toFixed(2), ", ") + "vy=".concat(obj.serverVelocity.y.toFixed(2), ", ") + "vz=".concat(obj.serverVelocity.z.toFixed(2), ", ") + "delta=".concat(timeDelta.toFixed(3), "\\u0441"));\n      }\n    }\n  }\n\n  // Сохраняем текущее обновление как предыдущее для следующего расчета\n  obj.previousServerUpdate = {\n    time: serverTime,\n    clientTime: now,\n    position: _objectSpread({}, obj.serverPos)\n  };\n\n  // Анализируем расхождение между прогнозируемым и фактическим состоянием\n  if (obj.lastImpulse && serverTime) {\n    // Вычисляем, сколько времени прошло с момента применения последнего импульса\n    var timeSinceLastImpulse = now - obj.lastImpulse.clientTime;\n\n    // Проверяем, учтен ли наш последний импульс в обновлении с сервера\n    // (обычно требуется RTT для получения реакции сервера)\n    if (timeSinceLastImpulse > 50) {\n      // Предполагаем минимальную задержку сети\n      // Теперь мы можем сравнить наше предсказанное положение с фактическим\n      // и скорректировать нашу модель предсказания\n\n      // Текущее состояние объекта в клиентской физике\n      var transform = new window.Ammo.btTransform();\n      if (obj.body) {\n        obj.body.getMotionState().getWorldTransform(transform);\n        var currentX = transform.getOrigin().x();\n        var currentY = transform.getOrigin().y();\n        var currentZ = transform.getOrigin().z();\n\n        // Вычисляем расхождение между нашим предсказанием и обновлением сервера\n        var dx = obj.serverPos.x - currentX;\n        var dy = obj.serverPos.y - currentY;\n        var dz = obj.serverPos.z - currentZ;\n        var distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\n        if (id === "mainPlayer1" && distance > 1.0) {\n          throttledLog("Physics", "\\u0410\\u043D\\u0430\\u043B\\u0438\\u0437 \\u0440\\u0430\\u0441\\u0445\\u043E\\u0436\\u0434\\u0435\\u043D\\u0438\\u044F \\u0434\\u043B\\u044F ".concat(id, ": \\u0440\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435=").concat(distance.toFixed(2), ", ") + "\\u0432\\u0440\\u0435\\u043C\\u044F \\u0441 \\u043F\\u043E\\u0441\\u043B\\u0435\\u0434\\u043D\\u0435\\u0433\\u043E \\u0438\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441\\u0430=".concat(timeSinceLastImpulse, "\\u043C\\u0441, ") + "\\u043A\\u043E\\u043C\\u0430\\u043D\\u0434\\u0430=".concat(obj.lastImpulse.cmd));\n        }\n        window.Ammo.destroy(transform);\n      }\n    }\n  }\n}\n\n// Новая функция для создания диагностических сфер\nfunction physics_createDiagnosticScene(scene) {\n  console.log("[Physics] Создание диагностической сцены");\n\n  // Создаем теневую сферу только с Ammo-физикой для сравнения с сервером\n  createDiagnosticSphere(scene, "ammo_shadow", 0, 60, 0, 0x00ff00, "ammo");\n\n  // Создаем теневую сферу с такими же начальными условиями как у серверной\n  // но с другим менеджментом физики\n  createDiagnosticSphere(scene, "bullet_shadow", 3, 60, 0, 0x0000ff, "bullet");\n  console.log("[Physics] Диагностическая сцена создана");\n}\n\n// Вспомогательная функция для создания диагностической сферы\nfunction createDiagnosticSphere(scene, id, x, y, z, color, physicsBy) {\n  console.log("[Physics] \\u0421\\u043E\\u0437\\u0434\\u0430\\u043D\\u0438\\u0435 \\u0434\\u0438\\u0430\\u0433\\u043D\\u043E\\u0441\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u043E\\u0439 \\u0441\\u0444\\u0435\\u0440\\u044B ".concat(id));\n\n  // Создаем сферу\n  var radius = 1;\n  var geometry = new THREE.SphereGeometry(radius, 32, 32);\n  var material = new THREE.MeshPhongMaterial({\n    color: color,\n    shininess: 30,\n    transparent: true,\n    opacity: 0.8 // Делаем полупрозрачной для лучшей видимости\n  });\n  var mesh = new THREE.Mesh(geometry, material);\n  mesh.position.set(x, y, z);\n\n  // Включаем тени\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n  scene.add(mesh);\n  console.log("[Physics] \\u0414\\u0438\\u0430\\u0433\\u043D\\u043E\\u0441\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u0430\\u044F \\u0441\\u0444\\u0435\\u0440\\u0430 ".concat(id, " \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u0430 \\u043D\\u0430 \\u0441\\u0446\\u0435\\u043D\\u0443"));\n\n  // Создаем физическое тело\n  var body = null;\n  if (physicsBy === "ammo" && physics_localPhysicsWorld) {\n    // Создаем физическое тело для Ammo-физики\n    var shape = new window.Ammo.btSphereShape(radius);\n    var mass = 1;\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(x, y, z));\n    var localInertia = new window.Ammo.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    var motionState = new window.Ammo.btDefaultMotionState(transform);\n    var rbInfo = new window.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    body = new window.Ammo.btRigidBody(rbInfo);\n\n    // Настраиваем физические свойства\n    body.setActivationState(4); // DISABLE_DEACTIVATION\n    body.setFriction(0.5);\n    body.setRollingFriction(0.1);\n    body.setRestitution(0.2); // Упругость (уменьшена для стабильности)\n    body.setDamping(0.01, 0.01); // Небольшое затухание\n\n    // Включаем CCD для предотвращения проваливания на меньшем масштабе\n    body.setCcdMotionThreshold(radius * 0.8);\n    body.setCcdSweptSphereRadius(radius * 0.7);\n\n    // Добавляем тело в физический мир\n    physics_localPhysicsWorld.addRigidBody(body);\n    console.log("[Physics] \\u0424\\u0438\\u0437\\u0438\\u0447\\u0435\\u0441\\u043A\\u043E\\u0435 \\u0442\\u0435\\u043B\\u043E \\u0434\\u043B\\u044F \\u0434\\u0438\\u0430\\u0433\\u043D\\u043E\\u0441\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u043E\\u0439 \\u0441\\u0444\\u0435\\u0440\\u044B ".concat(id, " \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D\\u043E \\u0441 CCD"));\n\n    // Очистка памяти\n    window.Ammo.destroy(rbInfo);\n    window.Ammo.destroy(localInertia);\n  }\n\n  // Сохраняем объект\n  var diagnosticObject = {\n    id: id,\n    mesh: mesh,\n    body: body,\n    object_type: "diagnostic_sphere",\n    physicsBy: physicsBy,\n    // Для сфер с bullet-физикой устанавливаем начальную серверную позицию\n    serverPos: physicsBy === "bullet" ? {\n      x: x,\n      y: y,\n      z: z\n    } : null\n  };\n\n  // Добавляем в общий словарь объектов\n  objects[id] = diagnosticObject;\n  console.log("[Physics] \\u0414\\u0438\\u0430\\u0433\\u043D\\u043E\\u0441\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u0430\\u044F \\u0441\\u0444\\u0435\\u0440\\u0430 ".concat(id, " \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D\\u0430 \\u0441 \\u0442\\u0438\\u043F\\u043E\\u043C ").concat(physicsBy));\n  return diagnosticObject;\n}\n;// ./src/camera.js\n// camera.js\n\n\n\n\n// Объявляем камеру\nvar camera;\n\n// Настройки камеры\nvar CAMERA_HEIGHT = 50; // Высота камеры над объектом\nvar CAMERA_DISTANCE = 100; // Расстояние камеры от объекта\nvar SMOOTH_FACTOR = 0.05; // Коэффициент интерполяции для плавного движения\nvar PLAYER_ID = "mainPlayer1"; // Жестко закрепляем ID игрока\n\n// Сохраняем последнюю известную позицию игрока\nvar lastKnownPosition = new three_core/* Vector3 */.Pq0(0, 0, 0);\nvar cameraTarget = new three_core/* Vector3 */.Pq0(); // Промежуточная точка для сглаживания\n\nfunction initCamera() {\n  // Создаем камеру\n  camera = new three_core/* PerspectiveCamera */.ubm(60, window.innerWidth / window.innerHeight, 0.2, 2000);\n\n  // Устанавливаем начальную позицию\n  camera.position.set(0, CAMERA_HEIGHT, CAMERA_DISTANCE);\n  camera.lookAt(0, 0, 0);\n\n  // Добавляем обработчик изменения размера окна\n  window.addEventListener(\'resize\', camera_onWindowResize);\n  console.log("[Camera] Камера инициализирована");\n  return camera;\n}\nfunction camera_onWindowResize() {\n  if (!camera) return;\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n}\nfunction updateCamera() {\n  if (!camera) return;\n\n  // Ищем основного игрока\n  var player = objects_objects[PLAYER_ID];\n\n  // Если игрок найден и имеет позицию, обновляем камеру\n  if (player && player.mesh) {\n    // Сохраняем последнюю известную позицию\n    lastKnownPosition.copy(player.mesh.position);\n  }\n\n  // Создаем вектор смещения для позиции камеры\n  var offset = new three_core/* Vector3 */.Pq0(0, CAMERA_HEIGHT, CAMERA_DISTANCE);\n\n  // Целевая позиция - это позиция игрока + смещение\n  var targetPosition = lastKnownPosition.clone().add(offset);\n\n  // Интерполируем промежуточную точку для сглаживания\n  cameraTarget.lerp(targetPosition, SMOOTH_FACTOR);\n\n  // Плавно перемещаем камеру в целевую позицию\n  camera.position.lerp(cameraTarget, SMOOTH_FACTOR);\n\n  // Камера всегда смотрит на позицию игрока\n  camera.lookAt(lastKnownPosition);\n}\n\n// Debug-функция для вывода информации о камере\nfunction logCameraStatus() {\n  if (!camera) return;\n  console.log("[Camera] Position: (".concat(camera.position.x.toFixed(2), ", ").concat(camera.position.y.toFixed(2), ", ").concat(camera.position.z.toFixed(2), ")"));\n  console.log("[Camera] Looking at: (".concat(lastKnownPosition.x.toFixed(2), ", ").concat(lastKnownPosition.y.toFixed(2), ", ").concat(lastKnownPosition.z.toFixed(2), ")"));\n\n  // Проверяем наличие игрока\n  var player = objects_objects[PLAYER_ID];\n  if (player && player.mesh) {\n    console.log("[Camera] Player found at: (".concat(player.mesh.position.x.toFixed(2), ", ").concat(player.mesh.position.y.toFixed(2), ", ").concat(player.mesh.position.z.toFixed(2), ")"));\n  } else {\n    console.log("[Camera] Player with ID \\"".concat(PLAYER_ID, "\\" not found!"));\n  }\n}\n;// ./src/index.js\nfunction src_typeof(o) { "@babel/helpers - typeof"; return src_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, src_typeof(o); }\nfunction src_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ src_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == src_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(src_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction src_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction src_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// index.js\n\n\n\n\n\n\n\n// Добавляем флаг для диагностического режима\nvar diagnosticMode = false;\n// Счетчик кадров для логирования камеры (каждые 100 кадров)\nvar frameCounter = 0;\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Выполняем шаг физической симуляции (например, 1/60 секунды)\n  stepPhysics(1 / 60);\n  updatePhysicsObjects(objects_objects);\n\n  // Обновляем камеру из нового модуля\n  updateCamera();\n\n  // Обновляем положение источника света относительно камеры, как солнце\n  updateShadowCamera(camera);\n\n  // Периодически выводим информацию о камере для отладки\n  frameCounter++;\n  if (frameCounter % 100 === 0) {\n    logCameraStatus();\n    frameCounter = 0;\n  }\n  renderer.render(scene_scene, camera);\n}\nfunction start() {\n  return _start.apply(this, arguments);\n} // Функция для создания пользовательского интерфейса диагностики\nfunction _start() {\n  _start = src_asyncToGenerator(/*#__PURE__*/src_regeneratorRuntime().mark(function _callee() {\n    return src_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          console.log("Start");\n          initScene();\n\n          // Инициализируем камеру из нового модуля\n          initCamera();\n          _context.prev = 3;\n          _context.next = 6;\n          return new Promise(function (resolve) {\n            return setTimeout(resolve, 500);\n          });\n        case 6:\n          _context.next = 8;\n          return initAmmo();\n        case 8:\n          // Инициализируем сетевое соединение\n          initNetwork();\n\n          // Добавляем интерфейс для управления диагностическим режимом\n          // createDiagnosticUI();\n\n          // Создаем диагностическую сцену если включен режим\n          // if (diagnosticMode) {\n          //    createDiagnosticScene(scene);\n          // }\n\n          animate();\n          _context.next = 15;\n          break;\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context["catch"](3);\n          console.error("Ошибка при инициализации Ammo.js:", _context.t0);\n        case 15:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[3, 12]]);\n  }));\n  return _start.apply(this, arguments);\n}\nfunction createDiagnosticUI() {\n  // Создаем контейнер для элементов управления\n  var container = document.createElement(\'div\');\n  container.style.position = \'absolute\';\n  container.style.top = \'10px\';\n  container.style.left = \'10px\';\n  container.style.backgroundColor = \'rgba(0, 0, 0, 0.5)\';\n  container.style.padding = \'10px\';\n  container.style.borderRadius = \'5px\';\n  container.style.color = \'white\';\n  container.style.fontFamily = \'Arial, sans-serif\';\n\n  // Создаем заголовок\n  var title = document.createElement(\'div\');\n  title.textContent = \'Настройки диагностики\';\n  title.style.fontWeight = \'bold\';\n  title.style.marginBottom = \'10px\';\n  container.appendChild(title);\n\n  // Создаем чекбокс для включения/выключения диагностики\n  var diagnosticCheckbox = document.createElement(\'input\');\n  diagnosticCheckbox.type = \'checkbox\';\n  diagnosticCheckbox.id = \'diagnostic-toggle\';\n  diagnosticCheckbox.checked = diagnosticMode;\n\n  // Создаем лейбл для чекбокса\n  var diagnosticLabel = document.createElement(\'label\');\n  diagnosticLabel.htmlFor = \'diagnostic-toggle\';\n  diagnosticLabel.textContent = \'Показать диагностические тени\';\n\n  // Добавляем обработчик событий для чекбокса\n  diagnosticCheckbox.addEventListener(\'change\', function () {\n    diagnosticMode = this.checked;\n    console.log(\'Диагностический режим:\', diagnosticMode ? \'включен\' : \'выключен\');\n\n    // Если режим включен, создаем диагностическую сцену\n    if (diagnosticMode) {\n      createDiagnosticScene(scene);\n    } else {\n      // Удаляем диагностические объекты если они есть\n      if (objects["ammo_shadow"]) {\n        scene.remove(objects["ammo_shadow"].mesh);\n        delete objects["ammo_shadow"];\n      }\n      if (objects["bullet_shadow"]) {\n        scene.remove(objects["bullet_shadow"].mesh);\n        delete objects["bullet_shadow"];\n      }\n\n      // Удаляем линии визуализации\n      if (objects.divergenceLines) {\n        Object.values(objects.divergenceLines).forEach(function (item) {\n          if (item.line) {\n            scene.remove(item.line);\n          }\n        });\n        delete objects.divergenceLines;\n      }\n    }\n  });\n\n  // Создаем контейнер для чекбокса с лейблом\n  var checkboxContainer = document.createElement(\'div\');\n  checkboxContainer.appendChild(diagnosticCheckbox);\n  checkboxContainer.appendChild(diagnosticLabel);\n  container.appendChild(checkboxContainer);\n\n  // Добавляем информацию о расхождениях\n  var divergenceInfo = document.createElement(\'div\');\n  divergenceInfo.id = \'divergence-info\';\n  divergenceInfo.textContent = \'Расхождения: нет данных\';\n  divergenceInfo.style.marginTop = \'10px\';\n  divergenceInfo.style.fontSize = \'12px\';\n  container.appendChild(divergenceInfo);\n\n  // Добавляем контейнер на страницу\n  document.body.appendChild(container);\n\n  // Обновляем информацию о расхождениях периодически\n  setInterval(updateDivergenceInfo, 1000);\n}\n\n// Функция для обновления информации о расхождениях\nfunction updateDivergenceInfo() {\n  if (!diagnosticMode) return;\n  var mainSphere = objects["mainPlayer1"];\n  var ammoShadow = objects["ammo_shadow"];\n  var bulletShadow = objects["bullet_shadow"];\n  if (!mainSphere || !ammoShadow || !bulletShadow) return;\n\n  // Получаем позиции\n  var mainPos = mainSphere.mesh.position;\n  var ammoPos = ammoShadow.mesh.position;\n  var bulletPos = bulletShadow.mesh.position;\n\n  // Расчет расстояний\n  var distMainToAmmo = Math.sqrt(Math.pow(mainPos.x - ammoPos.x, 2) + Math.pow(mainPos.y - ammoPos.y, 2) + Math.pow(mainPos.z - ammoPos.z, 2));\n  var distMainToBullet = Math.sqrt(Math.pow(mainPos.x - bulletPos.x, 2) + Math.pow(mainPos.y - bulletPos.y, 2) + Math.pow(mainPos.z - bulletPos.z, 2));\n  var distAmmoBullet = Math.sqrt(Math.pow(ammoPos.x - bulletPos.x, 2) + Math.pow(ammoPos.y - ammoPos.y, 2) + Math.pow(ammoPos.z - bulletPos.z, 2));\n\n  // Обновляем информацию на интерфейсе\n  var divergenceInfo = document.getElementById(\'divergence-info\');\n  if (divergenceInfo) {\n    divergenceInfo.innerHTML = "\\n            <div>\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0439-Ammo: ".concat(distMainToAmmo.toFixed(3), "</div>\\n            <div>\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0439-Bullet: ").concat(distMainToBullet.toFixed(3), "</div>\\n            <div>Ammo-Bullet: ").concat(distAmmoBullet.toFixed(3), "</div>\\n        ");\n  }\n}\nstart();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEdBQUdtWixTQUFTLENBQUNuWixDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQ3BDTyxJQUFJLENBQUNrWSxHQUFHLENBQUNRLE9BQU8sQ0FBQzlaLENBQUMsR0FBR2dhLFNBQVMsQ0FBQ2hhLENBQUMsRUFBRSxDQUFDLENBQ3ZDLENBQUM7RUFFRCxJQUFNbWEsY0FBYyxHQUFHL1ksSUFBSSxDQUFDMlcsSUFBSSxDQUM1QjNXLElBQUksQ0FBQ2tZLEdBQUcsQ0FBQ1MsT0FBTyxDQUFDaGEsQ0FBQyxHQUFHaWEsU0FBUyxDQUFDamEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUNwQ3FCLElBQUksQ0FBQ2tZLEdBQUcsQ0FBQ1MsT0FBTyxDQUFDbFosQ0FBQyxHQUFHa1osT0FBTyxDQUFDbFosQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUNsQ08sSUFBSSxDQUFDa1ksR0FBRyxDQUFDUyxPQUFPLENBQUMvWixDQUFDLEdBQUdnYSxTQUFTLENBQUNoYSxDQUFDLEVBQUUsQ0FBQyxDQUN2QyxDQUFDOztFQUVEO0VBQ0EsSUFBTTRnQixjQUFjLEdBQUdsbUIsUUFBUSxDQUFDNk0sY0FBYyxDQUFDLGlCQUFpQixDQUFDO0VBQ2pFLElBQUlxWixjQUFjLEVBQUU7SUFDaEJBLGNBQWMsQ0FBQ0ksU0FBUyxnRkFBQWpqQixNQUFBLENBQ0VrYyxjQUFjLENBQUN4UyxPQUFPLENBQUMsQ0FBQyxDQUFDLHdGQUFBMUosTUFBQSxDQUN2Qm1jLGdCQUFnQixDQUFDelMsT0FBTyxDQUFDLENBQUMsQ0FBQyw0Q0FBQTFKLE1BQUEsQ0FDL0JvYyxjQUFjLENBQUMxUyxPQUFPLENBQUMsQ0FBQyxDQUFDLHFCQUNoRDtFQUNMO0FBQ0o7QUFFQWlZLEtBQUssQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4vc3JjL3NjZW5lLmpzPzI2NGMiLCJ3ZWJwYWNrOi8vd2ViLy4vc3JjL29iamVjdHMuanM/YzhlYyIsIndlYnBhY2s6Ly93ZWIvLi9zcmMvbmV0d29yay5qcz9iZDkyIiwid2VicGFjazovL3dlYi8uL3NyYy9waHlzaWNzLmpzP2M0ODMiLCJ3ZWJwYWNrOi8vd2ViLy4vc3JjL2NhbWVyYS5qcz83YjYwIiwid2VicGFjazovL3dlYi8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNjZW5lLmpzXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbmV4cG9ydCBsZXQgc2NlbmUsIHJlbmRlcmVyO1xuZXhwb3J0IGxldCBkaXJlY3Rpb25hbExpZ2h0OyAvLyDQrdC60YHQv9C+0YDRgtC40YDRg9C10Lwg0YHQstC10YIg0LTQu9GPINC00L7RgdGC0YPQv9C90L7RgdGC0Lgg0LIg0LTRgNGD0LPQuNGFINC80L7QtNGD0LvRj9GFXG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0U2NlbmUoKSB7XG4gICAgY29uc29sZS5sb2coXCJ0cnkgdG8gaW5pdFNjZW5lXCIpXG4gICAgc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbiAgICBzY2VuZS5iYWNrZ3JvdW5kID0gbmV3IFRIUkVFLkNvbG9yKDB4ODhjY2ZmKTsgXG5cbiAgICByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHsgYW50aWFsaWFzOiB0cnVlIH0pO1xuICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgLy8g0JLQutC70Y7Rh9Cw0LXQvCDQv9C+0LTQtNC10YDQttC60YMg0YLQtdC90LXQuVxuICAgIHJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkID0gdHJ1ZTtcbiAgICByZW5kZXJlci5zaGFkb3dNYXAudHlwZSA9IFRIUkVFLlBDRlNvZnRTaGFkb3dNYXA7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyZW5kZXJlci5kb21FbGVtZW50KTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSk7XG5cbiAgICAvLyDQndCw0YHRgtGA0LDQuNCy0LDQtdC8INC+0YHQstC10YnQtdC90LjQtVxuICAgIGNvbnN0IGFtYmllbnQgPSBuZXcgVEhSRUUuQW1iaWVudExpZ2h0KDB4ZmZmZmZmLCAwLjUpO1xuICAgIHNjZW5lLmFkZChhbWJpZW50KTtcblxuICAgIC8vINCe0YHQvdC+0LLQvdC+0Lkg0L3QsNC/0YDQsNCy0LvQtdC90L3Ri9C5INGB0LLQtdGCINGBINGC0LXQvdGP0LzQuFxuICAgIGRpcmVjdGlvbmFsTGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweGZmZmZmZiwgMSk7XG4gICAgZGlyZWN0aW9uYWxMaWdodC5wb3NpdGlvbi5zZXQoNTAsIDEwMCwgNTApO1xuICAgIGRpcmVjdGlvbmFsTGlnaHQuY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgXG4gICAgLy8g0J3QsNGB0YLRgNCw0LjQstCw0LXQvCDQv9Cw0YDQsNC80LXRgtGA0Ysg0YLQtdC90LXQuSDQtNC70Y8g0L7RhdCy0LDRgtCwINCx0L7Qu9GM0YjQvtC5INC+0LHQu9Cw0YHRgtC4XG4gICAgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cuY2FtZXJhLm5lYXIgPSAwLjE7XG4gICAgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cuY2FtZXJhLmZhciA9IDIwMDA7IC8vINCj0LLQtdC70LjRh9C40LLQsNC10Lwg0LzQsNC60YHQuNC80LDQu9GM0L3Rg9GOINC00LDQu9GM0L3QvtGB0YLRjCDRgtC10L3QtdC5XG4gICAgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cuY2FtZXJhLmxlZnQgPSAtMTAwMDsgLy8g0JfQvdCw0YfQuNGC0LXQu9GM0L3QviDRg9Cy0LXQu9C40YfQuNCy0LDQtdC8INGA0LDQt9C80LXRgCDQvtCx0LvQsNGB0YLQuCDRgtC10L3QtdC5XG4gICAgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cuY2FtZXJhLnJpZ2h0ID0gMTAwMDtcbiAgICBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmEudG9wID0gMTAwMDtcbiAgICBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmEuYm90dG9tID0gLTEwMDA7XG4gICAgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cubWFwU2l6ZS53aWR0aCA9IDIwNDg7IC8vINCR0L7Qu9GM0YjQtdC1INGA0LDQt9GA0LXRiNC10L3QuNC1INC00LvRjyDQu9GD0YfRiNC10LPQviDQutCw0YfQtdGB0YLQstCwXG4gICAgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cubWFwU2l6ZS5oZWlnaHQgPSAyMDQ4O1xuICAgIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmJpYXMgPSAtMC4wMDAxOyAvLyDQo9C80LXQvdGM0YjQsNC10Lwg0LDRgNGC0LXRhNCw0LrRgtGLINGC0LXQvdC4XG4gICAgc2NlbmUuYWRkKGRpcmVjdGlvbmFsTGlnaHQpO1xuXG4gICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INCy0YHQv9C+0LzQvtCz0LDRgtC10LvRjNC90YvQuSDRgdCy0LXRgiDQtNC70Y8g0L/QvtC00YHQstC10YLQutC4INGC0LXQvdC10LlcbiAgICBjb25zdCBmaWxsTGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweGZmZmZmZiwgMC4zKTtcbiAgICBmaWxsTGlnaHQucG9zaXRpb24uc2V0KC01MCwgNTAsIC01MCk7XG4gICAgc2NlbmUuYWRkKGZpbGxMaWdodCk7XG4gICAgXG4gICAgLy8g0JzQvtC20L3QviDQtNC+0LHQsNCy0LjRgtGMINC/0L7QvNC+0YnQvdC40Log0LTQu9GPINC+0YLQu9Cw0LTQutC4INGC0LXQvdC10LkgKNGA0LDRgdC60L7QvNC80LXQvdGC0LjRgNGD0LnRgtC1INC/0YDQuCDQvdC10L7QsdGF0L7QtNC40LzQvtGB0YLQuClcbiAgICAvLyBjb25zdCBoZWxwZXIgPSBuZXcgVEhSRUUuQ2FtZXJhSGVscGVyKGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYSk7XG4gICAgLy8gc2NlbmUuYWRkKGhlbHBlcik7XG59XG5cbmZ1bmN0aW9uIG9uV2luZG93UmVzaXplKCkge1xuICAgIC8vINCe0LHRgNCw0LHQvtGC0LrQsCDQuNC30LzQtdC90LXQvdC40Y8g0YDQsNC30LzQtdGA0LAg0L7QutC90LAg0YLQvtC70YzQutC+INC00LvRjyDRgNC10L3QtNC10YDQtdGA0LBcbiAgICAvLyAo0LrQsNC80LXRgNCwINC+0LHRgNCw0LHQsNGC0YvQstCw0LXRgtGB0Y8g0LIgY2FtZXJhLmpzKVxuICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG59XG5cbi8vINCU0L7QsdCw0LLQu9GP0LXQvCDRhNGD0L3QutGG0LjRjiDQtNC70Y8g0L7QsdC90L7QstC70LXQvdC40Y8g0L/QvtC70L7QttC10L3QuNGPINC40YHRgtC+0YfQvdC40LrQsCDRgdCy0LXRgtCwINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QviDQutCw0LzQtdGA0YssINC60LDQuiDRgdC+0LvQvdGG0LVcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVTaGFkb3dDYW1lcmEoY2FtZXJhKSB7XG4gICAgaWYgKCFkaXJlY3Rpb25hbExpZ2h0IHx8ICFjYW1lcmEpIHJldHVybjtcbiAgICBcbiAgICAvLyDQn9C+0LvRg9GH0LDQtdC8INC90LDQv9GA0LDQstC70LXQvdC40LUg0LLQt9Cz0LvRj9C00LAg0LrQsNC80LXRgNGLXG4gICAgY29uc3QgY2FtZXJhRGlyZWN0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICBjYW1lcmEuZ2V0V29ybGREaXJlY3Rpb24oY2FtZXJhRGlyZWN0aW9uKTtcbiAgICBcbiAgICAvLyDQodC+0LfQtNCw0LXQvCDQv9C+0LfQuNGG0LjRjiBcItGB0L7Qu9C90YbQsFwiINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QviDQutCw0LzQtdGA0YtcbiAgICAvLyDQn9C+0LTQvdC40LzQsNC10LwgXCLRgdC+0LvQvdGG0LVcIiDQvdCwIDIwMCDQtdC00LjQvdC40YYg0LLQstC10YDRhSDQvtGCINC/0L7Qt9C40YbQuNC4INC60LDQvNC10YDRiyDQuCDRgdC80LXRidCw0LXQvCDQvdC10LzQvdC+0LPQviDQsiDRgdGC0L7RgNC+0L3RgyDQuCDQvdCw0LfQsNC0XG4gICAgY29uc3Qgc3VuT2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoMTAwLCAyMDAsIC01MCk7XG4gICAgY29uc3Qgc3VuUG9zaXRpb24gPSBjYW1lcmEucG9zaXRpb24uY2xvbmUoKS5hZGQoc3VuT2Zmc2V0KTtcbiAgICBcbiAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0L/QvtC30LjRhtC40Y4g0YHQstC10YLQsFxuICAgIGRpcmVjdGlvbmFsTGlnaHQucG9zaXRpb24uY29weShzdW5Qb3NpdGlvbik7XG4gICAgXG4gICAgLy8g0J7Qv9GA0LXQtNC10LvRj9C10Lwg0YLQvtGH0LrRgywg0LrRg9C00LAg0L3QsNC/0YDQsNCy0LvQtdC9INGB0LLQtdGCIC0g0L/QtdGA0LXQtCDQutCw0LzQtdGA0L7QuSDQvdCwINGA0LDRgdGB0YLQvtGP0L3QuNC4IDEwMCDQtdC00LjQvdC40YZcbiAgICBjb25zdCB0YXJnZXRPZmZzZXQgPSBjYW1lcmFEaXJlY3Rpb24uY2xvbmUoKS5tdWx0aXBseVNjYWxhcigxMDApO1xuICAgIGNvbnN0IHRhcmdldFBvc2l0aW9uID0gY2FtZXJhLnBvc2l0aW9uLmNsb25lKCkuYWRkKHRhcmdldE9mZnNldCk7XG4gICAgZGlyZWN0aW9uYWxMaWdodC50YXJnZXQucG9zaXRpb24uY29weSh0YXJnZXRQb3NpdGlvbik7XG4gICAgXG4gICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INC80LDRgtGA0LjRhtGDINGC0YDQsNC90YHRhNC+0YDQvNCw0YbQuNC4INGG0LXQu9C4INGB0LLQtdGC0LBcbiAgICBkaXJlY3Rpb25hbExpZ2h0LnRhcmdldC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuICAgIFxuICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQvNCw0YLRgNC40YbRgyDQutCw0LzQtdGA0Ysg0YLQtdC90LXQuVxuICAgIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG59XG5cbmV4cG9ydCB7IG9uV2luZG93UmVzaXplIH07IiwiLy8gb2JqZWN0cy5qc1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgc2NlbmUgfSBmcm9tICcuL3NjZW5lJztcbmltcG9ydCB7IGxvY2FsUGh5c2ljc1dvcmxkIH0gZnJvbSAnLi9waHlzaWNzJztcblxuZXhwb3J0IGxldCBvYmplY3RzID0ge307IC8vINCh0LvQvtCy0LDRgNGMINC+0LHRitC10LrRgtC+0LI6IGlkIC0+IHsgbWVzaCwgYm9keSwgc2VydmVyUG9zLCAuLi4gfVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWVzaEFuZEJvZHlGb3JPYmplY3QoZGF0YSkge1xuICAgIGlmICghZGF0YSB8fCAhZGF0YS5vYmplY3RfdHlwZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBkYXRhIHJlY2VpdmVkIGZvciBvYmplY3QgY3JlYXRpb246XCIsIGRhdGEpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB0eXBlID0gZGF0YS5vYmplY3RfdHlwZTtcbiAgICBsZXQgbWVzaCwgYm9keSA9IG51bGw7XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcInRlcnJhaW5cIjpcbiAgICAgICAgICAgIG1lc2ggPSBjcmVhdGVUZXJyYWluTWVzaChkYXRhKTtcbiAgICAgICAgICAgIGJvZHkgPSBjcmVhdGVQaHlzaWNzQm9keUZvclRlcnJhaW4oZGF0YSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInNwaGVyZVwiOlxuICAgICAgICAgICAgbWVzaCA9IGNyZWF0ZVNwaGVyZU1lc2goZGF0YSk7XG4gICAgICAgICAgICBib2R5ID0gY3JlYXRlUGh5c2ljc0JvZHlGb3JTcGhlcmUoZGF0YSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInRyZWVcIjpcbiAgICAgICAgICAgIG1lc2ggPSBjcmVhdGVUcmVlTWVzaChkYXRhKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBVbmtub3duIG9iamVjdCB0eXBlOiAke3R5cGV9YCk7XG4gICAgICAgICAgICBtZXNoID0gY3JlYXRlRGVmYXVsdE1lc2goZGF0YSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzY2VuZS5hZGQobWVzaCk7XG4gICAgcmV0dXJuIHsgbWVzaCwgYm9keSB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVQaHlzaWNzQm9keUZvclRlcnJhaW4oZGF0YSkge1xuICAgIGlmICh0eXBlb2YgQW1tbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignQW1tby5qcyDQvdC1INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvScpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIWxvY2FsUGh5c2ljc1dvcmxkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ9Ck0LjQt9C40YfQtdGB0LrQuNC5INC80LjRgCDQvdC1INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvScpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB3ID0gZGF0YS5oZWlnaHRtYXBfdztcbiAgICBjb25zdCBoID0gZGF0YS5oZWlnaHRtYXBfaDtcbiAgICBjb25zdCBzY2FsZVggPSBkYXRhLnNjYWxlX3g7XG4gICAgY29uc3Qgc2NhbGVaID0gZGF0YS5zY2FsZV96O1xuXG4gICAgLy8g0KHQvtC30LTQsNC10Lwg0LHRg9GE0LXRgCDQsiDQv9Cw0LzRj9GC0LggQW1tbyDQtNC70Y8g0LTQsNC90L3Ri9GFINCy0YvRgdC+0YJcbiAgICBjb25zdCBhbW1vSGVpZ2h0RGF0YSA9IEFtbW8uX21hbGxvYyg0ICogdyAqIGgpO1xuICAgIFxuICAgIC8vINCa0L7Qv9C40YDRg9C10Lwg0LTQsNC90L3Ri9C1INCy0YvRgdC+0YIg0LIg0L/QsNC80Y/RgtGMIEFtbW9cbiAgICBsZXQgcCA9IDA7XG4gICAgbGV0IHAyID0gMDtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGg7IGorKykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHc7IGkrKykge1xuICAgICAgICAgICAgQW1tby5IRUFQRjMyW2FtbW9IZWlnaHREYXRhICsgcDIgPj4gMl0gPSBkYXRhLmhlaWdodF9kYXRhW3BdO1xuICAgICAgICAgICAgcCsrO1xuICAgICAgICAgICAgcDIgKz0gNDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vINCh0L7Qt9C00LDQtdC8INGE0L7RgNC80YMg0YLQtdGA0YDQtdC50L3QsFxuICAgIGNvbnN0IHNoYXBlID0gbmV3IEFtbW8uYnRIZWlnaHRmaWVsZFRlcnJhaW5TaGFwZShcbiAgICAgICAgdyxcbiAgICAgICAgaCxcbiAgICAgICAgYW1tb0hlaWdodERhdGEsXG4gICAgICAgIDEsICAvLyBoZWlnaHRTY2FsZVxuICAgICAgICBkYXRhLm1pbl9oZWlnaHQsXG4gICAgICAgIGRhdGEubWF4X2hlaWdodCxcbiAgICAgICAgMSwgIC8vIHVwIGF4aXMgPSAxINC00LvRjyBZXG4gICAgICAgIEFtbW8uUEhZX0ZMT0FULFxuICAgICAgICBmYWxzZSAgLy8gZmxpcFF1YWRFZGdlc1xuICAgICk7XG5cbiAgICAvLyDQo9GB0YLQsNC90LDQstC70LjQstCw0LXQvCDQvNCw0YHRiNGC0LDQsdC40YDQvtCy0LDQvdC40LVcbiAgICBzaGFwZS5zZXRMb2NhbFNjYWxpbmcobmV3IEFtbW8uYnRWZWN0b3IzKHNjYWxlWCwgZGF0YS5zY2FsZV95LCBzY2FsZVopKTtcbiAgICBcbiAgICAvLyDQo9GB0YLQsNC90LDQstC70LjQstCw0LXQvCBtYXJnaW4g0LTQu9GPINGC0LXRgNGA0LXQudC90LAgKDAuNSDQstC80LXRgdGC0L4gMi4wLCDRgtCw0Log0LrQsNC6INGC0LXRgNGA0LXQudC9INC80LXQvdGM0YjQtSlcbiAgICBzaGFwZS5zZXRNYXJnaW4oMC41KTtcbiAgICBcbiAgICBjb25zb2xlLmxvZyhcIltUZXJyYWluXSDQo9GB0YLQsNC90L7QstC70LXQvSBtYXJnaW4g0YLQtdGA0YDQtdC50L3QsDpcIiwgMC41KTtcblxuICAgIC8vINCh0L7Qt9C00LDQtdC8INGC0YDQsNC90YHRhNC+0YDQvNCw0YbQuNGOXG4gICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IEFtbW8uYnRUcmFuc2Zvcm0oKTtcbiAgICB0cmFuc2Zvcm0uc2V0SWRlbnRpdHkoKTtcbiAgICBcbiAgICAvLyDQktCw0LbQvdC+ISDQodC80LXRidCw0LXQvCDRgtC10YDRgNC10LnQvSwg0YLQsNC6INC60LDQuiBCdWxsZXQg0YbQtdC90YLRgNC40YDRg9C10YIg0LXQs9C+INC/0L4g0L7Qs9GA0LDQvdC40YfQuNCy0LDRjtGJ0LXQvNGDINCx0L7QutGB0YNcbiAgICB0cmFuc2Zvcm0uc2V0T3JpZ2luKG5ldyBBbW1vLmJ0VmVjdG9yMyhcbiAgICAgICAgZGF0YS54IHx8IDAsXG4gICAgICAgIChkYXRhLm1pbl9oZWlnaHQgKyBkYXRhLm1heF9oZWlnaHQpIC8gMixcbiAgICAgICAgZGF0YS56IHx8IDBcbiAgICApKTtcblxuICAgIGNvbnN0IG1hc3MgPSAwOyAvLyDQodGC0LDRgtC40YfQtdGB0LrQvtC1INGC0LXQu9C+XG4gICAgY29uc3QgbG9jYWxJbmVydGlhID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xuICAgIGNvbnN0IG1vdGlvblN0YXRlID0gbmV3IEFtbW8uYnREZWZhdWx0TW90aW9uU3RhdGUodHJhbnNmb3JtKTtcbiAgICBjb25zdCByYkluZm8gPSBuZXcgQW1tby5idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm8obWFzcywgbW90aW9uU3RhdGUsIHNoYXBlLCBsb2NhbEluZXJ0aWEpO1xuICAgIGNvbnN0IGJvZHkgPSBuZXcgQW1tby5idFJpZ2lkQm9keShyYkluZm8pO1xuXG4gICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INGC0LXQu9C+INCyINGE0LjQt9C40YfQtdGB0LrQuNC5INC80LjRgFxuICAgIGNvbnN0IFRFUlJBSU5fR1JPVVAgPSAxO1xuICAgIGxvY2FsUGh5c2ljc1dvcmxkLmFkZFJpZ2lkQm9keShib2R5LCBURVJSQUlOX0dST1VQLCAtMSk7IC8vINCi0LXRgNGA0LXQudC9INGB0YLQsNC70LrQuNCy0LDQtdGC0YHRjyDRgdC+INCy0YHQtdC80LhcblxuICAgIC8vINCe0YfQuNGB0YLQutCwINC/0LDQvNGP0YLQuFxuICAgIEFtbW8uZGVzdHJveShyYkluZm8pO1xuICAgIEFtbW8uZGVzdHJveShsb2NhbEluZXJ0aWEpO1xuXG4gICAgY29uc29sZS5sb2coXCJbVGVycmFpbl0g0KTQuNC30LjRh9C10YHQutC+0LUg0YLQtdC70L4g0YHQvtC30LTQsNC90L46XCIsIHtcbiAgICAgICAg0YDQsNC30LzQtdGA0Ys6IHsgdywgaCB9LFxuICAgICAgICDQvNCw0YHRiNGC0LDQsTogeyB4OiBzY2FsZVgsIHk6IGRhdGEuc2NhbGVfeSwgejogc2NhbGVaIH0sXG4gICAgICAgINC/0L7Qt9C40YbQuNGPOiB7IFxuICAgICAgICAgICAgeDogZGF0YS54IHx8IDAsIFxuICAgICAgICAgICAgeTogKGRhdGEubWluX2hlaWdodCArIGRhdGEubWF4X2hlaWdodCkgLyAyLFxuICAgICAgICAgICAgejogZGF0YS56IHx8IDAgXG4gICAgICAgIH0sXG4gICAgICAgINC80LjQvdCS0YvRgdC+0YLQsDogZGF0YS5taW5faGVpZ2h0LFxuICAgICAgICDQvNCw0LrRgdCS0YvRgdC+0YLQsDogZGF0YS5tYXhfaGVpZ2h0XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYm9keTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGVycmFpbk1lc2goZGF0YSkge1xuICAgIGNvbnN0IHcgPSBkYXRhLmhlaWdodG1hcF93IHx8IDY0O1xuICAgIGNvbnN0IGggPSBkYXRhLmhlaWdodG1hcF9oIHx8IDY0O1xuICAgIGNvbnN0IGdlbyA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KFxuICAgICAgICB3ICogZGF0YS5zY2FsZV94LFxuICAgICAgICBoICogZGF0YS5zY2FsZV96LFxuICAgICAgICB3IC0gMSxcbiAgICAgICAgaCAtIDFcbiAgICApO1xuICAgIGdlby5yb3RhdGVYKC1NYXRoLlBJIC8gMik7XG5cbiAgICBpZiAoZGF0YS5oZWlnaHRfZGF0YSkge1xuICAgICAgICBjb25zdCB2ZXJ0cyA9IGdlby5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZlcnRzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICBjb25zdCBpeCA9IChpIC8gMykgJSB3O1xuICAgICAgICAgICAgY29uc3QgaXogPSBNYXRoLmZsb29yKGkgLyAzIC8gdyk7XG4gICAgICAgICAgICB2ZXJ0c1tpICsgMV0gPSBkYXRhLmhlaWdodF9kYXRhW2l6ICogdyArIGl4XSAqIGRhdGEuc2NhbGVfeTtcbiAgICAgICAgfVxuICAgICAgICBnZW8uY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcbiAgICB9XG5cbiAgICBjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goXG4gICAgICAgIGdlbyxcbiAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHtcbiAgICAgICAgICAgIGNvbG9yOiBwYXJzZUNvbG9yKGRhdGEuY29sb3IgfHwgXCIjODg4ODg4XCIpLFxuICAgICAgICAgICAgd2lyZWZyYW1lOiBmYWxzZSxcbiAgICAgICAgICAgIGZsYXRTaGFkaW5nOiB0cnVlXG4gICAgICAgIH0pXG4gICAgKTtcbiAgICBcbiAgICAvLyDQktC60LvRjtGH0LDQtdC8INGC0LXQvdC4INC00LvRjyDRgtC10YDRgNC10LnQvdCwXG4gICAgbWVzaC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcbiAgICBcbiAgICByZXR1cm4gbWVzaDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNwaGVyZU1lc2goZGF0YSkge1xuICAgIGNvbnN0IGdlbyA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeShkYXRhLnJhZGl1cyB8fCAxLCAzMiwgMzIpO1xuICAgIGNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaChcbiAgICAgICAgZ2VvLFxuICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoeyBcbiAgICAgICAgICAgIGNvbG9yOiBwYXJzZUNvbG9yKGRhdGEuY29sb3IgfHwgXCIjODg4ODg4XCIpLFxuICAgICAgICAgICAgc2hpbmluZXNzOiAzMFxuICAgICAgICB9KVxuICAgICk7XG4gICAgXG4gICAgLy8g0JLQutC70Y7Rh9Cw0LXQvCDRgtC10L3QuCDQtNC70Y8g0YHRhNC10YBcbiAgICBtZXNoLmNhc3RTaGFkb3cgPSB0cnVlO1xuICAgIG1lc2gucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG4gICAgXG4gICAgcmV0dXJuIG1lc2g7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyZWVNZXNoKGRhdGEpIHtcbiAgICBjb25zdCBncm91cCA9IG5ldyBUSFJFRS5Hcm91cCgpO1xuXG4gICAgaWYgKGRhdGEuYnJhbmNoZXMgJiYgQXJyYXkuaXNBcnJheShkYXRhLmJyYW5jaGVzKSkge1xuICAgICAgICBkYXRhLmJyYW5jaGVzLmZvckVhY2goKGJyYW5jaCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBicmFuY2guc3RhcnRYID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICBicmFuY2guc3RhcnRZID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICBicmFuY2guc3RhcnRaID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICBicmFuY2guZW5kWCA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgYnJhbmNoLmVuZFkgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgIGJyYW5jaC5lbmRaID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgICAgYEJyYW5jaCBjb29yZGluYXRlcyBhcmUgbWlzc2luZyBvciBpbnZhbGlkIGF0IGluZGV4ICR7aW5kZXh9OmAsXG4gICAgICAgICAgICAgICAgICAgIGJyYW5jaFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBicmFuY2hHZW8gPSBuZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeShcbiAgICAgICAgICAgICAgICBicmFuY2gucmFkaXVzVG9wIHx8IGJyYW5jaC5yYWRpdXMgfHwgMC4xLCAgICAvLyDQstC10YDRhdC90LjQuSDRgNCw0LTQuNGD0YFcbiAgICAgICAgICAgICAgICBicmFuY2gucmFkaXVzQm90dG9tIHx8IGJyYW5jaC5yYWRpdXMgfHwgMC4yLCAvLyDQvdC40LbQvdC40Lkg0YDQsNC00LjRg9GBXG4gICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICA4XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgYnJhbmNoTWF0ID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHtcbiAgICAgICAgICAgICAgICBjb2xvcjogcGFyc2VDb2xvcihicmFuY2guY29sb3IgfHwgXCIjNjU0MzIxXCIpLFxuICAgICAgICAgICAgICAgIHNoaW5pbmVzczogMTBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgYnJhbmNoTWVzaCA9IG5ldyBUSFJFRS5NZXNoKGJyYW5jaEdlbywgYnJhbmNoTWF0KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0JLQutC70Y7Rh9Cw0LXQvCDRgtC10L3QuCDQtNC70Y8g0LLQtdGC0L7QulxuICAgICAgICAgICAgYnJhbmNoTWVzaC5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyYW5jaE1lc2gucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG5cbiAgICAgICAgICAgIGNvbnN0IG1pZFggPSAoYnJhbmNoLnN0YXJ0WCArIGJyYW5jaC5lbmRYKSAvIDI7XG4gICAgICAgICAgICBjb25zdCBtaWRZID0gKGJyYW5jaC5zdGFydFkgKyBicmFuY2guZW5kWSkgLyAyO1xuICAgICAgICAgICAgY29uc3QgbWlkWiA9IChicmFuY2guc3RhcnRaICsgYnJhbmNoLmVuZFopIC8gMjtcblxuICAgICAgICAgICAgYnJhbmNoTWVzaC5wb3NpdGlvbi5zZXQobWlkWCwgbWlkWSwgbWlkWik7XG4gICAgICAgICAgICBicmFuY2hNZXNoLmxvb2tBdChuZXcgVEhSRUUuVmVjdG9yMyhicmFuY2guZW5kWCwgYnJhbmNoLmVuZFksIGJyYW5jaC5lbmRaKSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IG5ldyBUSFJFRS5WZWN0b3IzKFxuICAgICAgICAgICAgICAgIGJyYW5jaC5lbmRYIC0gYnJhbmNoLnN0YXJ0WCxcbiAgICAgICAgICAgICAgICBicmFuY2guZW5kWSAtIGJyYW5jaC5zdGFydFksXG4gICAgICAgICAgICAgICAgYnJhbmNoLmVuZFogLSBicmFuY2guc3RhcnRaXG4gICAgICAgICAgICApLmxlbmd0aCgpO1xuXG4gICAgICAgICAgICBicmFuY2hNZXNoLnNjYWxlLnNldCgxLCBsZW5ndGgsIDEpO1xuXG4gICAgICAgICAgICBncm91cC5hZGQoYnJhbmNoTWVzaCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBncm91cDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVmYXVsdE1lc2goZGF0YSkge1xuICAgIGNvbnN0IGdlbyA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxLCAxLCAxKTtcbiAgICByZXR1cm4gbmV3IFRIUkVFLk1lc2goXG4gICAgICAgIGdlbyxcbiAgICAgICAgbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoeyBjb2xvcjogcGFyc2VDb2xvcihkYXRhLmNvbG9yIHx8IFwiIzg4ODg4OFwiKSB9KVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBoeXNpY3NCb2R5Rm9yU3BoZXJlKGRhdGEpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIEFtbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdBbW1vLmpzINC90LUg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC9Jyk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbG9jYWxQaHlzaWNzV29ybGQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ9Ck0LjQt9C40YfQtdGB0LrQuNC5INC80LjRgCDQvdC1INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvScpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByYWRpdXMgPSBkYXRhLnJhZGl1cyB8fCAxO1xuICAgICAgICBjb25zdCBtYXNzID0gZGF0YS5tYXNzIHx8IDE7XG5cbiAgICAgICAgLy8g0KHQvtC30LTQsNC10Lwg0LLRgdC1IEFtbW8g0L7QsdGK0LXQutGC0Ysg0YfQtdGA0LXQtyB3aW5kb3cuQW1tb1xuICAgICAgICBjb25zdCBzaGFwZSA9IG5ldyB3aW5kb3cuQW1tby5idFNwaGVyZVNoYXBlKHJhZGl1cyk7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyB3aW5kb3cuQW1tby5idFRyYW5zZm9ybSgpO1xuICAgICAgICB0cmFuc2Zvcm0uc2V0SWRlbnRpdHkoKTtcbiAgICAgICAgdHJhbnNmb3JtLnNldE9yaWdpbihuZXcgd2luZG93LkFtbW8uYnRWZWN0b3IzKGRhdGEueCB8fCAwLCBkYXRhLnkgfHwgMCwgZGF0YS56IHx8IDApKTtcblxuICAgICAgICBjb25zdCBsb2NhbEluZXJ0aWEgPSBuZXcgd2luZG93LkFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xuICAgICAgICBzaGFwZS5jYWxjdWxhdGVMb2NhbEluZXJ0aWEobWFzcywgbG9jYWxJbmVydGlhKTtcblxuICAgICAgICBjb25zdCBtb3Rpb25TdGF0ZSA9IG5ldyB3aW5kb3cuQW1tby5idERlZmF1bHRNb3Rpb25TdGF0ZSh0cmFuc2Zvcm0pO1xuICAgICAgICBjb25zdCByYkluZm8gPSBuZXcgd2luZG93LkFtbW8uYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvKFxuICAgICAgICAgICAgbWFzcyxcbiAgICAgICAgICAgIG1vdGlvblN0YXRlLFxuICAgICAgICAgICAgc2hhcGUsXG4gICAgICAgICAgICBsb2NhbEluZXJ0aWFcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgYm9keSA9IG5ldyB3aW5kb3cuQW1tby5idFJpZ2lkQm9keShyYkluZm8pO1xuICAgICAgICBcbiAgICAgICAgLy8g0J3QsNGB0YLRgNCw0LjQstCw0LXQvCDRhNC40LfQuNGH0LXRgdC60LjQtSDRgdCy0L7QudGB0YLQstCwXG4gICAgICAgIGJvZHkuc2V0RnJpY3Rpb24oMC41KTtcbiAgICAgICAgYm9keS5zZXRSb2xsaW5nRnJpY3Rpb24oMC4xKTtcbiAgICAgICAgYm9keS5zZXRSZXN0aXR1dGlvbigwLjIpOyAvLyDQndC10LzQvdC+0LPQviDRg9C80LXQvdGM0YjQsNC10Lwg0YPQv9GA0YPQs9C+0YHRgtGMINC00LvRjyDRgdGC0LDQsdC40LvRjNC90L7RgdGC0LhcbiAgICAgICAgYm9keS5zZXREYW1waW5nKDAuMDEsIDAuMDEpOyAvLyDQndC10LHQvtC70YzRiNC+0LUg0LvQuNC90LXQudC90L7QtSDQuCDRg9Cz0LvQvtCy0L7QtSDQt9Cw0YLRg9GF0LDQvdC40LVcbiAgICAgICAgXG4gICAgICAgIC8vINCS0LrQu9GO0YfQsNC10LwgQ0NEINC00LvRjyDQv9GA0LXQtNC+0YLQstGA0LDRidC10L3QuNGPINC/0YDQvtCy0LDQu9C40LLQsNC90LjRjyDRgdC60LLQvtC30Ywg0YLQtdGA0YDQtdC50L1cbiAgICAgICAgLy8g0JTQu9GPINC80LXQvdGM0YjQtdCz0L4g0LzQsNGB0YjRgtCw0LHQsCAoMTAwINCy0LzQtdGB0YLQviAxNTAwMCkg0Y3RgtC4INC30L3QsNGH0LXQvdC40Y8g0LHQvtC70LXQtSDQvtC/0YLQuNC80LDQu9GM0L3Ri1xuICAgICAgICBib2R5LnNldENjZE1vdGlvblRocmVzaG9sZChyYWRpdXMgKiAwLjgpOyAvLyDQo9Cy0LXQu9C40YfQuNCy0LDQtdC8INC/0L7RgNC+0LMg0LTQu9GPINCw0LrRgtC40LLQsNGG0LjQuCBDQ0RcbiAgICAgICAgYm9keS5zZXRDY2RTd2VwdFNwaGVyZVJhZGl1cyhyYWRpdXMgKiAwLjcpOyAvLyDQoNCw0LTQuNGD0YEg0YHRhNC10YDRiyDQtNC70Y8gQ0NEXG4gICAgICAgIFxuICAgICAgICAvLyDQntGC0LrQu9GO0YfQsNC10Lwg0LTQtdCw0LrRgtC40LLQsNGG0LjRjlxuICAgICAgICBib2R5LnNldEFjdGl2YXRpb25TdGF0ZSg0KTsgLy8gRElTQUJMRV9ERUFDVElWQVRJT05cblxuICAgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0YLQtdC70L4g0LIg0YTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAXG4gICAgICAgIGNvbnN0IFNQSEVSRV9HUk9VUCA9IDI7XG4gICAgICAgIGxvY2FsUGh5c2ljc1dvcmxkLmFkZFJpZ2lkQm9keShib2R5LCBTUEhFUkVfR1JPVVAsIC0xKTsgLy8g0KHRhNC10YDRiyDRgdGC0LDQu9C60LjQstCw0Y7RgtGB0Y8g0YHQviDQstGB0LXQvNC4XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhcIltTcGhlcmVdINCk0LjQt9C40YfQtdGB0LrQvtC1INGC0LXQu9C+INGB0L7Qt9C00LDQvdC+OlwiLCB7XG4gICAgICAgICAgICByYWRpdXMsXG4gICAgICAgICAgICBtYXNzLFxuICAgICAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICB4OiBkYXRhLnggfHwgMCxcbiAgICAgICAgICAgICAgICB5OiBkYXRhLnkgfHwgMCxcbiAgICAgICAgICAgICAgICB6OiBkYXRhLnogfHwgMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNjZDoge1xuICAgICAgICAgICAgICAgIG1vdGlvblRocmVzaG9sZDogcmFkaXVzICogMC44LFxuICAgICAgICAgICAgICAgIHN3ZXB0U3BoZXJlUmFkaXVzOiByYWRpdXMgKiAwLjdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmcmljdGlvbjogMC41LFxuICAgICAgICAgICAgcmVzdGl0dXRpb246IDAuMlxuICAgICAgICB9KTtcblxuICAgICAgICAvLyDQntGH0LjRgdGC0LrQsCDQv9Cw0LzRj9GC0LhcbiAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveShyYkluZm8pO1xuICAgICAgICB3aW5kb3cuQW1tby5kZXN0cm95KGxvY2FsSW5lcnRpYSk7XG5cbiAgICAgICAgcmV0dXJuIGJvZHk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcign0J7RiNC40LHQutCwINC/0YDQuCDRgdC+0LfQtNCw0L3QuNC4INGE0LjQt9C40YfQtdGB0LrQvtCz0L4g0YLQtdC70LA6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ29sb3IoY29sb3JTdHIpIHtcbiAgICBpZiAoIWNvbG9yU3RyKSByZXR1cm4gMHg4ODg4ODg7XG4gICAgaWYgKGNvbG9yU3RyLnN0YXJ0c1dpdGgoXCIjXCIpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChjb2xvclN0ci5zbGljZSgxKSwgMTYpO1xuICAgIH1cbiAgICByZXR1cm4gMHg4ODg4ODg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUZXN0U3BoZXJlKCkge1xuICAgIC8vINCh0L7Qt9C00LDQtdC8INCy0LjQt9GD0LDQu9GM0L3Rg9GOINGB0YTQtdGA0YNcbiAgICBjb25zdCByYWRpdXMgPSAxO1xuICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KHJhZGl1cywgMzIsIDMyKTtcbiAgICBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7IFxuICAgICAgICBjb2xvcjogMHhmZjAwZmYsXG4gICAgICAgIHNoaW5pbmVzczogMzBcbiAgICB9KTtcbiAgICBjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICBcbiAgICAvLyDQktC60LvRjtGH0LDQtdC8INGC0LXQvdC4INC00LvRjyDRgtC10YHRgtC+0LLQvtC5INGB0YTQtdGA0YtcbiAgICBtZXNoLmNhc3RTaGFkb3cgPSB0cnVlO1xuICAgIG1lc2gucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG4gICAgXG4gICAgLy8g0J/QvtC30LjRhtC40L7QvdC40YDRg9C10Lwg0YHRhNC10YDRgyDQstGL0YHQvtC60L4g0L3QsNC0INGC0LXRgNGA0LXQudC90L7QvFxuICAgIGNvbnN0IHN0YXJ0WSA9IDU4OyAvLyDQktGL0YHQvtGC0LAg0L3QsNC0INGC0LXRgNGA0LXQudC90L7QvFxuICAgIG1lc2gucG9zaXRpb24uc2V0KDAsIHN0YXJ0WSwgMCk7XG4gICAgc2NlbmUuYWRkKG1lc2gpO1xuXG4gICAgLy8g0KHQvtC30LTQsNC10Lwg0YTQuNC30LjRh9C10YHQutC+0LUg0YLQtdC70L5cbiAgICBjb25zdCBzaGFwZSA9IG5ldyBBbW1vLmJ0U3BoZXJlU2hhcGUocmFkaXVzKTtcbiAgICBjb25zdCBtYXNzID0gMTtcbiAgICBcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBuZXcgQW1tby5idFRyYW5zZm9ybSgpO1xuICAgIHRyYW5zZm9ybS5zZXRJZGVudGl0eSgpO1xuICAgIHRyYW5zZm9ybS5zZXRPcmlnaW4obmV3IEFtbW8uYnRWZWN0b3IzKDAsIHN0YXJ0WSwgMCkpO1xuXG4gICAgY29uc3QgbG9jYWxJbmVydGlhID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xuICAgIHNoYXBlLmNhbGN1bGF0ZUxvY2FsSW5lcnRpYShtYXNzLCBsb2NhbEluZXJ0aWEpO1xuXG4gICAgY29uc3QgbW90aW9uU3RhdGUgPSBuZXcgQW1tby5idERlZmF1bHRNb3Rpb25TdGF0ZSh0cmFuc2Zvcm0pO1xuICAgIGNvbnN0IHJiSW5mbyA9IG5ldyBBbW1vLmJ0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mbyhtYXNzLCBtb3Rpb25TdGF0ZSwgc2hhcGUsIGxvY2FsSW5lcnRpYSk7XG4gICAgY29uc3QgYm9keSA9IG5ldyBBbW1vLmJ0UmlnaWRCb2R5KHJiSW5mbyk7XG5cbiAgICAvLyDQktCw0LbQvdGL0LUg0L3QsNGB0YLRgNC+0LnQutC4INC00LvRjyDRhNC40LfQuNGH0LXRgdC60L7Qs9C+INGC0LXQu9CwXG4gICAgYm9keS5zZXRBY3RpdmF0aW9uU3RhdGUoNCk7IC8vIERJU0FCTEVfREVBQ1RJVkFUSU9OXG4gICAgYm9keS5zZXRGcmljdGlvbigwLjUpO1xuICAgIGJvZHkuc2V0Um9sbGluZ0ZyaWN0aW9uKDAuMSk7XG4gICAgYm9keS5zZXRSZXN0aXR1dGlvbigwLjUpOyAvLyDQo9C/0YDRg9Cz0L7RgdGC0YxcblxuICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDRgtC10LvQviDQsiDRhNC40LfQuNGH0LXRgdC60LjQuSDQvNC40YBcbiAgICBjb25zdCBTUEhFUkVfR1JPVVAgPSAyO1xuICAgIGxvY2FsUGh5c2ljc1dvcmxkLmFkZFJpZ2lkQm9keShib2R5LCBTUEhFUkVfR1JPVVAsIC0xKTsgLy8g0KLQtdGB0YLQvtCy0LDRjyDRgdGE0LXRgNCwINGB0YLQsNC70LrQuNCy0LDQtdGC0YHRjyDRgdC+INCy0YHQtdC80LhcblxuICAgIC8vINCe0YfQuNGB0YLQutCwINC/0LDQvNGP0YLQuFxuICAgIEFtbW8uZGVzdHJveShyYkluZm8pO1xuICAgIEFtbW8uZGVzdHJveShsb2NhbEluZXJ0aWEpO1xuXG4gICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC+0LHRitC10LrRgiDQsiDQvdCw0Ygg0YHQv9C40YHQvtC6INC+0LHRitC10LrRgtC+0LJcbiAgICBjb25zdCB0ZXN0U3BoZXJlT2JqID0ge1xuICAgICAgICBtZXNoLFxuICAgICAgICBib2R5LFxuICAgICAgICBvYmplY3RfdHlwZTogXCJ0ZXN0X3NwaGVyZVwiLFxuICAgICAgICBwaHlzaWNzQnk6IFwiYW1tb1wiIC8vINCY0LfQvNC10L3QtdC90L4g0YEgXCJib3RoXCIg0L3QsCBcImFtbW9cIiwg0YfRgtC+0LHRiyDRg9C/0YDQsNCy0LvRj9C70L7RgdGMINGC0L7Qu9GM0LrQviDQu9C+0LrQsNC70YzQvdC+0Lkg0YTQuNC30LjQutC+0LlcbiAgICB9O1xuICAgIG9iamVjdHNbXCJ0ZXN0X3NwaGVyZVwiXSA9IHRlc3RTcGhlcmVPYmo7XG5cbiAgICByZXR1cm4gdGVzdFNwaGVyZU9iajtcbn0iLCIvLyBuZXR3b3JrLmpzXG5pbXBvcnQgeyBvYmplY3RzLCBjcmVhdGVNZXNoQW5kQm9keUZvck9iamVjdCB9IGZyb20gJy4vb2JqZWN0cyc7XG5pbXBvcnQgeyBhcHBseUltcHVsc2VUb1NwaGVyZSwgcmVjZWl2ZU9iamVjdFVwZGF0ZSwgbG9jYWxQaHlzaWNzV29ybGQgfSBmcm9tICcuL3BoeXNpY3MnO1xuXG5sZXQgd3MgPSBudWxsO1xubGV0IHBoeXNpY3NTdGFydGVkID0gZmFsc2U7XG5sZXQgcGVuZGluZ09iamVjdHMgPSBbXTtcblxuLy8g0JTQvtCx0LDQstC70Y/QtdC8INC/0LXRgNC10LzQtdC90L3Ri9C1INC00LvRjyDRgNCw0LHQvtGC0Ysg0YEg0LLRgNC10LzQtdC90L3Ri9C80Lgg0LzQtdGC0LrQsNC80LhcbmxldCBzZXJ2ZXJUaW1lT2Zmc2V0ID0gMDsgICAgICAgLy8g0KDQsNC30L3QuNGG0LAg0LzQtdC20LTRgyDRgdC10YDQstC10YDQvdGL0Lwg0Lgg0LrQu9C40LXQvdGC0YHQutC40Lwg0LLRgNC10LzQtdC90LXQvFxubGV0IHNlcnZlclRpbWVPZmZzZXRTYW1wbGVzID0gW107IC8vINCl0YDQsNC90LXQvdC40LUg0L7QsdGA0LDQt9GG0L7QsiDQtNC70Y8g0LLRi9GH0LjRgdC70LXQvdC40Y8g0YHRgNC10LTQvdC10LPQviDQt9C90LDRh9C10L3QuNGPXG5jb25zdCBNQVhfT0ZGU0VUX1NBTVBMRVMgPSAxMDsgIC8vINCc0LDQutGB0LjQvNCw0LvRjNC90L7QtSDQutC+0LvQuNGH0LXRgdGC0LLQviDQvtCx0YDQsNC30YbQvtCyXG5sZXQgcGluZ0hpc3RvcnkgPSBbXTsgICAgICAgICAgIC8vINCY0YHRgtC+0YDQuNGPINC/0LjQvdCz0L7QsiDQtNC70Y8g0LDQvdCw0LvQuNC30LBcbmNvbnN0IE1BWF9QSU5HX1NBTVBMRVMgPSAxMDsgICAgLy8g0JzQsNC60YHQuNC80LDQu9GM0L3QvtC1INC60L7Qu9C40YfQtdGB0YLQstC+INC+0LHRgNCw0LfRhtC+0LIg0L/QuNC90LPQsFxuXG4vLyDQktGL0YfQuNGB0LvRj9C10Lwg0YLQtdC60YPRidC10LUg0YHQtdGA0LLQtdGA0L3QvtC1INCy0YDQtdC80Y8g0L3QsCDQvtGB0L3QvtCy0LUg0YHQvNC10YnQtdC90LjRj1xuZnVuY3Rpb24gZXN0aW1hdGVTZXJ2ZXJUaW1lKCkge1xuICAgIHJldHVybiBEYXRlLm5vdygpICsgc2VydmVyVGltZU9mZnNldDtcbn1cblxuLy8g0J7QsdC90L7QstC70LXQvdC40LUg0YHQvNC10YnQtdC90LjRjyDQstGA0LXQvNC10L3QuCDRgdC10YDQstC10YDQsFxuZnVuY3Rpb24gdXBkYXRlU2VydmVyVGltZU9mZnNldChzZXJ2ZXJUaW1lKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBjdXJyZW50T2Zmc2V0ID0gc2VydmVyVGltZSAtIG5vdztcbiAgICBcbiAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0L3QvtCy0YvQuSDQvtCx0YDQsNC30LXRhlxuICAgIHNlcnZlclRpbWVPZmZzZXRTYW1wbGVzLnB1c2goY3VycmVudE9mZnNldCk7XG4gICAgXG4gICAgLy8g0J7Qs9GA0LDQvdC40YfQuNCy0LDQtdC8INC60L7Qu9C40YfQtdGB0YLQstC+INC+0LHRgNCw0LfRhtC+0LJcbiAgICBpZiAoc2VydmVyVGltZU9mZnNldFNhbXBsZXMubGVuZ3RoID4gTUFYX09GRlNFVF9TQU1QTEVTKSB7XG4gICAgICAgIHNlcnZlclRpbWVPZmZzZXRTYW1wbGVzLnNoaWZ0KCk7XG4gICAgfVxuICAgIFxuICAgIC8vINCY0YHQv9C+0LvRjNC30YPQtdC8INC80LXQtNC40LDQvdGDINCy0LzQtdGB0YLQviDRgdGA0LXQtNC90LXQs9C+INC00LvRjyDRg9GB0YLQvtC50YfQuNCy0L7RgdGC0Lgg0Log0LLRi9Cx0YDQvtGB0LDQvFxuICAgIGNvbnN0IHNvcnRlZE9mZnNldHMgPSBbLi4uc2VydmVyVGltZU9mZnNldFNhbXBsZXNdLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgICBjb25zdCBtZWRpYW5PZmZzZXQgPSBzb3J0ZWRPZmZzZXRzW01hdGguZmxvb3Ioc29ydGVkT2Zmc2V0cy5sZW5ndGggLyAyKV07XG4gICAgXG4gICAgc2VydmVyVGltZU9mZnNldCA9IG1lZGlhbk9mZnNldDtcbiAgICBcbiAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0L7RgtC+0LHRgNCw0LbQtdC90LjQtSDQstGA0LXQvNC10L3QuFxuICAgIHVwZGF0ZVRpbWVEaXNwbGF5KCk7XG4gICAgXG4gICAgY29uc29sZS5sb2coYFtUaW1lXSDQodC40L3RhdGA0L7QvdC40LfQsNGG0LjRjyDQstGA0LXQvNC10L3QuDog0YHQvNC10YnQtdC90LjQtSA9ICR7bWVkaWFuT2Zmc2V0fSDQvNGBYCk7XG59XG5cbi8vINCU0L7QsdCw0LLQu9GP0LXQvCDRhNGD0L3QutGG0LjRjiDQtNC70Y8g0L7QsdC90L7QstC70LXQvdC40Y8g0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDQv9C40L3Qs9CwINC90LAg0Y3QutGA0LDQvdC1XG5mdW5jdGlvbiB1cGRhdGVQaW5nRGlzcGxheShwaW5nVmFsdWUpIHtcbiAgICBjb25zdCBwaW5nRGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwaW5nLWRpc3BsYXknKTtcbiAgICBpZiAocGluZ0Rpc3BsYXkpIHtcbiAgICAgICAgcGluZ0Rpc3BsYXkudGV4dENvbnRlbnQgPSBg0J/QuNC90LM6ICR7cGluZ1ZhbHVlLnRvRml4ZWQoMCl9INC80YFgO1xuICAgICAgICBcbiAgICAgICAgLy8g0JzQtdC90Y/QtdC8INGG0LLQtdGCINCyINC30LDQstC40YHQuNC80L7RgdGC0Lgg0L7RgiDQutCw0YfQtdGB0YLQstCwINGB0L7QtdC00LjQvdC10L3QuNGPXG4gICAgICAgIGlmIChwaW5nVmFsdWUgPCA1MCkge1xuICAgICAgICAgICAgcGluZ0Rpc3BsYXkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3JnYmEoMCwgMTI4LCAwLCAwLjUpJzsgLy8g0JfQtdC70LXQvdGL0LkgLSDRhdC+0YDQvtGI0LjQuSDQv9C40L3Qs1xuICAgICAgICB9IGVsc2UgaWYgKHBpbmdWYWx1ZSA8IDEwMCkge1xuICAgICAgICAgICAgcGluZ0Rpc3BsYXkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3JnYmEoMjU1LCAxNjUsIDAsIDAuNSknOyAvLyDQntGA0LDQvdC20LXQstGL0LkgLSDRgdGA0LXQtNC90LjQuSDQv9C40L3Qs1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGluZ0Rpc3BsYXkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3JnYmEoMjU1LCAwLCAwLCAwLjUpJzsgLy8g0JrRgNCw0YHQvdGL0LkgLSDQv9C70L7RhdC+0Lkg0L/QuNC90LNcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8g0KTRg9C90LrRhtC40Y8g0LTQu9GPINC+0LHQvdC+0LLQu9C10L3QuNGPINGB0LXRgNCy0LXRgNC90L7Qs9C+INCy0YDQtdC80LXQvdC4INC90LAg0Y3QutGA0LDQvdC1XG5mdW5jdGlvbiB1cGRhdGVUaW1lRGlzcGxheSgpIHtcbiAgICBjb25zdCBzZXJ2ZXJUaW1lRWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZXJ2ZXItdGltZScpO1xuICAgIGNvbnN0IHRpbWVPZmZzZXRFbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpbWUtb2Zmc2V0Jyk7XG4gICAgXG4gICAgaWYgKHNlcnZlclRpbWVFbGVtICYmIHRpbWVPZmZzZXRFbGVtKSB7XG4gICAgICAgIGNvbnN0IGVzdFNlcnZlclRpbWUgPSBlc3RpbWF0ZVNlcnZlclRpbWUoKTtcbiAgICAgICAgY29uc3Qgc2VydmVyRGF0ZSA9IG5ldyBEYXRlKGVzdFNlcnZlclRpbWUpO1xuICAgICAgICBzZXJ2ZXJUaW1lRWxlbS50ZXh0Q29udGVudCA9IGDQktGA0LXQvNGPINGB0LXRgNCy0LXRgNCwOiAke3NlcnZlckRhdGUudG9Mb2NhbGVUaW1lU3RyaW5nKCl9YDtcbiAgICAgICAgdGltZU9mZnNldEVsZW0udGV4dENvbnRlbnQgPSBg0KHQvNC10YnQtdC90LjQtTogJHtzZXJ2ZXJUaW1lT2Zmc2V0LnRvRml4ZWQoMCl9INC80YFgO1xuICAgIH1cbn1cblxuLy8g0KHQvtC30LTQsNC10Lwg0LjQvdGC0LXRgNCy0LDQuyDQtNC70Y8g0L/QtdGA0LjQvtC00LjRh9C10YHQutC+0LPQviDQvtCx0L3QvtCy0LvQtdC90LjRjyDQstGA0LXQvNC10L3QuFxubGV0IHRpbWVEaXNwbGF5SW50ZXJ2YWw7XG5cbmZ1bmN0aW9uIGhhbmRsZU1lc3NhZ2UoZGF0YSkgeyAgICAgIFxuICAgIHRyeSB7XG4gICAgICAgIC8vINCV0YHQu9C4INGB0L7QvtCx0YnQtdC90LjQtSDRgdC+0LTQtdGA0LbQuNGCINCy0YDQtdC80LXQvdC90YPRjiDQvNC10YLQutGDINGB0LXRgNCy0LXRgNCwLCDQvtCx0L3QvtCy0LvRj9C10Lwg0YHQvNC10YnQtdC90LjQtVxuICAgICAgICBpZiAoZGF0YS5zZXJ2ZXJfdGltZSkge1xuICAgICAgICAgICAgdXBkYXRlU2VydmVyVGltZU9mZnNldChkYXRhLnNlcnZlcl90aW1lKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8g0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdC8IHBvbmct0YHQvtC+0LHRidC10L3QuNGPINC00LvRjyDRgdC40L3RhdGA0L7QvdC40LfQsNGG0LjQuCDQstGA0LXQvNC10L3QuFxuICAgICAgICBpZiAoZGF0YS50eXBlID09PSBcInBvbmdcIikge1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGNvbnN0IHJvdW5kVHJpcFRpbWUgPSBub3cgLSBkYXRhLmNsaWVudF90aW1lO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0LjQt9C80LXRgNC10L3QuNC1INC/0LjQvdCz0LAg0LIg0LjRgdGC0L7RgNC40Y5cbiAgICAgICAgICAgIHBpbmdIaXN0b3J5LnB1c2gocm91bmRUcmlwVGltZSk7XG4gICAgICAgICAgICBpZiAocGluZ0hpc3RvcnkubGVuZ3RoID4gTUFYX1BJTkdfU0FNUExFUykge1xuICAgICAgICAgICAgICAgIHBpbmdIaXN0b3J5LnNoaWZ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCS0YvRh9C40YHQu9GP0LXQvCDRgdGA0LXQtNC90LjQuSDQv9C40L3Qs1xuICAgICAgICAgICAgY29uc3QgYXZnUGluZyA9IHBpbmdIaXN0b3J5LnJlZHVjZSgoc3VtLCBwaW5nKSA9PiBzdW0gKyBwaW5nLCAwKSAvIHBpbmdIaXN0b3J5Lmxlbmd0aDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INC+0YLQvtCx0YDQsNC20LXQvdC40LUg0L/QuNC90LPQsCDQvdCwINGN0LrRgNCw0L3QtVxuICAgICAgICAgICAgdXBkYXRlUGluZ0Rpc3BsYXkoYXZnUGluZyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbV1NdINCf0L7Qu9GD0YfQtdC9IHBvbmcsIFJUVDogJHtyb3VuZFRyaXBUaW1lfW1zLCDQodGA0LXQtNC90LjQuSBSVFQ6ICR7YXZnUGluZy50b0ZpeGVkKDIpfW1zYCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDRgdC80LXRidC10L3QuNC1INGB0LXRgNCy0LXRgNC90L7Qs9C+INCy0YDQtdC80LXQvdC4INGBINGD0YfQtdGC0L7QvCBSVFQvMiAo0L/RgNC10LTQv9C+0LvQsNCz0LDQtdC8INGB0LjQvNC80LXRgtGA0LjRh9C90YPRjiDQt9Cw0LTQtdGA0LbQutGDKVxuICAgICAgICAgICAgdXBkYXRlU2VydmVyVGltZU9mZnNldChkYXRhLnNlcnZlcl90aW1lICsgcm91bmRUcmlwVGltZSAvIDIpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm47IC8vINCf0YDQtdC60YDQsNGJ0LDQtdC8INC+0LHRgNCw0LHQvtGC0LrRgyDRjdGC0L7Qs9C+INGB0L7QvtCx0YnQtdC90LjRj1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoZGF0YS50eXBlID09PSBcImNyZWF0ZVwiICYmIGRhdGEuaWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW1dTXSDQn9C+0LvRg9GH0LXQvdC+INGB0L7QvtCx0YnQtdC90LjQtSDQviDRgdC+0LfQtNCw0L3QuNC4INC+0LHRitC10LrRgtCwOlwiLCBkYXRhLmlkLCBcItCyINC60L7QvtGA0LTQuNC90LDRgtCw0YU6XCIsIFxuICAgICAgICAgICAgICAgIHsgeDogZGF0YS54IHx8IDAsIHk6IGRhdGEueSB8fCAwLCB6OiBkYXRhLnogfHwgMCB9LFxuICAgICAgICAgICAgICAgIFwi0LLRgNC10LzRjyDRgdC10YDQstC10YDQsDpcIiwgZGF0YS5zZXJ2ZXJfdGltZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCh0L7Qt9C00LDQtdC8INC+0LHRitC10LrRgiDQuCDQtNC+0LHQsNCy0LvRj9C10Lwg0LXQs9C+INCyINGB0L/QuNGB0L7QuiDQvtCx0YrQtdC60YLQvtCyXG4gICAgICAgICAgICBjb25zdCBvYmogPSBjcmVhdGVNZXNoQW5kQm9keUZvck9iamVjdChkYXRhKTtcbiAgICAgICAgICAgIG9iai5waHlzaWNzQnkgPSBkYXRhLnBoeXNpY3NfYnkgfHwgXCJib3RoXCI7XG4gICAgICAgICAgICBvYmouc2VydmVyUG9zID0ge1xuICAgICAgICAgICAgICAgIHg6IGRhdGEueCB8fCAwLFxuICAgICAgICAgICAgICAgIHk6IGRhdGEueSB8fCAwLFxuICAgICAgICAgICAgICAgIHo6IGRhdGEueiB8fCAwXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INCy0YDQtdC80LXQvdC90YPRjiDQvNC10YLQutGDINGB0LXRgNCy0LXRgNCwXG4gICAgICAgICAgICBvYmouc2VydmVyQ3JlYXRpb25UaW1lID0gZGF0YS5zZXJ2ZXJfdGltZTtcbiAgICAgICAgICAgIG9iai5jbGllbnRDcmVhdGlvblRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBvYmplY3RzW2RhdGEuaWRdID0gb2JqO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQl9Cw0L/QvtC80LjQvdCw0LXQvCDRgtC+0YfQvdC+0LUg0LLRgNC10LzRjyDRgdC+0LfQtNCw0L3QuNGPINC+0LHRitC10LrRgtCwINC00LvRjyDQtNCw0LvRjNC90LXQudGI0LXQuSDRgdC40L3RhdGA0L7QvdC40LfQsNGG0LjQuFxuICAgICAgICAgICAgb2JqLmNyZWF0ZWRBdCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbV1NdINCe0LHRitC10LrRgiAke2RhdGEuaWR9INGB0L7Qt9C00LDQvSDRgSBwaHlzaWNzQnk6ICR7b2JqLnBoeXNpY3NCeX1gKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0JXRgdC70Lgg0YTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAINCw0LrRgtC40LLQtdC9LCDQsNC60YLQuNCy0LjRgNGD0LXQvCDRgtC10LvQvlxuICAgICAgICAgICAgaWYgKG9iai5ib2R5ICYmIGxvY2FsUGh5c2ljc1dvcmxkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFwaHlzaWNzU3RhcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0LIg0YHQv9C40YHQvtC6INC+0LbQuNC00LDRjtGJ0LjRhSwg0LXRgdC70Lgg0YTQuNC30LjQutCwINC10YnQtSDQvdC1INC30LDQv9GD0YnQtdC90LBcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ09iamVjdHMucHVzaChkYXRhLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtXU10g0J7QsdGK0LXQutGCICR7ZGF0YS5pZH0g0LTQvtCx0LDQstC70LXQvSDQsiDRgdC/0LjRgdC+0Log0L7QttC40LTQsNC90LjRjyAtINGE0LjQt9C40LrQsCDQtdGJ0LUg0L3QtSDQsNC60YLQuNCy0L3QsGApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vINCQ0LrRgtC40LLQuNGA0YPQtdC8INGC0LXQu9C+INGB0YDQsNC30YNcbiAgICAgICAgICAgICAgICAgICAgb2JqLmJvZHkuYWN0aXZhdGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vINCj0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdC8INC90LDRh9Cw0LvRjNC90YPRjiDQv9C+0LfQuNGG0LjRjiDRgtC+0YfQvdC+INC/0L4g0YHQtdGA0LLQtdGA0L3Ri9C8INC60L7QvtGA0LTQuNC90LDRgtCw0LxcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5zZXJ2ZXJQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyBBbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouYm9keS5nZXRNb3Rpb25TdGF0ZSgpLmdldFdvcmxkVHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm0uc2V0T3JpZ2luKG5ldyBBbW1vLmJ0VmVjdG9yMyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2VydmVyUG9zLngsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zZXJ2ZXJQb3MueSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNlcnZlclBvcy56XG4gICAgICAgICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LmdldE1vdGlvblN0YXRlKCkuc2V0V29ybGRUcmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5tZXNoLnBvc2l0aW9uLnNldChvYmouc2VydmVyUG9zLngsIG9iai5zZXJ2ZXJQb3MueSwgb2JqLnNlcnZlclBvcy56KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtXU10g0J7QsdGK0LXQutGCICR7ZGF0YS5pZH0g0YLQtdC70LXQv9C+0YDRgtC40YDQvtCy0LDQvSDQsiDQuNGB0YXQvtC00L3Ri9C1INC60L7QvtGA0LTQuNC90LDRgtGLOmAsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgeDogb2JqLnNlcnZlclBvcy54LCB5OiBvYmouc2VydmVyUG9zLnksIHo6IG9iai5zZXJ2ZXJQb3MueiB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBcbiAgICAgICAgZWxzZSBpZiAoZGF0YS50eXBlID09PSBcInVwZGF0ZVwiICYmIGRhdGEuaWQgJiYgb2JqZWN0c1tkYXRhLmlkXSkge1xuICAgICAgICAgICAgLy8g0J7QsdGA0LDQsdC+0YLQutCwINC+0LHQvdC+0LLQu9C10L3QuNC5INC00LXQu9C10LPQuNGA0L7QstCw0L3QsCDQsiByZWNlaXZlT2JqZWN0VXBkYXRlLCDQv9C10YDQtdC00LDQtdC8INGC0LDQutC20LUg0LLRgNC10LzQtdC90L3Rg9GOINC80LXRgtC60YNcbiAgICAgICAgICAgIHJlY2VpdmVPYmplY3RVcGRhdGUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGF0YS50eXBlID09PSBcImNtZF9hY2tcIikge1xuICAgICAgICAgICAgLy8g0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdC8INC/0L7QtNGC0LLQtdGA0LbQtNC10L3QuNC1INC60L7QvNCw0L3QtNGLINGBINCy0YDQtdC80LXQvdC90L7QuSDQvNC10YLQutC+0LlcbiAgICAgICAgICAgIGlmIChkYXRhLmNsaWVudF90aW1lICYmIGRhdGEuc2VydmVyX3RpbWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByb3VuZFRyaXBUaW1lID0gRGF0ZS5ub3coKSAtIGRhdGEuY2xpZW50X3RpbWU7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC40LfQvNC10YDQtdC90LjQtSDQv9C40L3Qs9CwINCyINC40YHRgtC+0YDQuNGOXG4gICAgICAgICAgICAgICAgcGluZ0hpc3RvcnkucHVzaChyb3VuZFRyaXBUaW1lKTtcbiAgICAgICAgICAgICAgICBpZiAocGluZ0hpc3RvcnkubGVuZ3RoID4gTUFYX1BJTkdfU0FNUExFUykge1xuICAgICAgICAgICAgICAgICAgICBwaW5nSGlzdG9yeS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyDQktGL0YfQuNGB0LvRj9C10Lwg0YHRgNC10LTQvdC40Lkg0L/QuNC90LNcbiAgICAgICAgICAgICAgICBjb25zdCBhdmdQaW5nID0gcGluZ0hpc3RvcnkucmVkdWNlKChzdW0sIHBpbmcpID0+IHN1bSArIHBpbmcsIDApIC8gcGluZ0hpc3RvcnkubGVuZ3RoO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQvtGC0L7QsdGA0LDQttC10L3QuNC1INC/0LjQvdCz0LAg0L3QsCDRjdC60YDQsNC90LVcbiAgICAgICAgICAgICAgICB1cGRhdGVQaW5nRGlzcGxheShhdmdQaW5nKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW1dTXSDQn9C+0LTRgtCy0LXRgNC20LTQtdC90LjQtSDQutC+0LzQsNC90LTRizogJHtkYXRhLmNtZH0sIFJUVDogJHtyb3VuZFRyaXBUaW1lfW1zLCDQodGA0LXQtNC90LjQuSBSVFQ6ICR7YXZnUGluZy50b0ZpeGVkKDIpfW1zYCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INGB0LzQtdGJ0LXQvdC40LUg0YHQtdGA0LLQtdGA0L3QvtCz0L4g0LLRgNC10LzQtdC90Lgg0YEg0YPRh9C10YLQvtC8IFJUVC8yICjQv9GA0LXQtNC/0L7Qu9Cw0LPQsNC10Lwg0YHQuNC80LzQtdGC0YDQuNGH0L3Rg9GOINC30LDQtNC10YDQttC60YMpXG4gICAgICAgICAgICAgICAgdXBkYXRlU2VydmVyVGltZU9mZnNldChkYXRhLnNlcnZlcl90aW1lICsgcm91bmRUcmlwVGltZSAvIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIltXU10g0J7RiNC40LHQutCwINC/0YDQuCDQvtCx0YDQsNCx0L7RgtC60LUg0YHQvtC+0LHRidC10L3QuNGPOlwiLCBlcnJvcik7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV1NdINCh0YLQtdC6INCy0YvQt9C+0LLQvtCyOlwiLCBlcnJvci5zdGFjayk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVLZXlEb3duKGUpIHtcbiAgICBpZiAoIXdzIHx8IHdzLnJlYWR5U3RhdGUgIT09IFdlYlNvY2tldC5PUEVOKSByZXR1cm47XG5cbiAgICBsZXQgY21kID0gXCJcIjtcbiAgICBsZXQgZm9yY2VYID0gMCwgZm9yY2VZID0gMCwgZm9yY2VaID0gMDtcbiAgICBcbiAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICAgIGNhc2UgXCJBcnJvd0xlZnRcIjogXG4gICAgICAgICAgICBjbWQgPSBcIkxFRlRcIjsgXG4gICAgICAgICAgICBmb3JjZVggPSAtNTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQXJyb3dSaWdodFwiOiBcbiAgICAgICAgICAgIGNtZCA9IFwiUklHSFRcIjsgXG4gICAgICAgICAgICBmb3JjZVggPSA1O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJBcnJvd1VwXCI6IFxuICAgICAgICAgICAgY21kID0gXCJVUFwiOyBcbiAgICAgICAgICAgIGZvcmNlWiA9IC01O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJBcnJvd0Rvd25cIjogXG4gICAgICAgICAgICBjbWQgPSBcIkRPV05cIjsgXG4gICAgICAgICAgICBmb3JjZVogPSA1O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCIgXCI6IFxuICAgICAgICAgICAgY21kID0gXCJTUEFDRVwiOyBcbiAgICAgICAgICAgIGZvcmNlWSA9IDEwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0LLRgNC10LzQtdC90L3Rg9GOINC80LXRgtC60YMg0LrQu9C40LXQvdGC0LAg0Log0LrQvtC80LDQvdC00LVcbiAgICAgICAgY29uc3QgY2xpZW50VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIGNvbnN0IGNvbW1hbmRPYmogPSB7IFxuICAgICAgICAgICAgdHlwZTogXCJjbWRcIiwgXG4gICAgICAgICAgICBjbWQsXG4gICAgICAgICAgICBjbGllbnRfdGltZTogY2xpZW50VGltZSAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0LLRgNC10LzQtdC90L3Rg9GOINC80LXRgtC60YMg0LrQu9C40LXQvdGC0LBcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKGBbV1NdINCe0YLQv9GA0LDQstC60LAg0LrQvtC80LDQvdC00Ys6ICR7Y21kfSwg0LLRgNC10LzRjyDQutC70LjQtdC90YLQsDogJHtjbGllbnRUaW1lfWApO1xuICAgICAgICB3cy5zZW5kKEpTT04uc3RyaW5naWZ5KGNvbW1hbmRPYmopKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCf0YDQuNC80LXQvdGP0LXQvCDQuNC80L/Rg9C70YzRgSDQu9C+0LrQsNC70YzQvdC+INC60L4g0LLRgdC10Lwg0L7QsdGK0LXQutGC0LDQvCDRgdGE0LXRgFxuICAgICAgICBmb3IgKGxldCBpZCBpbiBvYmplY3RzKSB7XG4gICAgICAgICAgICBjb25zdCBvYmogPSBvYmplY3RzW2lkXTtcbiAgICAgICAgICAgIGlmIChvYmogJiYgb2JqLmJvZHkgJiYgb2JqLm1lc2ggJiYgb2JqLm1lc2guZ2VvbWV0cnkgJiYgXG4gICAgICAgICAgICAgICAgb2JqLm1lc2guZ2VvbWV0cnkudHlwZSA9PT0gXCJTcGhlcmVHZW9tZXRyeVwiKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtXU10g0J/RgNC40LzQtdC90Y/QtdC8INC40LzQv9GD0LvRjNGBINC6INGB0YTQtdGA0LUgJHtpZH0g0YEgcGh5c2ljc0J5PSR7b2JqLnBoeXNpY3NCeX1gKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyDQktGL0LfRi9Cy0LDQtdC8INGE0YPQvdC60YbQuNGOINC/0YDQuNC80LXQvdC10L3QuNGPINC40LzQv9GD0LvRjNGB0LAg0YEg0L7QsdC90L7QstC70LXQvdC90YvQvNC4INC/0LDRgNCw0LzQtdGC0YDQsNC80LhcbiAgICAgICAgICAgICAgICBhcHBseUltcHVsc2VUb1NwaGVyZShjbWQsIGZvcmNlWCwgZm9yY2VZLCBmb3JjZVosIG9iamVjdHMsIGNsaWVudFRpbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIltXU10g0J7RiNC40LHQutCwINC+0YLQv9GA0LDQstC60Lg6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0TmV0d29yaygpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIltXU10g0J3QsNGH0LDQu9C+INC40L3QuNGG0LjQsNC70LjQt9Cw0YbQuNC4IFdlYlNvY2tldFwiKTtcbiAgICAgICAgd3MgPSBuZXcgV2ViU29ja2V0KFwid3M6Ly9sb2NhbGhvc3Q6ODA4MC93c1wiKTtcbiAgICAgICAgXG4gICAgICAgIHdzLm9ub3BlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW1dTXSBjb25uZWN0ZWRcIik7XG4gICAgICAgICAgICAvLyDQmNC90LjRhtC40LDQu9C40LfQuNGA0YPQtdC8INC40L3QtNC40LrQsNGC0L7RgCDQv9C40L3Qs9CwXG4gICAgICAgICAgICB1cGRhdGVQaW5nRGlzcGxheSgwKTtcbiAgICAgICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQuNC90YTQvtGA0LzQsNGG0LjRjiDQviDQstGA0LXQvNC10L3QuFxuICAgICAgICAgICAgdXBkYXRlVGltZURpc3BsYXkoKTtcbiAgICAgICAgICAgIC8vINCX0LDQv9GD0YHQutCw0LXQvCDQuNC90YLQtdGA0LLQsNC7INC+0LHQvdC+0LLQu9C10L3QuNGPINCy0YDQtdC80LXQvdC4XG4gICAgICAgICAgICBpZiAodGltZURpc3BsYXlJbnRlcnZhbCkgY2xlYXJJbnRlcnZhbCh0aW1lRGlzcGxheUludGVydmFsKTtcbiAgICAgICAgICAgIHRpbWVEaXNwbGF5SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCh1cGRhdGVUaW1lRGlzcGxheSwgMTAwMCk7XG4gICAgICAgICAgICAvLyDQntGC0L/RgNCw0LLQuNC8INGC0LXRgdGC0L7QstC+0LUg0YHQvtC+0LHRidC10L3QuNC1INC00LvRjyDRgdC40L3RhdGA0L7QvdC40LfQsNGG0LjQuCDQstGA0LXQvNC10L3QuFxuICAgICAgICAgICAgc2VuZFBpbmcoKTtcbiAgICAgICAgfTtcblxuICAgICAgICB3cy5vbm1lc3NhZ2UgPSAoZXZ0KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGV2dC5kYXRhKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign0J3QtdCy0LXRgNC90YvQuSDRhNC+0YDQvNCw0YIg0LTQsNC90L3Ri9GFJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8g0JXRgdC70Lgg0L/RgNC40YXQvtC00LjRgiDRgdC+0L7QsdGJ0LXQvdC40LUg0YEgaWQg0Lggb2JqZWN0X3R5cGUsINC90L4g0LHQtdC3IHR5cGUgLSDRjdGC0L4g0L7QsdGK0LXQutGCINGB0L7Qt9C00LDQvdC40Y9cbiAgICAgICAgICAgICAgICBpZiAoIWRhdGEudHlwZSAmJiBkYXRhLmlkICYmIGRhdGEub2JqZWN0X3R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tXU10g0J/QvtC70YPRh9C10L0g0L7QsdGK0LXQutGCINCx0LXQtyB0eXBlLCDRgdGH0LjRgtCw0LXQvCDRjdGC0L4gY3JlYXRlOicsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0YLQuNC/INC00LvRjyDRgdC+0LLQvNC10YHRgtC40LzQvtGB0YLQuCDRgSDRgdGD0YnQtdGB0YLQstGD0Y7RidC40Lwg0LrQvtC00L7QvFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnR5cGUgPSBcImNyZWF0ZVwiO1xuICAgICAgICAgICAgICAgICAgICAvLyDQntCx0YDQsNCx0LDRgtGL0LLQsNC10Lwg0LrQsNC6IGNyZWF0ZVxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVNZXNzYWdlKGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyDQntCx0YDQsNCx0LDRgtGL0LLQsNC10LwgdXBkYXRlINGB0L7QvtCx0YnQtdC90LjRjyDRh9C10YDQtdC3INC90LDRiNGDINC90L7QstGD0Y4g0YTRg9C90LrRhtC40Y5cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkYXRhLnR5cGUgPT09IFwidXBkYXRlXCIgJiYgZGF0YS5pZCkge1xuICAgICAgICAgICAgICAgICAgICByZWNlaXZlT2JqZWN0VXBkYXRlKGRhdGEpO1xuICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZGF0YS50eXBlID09PSBcImNyZWF0ZVwiICYmIGRhdGEuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8g0J7RgdGC0LDQstC70Y/QtdC8INGB0YPRidC10YHRgtCy0YPRjtGJ0YPRjiDQu9C+0LPQuNC60YMg0YHQvtC30LTQsNC90LjRjyDQvtCx0YrQtdC60YLQvtCyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZU1lc3NhZ2UoZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gXCJwb25nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8g0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdC8IHBvbmcg0YHQvtC+0LHRidC10L3QuNGPINC00LvRjyDRgdC40L3RhdGA0L7QvdC40LfQsNGG0LjQuCDQstGA0LXQvNC10L3QuFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVNZXNzYWdlKGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8g0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdC8INC00YDRg9Cz0LjQtSDRgtC40L/RiyDRgdC+0L7QsdGJ0LXQvdC40LksINC90LDQv9GA0LjQvNC10YAgXCJjbWRfYWNrXCJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlTWVzc2FnZShkYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV1NdINCe0YjQuNCx0LrQsCDQv9GA0Lgg0L7QsdGA0LDQsdC+0YLQutC1INGB0L7QvtCx0YnQtdC90LjRjzpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHdzLm9uZXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV1NdIFdlYlNvY2tldCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIltXU10g0JTQtdGC0LDQu9C4INC+0YjQuNCx0LrQuDpcIiwge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgdHlwZTogZXJyb3IudHlwZSxcbiAgICAgICAgICAgICAgICBldmVudFBoYXNlOiBlcnJvci5ldmVudFBoYXNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB3cy5vbmNsb3NlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltXU10g0KHQvtC10LTQuNC90LXQvdC40LUg0LfQsNC60YDRi9GC0L46XCIsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBldmVudC5jb2RlLFxuICAgICAgICAgICAgICAgIHJlYXNvbjogZXZlbnQucmVhc29uLFxuICAgICAgICAgICAgICAgIHdhc0NsZWFuOiBldmVudC53YXNDbGVhblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCe0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdC8INC+0LHQvdC+0LLQu9C10L3QuNC1INCy0YDQtdC80LXQvdC4INC/0YDQuCDQt9Cw0LrRgNGL0YLQuNC4INGB0L7QtdC00LjQvdC10L3QuNGPXG4gICAgICAgICAgICBpZiAodGltZURpc3BsYXlJbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZURpc3BsYXlJbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgdGltZURpc3BsYXlJbnRlcnZhbCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgaGFuZGxlS2V5RG93bik7XG4gICAgICAgIFxuICAgICAgICAvLyDQl9Cw0L/Rg9GB0LrQsNC10Lwg0L/QtdGA0LjQvtC00LjRh9C10YHQutGD0Y4g0YHQuNC90YXRgNC+0L3QuNC30LDRhtC40Y4g0LLRgNC10LzQtdC90LhcbiAgICAgICAgc2V0SW50ZXJ2YWwoc2VuZFBpbmcsIDEwMDAwKTsgLy8g0JrQsNC20LTRi9C1IDEwINGB0LXQutGD0L3QtFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV1NdINCe0YjQuNCx0LrQsCDQv9GA0Lgg0YHQvtC30LTQsNC90LjQuCBXZWJTb2NrZXQ6XCIsIGVycm9yKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIltXU10g0KHRgtC10Log0LLRi9C30L7QstC+0LI6XCIsIGVycm9yLnN0YWNrKTtcbiAgICB9XG59XG5cbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDQvtGC0L/RgNCw0LLQutC4IHBpbmct0YHQvtC+0LHRidC10L3QuNGPINGBINCy0YDQtdC80LXQvdC90L7QuSDQvNC10YLQutC+0Lkg0LrQu9C40LXQvdGC0LBcbmZ1bmN0aW9uIHNlbmRQaW5nKCkge1xuICAgIGlmICghd3MgfHwgd3MucmVhZHlTdGF0ZSAhPT0gV2ViU29ja2V0Lk9QRU4pIHJldHVybjtcbiAgICBcbiAgICBjb25zdCBjbGllbnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBwaW5nT2JqID0geyBcbiAgICAgICAgdHlwZTogXCJwaW5nXCIsIFxuICAgICAgICBjbGllbnRfdGltZTogY2xpZW50VGltZSBcbiAgICB9O1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAgIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkocGluZ09iaikpO1xuICAgICAgICBjb25zb2xlLmxvZyhgW1dTXSDQntGC0L/RgNCw0LLQu9C10L0gcGluZyDQtNC70Y8g0YHQuNC90YXRgNC+0L3QuNC30LDRhtC40Lgg0LLRgNC10LzQtdC90LgsINCy0YDQtdC80Y8g0LrQu9C40LXQvdGC0LA6ICR7Y2xpZW50VGltZX1gKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dTXSDQntGI0LjQsdC60LAg0L7RgtC/0YDQsNCy0LrQuCBwaW5nOlwiLCBlcnJvcik7XG4gICAgfVxufVxuXG4vLyDQndC+0LLQsNGPINGE0YPQvdC60YbQuNGPINC00LvRjyDQt9Cw0L/Rg9GB0LrQsCDRhNC40LfQuNC60Lgg0YEg0LfQsNC00LXRgNC20LrQvtC5XG5leHBvcnQgZnVuY3Rpb24gc3RhcnRQaHlzaWNzU2ltdWxhdGlvbigpIHtcbiAgICBwaHlzaWNzU3RhcnRlZCA9IHRydWU7XG4gICAgXG4gICAgLy8g0JDQutGC0LjQstC40YDRg9C10Lwg0LLRgdC1INC+0LbQuNC00LDRjtGJ0LjQtSDQvtCx0YrQtdC60YLRi1xuICAgIGZvciAoY29uc3QgaWQgb2YgcGVuZGluZ09iamVjdHMpIHtcbiAgICAgICAgY29uc3Qgb2JqID0gb2JqZWN0c1tpZF07XG4gICAgICAgIGlmIChvYmogJiYgb2JqLmJvZHkpIHtcbiAgICAgICAgICAgIC8vINCQ0LrRgtC40LLQuNGA0YPQtdC8INGC0LXQu9C+XG4gICAgICAgICAgICBvYmouYm9keS5hY3RpdmF0ZSh0cnVlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0KLQtdC70LXQv9C+0YDRgtC40YDRg9C10Lwg0Log0L/QvtGB0LvQtdC00L3QuNC8INC40LfQstC10YHRgtC90YvQvCDRgdC10YDQstC10YDQvdGL0Lwg0LrQvtC+0YDQtNC40L3QsNGC0LDQvFxuICAgICAgICAgICAgaWYgKG9iai5zZXJ2ZXJQb3MpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBuZXcgQW1tby5idFRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgICAgIG9iai5ib2R5LmdldE1vdGlvblN0YXRlKCkuZ2V0V29ybGRUcmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0uc2V0T3JpZ2luKG5ldyBBbW1vLmJ0VmVjdG9yMyhcbiAgICAgICAgICAgICAgICAgICAgb2JqLnNlcnZlclBvcy54LCBcbiAgICAgICAgICAgICAgICAgICAgb2JqLnNlcnZlclBvcy55LCBcbiAgICAgICAgICAgICAgICAgICAgb2JqLnNlcnZlclBvcy56XG4gICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgb2JqLmJvZHkuZ2V0TW90aW9uU3RhdGUoKS5zZXRXb3JsZFRyYW5zZm9ybSh0cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgIG9iai5tZXNoLnBvc2l0aW9uLnNldChvYmouc2VydmVyUG9zLngsIG9iai5zZXJ2ZXJQb3MueSwgb2JqLnNlcnZlclBvcy56KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW1BoeXNpY3NdINCe0LHRitC10LrRgiAke2lkfSDQsNC60YLQuNCy0LjRgNC+0LLQsNC9INC4INGC0LXQu9C10L/QvtGA0YLQuNGA0L7QstCw0L0g0LIg0LrQvtC+0YDQtNC40L3QsNGC0Ys6YCwgXG4gICAgICAgICAgICAgICAgICAgIHsgeDogb2JqLnNlcnZlclBvcy54LCB5OiBvYmouc2VydmVyUG9zLnksIHo6IG9iai5zZXJ2ZXJQb3MueiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyDQntGH0LjRidCw0LXQvCDRgdC/0LjRgdC+0Log0L7QttC40LTQsNGO0YnQuNGFXG4gICAgcGVuZGluZ09iamVjdHMgPSBbXTtcbiAgICBjb25zb2xlLmxvZyhcIltQaHlzaWNzXSDQpNC40LfQuNC60LAg0LDQutGC0LjQstC40YDQvtCy0LDQvdCwLCDQstGB0LUg0L7QttC40LTQsNGO0YnQuNC1INC+0LHRitC10LrRgtGLINC+0LHRgNCw0LHQvtGC0LDQvdGLXCIpO1xufVxuXG4vLyDQrdC60YHQv9C+0YDRgtC40YDRg9C10Lwg0YTRg9C90LrRhtC40Lgg0LTQu9GPINC00L7RgdGC0YPQv9CwINC40Lcg0LTRgNGD0LPQuNGFINC80L7QtNGD0LvQtdC5XG5leHBvcnQgeyBlc3RpbWF0ZVNlcnZlclRpbWUgfTsiLCIvLyBwaHlzaWNzLmpzXG5cbmltcG9ydCB7IG9iamVjdHMgfSBmcm9tICcuL29iamVjdHMnO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgc3RhcnRQaHlzaWNzU2ltdWxhdGlvbiB9IGZyb20gJy4vbmV0d29yayc7XG5cbmV4cG9ydCBsZXQgbG9jYWxQaHlzaWNzV29ybGQgPSBudWxsO1xubGV0IGFtbW9Qcm9taXNlID0gbnVsbDtcblxuLy8g0J3QsNGB0YLRgNC+0LnQutC4INC00LvRjyDQutC+0YDRgNC10LrRhtC40Lgg0L/QvtC30LjRhtC40LhcbmNvbnN0IERFQURfWk9ORSA9IDAuMTsgLy8g0JzQtdGA0YLQstCw0Y8g0LfQvtC90LAsINCyINC/0YDQtdC00LXQu9Cw0YUg0LrQvtGC0L7RgNC+0Lkg0L3QtSDQv9GA0LjQvNC10L3Rj9C10YLRgdGPINC60L7RgNGA0LXQutGG0LjRj1xuY29uc3QgQ09SUkVDVElPTl9TVFJFTkdUSCA9IDEwLjA7IC8vINCj0LzQtdC90YzRiNCw0LXQvCDRgdC40LvRgyDQutC+0YDRgNC10LrRgtC40YDQvtCy0LrQuCDQtNC70Y8g0LHQvtC70LXQtSDQv9C70LDQstC90L7Qs9C+INC00LLQuNC20LXQvdC40Y9cbmNvbnN0IFRFTEVQT1JUX1RIUkVTSE9MRCA9IDMuMDsgLy8g0J/QvtGA0L7QsyDQtNC70Y8g0L3QsNGH0LDQu9CwINC/0LvQsNCy0L3QvtC5INC60L7RgNGA0LXQutGG0LjQuFxuXG4vLyDQlNC+0LHQsNCy0LvRj9C10Lwg0L3QsNGB0YLRgNC+0LnQutC4INC00LvRjyBjbGllbnQtc2lkZSBwcmVkaWN0aW9uXG5jb25zdCBQUkVESUNUSU9OX1NNT09USF9GQUNUT1IgPSAwLjI7IC8vINCR0LDQt9C+0LLRi9C5INC60L7RjdGE0YTQuNGG0LjQtdC90YIg0YHQs9C70LDQttC40LLQsNC90LjRj1xuY29uc3QgUFJFRElDVElPTl9NQVhfRVJST1IgPSAxMC4wOyAvLyDQn9C+0YDQvtCzINC00LvRjyDQttC10YHRgtC60L7QuSDRgtC10LvQtdC/0L7RgNGC0LDRhtC40LhcbmNvbnN0IERJU1RBTkNFX0JBU0VEX1NNT09USF9GQUNUT1IgPSB0cnVlOyAvLyDQmNGB0L/QvtC70YzQt9C+0LLQsNGC0Ywg0LTQuNC90LDQvNC40YfQtdGB0LrQuNC5INC60L7RjdGE0YTQuNGG0LjQtdC90YIg0YHQs9C70LDQttC40LLQsNC90LjRj1xuY29uc3QgTkVXX09CSkVDVF9USU1FT1VUID0gMjAwMDsgLy8gMiDRgdC10LrRg9C90LTRiyDQtNC70Y8gXCLQvdC+0LLRi9GFXCIg0L7QsdGK0LXQutGC0L7QslxuXG4vLyDQmNGB0YLQvtGA0LjRjyDQutC+0LzQsNC90LQg0LTQu9GPINC/0YDQtdC00YHQutCw0LfQsNC90LjRj1xubGV0IGlucHV0SGlzdG9yeSA9IFtdOyBcbmxldCBsYXN0U2VxdWVuY2VOdW1iZXIgPSAwOyAvLyDQodGH0LXRgtGH0LjQuiDQv9C+0YHQu9C10LTQvtCy0LDRgtC10LvRjNC90L7RgdGC0Lgg0LTQu9GPINC60L7QvNCw0L3QtFxubGV0IGxhc3RTZXJ2ZXJVcGRhdGVUaW1lID0gMDsgLy8g0JLRgNC10LzRjyDQv9C+0YHQu9C10LTQvdC10LPQviDRgdC10YDQstC10YDQvdC+0LPQviDQvtCx0L3QvtCy0LvQtdC90LjRj1xuXG4vLyDQodC40YHRgtC10LzQsCDQu9C+0LPQuNGA0L7QstCw0L3QuNGPINGBINC+0LPRgNCw0L3QuNGH0LXQvdC40LXQvCDRh9Cw0YHRgtC+0YLRi1xuY29uc3QgTE9HX0lOVEVSVkFMID0gNTAwMDsgLy8gMSDRgdC10LrRg9C90LTQsCDQvNC10LbQtNGDINC70L7Qs9Cw0LzQuFxuY29uc3QgbG9nVGltZXJzID0ge307XG5cbi8vINCU0L7QsdCw0LLQu9GP0LXQvCDQvNCw0YDQutC10YAg0LLRgNC10LzQtdC90Lgg0YHQvtC30LTQsNC90LjRjyDQvtCx0YrQtdC60YLQvtCyXG5jb25zdCBvYmplY3RDcmVhdGlvblRpbWVzID0gbmV3IE1hcCgpO1xuXG4vLyDQptC10L3RgtGA0LDQu9C40LfQvtCy0LDQvdC90LDRjyDRhNGD0L3QutGG0LjRjyDQu9C+0LPQuNGA0L7QstCw0L3QuNGPINGBINC+0LPRgNCw0L3QuNGH0LXQvdC40LXQvCDRh9Cw0YHRgtC+0YLRi1xuZnVuY3Rpb24gdGhyb3R0bGVkTG9nKGNhdGVnb3J5LCBtZXNzYWdlLCBkYXRhID0gbnVsbCkge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgXG4gICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8LCDQv9GA0L7RiNC70L4g0LvQuCDQtNC+0YHRgtCw0YLQvtGH0L3QviDQstGA0LXQvNC10L3QuCDRgSDQv9C+0YHQu9C10LTQvdC10LPQviDQu9C+0LPQsCDQtNC70Y8g0Y3RgtC+0Lkg0LrQsNGC0LXQs9C+0YDQuNC4XG4gICAgaWYgKCFsb2dUaW1lcnNbY2F0ZWdvcnldIHx8IG5vdyAtIGxvZ1RpbWVyc1tjYXRlZ29yeV0gPj0gTE9HX0lOVEVSVkFMKSB7XG4gICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDRgtCw0LnQvNC10YAg0LTQu9GPINGN0YLQvtC5INC60LDRgtC10LPQvtGA0LjQuFxuICAgICAgICBsb2dUaW1lcnNbY2F0ZWdvcnldID0gbm93O1xuICAgICAgICBcbiAgICAgICAgLy8g0KTQvtGA0LzQsNGC0LjRgNGD0LXQvCDQuCDQstGL0LLQvtC00LjQvCDRgdC+0L7QsdGJ0LXQvdC40LVcbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbJHtjYXRlZ29yeX1dICR7bWVzc2FnZX1gLCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbJHtjYXRlZ29yeX1dICR7bWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRydWU7IC8vINCb0L7QsyDQsdGL0Lsg0LLRi9Cy0LXQtNC10L1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGZhbHNlOyAvLyDQm9C+0LMg0LHRi9C7INC/0YDQvtC/0YPRidC10L0g0LjQty3Qt9CwINC+0LPRgNCw0L3QuNGH0LXQvdC40Y8g0YfQsNGB0YLQvtGC0Ytcbn1cblxuLy8g0KTRg9C90LrRhtC40Y8g0LTQu9GPINC70L7Qs9C40YDQvtCy0LDQvdC40Y8g0LTQsNC90L3Ri9GFINC+INCz0LvQsNCy0L3QvtC8INC40LPRgNC+0LrQtVxuZnVuY3Rpb24gbG9nTWFpblBsYXllckluZm8oKSB7XG4gICAgY29uc3QgbWFpblBsYXllciA9IG9iamVjdHNbXCJtYWluUGxheWVyMVwiXTtcbiAgICBpZiAoIW1haW5QbGF5ZXIgfHwgIW1haW5QbGF5ZXIubWVzaCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHBvcyA9IG1haW5QbGF5ZXIubWVzaC5wb3NpdGlvbjtcbiAgICBcbiAgICAvLyDQn9C+0LvRg9GH0LDQtdC8INGB0LrQvtGA0L7RgdGC0YwsINC10YHQu9C4INC00L7RgdGC0YPQv9C90LAg0YTQuNC30LjQutCwXG4gICAgbGV0IHZlbCA9IHsgeDogMCwgeTogMCwgejogMCB9O1xuICAgIGlmIChtYWluUGxheWVyLmJvZHkpIHtcbiAgICAgICAgY29uc3QgdmVsb2NpdHkgPSBtYWluUGxheWVyLmJvZHkuZ2V0TGluZWFyVmVsb2NpdHkoKTtcbiAgICAgICAgdmVsID0geyBcbiAgICAgICAgICAgIHg6IHZlbG9jaXR5LngoKSxcbiAgICAgICAgICAgIHk6IHZlbG9jaXR5LnkoKSxcbiAgICAgICAgICAgIHo6IHZlbG9jaXR5LnooKVxuICAgICAgICB9O1xuICAgICAgICB3aW5kb3cuQW1tby5kZXN0cm95KHZlbG9jaXR5KTtcbiAgICB9XG4gICAgXG4gICAgLy8g0JLRi9Cy0L7QtNC40Lwg0LIg0YTQvtGA0LzQsNGC0LUsINC90LDQv9C+0LzQuNC90LDRjtGJ0LXQvCBDKysg0LLRi9Cy0L7QtFxuICAgIHRocm90dGxlZExvZyhcIk1haW5QbGF5ZXJcIiwgXG4gICAgICAgIGBQb3NpdGlvbjogKCR7cG9zLngudG9GaXhlZCgyKX0sICR7cG9zLnkudG9GaXhlZCgyKX0sICR7cG9zLnoudG9GaXhlZCgyKX0pLCBgICtcbiAgICAgICAgYFZlbG9jaXR5OiAoJHt2ZWwueC50b0ZpeGVkKDIpfSwgJHt2ZWwueS50b0ZpeGVkKDIpfSwgJHt2ZWwuei50b0ZpeGVkKDIpfSlgXG4gICAgKTtcbn1cblxuLy8g0KTRg9C90LrRhtC40Y8g0LTQu9GPINC90LDRgdGC0YDQvtC50LrQuCDRhNC40LfQuNGH0LXRgdC60L7Qs9C+INC80LjRgNCwXG5mdW5jdGlvbiBzZXR1cFBoeXNpY3NXb3JsZCgpIHtcbiAgICBpZiAoIXdpbmRvdy5BbW1vKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbUGh5c2ljc10gQW1tby5qcyDQvdC1INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICAvLyDQodC+0LfQtNCw0LXQvCDRhNC40LfQuNGH0LXRgdC60LjQuSDQvNC40YBcbiAgICBjb25zdCBjb2xsaXNpb25Db25maWd1cmF0aW9uID0gbmV3IEFtbW8uYnREZWZhdWx0Q29sbGlzaW9uQ29uZmlndXJhdGlvbigpO1xuICAgIGNvbnN0IGRpc3BhdGNoZXIgPSBuZXcgQW1tby5idENvbGxpc2lvbkRpc3BhdGNoZXIoY29sbGlzaW9uQ29uZmlndXJhdGlvbik7XG4gICAgY29uc3QgYnJvYWRwaGFzZSA9IG5ldyBBbW1vLmJ0RGJ2dEJyb2FkcGhhc2UoKTtcbiAgICBjb25zdCBzb2x2ZXIgPSBuZXcgQW1tby5idFNlcXVlbnRpYWxJbXB1bHNlQ29uc3RyYWludFNvbHZlcigpO1xuICAgIFxuICAgIGxvY2FsUGh5c2ljc1dvcmxkID0gbmV3IEFtbW8uYnREaXNjcmV0ZUR5bmFtaWNzV29ybGQoXG4gICAgICAgIGRpc3BhdGNoZXIsXG4gICAgICAgIGJyb2FkcGhhc2UsXG4gICAgICAgIHNvbHZlcixcbiAgICAgICAgY29sbGlzaW9uQ29uZmlndXJhdGlvblxuICAgICk7XG4gICAgXG4gICAgLy8g0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10Lwg0LPRgNCw0LLQuNGC0LDRhtC40Y5cbiAgICBsb2NhbFBoeXNpY3NXb3JsZC5zZXRHcmF2aXR5KG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAtOS44MSwgMCkpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKFwiW1BoeXNpY3NdINCk0LjQt9C40YfQtdGB0LrQuNC5INC80LjRgCDRg9GB0L/QtdGI0L3QviDRgdC+0LfQtNCw0L1cIik7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0QW1tbygpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIEFtbW8gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnQW1tby5qcyDRg9C20LUg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC9Jyk7XG4gICAgICAgICAgICBzZXR1cFBoeXNpY3NXb3JsZCgpO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coJ9CY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPIEFtbW8uanMuLi4nKTtcbiAgICAgICAgY29uc3QgYW1tb1NjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICBhbW1vU2NyaXB0LnNyYyA9ICcvYW1tby9hbW1vLndhc20uanMnO1xuICAgICAgICBhbW1vU2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgICAgICAgYW1tb1NjcmlwdC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygn0KHQutGA0LjQv9GCIEFtbW8uanMg0LfQsNCz0YDRg9C20LXQvSwg0LjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8uLi4nKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgd2luZG93LkFtbW8oKS50aGVuKChBbW1vKSA9PiB7XG4gICAgICAgICAgICAgICAgd2luZG93LkFtbW8gPSBBbW1vO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdBbW1vLmpzINC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvSDRg9GB0L/QtdGI0L3QvicpO1xuICAgICAgICAgICAgICAgIHNldHVwUGh5c2ljc1dvcmxkKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8g0JfQsNC/0YPRgdC60LDQtdC8INGE0LjQt9C40YfQtdGB0LrRg9GOINGB0LjQvNGD0LvRj9GG0LjRjiDRgSDQt9Cw0LTQtdGA0LbQutC+0Lkg0LIgMSDRgdC10LrRg9C90LTRgyxcbiAgICAgICAgICAgICAgICAvLyDRh9GC0L7QsdGLINCz0LDRgNCw0L3RgtC40YDQvtCy0LDRgtGMINC/0L7Qu9GD0YfQtdC90LjQtSDQutC+0L7RgNC00LjQvdCw0YIg0L7RgiDRgdC10YDQstC10YDQsFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW1BoeXNpY3NdINCX0LDQtNC10YDQttC40LLQsNC10Lwg0LfQsNC/0YPRgdC6INGE0LjQt9C40LrQuCDQvdCwIDEg0YHQtdC60YPQvdC00YMg0LTQu9GPINC/0L7Qu9GD0YfQtdC90LjRjyDRgdC10YDQstC10YDQvdGL0YUg0LrQvtC+0YDQtNC40L3QsNGCLi4uXCIpO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzdGFydFBoeXNpY3NTaW11bGF0aW9uKCk7XG4gICAgICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCfQntGI0LjQsdC60LAg0LjQvdC40YbQuNCw0LvQuNC30LDRhtC40LggQW1tby5qczonLCBlcnIpO1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGFtbW9TY3JpcHQub25lcnJvciA9IChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ9Ce0YjQuNCx0LrQsCDQt9Cw0LPRgNGD0LfQutC4IEFtbW8uanM6JywgZXJyKTtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhbW1vU2NyaXB0KTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0ZXBQaHlzaWNzKGRlbHRhVGltZSkge1xuICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCDQutC+0YDRgNC10LrRgtC90L7RgdGC0YwgZGVsdGFUaW1lXG4gICAgaWYgKCFkZWx0YVRpbWUgfHwgaXNOYU4oZGVsdGFUaW1lKSB8fCBkZWx0YVRpbWUgPD0gMCB8fCBkZWx0YVRpbWUgPiAxKSB7XG4gICAgICAgIGRlbHRhVGltZSA9IDEvNjA7IC8vINCX0L3QsNGH0LXQvdC40LUg0L/QviDRg9C80L7Qu9GH0LDQvdC40Y5cbiAgICB9XG4gICAgXG4gICAgLy8g0J7Qs9GA0LDQvdC40YfQuNCy0LDQtdC8INC80LDQutGB0LjQvNCw0LvRjNC90YvQuSDRiNCw0LMg0LTQu9GPINGB0YLQsNCx0LjQu9GM0L3QvtGB0YLQuFxuICAgIGNvbnN0IG1heFN0ZXAgPSAxLzMwOyAvLyDQndC1INCx0L7Qu9GM0YjQtSAzMNC80YEg0LTQu9GPINC+0LTQvdC+0LPQviDRiNCw0LPQsFxuICAgIGNvbnN0IGVmZmVjdGl2ZVN0ZXAgPSBNYXRoLm1pbihkZWx0YVRpbWUsIG1heFN0ZXApO1xuICAgIFxuICAgIC8vINCY0YHQv9C+0LvRjNC30YPQtdC8INGE0LjQutGB0LjRgNC+0LLQsNC90L3Ri9C5INGI0LDQsyDQuCDQv9C10YDQtdC80LXQvdC90L7QtSDQutC+0LvQuNGH0LXRgdGC0LLQviDQv9C+0LTRiNCw0LPQvtCyINC00LvRjyDRgtC+0YfQvdC+0YHRgtC4XG4gICAgY29uc3QgZml4ZWRTdGVwID0gMS8xMjA7IC8vIDEyMCDQk9GGINCy0L3Rg9GC0YDQtdC90L3QuNC1INGI0LDQs9C4XG4gICAgY29uc3QgbWF4U3ViU3RlcHMgPSBNYXRoLmNlaWwoZWZmZWN0aXZlU3RlcCAvIGZpeGVkU3RlcCk7XG4gICAgXG4gICAgLy8g0JLRi9C/0L7Qu9C90Y/QtdC8INGI0LDQsyDRgdC40LzRg9C70Y/RhtC40Lgg0YEg0LfQsNC00LDQvdC90YvQvNC4INC/0LDRgNCw0LzQtdGC0YDQsNC80LhcbiAgICBsb2NhbFBoeXNpY3NXb3JsZC5zdGVwU2ltdWxhdGlvbihlZmZlY3RpdmVTdGVwLCBtYXhTdWJTdGVwcywgZml4ZWRTdGVwKTtcbiAgICBcbiAgICAvLyDQktGL0LLQvtC00LjQvCDQuNC90YTQvtGA0LzQsNGG0LjRjiDQviDQs9C70LDQstC90L7QvCDQuNCz0YDQvtC60LVcbiAgICBsb2dNYWluUGxheWVySW5mbygpO1xuICAgIFxuICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDRhNC40LfQuNGH0LXRgdC60LjQtSDQvtCx0YrQtdC60YLRiyAo0LHQtdC3INC70LjRiNC90LjRhSDQu9C+0LPQvtCyKVxuICAgIHVwZGF0ZVBoeXNpY3NPYmplY3RzKG9iamVjdHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlUGh5c2ljc09iamVjdHMob2JqZWN0cykge1xuICAgIC8vINCf0LXRgNC10LzQtdC90L3Ri9C1INC00LvRjyDQtNC40LDQs9C90L7RgdGC0LjQutC4XG4gICAgbGV0IG1haW5TcGhlcmVQb3MgPSBudWxsO1xuICAgIGxldCBhbW1vU2hhZG93UG9zID0gbnVsbDtcbiAgICBsZXQgYnVsbGV0U2hhZG93UG9zID0gbnVsbDtcblxuICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQstGB0LUg0L7QsdGK0LXQutGC0YtcbiAgICBmb3IgKGxldCBpZCBpbiBvYmplY3RzKSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IG9iamVjdHNbaWRdO1xuICAgICAgICBpZiAoIW9iai5tZXNoKSBjb250aW51ZTtcbiAgICAgICAgXG4gICAgICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCwg0L3QvtCy0YvQuSDQu9C4INGN0YLQviDQvtCx0YrQtdC60YJcbiAgICAgICAgY29uc3QgaXNOZXdPYmplY3QgPSBvYmplY3RDcmVhdGlvblRpbWVzLmhhcyhpZCkgJiYgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChEYXRlLm5vdygpIC0gb2JqZWN0Q3JlYXRpb25UaW1lcy5nZXQoaWQpIDwgTkVXX09CSkVDVF9USU1FT1VUKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCf0YDQvtC/0YPRgdC60LDQtdC8INC+0LHRgNCw0LHQvtGC0LrRgyDRgtC10YDRgNC10LnQvdCwICjQvtC9INGB0YLQsNGC0LjRh9C10L0pXG4gICAgICAgIGlmIChvYmoub2JqZWN0X3R5cGUgPT09IFwidGVycmFpblwiKSBjb250aW51ZTtcbiAgICAgICAgXG4gICAgICAgIHN3aXRjaCAob2JqLnBoeXNpY3NCeSkge1xuICAgICAgICAgICAgY2FzZSBcImFtbW9cIjpcbiAgICAgICAgICAgICAgICAvLyDQntCx0L3QvtCy0LvQtdC90LjQtSDRgtC+0LvRjNC60L4g0L/QviDRhNC40LfQuNC60LUgQW1tby5qc1xuICAgICAgICAgICAgICAgIGlmIChvYmouYm9keSAmJiBvYmoub2JqZWN0X3R5cGUgIT09IFwidGVycmFpblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zID0gbmV3IHdpbmRvdy5BbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LmdldE1vdGlvblN0YXRlKCkuZ2V0V29ybGRUcmFuc2Zvcm0odHJhbnMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY1ggPSB0cmFucy5nZXRPcmlnaW4oKS54KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY1kgPSB0cmFucy5nZXRPcmlnaW4oKS55KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY1ogPSB0cmFucy5nZXRPcmlnaW4oKS56KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcXggPSB0cmFucy5nZXRSb3RhdGlvbigpLngoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcXkgPSB0cmFucy5nZXRSb3RhdGlvbigpLnkoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcXogPSB0cmFucy5nZXRSb3RhdGlvbigpLnooKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcXcgPSB0cmFucy5nZXRSb3RhdGlvbigpLncoKTtcblxuICAgICAgICAgICAgICAgICAgICBvYmoubWVzaC5wb3NpdGlvbi5zZXQobG9jWCwgbG9jWSwgbG9jWik7XG4gICAgICAgICAgICAgICAgICAgIG9iai5tZXNoLnF1YXRlcm5pb24uc2V0KHF4LCBxeSwgcXosIHF3KTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vINCh0L7RhdGA0LDQvdGP0LXQvCDQtNC70Y8g0LTQuNCw0LPQvdC+0YHRgtC40LrQuFxuICAgICAgICAgICAgICAgICAgICBpZiAoaWQgPT09IFwiYW1tb19zaGFkb3dcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW1tb1NoYWRvd1BvcyA9IHsgeDogbG9jWCwgeTogbG9jWSwgejogbG9jWiB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSBcImJ1bGxldFwiOlxuICAgICAgICAgICAgICAgIC8vINCe0LHQvdC+0LLQu9C10L3QuNC1INC/0L4g0YHQtdGA0LLQtdGA0L3Ri9C8INC00LDQvdC90YvQvCDRgSDQv9GA0L7RgdGC0L7QuSDQuNC90YLQtdGA0L/QvtC70Y/RhtC40LXQuVxuICAgICAgICAgICAgICAgIGlmIChvYmouc2VydmVyUG9zICYmIG9iai5vYmplY3RfdHlwZSAhPT0gXCJ0ZXJyYWluXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8g0J/RgNC+0YHRgtCw0Y8g0LvQuNC90LXQudC90LDRjyDQuNC90YLQtdGA0L/QvtC70Y/RhtC40Y9cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW50ZXJwb2xhdGlvbkZhY3RvciA9IDAuMjsgLy8g0JzQvtC20L3QviDQvdCw0YHRgtGA0L7QuNGC0Ywg0L/QvtC0INCy0LDRiNC4INC90YPQttC00YtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIG9iai5tZXNoLnBvc2l0aW9uLnggKz0gKG9iai5zZXJ2ZXJQb3MueCAtIG9iai5tZXNoLnBvc2l0aW9uLngpICogaW50ZXJwb2xhdGlvbkZhY3RvcjtcbiAgICAgICAgICAgICAgICAgICAgb2JqLm1lc2gucG9zaXRpb24ueSArPSAob2JqLnNlcnZlclBvcy55IC0gb2JqLm1lc2gucG9zaXRpb24ueSkgKiBpbnRlcnBvbGF0aW9uRmFjdG9yO1xuICAgICAgICAgICAgICAgICAgICBvYmoubWVzaC5wb3NpdGlvbi56ICs9IChvYmouc2VydmVyUG9zLnogLSBvYmoubWVzaC5wb3NpdGlvbi56KSAqIGludGVycG9sYXRpb25GYWN0b3I7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyDQodC+0YXRgNCw0L3Rj9C10Lwg0LTQu9GPINC00LjQsNCz0L3QvtGB0YLQuNC60LhcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkID09PSBcImJ1bGxldF9zaGFkb3dcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVsbGV0U2hhZG93UG9zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IG9iai5tZXNoLnBvc2l0aW9uLngsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogb2JqLm1lc2gucG9zaXRpb24ueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6OiBvYmoubWVzaC5wb3NpdGlvbi56XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSBcImJvdGhcIjpcbiAgICAgICAgICAgICAgICAvLyDQk9C40LHRgNC40LTQvdGL0Lkg0L/QvtC00YXQvtC0INC00LvRjyDQvtCx0YrQtdC60YLQvtCyLCDRg9C/0YDQsNCy0LvRj9C10LzRi9GFINC+0LHQvtC40LzQuCDQuNGB0YLQvtGH0L3QuNC60LDQvNC4XG4gICAgICAgICAgICAgICAgaWYgKG9iai5zZXJ2ZXJQb3MgJiYgb2JqLm9iamVjdF90eXBlICE9PSBcInRlcnJhaW5cIiAmJiBvYmouYm9keSkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8g0KHQvtGF0YDQsNC90Y/QtdC8INC/0L7Qt9C40YbQuNGOINC+0YHQvdC+0LLQvdC+0Lkg0YHRhNC10YDRiyDQtNC70Y8g0LTQuNCw0LPQvdC+0YHRgtC40LrQuFxuICAgICAgICAgICAgICAgICAgICBpZiAoaWQgPT09IFwibWFpblBsYXllcjFcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFpblNwaGVyZVBvcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiBvYmoubWVzaC5wb3NpdGlvbi54LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IG9iai5tZXNoLnBvc2l0aW9uLnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgejogb2JqLm1lc2gucG9zaXRpb24ueixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJYOiBvYmouc2VydmVyUG9zLngsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyWTogb2JqLnNlcnZlclBvcy55LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlclo6IG9iai5zZXJ2ZXJQb3MuelxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8g0J/QvtC70YPRh9Cw0LXQvCDRgtC10LrRg9GJ0YPRjiDQv9C+0LfQuNGG0LjRjiDQuNC3INGE0LjQt9C40YfQtdGB0LrQvtCz0L4g0YLQtdC70LBcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IHdpbmRvdy5BbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LmdldE1vdGlvblN0YXRlKCkuZ2V0V29ybGRUcmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vINCS0YvRh9C40YHQu9GP0LXQvCDRgNCw0LfQvdC40YbRgyDQvNC10LbQtNGDINGB0LXRgNCy0LXRgNC90L7QuSDQuCDRgtC10LrRg9GJ0LXQuSDQv9C+0LfQuNGG0LjQtdC5INGE0LjQt9C40YfQtdGB0LrQvtCz0L4g0YLQtdC70LBcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFggPSB0cmFuc2Zvcm0uZ2V0T3JpZ2luKCkueCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50WSA9IHRyYW5zZm9ybS5nZXRPcmlnaW4oKS55KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRaID0gdHJhbnNmb3JtLmdldE9yaWdpbigpLnooKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vINCd0LDQvCDQstCw0LbQvdC+INC30L3QsNGC0Ywg0YHQutC+0YDQvtGB0YLRjCDQvtCx0YrQtdC60YLQsCDQtNC70Y8g0LLRi9Cx0L7RgNCwINC+0L/RgtC40LzQsNC70YzQvdC+0Lkg0YHRgtGA0LDRgtC10LPQuNC4INC60L7RgNGA0LXQutGG0LjQuFxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2ZWxvY2l0eSA9IG9iai5ib2R5LmdldExpbmVhclZlbG9jaXR5KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwZWVkU3EgPSB2ZWxvY2l0eS54KCkgKiB2ZWxvY2l0eS54KCkgKyB2ZWxvY2l0eS55KCkgKiB2ZWxvY2l0eS55KCkgKyB2ZWxvY2l0eS56KCkgKiB2ZWxvY2l0eS56KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzTW92aW5nRmFzdCA9IHNwZWVkU3EgPiA0LjA7IC8vINCV0YHQu9C4INGB0LrQvtGA0L7RgdGC0Ywg0LHQvtC70YzRiNC1IDIg0Lwv0YFcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGR4ID0gb2JqLnNlcnZlclBvcy54IC0gY3VycmVudFg7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGR5ID0gb2JqLnNlcnZlclBvcy55IC0gY3VycmVudFk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGR6ID0gb2JqLnNlcnZlclBvcy56IC0gY3VycmVudFo7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyDQktGL0YfQuNGB0LvRj9C10Lwg0YDQsNGB0YHRgtC+0Y/QvdC40LVcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoZHgqZHggKyBkeSpkeSArIGR6KmR6KTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vINCb0L7Qs9C40YDRg9C10Lwg0YLQvtC70YzQutC+INC/0YDQuCDQt9C90LDRh9C40YLQtdC70YzQvdGL0YUg0YDQsNGB0YXQvtC20LTQtdC90LjRj9GFXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA+IERFQURfWk9ORSB8fCBpc01vdmluZ0Zhc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm90dGxlZExvZyhcIlBoeXNpY3NcIiwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYNCe0LHRitC10LrRgiAke2lkfTog0KDQsNGB0YHRgtC+0Y/QvdC40LU6ICR7ZGlzdGFuY2UudG9GaXhlZCgzKX0sINCh0LrQvtGA0L7RgdGC0Yw6ICR7TWF0aC5zcXJ0KHNwZWVkU3EpLnRvRml4ZWQoMyl9LCDQkdGL0YHRgtGA0L46ICR7aXNNb3ZpbmdGYXN0fSwg0JrQu9C40LXQvdGCOiB7eDogJHtjdXJyZW50WC50b0ZpeGVkKDIpfSwgeTogJHtjdXJyZW50WS50b0ZpeGVkKDIpfSwgejogJHtjdXJyZW50Wi50b0ZpeGVkKDIpfX0sINCh0LXRgNCy0LXRgDoge3g6ICR7b2JqLnNlcnZlclBvcy54LnRvRml4ZWQoMil9LCB5OiAke29iai5zZXJ2ZXJQb3MueS50b0ZpeGVkKDIpfSwgejogJHtvYmouc2VydmVyUG9zLnoudG9GaXhlZCgyKX19YFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8g0J/RgNC40LzQtdC90Y/QtdC8IGNsaWVudC1zaWRlIHByZWRpY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlID4gREVBRF9aT05FKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQntC/0YDQtdC00LXQu9GP0LXQvCDQutC+0Y3RhNGE0LjRhtC40LXQvdGCINGB0LPQu9Cw0LbQuNCy0LDQvdC40Y8g0L3QsCDQvtGB0L3QvtCy0LUg0YHQvtGB0YLQvtGP0L3QuNGPINC+0LHRitC10LrRgtCwXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc21vb3RoRmFjdG9yID0gUFJFRElDVElPTl9TTU9PVEhfRkFDVE9SO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQlNC70Y8g0L3QvtCy0YvRhSDQvtCx0YrQtdC60YLQvtCyINC40YHQv9C+0LvRjNC30YPQtdC8INCx0L7Qu9C10LUg0LbQtdGB0YLQutGD0Y4g0LrQvtGA0YDQtdC60YbQuNGOXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOZXdPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbW9vdGhGYWN0b3IgPSAwLjg7IC8vIDgwJSDRgdC10YDQstC10YDQvdC+0Lkg0L/QvtC30LjRhtC40LhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdHRsZWRMb2coXCJQaHlzaWNzXCIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBg0J3QvtCy0YvQuSDQvtCx0YrQtdC60YIgJHtpZH0sINC/0YDQuNC80LXQvdGP0LXQvCDQttC10YHRgtC60YPRjiDQutC+0YDRgNC10LrRhtC40Y4gKCR7c21vb3RoRmFjdG9yfSlgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoRElTVEFOQ0VfQkFTRURfU01PT1RIX0ZBQ1RPUikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCn0LXQvCDQsdC+0LvRjNGI0LUg0YDQsNGB0YXQvtC20LTQtdC90LjQtSwg0YLQtdC8INCx0L7Qu9GM0YjQtSDQutC+0Y3RhNGE0LjRhtC40LXQvdGCXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc21vb3RoRmFjdG9yID0gTWF0aC5taW4oZGlzdGFuY2UgLyAyMC4wLCAwLjUpOyAvLyDQnNCw0LrRgdC40LzRg9C8IDAuNVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQlNC70Y8g0LHQvtC70YzRiNC40YUg0YDQsNGB0YXQvtC20LTQtdC90LjQuSDQuNC70Lgg0L3QvtCy0YvRhSDQvtCx0YrQtdC60YLQvtCyINC/0YDQuNC80LXQvdGP0LXQvCDRgtC10LvQtdC/0L7RgNGC0LDRhtC40Y5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZSA+IFBSRURJQ1RJT05fTUFYX0VSUk9SIHx8IGlzTmV3T2JqZWN0ICYmIGRpc3RhbmNlID4gNS4wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0J/RgNC4INGN0LrRgdGC0YDQtdC80LDQu9GM0L3Ri9GFINGA0LDRgdGF0L7QttC00LXQvdC40Y/RhSAtINGC0LXQu9C10L/QvtGA0YLQsNGG0LjRj1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm90dGxlZExvZyhcIlBoeXNpY3NcIiwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGDQrdC60YHRgtGA0LXQvNCw0LvRjNC90L7QtSDRgNCw0YHRhdC+0LbQtNC10L3QuNC1INC+0LHRitC10LrRgtCwICR7aWR9LCDRgNCw0YHRgdGC0L7Rj9C90LjQtTogJHtkaXN0YW5jZS50b0ZpeGVkKDIpfSwg0L3QvtCy0YvQuTogJHtpc05ld09iamVjdH1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQotC10LvQtdC/0L7RgNGC0LjRgNGD0LXQvCDQvtCx0YrQtdC60YJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm0uc2V0T3JpZ2luKG5ldyB3aW5kb3cuQW1tby5idFZlY3RvcjMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zZXJ2ZXJQb3MueCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNlcnZlclBvcy55LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2VydmVyUG9zLnpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouYm9keS5nZXRNb3Rpb25TdGF0ZSgpLnNldFdvcmxkVHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0KHQsdGA0LDRgdGL0LLQsNC10Lwg0YHQutC+0YDQvtGB0YLRjCDRgtC+0LvRjNC60L4g0L/RgNC4INGB0YPRidC10YHRgtCy0LXQvdC90YvRhSDRgNCw0YHRhdC+0LbQtNC10L3QuNGP0YVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2UgPiBQUkVESUNUSU9OX01BWF9FUlJPUiAqIDEuNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQn9GA0Lgg0L7Rh9C10L3RjCDQsdC+0LvRjNGI0LjRhSDRgNCw0YHRhdC+0LbQtNC10L3QuNGP0YUg0L/QvtC70L3QvtGB0YLRjNGOINGB0LHRgNCw0YHRi9Cy0LDQtdC8INGB0LrQvtGA0L7RgdGC0YxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgemVybyA9IG5ldyB3aW5kb3cuQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LnNldExpbmVhclZlbG9jaXR5KHplcm8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouYm9keS5zZXRBbmd1bGFyVmVsb2NpdHkoemVybyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3koemVybyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvYmouc2VydmVyVmVsb2NpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0JXRgdC70Lgg0LXRgdGC0Ywg0YDQsNGB0YHRh9C40YLQsNC90L3QsNGPINGB0LXRgNCy0LXRgNC90LDRjyDRgdC60L7RgNC+0YHRgtGMLCDQv9GA0LjQvNC10L3Rj9C10Lwg0LXRkVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXJ2ZXJWZWwgPSBuZXcgd2luZG93LkFtbW8uYnRWZWN0b3IzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNlcnZlclZlbG9jaXR5LngsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2VydmVyVmVsb2NpdHkueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zZXJ2ZXJWZWxvY2l0eS56XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LnNldExpbmVhclZlbG9jaXR5KHNlcnZlclZlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3koc2VydmVyVmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQmNC90LDRh9C1INGD0LzQtdC90YzRiNCw0LXQvCDRgtC10LrRg9GJ0YPRjiDRgdC60L7RgNC+0YHRgtGMXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhbXBlZFZlbG9jaXR5ID0gbmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5LngoKSAqIDAuNSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5LnkoKSAqIDAuNSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5LnooKSAqIDAuNVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouYm9keS5zZXRMaW5lYXJWZWxvY2l0eShkYW1wZWRWZWxvY2l0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3koZGFtcGVkVmVsb2NpdHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQndC10LzQtdC00LvQtdC90L3QviDRgdC40L3RhdGA0L7QvdC40LfQuNGA0YPQtdC8INC80LXRiCDRgSDRhNC40LfQuNGH0LXRgdC60LjQvCDRgtC10LvQvtC8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFRyYW5zZm9ybSA9IG5ldyB3aW5kb3cuQW1tby5idFRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LmdldE1vdGlvblN0YXRlKCkuZ2V0V29ybGRUcmFuc2Zvcm0odXBkYXRlZFRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHggPSB1cGRhdGVkVHJhbnNmb3JtLmdldE9yaWdpbigpLngoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBweSA9IHVwZGF0ZWRUcmFuc2Zvcm0uZ2V0T3JpZ2luKCkueSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHB6ID0gdXBkYXRlZFRyYW5zZm9ybS5nZXRPcmlnaW4oKS56KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm1lc2gucG9zaXRpb24uc2V0KHB4LCBweSwgcHopO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3kodXBkYXRlZFRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRpc3RhbmNlID4gVEVMRVBPUlRfVEhSRVNIT0xEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0JzRj9Cz0LrQsNGPINC60L7RgNGA0LXQutGG0LjRjyDQtNC70Y8g0YHRgNC10LTQvdC40YUg0YDQsNGB0YXQvtC20LTQtdC90LjQuVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCh0LzQtdGI0LjQstCw0LXQvCDRgtC10LrRg9GJ0YPRjiDQv9C+0LfQuNGG0LjRjiDRgSDRgdC10YDQstC10YDQvdC+0LlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb3JyZWN0aW9uWCA9IG9iai5zZXJ2ZXJQb3MueCAqIHNtb290aEZhY3RvciArIGN1cnJlbnRYICogKDEgLSBzbW9vdGhGYWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvcnJlY3Rpb25ZID0gb2JqLnNlcnZlclBvcy55ICogc21vb3RoRmFjdG9yICsgY3VycmVudFkgKiAoMSAtIHNtb290aEZhY3Rvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29ycmVjdGlvblogPSBvYmouc2VydmVyUG9zLnogKiBzbW9vdGhGYWN0b3IgKyBjdXJyZW50WiAqICgxIC0gc21vb3RoRmFjdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm0uc2V0T3JpZ2luKG5ldyB3aW5kb3cuQW1tby5idFZlY3RvcjMoY29ycmVjdGlvblgsIGNvcnJlY3Rpb25ZLCBjb3JyZWN0aW9uWikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LmdldE1vdGlvblN0YXRlKCkuc2V0V29ybGRUcmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQldGB0LvQuCDQvNGLINC/0LXRgNC10LzQtdGJ0LDQtdC8INC+0LHRitC10LrRgiwg0L7QsdC90L7QstC70Y/QtdC8IG1lc2gg0L3QtdC/0L7RgdGA0LXQtNGB0YLQstC10L3QvdC+INC00LvRjyDQsdC+0LvRjNGI0LXQuSDQv9C70LDQstC90L7RgdGC0LhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoubWVzaC5wb3NpdGlvbi5zZXQoY29ycmVjdGlvblgsIGNvcnJlY3Rpb25ZLCBjb3JyZWN0aW9uWik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INGB0LrQvtGA0L7RgdGC0YwsINGH0YLQvtCx0Ysg0L7QvdCwINGD0YfQuNGC0YvQstCw0LvQsCDQvdCw0L/RgNCw0LLQu9C10L3QuNC1INGB0LXRgNCy0LXRgNC90L7Qs9C+INC00LLQuNC20LXQvdC40Y9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnNlcnZlclZlbG9jaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsZW5kZWRWZWxvY2l0eSA9IG5ldyB3aW5kb3cuQW1tby5idFZlY3RvcjMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWxvY2l0eS54KCkgKiAoMSAtIHNtb290aEZhY3RvcikgKyBvYmouc2VydmVyVmVsb2NpdHkueCAqIHNtb290aEZhY3RvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5LnkoKSAqICgxIC0gc21vb3RoRmFjdG9yKSArIG9iai5zZXJ2ZXJWZWxvY2l0eS55ICogc21vb3RoRmFjdG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHkueigpICogKDEgLSBzbW9vdGhGYWN0b3IpICsgb2JqLnNlcnZlclZlbG9jaXR5LnogKiBzbW9vdGhGYWN0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmJvZHkuc2V0TGluZWFyVmVsb2NpdHkoYmxlbmRlZFZlbG9jaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveShibGVuZGVkVmVsb2NpdHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0JTQu9GPINC90LXQsdC+0LvRjNGI0LjRhSDRgNCw0YHRhdC+0LbQtNC10L3QuNC5IC0g0LrQvtGA0YDQtdC60YLQuNGA0YPRjtGJ0LDRjyDRgdC40LvQsFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCR0L7Qu9C10LUg0L/Qu9Cw0LLQvdCw0Y8g0LrQvtGA0YDQtdC60YbQuNGPINC00LvRjyDQvNC10LTQu9C10L3QvdC+INC00LLQuNC20YPRidC40YXRgdGPINC+0LHRitC10LrRgtC+0LJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhZGFwdGl2ZVN0cmVuZ3RoID0gaXNNb3ZpbmdGYXN0ID8gQ09SUkVDVElPTl9TVFJFTkdUSCA6IENPUlJFQ1RJT05fU1RSRU5HVEggKiAwLjc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFnbml0dWRlID0gZGlzdGFuY2UgKiBhZGFwdGl2ZVN0cmVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCU0LvRjyDQvtCx0YrQtdC60YLQvtCyINC90LAg0LfQtdC80LvQtSDQvdC1INC/0YDQuNC80LXQvdGP0LXQvCDQstC10YDRgtC40LrQsNC70YzQvdGD0Y4g0LrQvtGA0YDQtdC60YbQuNGOLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINC10YHQu9C4INC+0L3QuCDQvdCw0YXQvtC00Y/RgtGB0Y8g0L3QsCDQv9C+0LLQtdGA0YXQvdC+0YHRgtC4INGBINC90LXQsdC+0LvRjNGI0L7QuSDRgNCw0LfQvdC40YbQtdC5INC/0L4g0LLRi9GB0L7RgtC1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvcnJlY3RZID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoZHkpIDwgREVBRF9aT05FICYmIE1hdGguYWJzKHZlbG9jaXR5LnkoKSkgPCAwLjUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ycmVjdFkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9yY2UgPSBuZXcgd2luZG93LkFtbW8uYnRWZWN0b3IzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkeCAqIG1hZ25pdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ycmVjdFkgPyBkeSAqIG1hZ25pdHVkZSA6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR6ICogbWFnbml0dWRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQkNC60YLQuNCy0LjRgNGD0LXQvCDRgtC10LvQviDQuCDQv9GA0LjQvNC10L3Rj9C10Lwg0YHQuNC70YNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouYm9keS5hY3RpdmF0ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouYm9keS5hcHBseUNlbnRyYWxGb3JjZShmb3JjZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveShmb3JjZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3kodmVsb2NpdHkpO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuQW1tby5kZXN0cm95KHRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdHRsZWRMb2coXCJFcnJvclwiLCBg0J3QtdC40LfQstC10YHRgtC90YvQuSDRgtC40L8gcGh5c2ljc0J5INC00LvRjyDQvtCx0YrQtdC60YLQsCAke2lkfTogJHtvYmoucGh5c2ljc0J5fWApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vINCS0YvQstC+0LTQuNC8INC00LjQsNCz0L3QvtGB0YLQuNGH0LXRgdC60YPRjiDQuNC90YTQvtGA0LzQsNGG0LjRjiDQviDRgNCw0YHRhdC+0LbQtNC10L3QuNGP0YVcbiAgICBpZiAobWFpblNwaGVyZVBvcyAmJiBhbW1vU2hhZG93UG9zICYmIGJ1bGxldFNoYWRvd1Bvcykge1xuICAgICAgICAvLyDQktGL0YfQuNGB0LvRj9C10Lwg0YDQsNGB0YXQvtC20LTQtdC90LjRjyDQvNC10LbQtNGDINC00LjQsNCz0L3QvtGB0YLQuNGH0LXRgdC60LjQvNC4INGB0YTQtdGA0LDQvNC4XG4gICAgICAgIGNvbnN0IG1haW5Ub0FtbW9EaXN0YW5jZSA9IE1hdGguc3FydChcbiAgICAgICAgICAgIE1hdGgucG93KG1haW5TcGhlcmVQb3MueCAtIGFtbW9TaGFkb3dQb3MueCwgMikgK1xuICAgICAgICAgICAgTWF0aC5wb3cobWFpblNwaGVyZVBvcy55IC0gYW1tb1NoYWRvd1Bvcy55LCAyKSArXG4gICAgICAgICAgICBNYXRoLnBvdyhtYWluU3BoZXJlUG9zLnogLSBhbW1vU2hhZG93UG9zLnosIDIpXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBtYWluVG9CdWxsZXREaXN0YW5jZSA9IE1hdGguc3FydChcbiAgICAgICAgICAgIE1hdGgucG93KG1haW5TcGhlcmVQb3MueCAtIGJ1bGxldFNoYWRvd1Bvcy54LCAyKSArXG4gICAgICAgICAgICBNYXRoLnBvdyhtYWluU3BoZXJlUG9zLnkgLSBidWxsZXRTaGFkb3dQb3MueSwgMikgK1xuICAgICAgICAgICAgTWF0aC5wb3cobWFpblNwaGVyZVBvcy56IC0gYnVsbGV0U2hhZG93UG9zLnosIDIpXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBzZXJ2ZXJUb01haW5EaXN0YW5jZSA9IE1hdGguc3FydChcbiAgICAgICAgICAgIE1hdGgucG93KG1haW5TcGhlcmVQb3Muc2VydmVyWCAtIG1haW5TcGhlcmVQb3MueCwgMikgK1xuICAgICAgICAgICAgTWF0aC5wb3cobWFpblNwaGVyZVBvcy5zZXJ2ZXJZIC0gbWFpblNwaGVyZVBvcy55LCAyKSArXG4gICAgICAgICAgICBNYXRoLnBvdyhtYWluU3BoZXJlUG9zLnNlcnZlclogLSBtYWluU3BoZXJlUG9zLnosIDIpXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICAvLyDQktGL0LLQvtC00LjQvCDRgdGC0LDRgtC40YHRgtC40LrRgyDRgtC+0LvRjNC60L4g0L/RgNC40LzQtdGA0L3QviDRgNCw0Lcg0LIg0YHQtdC60YPQvdC00YMgKNGH0YLQvtCx0Ysg0L3QtSDRgdC/0LDQvNC40YLRjCDQutC+0L3RgdC+0LvRjClcbiAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPCAwLjAxNikgeyAvLyDQv9GA0LjQvNC10YDQvdC+INC/0YDQuCA2MCBGUFMg0LHRg9C00LXRgiDQstGL0LLQvtC00LjRgtGMINGA0LDQtyDQsiDRgdC10LrRg9C90LTRg1xuICAgICAgICAgICAgdGhyb3R0bGVkTG9nKFwiUGh5c2ljc1wiLCBcItCU0LjQsNCz0L3QvtGB0YLQuNC60LAg0YDQsNGB0YXQvtC20LTQtdC90LjQuTpcIiwge1xuICAgICAgICAgICAgICAgIFwi0J7RgdC90L7QstC90LDRjyDRgdGE0LXRgNCwIC0+IEFtbW8t0YLQtdC90YxcIjogbWFpblRvQW1tb0Rpc3RhbmNlLnRvRml4ZWQoMyksXG4gICAgICAgICAgICAgICAgXCLQntGB0L3QvtCy0L3QsNGPINGB0YTQtdGA0LAgLT4gQnVsbGV0LdGC0LXQvdGMXCI6IG1haW5Ub0J1bGxldERpc3RhbmNlLnRvRml4ZWQoMyksXG4gICAgICAgICAgICAgICAgXCLQodC10YDQstC10YDQvdCw0Y8g0L/QvtC30LjRhtC40Y8gLT4g0J7RgdC90L7QstC90LDRjyDRgdGE0LXRgNCwXCI6IHNlcnZlclRvTWFpbkRpc3RhbmNlLnRvRml4ZWQoMylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDRgNCw0YHRh9C10YIg0Lgg0LLQuNC30YPQsNC70LjQt9Cw0YbQuNGOINGA0LDRgdGF0L7QttC00LXQvdC40Lkg0LzQtdC20LTRgyDQtNCy0LjQttC60LDQvNC4XG4gICAgdmlzdWFsaXplRGl2ZXJnZW5jZShvYmplY3RzKTtcbn1cblxuLy8g0KTRg9C90LrRhtC40Y8g0LTQu9GPINCy0LjQt9GD0LDQu9C40LfQsNGG0LjQuCDRgNCw0YHRhdC+0LbQtNC10L3QuNC5INC80LXQttC00YMg0LTQstC40LbQutCw0LzQuFxuZnVuY3Rpb24gdmlzdWFsaXplRGl2ZXJnZW5jZShvYmplY3RzKSB7XG4gICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8INC90LDQu9C40YfQuNC1INCy0YHQtdGFINC90LXQvtCx0YXQvtC00LjQvNGL0YUg0L7QsdGK0LXQutGC0L7QslxuICAgIGNvbnN0IG1haW5TcGhlcmUgPSBvYmplY3RzW1wibWFpblBsYXllcjFcIl07XG4gICAgY29uc3QgYW1tb1NoYWRvdyA9IG9iamVjdHNbXCJhbW1vX3NoYWRvd1wiXTtcbiAgICBjb25zdCBidWxsZXRTaGFkb3cgPSBvYmplY3RzW1wiYnVsbGV0X3NoYWRvd1wiXTtcbiAgICBcbiAgICBpZiAoIW1haW5TcGhlcmUgfHwgIWFtbW9TaGFkb3cgfHwgIWJ1bGxldFNoYWRvdykgcmV0dXJuO1xuICAgIFxuICAgIC8vINCf0L7Qu9GD0YfQsNC10Lwg0L/QvtC30LjRhtC40LhcbiAgICBjb25zdCBtYWluUG9zID0gbWFpblNwaGVyZS5tZXNoLnBvc2l0aW9uO1xuICAgIGNvbnN0IGFtbW9Qb3MgPSBhbW1vU2hhZG93Lm1lc2gucG9zaXRpb247XG4gICAgY29uc3QgYnVsbGV0UG9zID0gYnVsbGV0U2hhZG93Lm1lc2gucG9zaXRpb247XG4gICAgXG4gICAgLy8g0KDQsNGB0YfQtdGCINGA0LDRgdGB0YLQvtGP0L3QuNC5XG4gICAgY29uc3QgZGlzdE1haW5Ub0FtbW8gPSBNYXRoLnNxcnQoXG4gICAgICAgIE1hdGgucG93KG1haW5Qb3MueCAtIGFtbW9Qb3MueCwgMikgK1xuICAgICAgICBNYXRoLnBvdyhtYWluUG9zLnkgLSBhbW1vUG9zLnksIDIpICtcbiAgICAgICAgTWF0aC5wb3cobWFpblBvcy56IC0gYW1tb1Bvcy56LCAyKVxuICAgICk7XG4gICAgXG4gICAgY29uc3QgZGlzdE1haW5Ub0J1bGxldCA9IE1hdGguc3FydChcbiAgICAgICAgTWF0aC5wb3cobWFpblBvcy54IC0gYnVsbGV0UG9zLngsIDIpICtcbiAgICAgICAgTWF0aC5wb3cobWFpblBvcy55IC0gYnVsbGV0UG9zLnksIDIpICtcbiAgICAgICAgTWF0aC5wb3cobWFpblBvcy56IC0gYnVsbGV0UG9zLnosIDIpXG4gICAgKTtcbiAgICBcbiAgICBjb25zdCBkaXN0QW1tb0J1bGxldCA9IE1hdGguc3FydChcbiAgICAgICAgTWF0aC5wb3coYW1tb1Bvcy54IC0gYnVsbGV0UG9zLngsIDIpICtcbiAgICAgICAgTWF0aC5wb3coYW1tb1Bvcy55IC0gYW1tb1Bvcy55LCAyKSArXG4gICAgICAgIE1hdGgucG93KGFtbW9Qb3MueiAtIGJ1bGxldFBvcy56LCAyKVxuICAgICk7XG4gICAgXG4gICAgLy8g0J7Qs9GA0LDQvdC40YfQuNC8INCy0YvQstC+0LQg0LvQvtCz0LAsINGH0YLQvtCx0Ysg0L3QtSDRgdC/0LDQvNC40YLRjCDQutC+0L3RgdC+0LvRjCAo0L/RgNC40LzQtdGA0L3QviDRgNCw0Lcg0LIg0YHQtdC60YPQvdC00YMpXG4gICAgaWYgKCF3aW5kb3cubGFzdERpdmVyZ2VuY2VMb2cgfHwgRGF0ZS5ub3coKSAtIHdpbmRvdy5sYXN0RGl2ZXJnZW5jZUxvZyA+IDEwMDApIHtcbiAgICAgICAgdGhyb3R0bGVkTG9nKFwiUGh5c2ljc1wiLCBcItCg0LDRgdGF0L7QttC00LXQvdC40Y8g0LzQtdC20LTRgyDQtNCy0LjQttC60LDQvNC4OlwiKTtcbiAgICAgICAgdGhyb3R0bGVkTG9nKFwiUGh5c2ljc1wiLCBgICDQntGB0L3QvtCy0L3QvtC5INGI0LDRgCAoJHttYWluU3BoZXJlLnBoeXNpY3NCeX0pOiB4PSR7bWFpblBvcy54LnRvRml4ZWQoMil9LCB5PSR7bWFpblBvcy55LnRvRml4ZWQoMil9LCB6PSR7bWFpblBvcy56LnRvRml4ZWQoMil9YCk7XG4gICAgICAgIHRocm90dGxlZExvZyhcIlBoeXNpY3NcIiwgYCAg0KLQtdC90YwgQW1tbzogeD0ke2FtbW9Qb3MueC50b0ZpeGVkKDIpfSwgeT0ke2FtbW9Qb3MueS50b0ZpeGVkKDIpfSwgej0ke2FtbW9Qb3Muei50b0ZpeGVkKDIpfWApO1xuICAgICAgICB0aHJvdHRsZWRMb2coXCJQaHlzaWNzXCIsIGAgINCi0LXQvdGMIEJ1bGxldDogeD0ke2J1bGxldFBvcy54LnRvRml4ZWQoMil9LCB5PSR7YnVsbGV0UG9zLnkudG9GaXhlZCgyKX0sIHo9JHtidWxsZXRQb3Muei50b0ZpeGVkKDIpfWApO1xuICAgICAgICB0aHJvdHRsZWRMb2coXCJQaHlzaWNzXCIsIGAgINCg0LDRgdGB0YLQvtGP0L3QuNC1INCe0YHQvdC+0LLQvdC+0LktQW1tbzogJHtkaXN0TWFpblRvQW1tby50b0ZpeGVkKDMpfWApO1xuICAgICAgICB0aHJvdHRsZWRMb2coXCJQaHlzaWNzXCIsIGAgINCg0LDRgdGB0YLQvtGP0L3QuNC1INCe0YHQvdC+0LLQvdC+0LktQnVsbGV0OiAke2Rpc3RNYWluVG9CdWxsZXQudG9GaXhlZCgzKX1gKTtcbiAgICAgICAgdGhyb3R0bGVkTG9nKFwiUGh5c2ljc1wiLCBgICDQoNCw0YHRgdGC0L7Rj9C90LjQtSBBbW1vLUJ1bGxldDogJHtkaXN0QW1tb0J1bGxldC50b0ZpeGVkKDMpfWApO1xuICAgICAgICBcbiAgICAgICAgLy8g0JLQuNC30YPQsNC70YzQvdC+0LUg0L7RgtC+0LHRgNCw0LbQtdC90LjQtSDRgNCw0YHRhdC+0LbQtNC10L3QuNC5XG4gICAgICAgIGlmIChkaXN0TWFpblRvQW1tbyA+IERFQURfWk9ORSkge1xuICAgICAgICAgICAgdGhyb3R0bGVkTG9nKFwiV2FybmluZ1wiLCBgICBbIV0g0J7RgdC90L7QstC90L7QuSDRiNCw0YAg0YDQsNGB0YXQvtC00LjRgtGB0Y8g0YEgQW1tbyDQvdCwICR7ZGlzdE1haW5Ub0FtbW8udG9GaXhlZCgzKX0gKD4gJHtERUFEX1pPTkV9KWApO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoZGlzdE1haW5Ub0J1bGxldCA+IERFQURfWk9ORSkge1xuICAgICAgICAgICAgdGhyb3R0bGVkTG9nKFwiV2FybmluZ1wiLCBgICBbIV0g0J7RgdC90L7QstC90L7QuSDRiNCw0YAg0YDQsNGB0YXQvtC00LjRgtGB0Y8g0YEgQnVsbGV0INC90LAgJHtkaXN0TWFpblRvQnVsbGV0LnRvRml4ZWQoMyl9ICg+ICR7REVBRF9aT05FfSlgKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGRpc3RBbW1vQnVsbGV0ID4gREVBRF9aT05FKSB7XG4gICAgICAgICAgICB0aHJvdHRsZWRMb2coXCJXYXJuaW5nXCIsIGAgIFshXSBBbW1vINGA0LDRgdGF0L7QtNC40YLRgdGPINGBIEJ1bGxldCDQvdCwICR7ZGlzdEFtbW9CdWxsZXQudG9GaXhlZCgzKX0gKD4gJHtERUFEX1pPTkV9KWApO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0LLRgNC10LzRjyDQv9C+0YHQu9C10LTQvdC10LPQviDQu9C+0LPQsFxuICAgICAgICB3aW5kb3cubGFzdERpdmVyZ2VuY2VMb2cgPSBEYXRlLm5vdygpO1xuICAgIH1cbiAgICBcbiAgICAvLyDQoNC40YHRg9C10Lwg0LvQuNC90LjQuCDQvNC10LbQtNGDINC+0LHRitC10LrRgtCw0LzQuCDQtNC70Y8g0LLQuNC30YPQsNC70LjQt9Cw0YbQuNC4INGA0LDRgdGF0L7QttC00LXQvdC40LlcbiAgICB2aXN1YWxpemVEaXZlcmdlbmNlTGluZXMob2JqZWN0cywgbWFpblBvcywgYW1tb1BvcywgYnVsbGV0UG9zKTtcbn1cblxuLy8g0KTRg9C90LrRhtC40Y8g0LTQu9GPINGA0LjRgdC+0LLQsNC90LjRjyDQu9C40L3QuNC5LCDQv9C+0LrQsNC30YvQstCw0Y7RidC40YUg0YDQsNGB0YXQvtC20LTQtdC90LjRj1xuZnVuY3Rpb24gdmlzdWFsaXplRGl2ZXJnZW5jZUxpbmVzKG9iamVjdHMsIG1haW5Qb3MsIGFtbW9Qb3MsIGJ1bGxldFBvcykge1xuICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCDQvdCw0LvQuNGH0LjQtSDQu9C40L3QuNC5INCyINC+0LHRitC10LrRgtCw0YVcbiAgICBpZiAoIW9iamVjdHMuZGl2ZXJnZW5jZUxpbmVzKSB7XG4gICAgICAgIC8vINCh0L7Qt9C00LDQtdC8INC80LDRgtC10YDQuNCw0LvRiyDQtNC70Y8g0LvQuNC90LjQuVxuICAgICAgICBjb25zdCBtYWluVG9BbW1vTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogMHhmZjAwMDAgfSk7IC8vINC60YDQsNGB0L3Ri9C5XG4gICAgICAgIGNvbnN0IG1haW5Ub0J1bGxldE1hdGVyaWFsID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHsgY29sb3I6IDB4MDBmZjAwIH0pOyAvLyDQt9C10LvQtdC90YvQuVxuICAgICAgICBjb25zdCBhbW1vQnVsbGV0TWF0ZXJpYWwgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogMHgwMDAwZmYgfSk7IC8vINGB0LjQvdC40LlcbiAgICAgICAgXG4gICAgICAgIC8vINCh0L7Qt9C00LDQtdC8INCz0LXQvtC80LXRgtGA0LjQuCDQuCDQu9C40L3QuNC4XG4gICAgICAgIGNvbnN0IG1haW5Ub0FtbW9HZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuICAgICAgICBjb25zdCBtYWluVG9CdWxsZXRHZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuICAgICAgICBjb25zdCBhbW1vQnVsbGV0R2VvbWV0cnkgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG1haW5Ub0FtbW9MaW5lID0gbmV3IFRIUkVFLkxpbmUobWFpblRvQW1tb0dlb21ldHJ5LCBtYWluVG9BbW1vTWF0ZXJpYWwpO1xuICAgICAgICBjb25zdCBtYWluVG9CdWxsZXRMaW5lID0gbmV3IFRIUkVFLkxpbmUobWFpblRvQnVsbGV0R2VvbWV0cnksIG1haW5Ub0J1bGxldE1hdGVyaWFsKTtcbiAgICAgICAgY29uc3QgYW1tb0J1bGxldExpbmUgPSBuZXcgVEhSRUUuTGluZShhbW1vQnVsbGV0R2VvbWV0cnksIGFtbW9CdWxsZXRNYXRlcmlhbCk7XG4gICAgICAgIFxuICAgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0LvQuNC90LjQuCDQvdCwINGB0YbQtdC90YNcbiAgICAgICAgaWYgKG9iamVjdHMubWFpblBsYXllcjEgJiYgb2JqZWN0cy5tYWluUGxheWVyMS5tZXNoLnBhcmVudCkge1xuICAgICAgICAgICAgY29uc3Qgc2NlbmUgPSBvYmplY3RzLm1haW5QbGF5ZXIxLm1lc2gucGFyZW50O1xuICAgICAgICAgICAgc2NlbmUuYWRkKG1haW5Ub0FtbW9MaW5lKTtcbiAgICAgICAgICAgIHNjZW5lLmFkZChtYWluVG9CdWxsZXRMaW5lKTtcbiAgICAgICAgICAgIHNjZW5lLmFkZChhbW1vQnVsbGV0TGluZSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vINCh0L7RhdGA0LDQvdGP0LXQvCDQu9C40L3QuNC4INCyINC+0LHRitC10LrRgtGLXG4gICAgICAgIG9iamVjdHMuZGl2ZXJnZW5jZUxpbmVzID0ge1xuICAgICAgICAgICAgbWFpblRvQW1tbzoge1xuICAgICAgICAgICAgICAgIGxpbmU6IG1haW5Ub0FtbW9MaW5lLFxuICAgICAgICAgICAgICAgIGdlb21ldHJ5OiBtYWluVG9BbW1vR2VvbWV0cnlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYWluVG9CdWxsZXQ6IHtcbiAgICAgICAgICAgICAgICBsaW5lOiBtYWluVG9CdWxsZXRMaW5lLFxuICAgICAgICAgICAgICAgIGdlb21ldHJ5OiBtYWluVG9CdWxsZXRHZW9tZXRyeVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFtbW9CdWxsZXQ6IHtcbiAgICAgICAgICAgICAgICBsaW5lOiBhbW1vQnVsbGV0TGluZSxcbiAgICAgICAgICAgICAgICBnZW9tZXRyeTogYW1tb0J1bGxldEdlb21ldHJ5XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIFxuICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQv9C+0LfQuNGG0LjQuCDQu9C40L3QuNC5XG4gICAgaWYgKG9iamVjdHMuZGl2ZXJnZW5jZUxpbmVzKSB7XG4gICAgICAgIC8vINCb0LjQvdC40Y8g0J7RgdC90L7QstC90L7QuS1BbW1vXG4gICAgICAgIHVwZGF0ZUxpbmUoXG4gICAgICAgICAgICBvYmplY3RzLmRpdmVyZ2VuY2VMaW5lcy5tYWluVG9BbW1vLmdlb21ldHJ5LFxuICAgICAgICAgICAgbWFpblBvcyxcbiAgICAgICAgICAgIGFtbW9Qb3NcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCb0LjQvdC40Y8g0J7RgdC90L7QstC90L7QuS1CdWxsZXRcbiAgICAgICAgdXBkYXRlTGluZShcbiAgICAgICAgICAgIG9iamVjdHMuZGl2ZXJnZW5jZUxpbmVzLm1haW5Ub0J1bGxldC5nZW9tZXRyeSxcbiAgICAgICAgICAgIG1haW5Qb3MsXG4gICAgICAgICAgICBidWxsZXRQb3NcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCb0LjQvdC40Y8gQW1tby1CdWxsZXRcbiAgICAgICAgdXBkYXRlTGluZShcbiAgICAgICAgICAgIG9iamVjdHMuZGl2ZXJnZW5jZUxpbmVzLmFtbW9CdWxsZXQuZ2VvbWV0cnksXG4gICAgICAgICAgICBhbW1vUG9zLFxuICAgICAgICAgICAgYnVsbGV0UG9zXG4gICAgICAgICk7XG4gICAgfVxufVxuXG4vLyDQpNGD0L3QutGG0LjRjyDQtNC70Y8g0L7QsdC90L7QstC70LXQvdC40Y8g0L/QvtC30LjRhtC40Lkg0LvQuNC90LjQuFxuZnVuY3Rpb24gdXBkYXRlTGluZShnZW9tZXRyeSwgc3RhcnRQb3MsIGVuZFBvcykge1xuICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgICBzdGFydFBvcy54LCBzdGFydFBvcy55LCBzdGFydFBvcy56LFxuICAgICAgICBlbmRQb3MueCwgZW5kUG9zLnksIGVuZFBvcy56XG4gICAgXSk7XG4gICAgXG4gICAgZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUocG9zaXRpb25zLCAzKSk7XG4gICAgZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5uZWVkc1VwZGF0ZSA9IHRydWU7XG59XG5cbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDQv9GA0LjQvNC10L3QtdC90LjRjyDQuNC80L/Rg9C70YzRgdCwINGBINGB0L7RhdGA0LDQvdC10L3QuNC10Lwg0LIg0LjRgdGC0L7RgNC40LhcbmV4cG9ydCBmdW5jdGlvbiBhcHBseUltcHVsc2VUb1NwaGVyZShjbWQsIGZvcmNlWCwgZm9yY2VZLCBmb3JjZVosIG9iamVjdHNMaXN0LCBjbGllbnRUaW1lKSB7XG4gICAgY29uc29sZS5sb2coXCJbRGVidWddINCf0LXRgNC10LTQsNC90L3Ri9C1INC+0LHRitC10LrRgtGLINCyIGFwcGx5SW1wdWxzZVRvU3BoZXJlOlwiLCBvYmplY3RzTGlzdCk7XG4gICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8LCDRh9GC0L4gb2JqZWN0cyDQv9C10YDQtdC00LDQvSDQuCDRj9Cy0LvRj9C10YLRgdGPINC+0LHRitC10LrRgtC+0LxcbiAgICBpZiAoIW9iamVjdHNMaXN0IHx8IHR5cGVvZiBvYmplY3RzTGlzdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIltQaHlzaWNzXSDQntGI0LjQsdC60LAg0LIgYXBwbHlJbXB1bHNlVG9TcGhlcmU6IG9iamVjdHMg0L3QtSDQvtC/0YDQtdC00LXQu9C10L3RiyDQuNC70Lgg0L3QtdC60L7RgNGA0LXQutGC0L3Ri1wiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAobGV0IGlkIGluIG9iamVjdHNMaXN0KSB7XG4gICAgICAgIGNvbnN0IG9iaiA9IG9iamVjdHNMaXN0W2lkXTtcbiAgICAgICAgXG4gICAgICAgIC8vINCf0YDQvtC/0YPRgdC60LDQtdC8INC+0LHRitC10LrRgtGLLCDQutC+0YLQvtGA0YvQtSDQvdC1INGP0LLQu9GP0Y7RgtGB0Y8g0YHRhNC10YDQsNC80Lgg0LjQu9C4INC90LUg0LjQvNC10Y7RgiDRhNC40LfQuNC60LhcbiAgICAgICAgaWYgKCFvYmogfHwgIW9iai5ib2R5IHx8ICFvYmoubWVzaCB8fCAhb2JqLm1lc2guZ2VvbWV0cnkgfHwgXG4gICAgICAgICAgICBvYmoubWVzaC5nZW9tZXRyeS50eXBlICE9PSBcIlNwaGVyZUdlb21ldHJ5XCIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyDQkNC60YLQuNCy0LjRgNGD0LXQvCDRgtC10LvQvlxuICAgICAgICBvYmouYm9keS5hY3RpdmF0ZSh0cnVlKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCf0YDQuNC80LXQvdGP0LXQvCDQuNC80L/Rg9C70YzRgSDQsiDQt9Cw0LLQuNGB0LjQvNC+0YHRgtC4INC+0YIg0LrQvtC80LDQvdC00Ysg0Lgg0YLQtdC60YPRidC10Lkg0YHQutC+0YDQvtGB0YLQuFxuICAgICAgICAvLyDQn9C+0LvRg9GH0LDQtdC8INGC0LXQutGD0YnRg9GOINGB0LrQvtGA0L7RgdGC0Ywg0LTQu9GPINGB0LPQu9Cw0LbQuNCy0LDQvdC40Y8g0YPRgdC40LvQuNGPXG4gICAgICAgIGNvbnN0IHZlbG9jaXR5ID0gb2JqLmJvZHkuZ2V0TGluZWFyVmVsb2NpdHkoKTtcbiAgICAgICAgY29uc3QgdnggPSB2ZWxvY2l0eS54KCk7XG4gICAgICAgIGNvbnN0IHZ5ID0gdmVsb2NpdHkueSgpO1xuICAgICAgICBjb25zdCB2eiA9IHZlbG9jaXR5LnooKTtcbiAgICAgICAgY29uc3QgY3VycmVudFNwZWVkID0gTWF0aC5zcXJ0KHZ4KnZ4ICsgdnkqdnkgKyB2eip2eik7XG4gICAgICAgIFxuICAgICAgICAvLyDQktGL0YfQuNGB0LvRj9C10Lwg0LzQvdC+0LbQuNGC0LXQu9GMINGB0LrQvtGA0L7RgdGC0LggLSDRh9C10Lwg0LHRi9GB0YLRgNC10LUg0LTQstC40LbQtdGC0YHRjyDQvtCx0YrQtdC60YIsXG4gICAgICAgIC8vINGC0LXQvCDQvNC10L3RjNGI0LUg0LTQvtC/0L7Qu9C90LjRgtC10LvRjNC90YvQuSDQuNC80L/Rg9C70YzRgSwg0YfRgtC+0LHRiyDQuNC30LHQtdC20LDRgtGMINGH0YDQtdC30LzQtdGA0L3Ri9GFINGB0LrQvtGA0L7RgdGC0LXQuVxuICAgICAgICBjb25zdCBzcGVlZEZhY3RvciA9IE1hdGgubWF4KDAuNSwgMS4wIC0gY3VycmVudFNwZWVkICogMC4wNSk7XG4gICAgICAgIFxuICAgICAgICAvLyDQn9GA0L7QstC10YDRj9C10LwsINC90LDRhdC+0LTQuNGC0YHRjyDQu9C4INC+0LHRitC10LrRgiDQvdCwINC30LXQvNC70LUgKNC/0YDQvtGB0YLQsNGPINC/0YDQvtCy0LXRgNC60LAg0L/QviBZLdGB0LrQvtGA0L7RgdGC0LgpXG4gICAgICAgIGNvbnN0IGlzR3JvdW5kZWQgPSBNYXRoLmFicyh2eSkgPCAwLjE7XG4gICAgICAgIFxuICAgICAgICAvLyDQkdCw0LfQvtCy0YvQtSDQt9C90LDRh9C10L3QuNGPINC40LzQv9GD0LvRjNGB0L7QslxuICAgICAgICBjb25zdCBiYXNlSW1wdWxzZUhvcml6b250YWwgPSA1LjA7XG4gICAgICAgIGNvbnN0IGJhc2VJbXB1bHNlVmVydGljYWwgPSAxMC4wO1xuICAgICAgICBcbiAgICAgICAgLy8g0KHQvtC30LTQsNC10Lwg0LjQvNC/0YPQu9GM0YEg0L3QsCDQvtGB0L3QvtCy0LUg0L/QtdGA0LXQtNCw0L3QvdGL0YUg0LfQvdCw0YfQtdC90LjQuVxuICAgICAgICBjb25zdCBpbXB1bHNlID0gbmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMyhcbiAgICAgICAgICAgIGZvcmNlWCAqIHNwZWVkRmFjdG9yLCBcbiAgICAgICAgICAgIGZvcmNlWSAqIChpc0dyb3VuZGVkID8gMS4wIDogMC4zKSAqIHNwZWVkRmFjdG9yLCBcbiAgICAgICAgICAgIGZvcmNlWiAqIHNwZWVkRmFjdG9yXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICAvLyDQkNC60YLQuNCy0LjRgNGD0LXQvCDRgtC10LvQviDQuCDQv9GA0LjQvNC10L3Rj9C10Lwg0LjQvNC/0YPQu9GM0YFcbiAgICAgICAgb2JqLmJvZHkuYWN0aXZhdGUodHJ1ZSk7XG4gICAgICAgIG9iai5ib2R5LmFwcGx5Q2VudHJhbEltcHVsc2UoaW1wdWxzZSk7XG4gICAgICAgIFxuICAgICAgICAvLyDQntGH0LjRidCw0LXQvCDQv9Cw0LzRj9GC0YxcbiAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveShpbXB1bHNlKTtcbiAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveSh2ZWxvY2l0eSk7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhcIltQaHlzaWNzXSDQn9GA0LjQvNC10L3QtdC9INC40LzQv9GD0LvRjNGBINC6INGI0LDRgNGDOlwiLCB7XG4gICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICDQutC+0LzQsNC90LTQsDogY21kLFxuICAgICAgICAgICAg0YHQutC+0YDQvtGB0YLRjDogY3VycmVudFNwZWVkLnRvRml4ZWQoMiksXG4gICAgICAgICAgICDQvNC90L7QttC40YLQtdC70Yw6IHNwZWVkRmFjdG9yLnRvRml4ZWQoMiksXG4gICAgICAgICAgICDQuNC80L/Rg9C70YzRgTogeyB4OiBmb3JjZVgsIHk6IGZvcmNlWSwgejogZm9yY2VaIH0sXG4gICAgICAgICAgICDQstGA0LXQvNGPX9C60LvQuNC10L3RgtCwOiBjbGllbnRUaW1lXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8g0KHQvtGF0YDQsNC90Y/QtdC8INC40L3RhNC+0YDQvNCw0YbQuNGOINC+INC/0L7RgdC70LXQtNC90LXQuSDQv9GA0LjQvNC10L3QtdC90L3QvtC5INC60L7QvNCw0L3QtNC1XG4gICAgICAgIG9iai5sYXN0SW1wdWxzZSA9IHtcbiAgICAgICAgICAgIGNtZDogY21kLFxuICAgICAgICAgICAgZm9yY2U6IHsgeDogZm9yY2VYLCB5OiBmb3JjZVksIHo6IGZvcmNlWiB9LFxuICAgICAgICAgICAgY2xpZW50VGltZTogY2xpZW50VGltZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBcbiAgICAvLyDQodC40L3RhdGA0L7QvdC40LfQuNGA0YPQtdC8INC00LjQsNCz0L3QvtGB0YLQuNGH0LXRgdC60LjQtSDRgdGE0LXRgNGLINC10YHQu9C4INC60L7QvNCw0L3QtNCwINC90LDQttCw0YLQsFxuICAgIGlmIChjbWQgJiYgb2JqZWN0c0xpc3RbXCJtYWluUGxheWVyMVwiXSAmJiBvYmplY3RzTGlzdFtcImFtbW9fc2hhZG93XCJdKSB7XG4gICAgICAgIHN5bmNEaWFnbm9zdGljU3BoZXJlcyhvYmplY3RzTGlzdCk7XG4gICAgfVxuICAgIFxuICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDQutC+0LzQsNC90LTRgyDQsiDQuNGB0YLQvtGA0LjRjiDQtNC70Y8gY2xpZW50LXNpZGUgcHJlZGljdGlvblxuICAgIGNvbnN0IHNlcXVlbmNlTnVtYmVyID0gKytsYXN0U2VxdWVuY2VOdW1iZXI7XG4gICAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICBcbiAgICBpbnB1dEhpc3RvcnkucHVzaCh7XG4gICAgICAgIHNlcXVlbmNlTnVtYmVyLFxuICAgICAgICB0aW1lc3RhbXAsXG4gICAgICAgIGNsaWVudFRpbWUsXG4gICAgICAgIGNtZCxcbiAgICAgICAgaW1wdWxzZTogeyB4OiBmb3JjZVgsIHk6IGZvcmNlWSwgejogZm9yY2VaIH1cbiAgICB9KTtcbiAgICBcbiAgICAvLyDQntGH0LjRidCw0LXQvCDQuNGB0YLQvtGA0LjRjiDRgdGC0LDRgNGI0LUgMiDRgdC10LrRg9C90LRcbiAgICBjb25zdCB0d29TZWNvbmRzQWdvID0gdGltZXN0YW1wIC0gMjAwMDtcbiAgICBpbnB1dEhpc3RvcnkgPSBpbnB1dEhpc3RvcnkuZmlsdGVyKGVudHJ5ID0+IGVudHJ5LnRpbWVzdGFtcCA+IHR3b1NlY29uZHNBZ28pO1xufVxuXG4vLyDQodC40L3RhdGA0L7QvdC40LfQsNGG0LjRjyDQtNC40LDQs9C90L7RgdGC0LjRh9C10YHQutC40YUg0YHRhNC10YAg0YEg0L7RgdC90L7QstC90L7QuSDRgdGE0LXRgNC+0LlcbmZ1bmN0aW9uIHN5bmNEaWFnbm9zdGljU3BoZXJlcyhvYmplY3RzKSB7XG4gICAgLy8g0J/QvtC70YPRh9Cw0LXQvCDQvtGB0L3QvtCy0L3Rg9GOINGB0YTQtdGA0YNcbiAgICBjb25zdCBtYWluU3BoZXJlID0gb2JqZWN0c1tcIm1haW5QbGF5ZXIxXCJdO1xuICAgIGlmICghbWFpblNwaGVyZSB8fCAhbWFpblNwaGVyZS5tZXNoKSByZXR1cm47XG4gICAgXG4gICAgY29uc3QgbWFpblBvcyA9IG1haW5TcGhlcmUubWVzaC5wb3NpdGlvbjtcbiAgICBcbiAgICAvLyDQodC40L3RhdGA0L7QvdC40LfQuNGA0YPQtdC8IGFtbW8t0YLQtdC90Ywg0YEg0L7RgdC90L7QstC90L7QuSDRgdGE0LXRgNC+0LlcbiAgICBpZiAob2JqZWN0c1tcImFtbW9fc2hhZG93XCJdICYmIG9iamVjdHNbXCJhbW1vX3NoYWRvd1wiXS5ib2R5KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiW1BoeXNpY3NdINCh0LjQvdGF0YDQvtC90LjQt9Cw0YbQuNGPIGFtbW8t0YLQtdC90Lgg0YEg0L7RgdC90L7QstC90L7QuSDRgdGE0LXRgNC+0LlcIik7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBhbW1vU2hhZG93ID0gb2JqZWN0c1tcImFtbW9fc2hhZG93XCJdO1xuICAgICAgICBcbiAgICAgICAgLy8g0KHQvtC30LTQsNC10Lwg0YLRgNCw0L3RgdGE0L7RgNC80LDRhtC40Y4g0YEg0L/QvtC30LjRhtC40LXQuSDQvtGB0L3QvtCy0L3QvtC5INGB0YTQtdGA0YtcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IHdpbmRvdy5BbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgICAgIHRyYW5zZm9ybS5zZXRJZGVudGl0eSgpO1xuICAgICAgICB0cmFuc2Zvcm0uc2V0T3JpZ2luKG5ldyB3aW5kb3cuQW1tby5idFZlY3RvcjMobWFpblBvcy54LCBtYWluUG9zLnksIG1haW5Qb3MueikpO1xuICAgICAgICBcbiAgICAgICAgLy8g0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10Lwg0YLRgNCw0L3RgdGE0L7RgNC80LDRhtC40Y5cbiAgICAgICAgYW1tb1NoYWRvdy5ib2R5LmdldE1vdGlvblN0YXRlKCkuc2V0V29ybGRUcmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCi0LDQutC20LUg0L/RgNC40LzQtdC90Y/QtdC8INGC0LDQutGD0Y4g0LbQtSDRgdC60L7RgNC+0YHRgtGMXG4gICAgICAgIGlmIChtYWluU3BoZXJlLmJvZHkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1haW5WZWxvY2l0eSA9IG1haW5TcGhlcmUuYm9keS5nZXRMaW5lYXJWZWxvY2l0eSgpO1xuICAgICAgICAgICAgY29uc3QgbWFpbkFuZ3VsYXJWZWxvY2l0eSA9IG1haW5TcGhlcmUuYm9keS5nZXRBbmd1bGFyVmVsb2NpdHkoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYW1tb1NoYWRvdy5ib2R5LnNldExpbmVhclZlbG9jaXR5KG1haW5WZWxvY2l0eSk7XG4gICAgICAgICAgICBhbW1vU2hhZG93LmJvZHkuc2V0QW5ndWxhclZlbG9jaXR5KG1haW5Bbmd1bGFyVmVsb2NpdHkpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyDQkNC60YLQuNCy0LjRgNGD0LXQvCDRgtC10LvQvlxuICAgICAgICBhbW1vU2hhZG93LmJvZHkuYWN0aXZhdGUodHJ1ZSk7XG4gICAgICAgIFxuICAgICAgICB3aW5kb3cuQW1tby5kZXN0cm95KHRyYW5zZm9ybSk7XG4gICAgfVxuICAgIFxuICAgIC8vINCh0LjQvdGF0YDQvtC90LjQt9C40YDRg9C10LwgYnVsbGV0LdGC0LXQvdGMINGBINC+0YHQvdC+0LLQvdC+0Lkg0YHRhNC10YDQvtC5ICjQv9GA0L7RgdGC0L4g0YPRgdGC0LDQvdCw0LLQu9C40LLQsNC10Lwgc2VydmVyUG9zKVxuICAgIGlmIChvYmplY3RzW1wiYnVsbGV0X3NoYWRvd1wiXSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIltQaHlzaWNzXSDQodC40L3RhdGA0L7QvdC40LfQsNGG0LjRjyBidWxsZXQt0YLQtdC90Lgg0YEg0L7RgdC90L7QstC90L7QuSDRgdGE0LXRgNC+0LlcIik7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBidWxsZXRTaGFkb3cgPSBvYmplY3RzW1wiYnVsbGV0X3NoYWRvd1wiXTtcbiAgICAgICAgYnVsbGV0U2hhZG93LnNlcnZlclBvcyA9IHtcbiAgICAgICAgICAgIHg6IG1haW5Qb3MueCxcbiAgICAgICAgICAgIHk6IG1haW5Qb3MueSxcbiAgICAgICAgICAgIHo6IG1haW5Qb3MuelxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY2VpdmVPYmplY3RVcGRhdGUoZGF0YSkge1xuICAgIGNvbnN0IGlkID0gZGF0YS5pZDtcbiAgICBcbiAgICBjb25zdCBvYmogPSBvYmplY3RzW2lkXTtcbiAgICBpZiAoIW9iaikge1xuICAgICAgICB0aHJvdHRsZWRMb2coXCJFcnJvclwiLCBg0J/QvtC70YPRh9C10L3QviDQvtCx0L3QvtCy0LvQtdC90LjQtSDQtNC70Y8g0L3QtdGB0YPRidC10YHRgtCy0YPRjtGJ0LXQs9C+INC+0LHRitC10LrRgtCwOiAke2lkfWApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCwg0Y/QstC70Y/QtdGC0YHRjyDQu9C4INC+0LHRitC10LrRgiDQvdC+0LLRi9C8XG4gICAgaWYgKCFvYmplY3RDcmVhdGlvblRpbWVzLmhhcyhpZCkpIHtcbiAgICAgICAgb2JqZWN0Q3JlYXRpb25UaW1lcy5zZXQoaWQsIERhdGUubm93KCkpO1xuICAgICAgICBjb25zb2xlLmxvZyhgW1BoeXNpY3NdINCj0YHRgtCw0L3QvtCy0LvQtdC9INGC0LDQudC80LXRgCDQtNC70Y8g0L3QvtCy0L7Qs9C+INC+0LHRitC10LrRgtCwICR7aWR9YCk7XG4gICAgfVxuICAgIFxuICAgIC8vINCf0L7Qu9GD0YfQsNC10Lwg0LLRgNC10LzQtdC90L3Rg9GOINC80LXRgtC60YMg0YHQtdGA0LLQtdGA0LBcbiAgICBjb25zdCBzZXJ2ZXJUaW1lID0gZGF0YS5zZXJ2ZXJfdGltZTtcbiAgICBpZiAoIXNlcnZlclRpbWUpIHtcbiAgICAgICAgdGhyb3R0bGVkTG9nKFwiV2FybmluZ1wiLCBg0J/QvtC70YPRh9C10L3QviDQvtCx0L3QvtCy0LvQtdC90LjQtSDQsdC10Lcg0LLRgNC10LzQtdC90L3QvtC5INC80LXRgtC60Lgg0YHQtdGA0LLQtdGA0LAg0LTQu9GPICR7aWR9YCk7XG4gICAgfVxuICAgIFxuICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQstGA0LXQvNGPINC/0L7RgdC70LXQtNC90LXQs9C+INC+0LHQvdC+0LLQu9C10L3QuNGPXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCB0aW1lU2luY2VMYXN0VXBkYXRlID0gbm93IC0gbGFzdFNlcnZlclVwZGF0ZVRpbWU7XG4gICAgbGFzdFNlcnZlclVwZGF0ZVRpbWUgPSBub3c7XG4gICAgXG4gICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INGB0LXRgNCy0LXRgNC90YPRjiDQv9C+0LfQuNGG0LjRjlxuICAgIGNvbnN0IG9sZFNlcnZlclBvcyA9IG9iai5zZXJ2ZXJQb3MgPyB7IC4uLm9iai5zZXJ2ZXJQb3MgfSA6IG51bGw7XG4gICAgb2JqLnNlcnZlclBvcyA9IHtcbiAgICAgICAgeDogZGF0YS54IHx8IDAsXG4gICAgICAgIHk6IGRhdGEueSB8fCAwLFxuICAgICAgICB6OiBkYXRhLnogfHwgMFxuICAgIH07XG4gICAgXG4gICAgLy8g0KHQvtGF0YDQsNC90Y/QtdC8INCy0YDQtdC80LXQvdC90YPRjiDQvNC10YLQutGDINGB0LXRgNCy0LXRgNCwINC00LvRjyDRjdGC0L7Qs9C+INC+0LHQvdC+0LLQu9C10L3QuNGPXG4gICAgb2JqLmxhc3RTZXJ2ZXJVcGRhdGUgPSB7XG4gICAgICAgIHRpbWU6IHNlcnZlclRpbWUsXG4gICAgICAgIGNsaWVudFRpbWU6IG5vdyxcbiAgICAgICAgcG9zaXRpb246IHsgLi4ub2JqLnNlcnZlclBvcyB9XG4gICAgfTtcbiAgICBcbiAgICAvLyDQldGB0LvQuCDRjdGC0L4g0L/QtdGA0LLQvtC1INC+0LHQvdC+0LLQu9C10L3QuNC1LCDQv9GA0L7RgdGC0L4g0L/RgNC40L3QuNC80LDQtdC8INGB0LXRgNCy0LXRgNC90YPRjiDQv9C+0LfQuNGG0LjRjlxuICAgIGlmICghb2xkU2VydmVyUG9zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgLy8g0KDQsNGB0YHRh9C40YLRi9Cy0LDQtdC8INGB0LrQvtGA0L7RgdGC0Ywg0YHQtdGA0LLQtdGA0LAsINGD0YfQuNGC0YvQstCw0Y8g0LLRgNC10LzQtdC90L3Ri9C1INC80LXRgtC60LhcbiAgICBpZiAob2JqLnByZXZpb3VzU2VydmVyVXBkYXRlICYmIHNlcnZlclRpbWUgJiYgb2JqLnByZXZpb3VzU2VydmVyVXBkYXRlLnRpbWUpIHtcbiAgICAgICAgY29uc3QgdGltZURlbHRhID0gKHNlcnZlclRpbWUgLSBvYmoucHJldmlvdXNTZXJ2ZXJVcGRhdGUudGltZSkgLyAxMDAwOyAvLyDQsiDRgdC10LrRg9C90LTQsNGFXG4gICAgICAgIFxuICAgICAgICBpZiAodGltZURlbHRhID4gMCkge1xuICAgICAgICAgICAgb2JqLnNlcnZlclZlbG9jaXR5ID0ge1xuICAgICAgICAgICAgICAgIHg6IChvYmouc2VydmVyUG9zLnggLSBvYmoucHJldmlvdXNTZXJ2ZXJVcGRhdGUucG9zaXRpb24ueCkgLyB0aW1lRGVsdGEsXG4gICAgICAgICAgICAgICAgeTogKG9iai5zZXJ2ZXJQb3MueSAtIG9iai5wcmV2aW91c1NlcnZlclVwZGF0ZS5wb3NpdGlvbi55KSAvIHRpbWVEZWx0YSxcbiAgICAgICAgICAgICAgICB6OiAob2JqLnNlcnZlclBvcy56IC0gb2JqLnByZXZpb3VzU2VydmVyVXBkYXRlLnBvc2l0aW9uLnopIC8gdGltZURlbHRhXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQm9C+0LPQuNGA0YPQtdC8INC40L3RhNC+0YDQvNCw0YbQuNGOINC+INGB0LrQvtGA0L7RgdGC0Lgg0YLQvtC70YzQutC+INC00LvRjyDQs9C70LDQstC90L7Qs9C+INC40LPRgNC+0LrQsFxuICAgICAgICAgICAgaWYgKGlkID09PSBcIm1haW5QbGF5ZXIxXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdHRsZWRMb2coXCJQaHlzaWNzXCIsIFxuICAgICAgICAgICAgICAgICAgICBg0JLRi9GH0LjRgdC70LXQvdCwINGB0LrQvtGA0L7RgdGC0Ywg0YHQtdGA0LLQtdGA0LAg0LTQu9GPICR7aWR9OiBgICtcbiAgICAgICAgICAgICAgICAgICAgYHZ4PSR7b2JqLnNlcnZlclZlbG9jaXR5LngudG9GaXhlZCgyKX0sIGAgK1xuICAgICAgICAgICAgICAgICAgICBgdnk9JHtvYmouc2VydmVyVmVsb2NpdHkueS50b0ZpeGVkKDIpfSwgYCArXG4gICAgICAgICAgICAgICAgICAgIGB2ej0ke29iai5zZXJ2ZXJWZWxvY2l0eS56LnRvRml4ZWQoMil9LCBgICtcbiAgICAgICAgICAgICAgICAgICAgYGRlbHRhPSR7dGltZURlbHRhLnRvRml4ZWQoMyl90YFgXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyDQodC+0YXRgNCw0L3Rj9C10Lwg0YLQtdC60YPRidC10LUg0L7QsdC90L7QstC70LXQvdC40LUg0LrQsNC6INC/0YDQtdC00YvQtNGD0YnQtdC1INC00LvRjyDRgdC70LXQtNGD0Y7RidC10LPQviDRgNCw0YHRh9C10YLQsFxuICAgIG9iai5wcmV2aW91c1NlcnZlclVwZGF0ZSA9IHtcbiAgICAgICAgdGltZTogc2VydmVyVGltZSxcbiAgICAgICAgY2xpZW50VGltZTogbm93LFxuICAgICAgICBwb3NpdGlvbjogeyAuLi5vYmouc2VydmVyUG9zIH1cbiAgICB9O1xuICAgIFxuICAgIC8vINCQ0L3QsNC70LjQt9C40YDRg9C10Lwg0YDQsNGB0YXQvtC20LTQtdC90LjQtSDQvNC10LbQtNGDINC/0YDQvtCz0L3QvtC30LjRgNGD0LXQvNGL0Lwg0Lgg0YTQsNC60YLQuNGH0LXRgdC60LjQvCDRgdC+0YHRgtC+0Y/QvdC40LXQvFxuICAgIGlmIChvYmoubGFzdEltcHVsc2UgJiYgc2VydmVyVGltZSkge1xuICAgICAgICAvLyDQktGL0YfQuNGB0LvRj9C10LwsINGB0LrQvtC70YzQutC+INCy0YDQtdC80LXQvdC4INC/0YDQvtGI0LvQviDRgSDQvNC+0LzQtdC90YLQsCDQv9GA0LjQvNC10L3QtdC90LjRjyDQv9C+0YHQu9C10LTQvdC10LPQviDQuNC80L/Rg9C70YzRgdCwXG4gICAgICAgIGNvbnN0IHRpbWVTaW5jZUxhc3RJbXB1bHNlID0gbm93IC0gb2JqLmxhc3RJbXB1bHNlLmNsaWVudFRpbWU7XG4gICAgICAgIFxuICAgICAgICAvLyDQn9GA0L7QstC10YDRj9C10LwsINGD0YfRgtC10L0g0LvQuCDQvdCw0Ygg0L/QvtGB0LvQtdC00L3QuNC5INC40LzQv9GD0LvRjNGBINCyINC+0LHQvdC+0LLQu9C10L3QuNC4INGBINGB0LXRgNCy0LXRgNCwXG4gICAgICAgIC8vICjQvtCx0YvRh9C90L4g0YLRgNC10LHRg9C10YLRgdGPIFJUVCDQtNC70Y8g0L/QvtC70YPRh9C10L3QuNGPINGA0LXQsNC60YbQuNC4INGB0LXRgNCy0LXRgNCwKVxuICAgICAgICBpZiAodGltZVNpbmNlTGFzdEltcHVsc2UgPiA1MCkgeyAvLyDQn9GA0LXQtNC/0L7Qu9Cw0LPQsNC10Lwg0LzQuNC90LjQvNCw0LvRjNC90YPRjiDQt9Cw0LTQtdGA0LbQutGDINGB0LXRgtC4XG4gICAgICAgICAgICAvLyDQotC10L/QtdGA0Ywg0LzRiyDQvNC+0LbQtdC8INGB0YDQsNCy0L3QuNGC0Ywg0L3QsNGI0LUg0L/RgNC10LTRgdC60LDQt9Cw0L3QvdC+0LUg0L/QvtC70L7QttC10L3QuNC1INGBINGE0LDQutGC0LjRh9C10YHQutC40LxcbiAgICAgICAgICAgIC8vINC4INGB0LrQvtGA0YDQtdC60YLQuNGA0L7QstCw0YLRjCDQvdCw0YjRgyDQvNC+0LTQtdC70Ywg0L/RgNC10LTRgdC60LDQt9Cw0L3QuNGPXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCi0LXQutGD0YnQtdC1INGB0L7RgdGC0L7Rj9C90LjQtSDQvtCx0YrQtdC60YLQsCDQsiDQutC70LjQtdC90YLRgdC60L7QuSDRhNC40LfQuNC60LVcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyB3aW5kb3cuQW1tby5idFRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgaWYgKG9iai5ib2R5KSB7XG4gICAgICAgICAgICAgICAgb2JqLmJvZHkuZ2V0TW90aW9uU3RhdGUoKS5nZXRXb3JsZFRyYW5zZm9ybSh0cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRYID0gdHJhbnNmb3JtLmdldE9yaWdpbigpLngoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50WSA9IHRyYW5zZm9ybS5nZXRPcmlnaW4oKS55KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFogPSB0cmFuc2Zvcm0uZ2V0T3JpZ2luKCkueigpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vINCS0YvRh9C40YHQu9GP0LXQvCDRgNCw0YHRhdC+0LbQtNC10L3QuNC1INC80LXQttC00YMg0L3QsNGI0LjQvCDQv9GA0LXQtNGB0LrQsNC30LDQvdC40LXQvCDQuCDQvtCx0L3QvtCy0LvQtdC90LjQtdC8INGB0LXRgNCy0LXRgNCwXG4gICAgICAgICAgICAgICAgY29uc3QgZHggPSBvYmouc2VydmVyUG9zLnggLSBjdXJyZW50WDtcbiAgICAgICAgICAgICAgICBjb25zdCBkeSA9IG9iai5zZXJ2ZXJQb3MueSAtIGN1cnJlbnRZO1xuICAgICAgICAgICAgICAgIGNvbnN0IGR6ID0gb2JqLnNlcnZlclBvcy56IC0gY3VycmVudFo7XG4gICAgICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoZHgqZHggKyBkeSpkeSArIGR6KmR6KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoaWQgPT09IFwibWFpblBsYXllcjFcIiAmJiBkaXN0YW5jZSA+IDEuMCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdHRsZWRMb2coXCJQaHlzaWNzXCIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgYNCQ0L3QsNC70LjQtyDRgNCw0YHRhdC+0LbQtNC10L3QuNGPINC00LvRjyAke2lkfTog0YDQsNGB0YHRgtC+0Y/QvdC40LU9JHtkaXN0YW5jZS50b0ZpeGVkKDIpfSwgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBg0LLRgNC10LzRjyDRgSDQv9C+0YHQu9C10LTQvdC10LPQviDQuNC80L/Rg9C70YzRgdCwPSR7dGltZVNpbmNlTGFzdEltcHVsc2V90LzRgSwgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBg0LrQvtC80LDQvdC00LA9JHtvYmoubGFzdEltcHVsc2UuY21kfWBcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveSh0cmFuc2Zvcm0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyDQndC+0LLQsNGPINGE0YPQvdC60YbQuNGPINC00LvRjyDRgdC+0LfQtNCw0L3QuNGPINC00LjQsNCz0L3QvtGB0YLQuNGH0LXRgdC60LjRhSDRgdGE0LXRgFxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURpYWdub3N0aWNTY2VuZShzY2VuZSkge1xuICAgIGNvbnNvbGUubG9nKFwiW1BoeXNpY3NdINCh0L7Qt9C00LDQvdC40LUg0LTQuNCw0LPQvdC+0YHRgtC40YfQtdGB0LrQvtC5INGB0YbQtdC90YtcIik7XG5cbiAgICAvLyDQodC+0LfQtNCw0LXQvCDRgtC10L3QtdCy0YPRjiDRgdGE0LXRgNGDINGC0L7Qu9GM0LrQviDRgSBBbW1vLdGE0LjQt9C40LrQvtC5INC00LvRjyDRgdGA0LDQstC90LXQvdC40Y8g0YEg0YHQtdGA0LLQtdGA0L7QvFxuICAgIGNyZWF0ZURpYWdub3N0aWNTcGhlcmUoc2NlbmUsIFwiYW1tb19zaGFkb3dcIiwgMCwgNjAsIDAsIDB4MDBmZjAwLCBcImFtbW9cIik7XG4gICAgXG4gICAgLy8g0KHQvtC30LTQsNC10Lwg0YLQtdC90LXQstGD0Y4g0YHRhNC10YDRgyDRgSDRgtCw0LrQuNC80Lgg0LbQtSDQvdCw0YfQsNC70YzQvdGL0LzQuCDRg9GB0LvQvtCy0LjRj9C80Lgg0LrQsNC6INGDINGB0LXRgNCy0LXRgNC90L7QuVxuICAgIC8vINC90L4g0YEg0LTRgNGD0LPQuNC8INC80LXQvdC10LTQttC80LXQvdGC0L7QvCDRhNC40LfQuNC60LhcbiAgICBjcmVhdGVEaWFnbm9zdGljU3BoZXJlKHNjZW5lLCBcImJ1bGxldF9zaGFkb3dcIiwgMywgNjAsIDAsIDB4MDAwMGZmLCBcImJ1bGxldFwiKTtcbiAgICBcbiAgICBjb25zb2xlLmxvZyhcIltQaHlzaWNzXSDQlNC40LDQs9C90L7RgdGC0LjRh9C10YHQutCw0Y8g0YHRhtC10L3QsCDRgdC+0LfQtNCw0L3QsFwiKTtcbn1cblxuLy8g0JLRgdC/0L7QvNC+0LPQsNGC0LXQu9GM0L3QsNGPINGE0YPQvdC60YbQuNGPINC00LvRjyDRgdC+0LfQtNCw0L3QuNGPINC00LjQsNCz0L3QvtGB0YLQuNGH0LXRgdC60L7QuSDRgdGE0LXRgNGLXG5mdW5jdGlvbiBjcmVhdGVEaWFnbm9zdGljU3BoZXJlKHNjZW5lLCBpZCwgeCwgeSwgeiwgY29sb3IsIHBoeXNpY3NCeSkge1xuICAgIGNvbnNvbGUubG9nKGBbUGh5c2ljc10g0KHQvtC30LTQsNC90LjQtSDQtNC40LDQs9C90L7RgdGC0LjRh9C10YHQutC+0Lkg0YHRhNC10YDRiyAke2lkfWApO1xuICAgIFxuICAgIC8vINCh0L7Qt9C00LDQtdC8INGB0YTQtdGA0YNcbiAgICBjb25zdCByYWRpdXMgPSAxO1xuICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KHJhZGl1cywgMzIsIDMyKTtcbiAgICBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7IFxuICAgICAgICBjb2xvcjogY29sb3IsXG4gICAgICAgIHNoaW5pbmVzczogMzAsXG4gICAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgICAgICBvcGFjaXR5OiAwLjggLy8g0JTQtdC70LDQtdC8INC/0L7Qu9GD0L/RgNC+0LfRgNCw0YfQvdC+0Lkg0LTQu9GPINC70YPRh9GI0LXQuSDQstC40LTQuNC80L7RgdGC0LhcbiAgICB9KTtcbiAgICBcbiAgICBjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICBtZXNoLnBvc2l0aW9uLnNldCh4LCB5LCB6KTtcbiAgICBcbiAgICAvLyDQktC60LvRjtGH0LDQtdC8INGC0LXQvdC4XG4gICAgbWVzaC5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICBtZXNoLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuICAgIFxuICAgIHNjZW5lLmFkZChtZXNoKTtcbiAgICBjb25zb2xlLmxvZyhgW1BoeXNpY3NdINCU0LjQsNCz0L3QvtGB0YLQuNGH0LXRgdC60LDRjyDRgdGE0LXRgNCwICR7aWR9INC00L7QsdCw0LLQu9C10L3QsCDQvdCwINGB0YbQtdC90YNgKTtcbiAgICBcbiAgICAvLyDQodC+0LfQtNCw0LXQvCDRhNC40LfQuNGH0LXRgdC60L7QtSDRgtC10LvQvlxuICAgIGxldCBib2R5ID0gbnVsbDtcbiAgICBcbiAgICBpZiAocGh5c2ljc0J5ID09PSBcImFtbW9cIiAmJiBsb2NhbFBoeXNpY3NXb3JsZCkge1xuICAgICAgICAvLyDQodC+0LfQtNCw0LXQvCDRhNC40LfQuNGH0LXRgdC60L7QtSDRgtC10LvQviDQtNC70Y8gQW1tby3RhNC40LfQuNC60LhcbiAgICAgICAgY29uc3Qgc2hhcGUgPSBuZXcgd2luZG93LkFtbW8uYnRTcGhlcmVTaGFwZShyYWRpdXMpO1xuICAgICAgICBjb25zdCBtYXNzID0gMTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyB3aW5kb3cuQW1tby5idFRyYW5zZm9ybSgpO1xuICAgICAgICB0cmFuc2Zvcm0uc2V0SWRlbnRpdHkoKTtcbiAgICAgICAgdHJhbnNmb3JtLnNldE9yaWdpbihuZXcgd2luZG93LkFtbW8uYnRWZWN0b3IzKHgsIHksIHopKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGxvY2FsSW5lcnRpYSA9IG5ldyB3aW5kb3cuQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgICAgIHNoYXBlLmNhbGN1bGF0ZUxvY2FsSW5lcnRpYShtYXNzLCBsb2NhbEluZXJ0aWEpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbW90aW9uU3RhdGUgPSBuZXcgd2luZG93LkFtbW8uYnREZWZhdWx0TW90aW9uU3RhdGUodHJhbnNmb3JtKTtcbiAgICAgICAgY29uc3QgcmJJbmZvID0gbmV3IHdpbmRvdy5BbW1vLmJ0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mbyhtYXNzLCBtb3Rpb25TdGF0ZSwgc2hhcGUsIGxvY2FsSW5lcnRpYSk7XG4gICAgICAgIGJvZHkgPSBuZXcgd2luZG93LkFtbW8uYnRSaWdpZEJvZHkocmJJbmZvKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCd0LDRgdGC0YDQsNC40LLQsNC10Lwg0YTQuNC30LjRh9C10YHQutC40LUg0YHQstC+0LnRgdGC0LLQsFxuICAgICAgICBib2R5LnNldEFjdGl2YXRpb25TdGF0ZSg0KTsgLy8gRElTQUJMRV9ERUFDVElWQVRJT05cbiAgICAgICAgYm9keS5zZXRGcmljdGlvbigwLjUpO1xuICAgICAgICBib2R5LnNldFJvbGxpbmdGcmljdGlvbigwLjEpO1xuICAgICAgICBib2R5LnNldFJlc3RpdHV0aW9uKDAuMik7IC8vINCj0L/RgNGD0LPQvtGB0YLRjCAo0YPQvNC10L3RjNGI0LXQvdCwINC00LvRjyDRgdGC0LDQsdC40LvRjNC90L7RgdGC0LgpXG4gICAgICAgIGJvZHkuc2V0RGFtcGluZygwLjAxLCAwLjAxKTsgLy8g0J3QtdCx0L7Qu9GM0YjQvtC1INC30LDRgtGD0YXQsNC90LjQtVxuICAgICAgICBcbiAgICAgICAgLy8g0JLQutC70Y7Rh9Cw0LXQvCBDQ0Qg0LTQu9GPINC/0YDQtdC00L7RgtCy0YDQsNGJ0LXQvdC40Y8g0L/RgNC+0LLQsNC70LjQstCw0L3QuNGPINC90LAg0LzQtdC90YzRiNC10Lwg0LzQsNGB0YjRgtCw0LHQtVxuICAgICAgICBib2R5LnNldENjZE1vdGlvblRocmVzaG9sZChyYWRpdXMgKiAwLjgpOyBcbiAgICAgICAgYm9keS5zZXRDY2RTd2VwdFNwaGVyZVJhZGl1cyhyYWRpdXMgKiAwLjcpO1xuICAgICAgICBcbiAgICAgICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INGC0LXQu9C+INCyINGE0LjQt9C40YfQtdGB0LrQuNC5INC80LjRgFxuICAgICAgICBsb2NhbFBoeXNpY3NXb3JsZC5hZGRSaWdpZEJvZHkoYm9keSk7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhgW1BoeXNpY3NdINCk0LjQt9C40YfQtdGB0LrQvtC1INGC0LXQu9C+INC00LvRjyDQtNC40LDQs9C90L7RgdGC0LjRh9C10YHQutC+0Lkg0YHRhNC10YDRiyAke2lkfSDRgdC+0LfQtNCw0L3QviDRgSBDQ0RgKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCe0YfQuNGB0YLQutCwINC/0LDQvNGP0YLQuFxuICAgICAgICB3aW5kb3cuQW1tby5kZXN0cm95KHJiSW5mbyk7XG4gICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3kobG9jYWxJbmVydGlhKTtcbiAgICB9XG4gICAgXG4gICAgLy8g0KHQvtGF0YDQsNC90Y/QtdC8INC+0LHRitC10LrRglxuICAgIGNvbnN0IGRpYWdub3N0aWNPYmplY3QgPSB7XG4gICAgICAgIGlkLFxuICAgICAgICBtZXNoLFxuICAgICAgICBib2R5LFxuICAgICAgICBvYmplY3RfdHlwZTogXCJkaWFnbm9zdGljX3NwaGVyZVwiLFxuICAgICAgICBwaHlzaWNzQnk6IHBoeXNpY3NCeSxcbiAgICAgICAgLy8g0JTQu9GPINGB0YTQtdGAINGBIGJ1bGxldC3RhNC40LfQuNC60L7QuSDRg9GB0YLQsNC90LDQstC70LjQstCw0LXQvCDQvdCw0YfQsNC70YzQvdGD0Y4g0YHQtdGA0LLQtdGA0L3Rg9GOINC/0L7Qt9C40YbQuNGOXG4gICAgICAgIHNlcnZlclBvczogcGh5c2ljc0J5ID09PSBcImJ1bGxldFwiID8geyB4LCB5LCB6IH0gOiBudWxsXG4gICAgfTtcbiAgICBcbiAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0LIg0L7QsdGJ0LjQuSDRgdC70L7QstCw0YDRjCDQvtCx0YrQtdC60YLQvtCyXG4gICAgb2JqZWN0c1tpZF0gPSBkaWFnbm9zdGljT2JqZWN0O1xuICAgIFxuICAgIGNvbnNvbGUubG9nKGBbUGh5c2ljc10g0JTQuNCw0LPQvdC+0YHRgtC40YfQtdGB0LrQsNGPINGB0YTQtdGA0LAgJHtpZH0g0YHQvtC30LTQsNC90LAg0YEg0YLQuNC/0L7QvCAke3BoeXNpY3NCeX1gKTtcbiAgICByZXR1cm4gZGlhZ25vc3RpY09iamVjdDtcbn0iLCIvLyBjYW1lcmEuanNcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7IG9iamVjdHMgfSBmcm9tICcuL29iamVjdHMnO1xuaW1wb3J0IHsgc2NlbmUgfSBmcm9tICcuL3NjZW5lJztcblxuLy8g0J7QsdGK0Y/QstC70Y/QtdC8INC60LDQvNC10YDRg1xuZXhwb3J0IGxldCBjYW1lcmE7XG5cbi8vINCd0LDRgdGC0YDQvtC50LrQuCDQutCw0LzQtdGA0YtcbmNvbnN0IENBTUVSQV9IRUlHSFQgPSA1MDsgLy8g0JLRi9GB0L7RgtCwINC60LDQvNC10YDRiyDQvdCw0LQg0L7QsdGK0LXQutGC0L7QvFxuY29uc3QgQ0FNRVJBX0RJU1RBTkNFID0gMTAwOyAvLyDQoNCw0YHRgdGC0L7Rj9C90LjQtSDQutCw0LzQtdGA0Ysg0L7RgiDQvtCx0YrQtdC60YLQsFxuY29uc3QgU01PT1RIX0ZBQ1RPUiA9IDAuMDU7IC8vINCa0L7RjdGE0YTQuNGG0LjQtdC90YIg0LjQvdGC0LXRgNC/0L7Qu9GP0YbQuNC4INC00LvRjyDQv9C70LDQstC90L7Qs9C+INC00LLQuNC20LXQvdC40Y9cbmNvbnN0IFBMQVlFUl9JRCA9IFwibWFpblBsYXllcjFcIjsgLy8g0JbQtdGB0YLQutC+INC30LDQutGA0LXQv9C70Y/QtdC8IElEINC40LPRgNC+0LrQsFxuXG4vLyDQodC+0YXRgNCw0L3Rj9C10Lwg0L/QvtGB0LvQtdC00L3RjtGOINC40LfQstC10YHRgtC90YPRjiDQv9C+0LfQuNGG0LjRjiDQuNCz0YDQvtC60LBcbmxldCBsYXN0S25vd25Qb3NpdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIDApO1xubGV0IGNhbWVyYVRhcmdldCA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7IC8vINCf0YDQvtC80LXQttGD0YLQvtGH0L3QsNGPINGC0L7Rh9C60LAg0LTQu9GPINGB0LPQu9Cw0LbQuNCy0LDQvdC40Y9cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRDYW1lcmEoKSB7XG4gICAgLy8g0KHQvtC30LTQsNC10Lwg0LrQsNC80LXRgNGDXG4gICAgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKFxuICAgICAgICA2MCxcbiAgICAgICAgd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICAgIDAuMixcbiAgICAgICAgMjAwMFxuICAgICk7XG4gICAgXG4gICAgLy8g0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10Lwg0L3QsNGH0LDQu9GM0L3Rg9GOINC/0L7Qt9C40YbQuNGOXG4gICAgY2FtZXJhLnBvc2l0aW9uLnNldCgwLCBDQU1FUkFfSEVJR0hULCBDQU1FUkFfRElTVEFOQ0UpO1xuICAgIGNhbWVyYS5sb29rQXQoMCwgMCwgMCk7XG4gICAgXG4gICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC+0LHRgNCw0LHQvtGC0YfQuNC6INC40LfQvNC10L3QtdC90LjRjyDRgNCw0LfQvNC10YDQsCDQvtC60L3QsFxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSk7XG4gICAgXG4gICAgY29uc29sZS5sb2coXCJbQ2FtZXJhXSDQmtCw0LzQtdGA0LAg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC90LBcIik7XG4gICAgcmV0dXJuIGNhbWVyYTtcbn1cblxuZnVuY3Rpb24gb25XaW5kb3dSZXNpemUoKSB7XG4gICAgaWYgKCFjYW1lcmEpIHJldHVybjtcbiAgICBjYW1lcmEuYXNwZWN0ID0gd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUNhbWVyYSgpIHtcbiAgICBpZiAoIWNhbWVyYSkgcmV0dXJuO1xuICAgIFxuICAgIC8vINCY0YnQtdC8INC+0YHQvdC+0LLQvdC+0LPQviDQuNCz0YDQvtC60LBcbiAgICBjb25zdCBwbGF5ZXIgPSBvYmplY3RzW1BMQVlFUl9JRF07XG4gICAgXG4gICAgLy8g0JXRgdC70Lgg0LjQs9GA0L7QuiDQvdCw0LnQtNC10L0g0Lgg0LjQvNC10LXRgiDQv9C+0LfQuNGG0LjRjiwg0L7QsdC90L7QstC70Y/QtdC8INC60LDQvNC10YDRg1xuICAgIGlmIChwbGF5ZXIgJiYgcGxheWVyLm1lc2gpIHtcbiAgICAgICAgLy8g0KHQvtGF0YDQsNC90Y/QtdC8INC/0L7RgdC70LXQtNC90Y7RjiDQuNC30LLQtdGB0YLQvdGD0Y4g0L/QvtC30LjRhtC40Y5cbiAgICAgICAgbGFzdEtub3duUG9zaXRpb24uY29weShwbGF5ZXIubWVzaC5wb3NpdGlvbik7XG4gICAgfVxuICAgIFxuICAgIC8vINCh0L7Qt9C00LDQtdC8INCy0LXQutGC0L7RgCDRgdC80LXRidC10L3QuNGPINC00LvRjyDQv9C+0LfQuNGG0LjQuCDQutCw0LzQtdGA0YtcbiAgICBjb25zdCBvZmZzZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygwLCBDQU1FUkFfSEVJR0hULCBDQU1FUkFfRElTVEFOQ0UpO1xuICAgIFxuICAgIC8vINCm0LXQu9C10LLQsNGPINC/0L7Qt9C40YbQuNGPIC0g0Y3RgtC+INC/0L7Qt9C40YbQuNGPINC40LPRgNC+0LrQsCArINGB0LzQtdGJ0LXQvdC40LVcbiAgICBjb25zdCB0YXJnZXRQb3NpdGlvbiA9IGxhc3RLbm93blBvc2l0aW9uLmNsb25lKCkuYWRkKG9mZnNldCk7XG4gICAgXG4gICAgLy8g0JjQvdGC0LXRgNC/0L7Qu9C40YDRg9C10Lwg0L/RgNC+0LzQtdC20YPRgtC+0YfQvdGD0Y4g0YLQvtGH0LrRgyDQtNC70Y8g0YHQs9C70LDQttC40LLQsNC90LjRj1xuICAgIGNhbWVyYVRhcmdldC5sZXJwKHRhcmdldFBvc2l0aW9uLCBTTU9PVEhfRkFDVE9SKTtcbiAgICBcbiAgICAvLyDQn9C70LDQstC90L4g0L/QtdGA0LXQvNC10YnQsNC10Lwg0LrQsNC80LXRgNGDINCyINGG0LXQu9C10LLRg9GOINC/0L7Qt9C40YbQuNGOXG4gICAgY2FtZXJhLnBvc2l0aW9uLmxlcnAoY2FtZXJhVGFyZ2V0LCBTTU9PVEhfRkFDVE9SKTtcbiAgICBcbiAgICAvLyDQmtCw0LzQtdGA0LAg0LLRgdC10LPQtNCwINGB0LzQvtGC0YDQuNGCINC90LAg0L/QvtC30LjRhtC40Y4g0LjQs9GA0L7QutCwXG4gICAgY2FtZXJhLmxvb2tBdChsYXN0S25vd25Qb3NpdGlvbik7XG59XG5cbi8vIERlYnVnLdGE0YPQvdC60YbQuNGPINC00LvRjyDQstGL0LLQvtC00LAg0LjQvdGE0L7RgNC80LDRhtC40Lgg0L4g0LrQsNC80LXRgNC1XG5leHBvcnQgZnVuY3Rpb24gbG9nQ2FtZXJhU3RhdHVzKCkge1xuICAgIGlmICghY2FtZXJhKSByZXR1cm47XG4gICAgXG4gICAgY29uc29sZS5sb2coYFtDYW1lcmFdIFBvc2l0aW9uOiAoJHtjYW1lcmEucG9zaXRpb24ueC50b0ZpeGVkKDIpfSwgJHtjYW1lcmEucG9zaXRpb24ueS50b0ZpeGVkKDIpfSwgJHtjYW1lcmEucG9zaXRpb24uei50b0ZpeGVkKDIpfSlgKTtcbiAgICBjb25zb2xlLmxvZyhgW0NhbWVyYV0gTG9va2luZyBhdDogKCR7bGFzdEtub3duUG9zaXRpb24ueC50b0ZpeGVkKDIpfSwgJHtsYXN0S25vd25Qb3NpdGlvbi55LnRvRml4ZWQoMil9LCAke2xhc3RLbm93blBvc2l0aW9uLnoudG9GaXhlZCgyKX0pYCk7XG4gICAgXG4gICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8INC90LDQu9C40YfQuNC1INC40LPRgNC+0LrQsFxuICAgIGNvbnN0IHBsYXllciA9IG9iamVjdHNbUExBWUVSX0lEXTtcbiAgICBpZiAocGxheWVyICYmIHBsYXllci5tZXNoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbQ2FtZXJhXSBQbGF5ZXIgZm91bmQgYXQ6ICgke3BsYXllci5tZXNoLnBvc2l0aW9uLngudG9GaXhlZCgyKX0sICR7cGxheWVyLm1lc2gucG9zaXRpb24ueS50b0ZpeGVkKDIpfSwgJHtwbGF5ZXIubWVzaC5wb3NpdGlvbi56LnRvRml4ZWQoMil9KWApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbQ2FtZXJhXSBQbGF5ZXIgd2l0aCBJRCBcIiR7UExBWUVSX0lEfVwiIG5vdCBmb3VuZCFgKTtcbiAgICB9XG59ICIsIi8vIGluZGV4LmpzXG5pbXBvcnQgeyBpbml0U2NlbmUsIHNjZW5lLCByZW5kZXJlciwgdXBkYXRlU2hhZG93Q2FtZXJhIH0gZnJvbSAnLi9zY2VuZSc7XG5pbXBvcnQgeyBpbml0QW1tbywgc3RlcFBoeXNpY3MsIHVwZGF0ZVBoeXNpY3NPYmplY3RzLCBhcHBseUltcHVsc2VUb1NwaGVyZSwgcmVjZWl2ZU9iamVjdFVwZGF0ZSwgY3JlYXRlRGlhZ25vc3RpY1NjZW5lIH0gZnJvbSAnLi9waHlzaWNzJztcbmltcG9ydCB7IGluaXROZXR3b3JrIH0gZnJvbSAnLi9uZXR3b3JrJztcbmltcG9ydCB7IG9iamVjdHMgfSBmcm9tICcuL29iamVjdHMnO1xuaW1wb3J0IHsgaW5pdENhbWVyYSwgY2FtZXJhLCB1cGRhdGVDYW1lcmEsIGxvZ0NhbWVyYVN0YXR1cyB9IGZyb20gJy4vY2FtZXJhJztcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuLy8g0JTQvtCx0LDQstC70Y/QtdC8INGE0LvQsNCzINC00LvRjyDQtNC40LDQs9C90L7RgdGC0LjRh9C10YHQutC+0LPQviDRgNC10LbQuNC80LBcbmxldCBkaWFnbm9zdGljTW9kZSA9IGZhbHNlO1xuLy8g0KHRh9C10YLRh9C40Log0LrQsNC00YDQvtCyINC00LvRjyDQu9C+0LPQuNGA0L7QstCw0L3QuNGPINC60LDQvNC10YDRiyAo0LrQsNC20LTRi9C1IDEwMCDQutCw0LTRgNC+0LIpXG5sZXQgZnJhbWVDb3VudGVyID0gMDtcblxuZnVuY3Rpb24gYW5pbWF0ZSgpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG5cbiAgICAvLyDQktGL0L/QvtC70L3Rj9C10Lwg0YjQsNCzINGE0LjQt9C40YfQtdGB0LrQvtC5INGB0LjQvNGD0LvRj9GG0LjQuCAo0L3QsNC/0YDQuNC80LXRgCwgMS82MCDRgdC10LrRg9C90LTRiylcbiAgICBzdGVwUGh5c2ljcygxIC8gNjApO1xuICAgIHVwZGF0ZVBoeXNpY3NPYmplY3RzKG9iamVjdHMpO1xuXG4gICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INC60LDQvNC10YDRgyDQuNC3INC90L7QstC+0LPQviDQvNC+0LTRg9C70Y9cbiAgICB1cGRhdGVDYW1lcmEoKTtcbiAgICBcbiAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0L/QvtC70L7QttC10L3QuNC1INC40YHRgtC+0YfQvdC40LrQsCDRgdCy0LXRgtCwINC+0YLQvdC+0YHQuNGC0LXQu9GM0L3QviDQutCw0LzQtdGA0YssINC60LDQuiDRgdC+0LvQvdGG0LVcbiAgICB1cGRhdGVTaGFkb3dDYW1lcmEoY2FtZXJhKTtcblxuICAgIC8vINCf0LXRgNC40L7QtNC40YfQtdGB0LrQuCDQstGL0LLQvtC00LjQvCDQuNC90YTQvtGA0LzQsNGG0LjRjiDQviDQutCw0LzQtdGA0LUg0LTQu9GPINC+0YLQu9Cw0LTQutC4XG4gICAgZnJhbWVDb3VudGVyKys7XG4gICAgaWYgKGZyYW1lQ291bnRlciAlIDEwMCA9PT0gMCkge1xuICAgICAgICBsb2dDYW1lcmFTdGF0dXMoKTtcbiAgICAgICAgZnJhbWVDb3VudGVyID0gMDtcbiAgICB9XG5cbiAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgIGNvbnNvbGUubG9nKFwiU3RhcnRcIik7XG4gICAgaW5pdFNjZW5lKCk7XG4gICAgXG4gICAgLy8g0JjQvdC40YbQuNCw0LvQuNC30LjRgNGD0LXQvCDQutCw0LzQtdGA0YMg0LjQtyDQvdC+0LLQvtCz0L4g0LzQvtC00YPQu9GPXG4gICAgaW5pdENhbWVyYSgpO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDQvdC10LHQvtC70YzRiNGD0Y4g0LfQsNC00LXRgNC20LrRgyDQv9C10YDQtdC0INC40L3QuNGG0LjQsNC70LjQt9Cw0YbQuNC10LlcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDUwMCkpO1xuICAgICAgICBhd2FpdCBpbml0QW1tbygpO1xuICAgICAgICBcbiAgICAgICAgLy8g0JjQvdC40YbQuNCw0LvQuNC30LjRgNGD0LXQvCDRgdC10YLQtdCy0L7QtSDRgdC+0LXQtNC40L3QtdC90LjQtVxuICAgICAgICBpbml0TmV0d29yaygpO1xuICAgICAgICBcbiAgICAgICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC40L3RgtC10YDRhNC10LnRgSDQtNC70Y8g0YPQv9GA0LDQstC70LXQvdC40Y8g0LTQuNCw0LPQvdC+0YHRgtC40YfQtdGB0LrQuNC8INGA0LXQttC40LzQvtC8XG4gICAgICAgIC8vIGNyZWF0ZURpYWdub3N0aWNVSSgpO1xuICAgICAgICBcbiAgICAgICAgLy8g0KHQvtC30LTQsNC10Lwg0LTQuNCw0LPQvdC+0YHRgtC40YfQtdGB0LrRg9GOINGB0YbQtdC90YMg0LXRgdC70Lgg0LLQutC70Y7Rh9C10L0g0YDQtdC20LjQvFxuICAgICAgICAvLyBpZiAoZGlhZ25vc3RpY01vZGUpIHtcbiAgICAgICAgLy8gICAgY3JlYXRlRGlhZ25vc3RpY1NjZW5lKHNjZW5lKTtcbiAgICAgICAgLy8gfVxuICAgICAgICBcbiAgICAgICAgYW5pbWF0ZSgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCLQntGI0LjQsdC60LAg0L/RgNC4INC40L3QuNGG0LjQsNC70LjQt9Cw0YbQuNC4IEFtbW8uanM6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDRgdC+0LfQtNCw0L3QuNGPINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjNGB0LrQvtCz0L4g0LjQvdGC0LXRgNGE0LXQudGB0LAg0LTQuNCw0LPQvdC+0YHRgtC40LrQuFxuZnVuY3Rpb24gY3JlYXRlRGlhZ25vc3RpY1VJKCkge1xuICAgIC8vINCh0L7Qt9C00LDQtdC8INC60L7QvdGC0LXQudC90LXRgCDQtNC70Y8g0Y3Qu9C10LzQtdC90YLQvtCyINGD0L/RgNCw0LLQu9C10L3QuNGPXG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICBjb250YWluZXIuc3R5bGUudG9wID0gJzEwcHgnO1xuICAgIGNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gJzEwcHgnO1xuICAgIGNvbnRhaW5lci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgwLCAwLCAwLCAwLjUpJztcbiAgICBjb250YWluZXIuc3R5bGUucGFkZGluZyA9ICcxMHB4JztcbiAgICBjb250YWluZXIuc3R5bGUuYm9yZGVyUmFkaXVzID0gJzVweCc7XG4gICAgY29udGFpbmVyLnN0eWxlLmNvbG9yID0gJ3doaXRlJztcbiAgICBjb250YWluZXIuc3R5bGUuZm9udEZhbWlseSA9ICdBcmlhbCwgc2Fucy1zZXJpZic7XG4gICAgXG4gICAgLy8g0KHQvtC30LTQsNC10Lwg0LfQsNCz0L7Qu9C+0LLQvtC6XG4gICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aXRsZS50ZXh0Q29udGVudCA9ICfQndCw0YHRgtGA0L7QudC60Lgg0LTQuNCw0LPQvdC+0YHRgtC40LrQuCc7XG4gICAgdGl0bGUuc3R5bGUuZm9udFdlaWdodCA9ICdib2xkJztcbiAgICB0aXRsZS5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnMTBweCc7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICBcbiAgICAvLyDQodC+0LfQtNCw0LXQvCDRh9C10LrQsdC+0LrRgSDQtNC70Y8g0LLQutC70Y7Rh9C10L3QuNGPL9Cy0YvQutC70Y7Rh9C10L3QuNGPINC00LjQsNCz0L3QvtGB0YLQuNC60LhcbiAgICBjb25zdCBkaWFnbm9zdGljQ2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIGRpYWdub3N0aWNDaGVja2JveC50eXBlID0gJ2NoZWNrYm94JztcbiAgICBkaWFnbm9zdGljQ2hlY2tib3guaWQgPSAnZGlhZ25vc3RpYy10b2dnbGUnO1xuICAgIGRpYWdub3N0aWNDaGVja2JveC5jaGVja2VkID0gZGlhZ25vc3RpY01vZGU7XG4gICAgXG4gICAgLy8g0KHQvtC30LTQsNC10Lwg0LvQtdC50LHQuyDQtNC70Y8g0YfQtdC60LHQvtC60YHQsFxuICAgIGNvbnN0IGRpYWdub3N0aWNMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgZGlhZ25vc3RpY0xhYmVsLmh0bWxGb3IgPSAnZGlhZ25vc3RpYy10b2dnbGUnO1xuICAgIGRpYWdub3N0aWNMYWJlbC50ZXh0Q29udGVudCA9ICfQn9C+0LrQsNC30LDRgtGMINC00LjQsNCz0L3QvtGB0YLQuNGH0LXRgdC60LjQtSDRgtC10L3QuCc7XG4gICAgXG4gICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC+0LHRgNCw0LHQvtGC0YfQuNC6INGB0L7QsdGL0YLQuNC5INC00LvRjyDRh9C10LrQsdC+0LrRgdCwXG4gICAgZGlhZ25vc3RpY0NoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBkaWFnbm9zdGljTW9kZSA9IHRoaXMuY2hlY2tlZDtcbiAgICAgICAgY29uc29sZS5sb2coJ9CU0LjQsNCz0L3QvtGB0YLQuNGH0LXRgdC60LjQuSDRgNC10LbQuNC8OicsIGRpYWdub3N0aWNNb2RlID8gJ9Cy0LrQu9GO0YfQtdC9JyA6ICfQstGL0LrQu9GO0YfQtdC9Jyk7XG4gICAgICAgIFxuICAgICAgICAvLyDQldGB0LvQuCDRgNC10LbQuNC8INCy0LrQu9GO0YfQtdC9LCDRgdC+0LfQtNCw0LXQvCDQtNC40LDQs9C90L7RgdGC0LjRh9C10YHQutGD0Y4g0YHRhtC10L3Rg1xuICAgICAgICBpZiAoZGlhZ25vc3RpY01vZGUpIHtcbiAgICAgICAgICAgIGNyZWF0ZURpYWdub3N0aWNTY2VuZShzY2VuZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyDQo9C00LDQu9GP0LXQvCDQtNC40LDQs9C90L7RgdGC0LjRh9C10YHQutC40LUg0L7QsdGK0LXQutGC0Ysg0LXRgdC70Lgg0L7QvdC4INC10YHRgtGMXG4gICAgICAgICAgICBpZiAob2JqZWN0c1tcImFtbW9fc2hhZG93XCJdKSB7XG4gICAgICAgICAgICAgICAgc2NlbmUucmVtb3ZlKG9iamVjdHNbXCJhbW1vX3NoYWRvd1wiXS5tZXNoKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgb2JqZWN0c1tcImFtbW9fc2hhZG93XCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAob2JqZWN0c1tcImJ1bGxldF9zaGFkb3dcIl0pIHtcbiAgICAgICAgICAgICAgICBzY2VuZS5yZW1vdmUob2JqZWN0c1tcImJ1bGxldF9zaGFkb3dcIl0ubWVzaCk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIG9iamVjdHNbXCJidWxsZXRfc2hhZG93XCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQo9C00LDQu9GP0LXQvCDQu9C40L3QuNC4INCy0LjQt9GD0LDQu9C40LfQsNGG0LjQuFxuICAgICAgICAgICAgaWYgKG9iamVjdHMuZGl2ZXJnZW5jZUxpbmVzKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyhvYmplY3RzLmRpdmVyZ2VuY2VMaW5lcykuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0ubGluZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NlbmUucmVtb3ZlKGl0ZW0ubGluZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkZWxldGUgb2JqZWN0cy5kaXZlcmdlbmNlTGluZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICAvLyDQodC+0LfQtNCw0LXQvCDQutC+0L3RgtC10LnQvdC10YAg0LTQu9GPINGH0LXQutCx0L7QutGB0LAg0YEg0LvQtdC50LHQu9C+0LxcbiAgICBjb25zdCBjaGVja2JveENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNoZWNrYm94Q29udGFpbmVyLmFwcGVuZENoaWxkKGRpYWdub3N0aWNDaGVja2JveCk7XG4gICAgY2hlY2tib3hDb250YWluZXIuYXBwZW5kQ2hpbGQoZGlhZ25vc3RpY0xhYmVsKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2hlY2tib3hDb250YWluZXIpO1xuICAgIFxuICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDQuNC90YTQvtGA0LzQsNGG0LjRjiDQviDRgNCw0YHRhdC+0LbQtNC10L3QuNGP0YVcbiAgICBjb25zdCBkaXZlcmdlbmNlSW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpdmVyZ2VuY2VJbmZvLmlkID0gJ2RpdmVyZ2VuY2UtaW5mbyc7XG4gICAgZGl2ZXJnZW5jZUluZm8udGV4dENvbnRlbnQgPSAn0KDQsNGB0YXQvtC20LTQtdC90LjRjzog0L3QtdGCINC00LDQvdC90YvRhSc7XG4gICAgZGl2ZXJnZW5jZUluZm8uc3R5bGUubWFyZ2luVG9wID0gJzEwcHgnO1xuICAgIGRpdmVyZ2VuY2VJbmZvLnN0eWxlLmZvbnRTaXplID0gJzEycHgnO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXZlcmdlbmNlSW5mbyk7XG4gICAgXG4gICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC60L7QvdGC0LXQudC90LXRgCDQvdCwINGB0YLRgNCw0L3QuNGG0YNcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgXG4gICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INC40L3RhNC+0YDQvNCw0YbQuNGOINC+INGA0LDRgdGF0L7QttC00LXQvdC40Y/RhSDQv9C10YDQuNC+0LTQuNGH0LXRgdC60LhcbiAgICBzZXRJbnRlcnZhbCh1cGRhdGVEaXZlcmdlbmNlSW5mbywgMTAwMCk7XG59XG5cbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDQvtCx0L3QvtCy0LvQtdC90LjRjyDQuNC90YTQvtGA0LzQsNGG0LjQuCDQviDRgNCw0YHRhdC+0LbQtNC10L3QuNGP0YVcbmZ1bmN0aW9uIHVwZGF0ZURpdmVyZ2VuY2VJbmZvKCkge1xuICAgIGlmICghZGlhZ25vc3RpY01vZGUpIHJldHVybjtcbiAgICBcbiAgICBjb25zdCBtYWluU3BoZXJlID0gb2JqZWN0c1tcIm1haW5QbGF5ZXIxXCJdO1xuICAgIGNvbnN0IGFtbW9TaGFkb3cgPSBvYmplY3RzW1wiYW1tb19zaGFkb3dcIl07XG4gICAgY29uc3QgYnVsbGV0U2hhZG93ID0gb2JqZWN0c1tcImJ1bGxldF9zaGFkb3dcIl07XG4gICAgXG4gICAgaWYgKCFtYWluU3BoZXJlIHx8ICFhbW1vU2hhZG93IHx8ICFidWxsZXRTaGFkb3cpIHJldHVybjtcbiAgICBcbiAgICAvLyDQn9C+0LvRg9GH0LDQtdC8INC/0L7Qt9C40YbQuNC4XG4gICAgY29uc3QgbWFpblBvcyA9IG1haW5TcGhlcmUubWVzaC5wb3NpdGlvbjtcbiAgICBjb25zdCBhbW1vUG9zID0gYW1tb1NoYWRvdy5tZXNoLnBvc2l0aW9uO1xuICAgIGNvbnN0IGJ1bGxldFBvcyA9IGJ1bGxldFNoYWRvdy5tZXNoLnBvc2l0aW9uO1xuICAgIFxuICAgIC8vINCg0LDRgdGH0LXRgiDRgNCw0YHRgdGC0L7Rj9C90LjQuVxuICAgIGNvbnN0IGRpc3RNYWluVG9BbW1vID0gTWF0aC5zcXJ0KFxuICAgICAgICBNYXRoLnBvdyhtYWluUG9zLnggLSBhbW1vUG9zLngsIDIpICtcbiAgICAgICAgTWF0aC5wb3cobWFpblBvcy55IC0gYW1tb1Bvcy55LCAyKSArXG4gICAgICAgIE1hdGgucG93KG1haW5Qb3MueiAtIGFtbW9Qb3MueiwgMilcbiAgICApO1xuICAgIFxuICAgIGNvbnN0IGRpc3RNYWluVG9CdWxsZXQgPSBNYXRoLnNxcnQoXG4gICAgICAgIE1hdGgucG93KG1haW5Qb3MueCAtIGJ1bGxldFBvcy54LCAyKSArXG4gICAgICAgIE1hdGgucG93KG1haW5Qb3MueSAtIGJ1bGxldFBvcy55LCAyKSArXG4gICAgICAgIE1hdGgucG93KG1haW5Qb3MueiAtIGJ1bGxldFBvcy56LCAyKVxuICAgICk7XG4gICAgXG4gICAgY29uc3QgZGlzdEFtbW9CdWxsZXQgPSBNYXRoLnNxcnQoXG4gICAgICAgIE1hdGgucG93KGFtbW9Qb3MueCAtIGJ1bGxldFBvcy54LCAyKSArXG4gICAgICAgIE1hdGgucG93KGFtbW9Qb3MueSAtIGFtbW9Qb3MueSwgMikgK1xuICAgICAgICBNYXRoLnBvdyhhbW1vUG9zLnogLSBidWxsZXRQb3MueiwgMilcbiAgICApO1xuICAgIFxuICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQuNC90YTQvtGA0LzQsNGG0LjRjiDQvdCwINC40L3RgtC10YDRhNC10LnRgdC1XG4gICAgY29uc3QgZGl2ZXJnZW5jZUluZm8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGl2ZXJnZW5jZS1pbmZvJyk7XG4gICAgaWYgKGRpdmVyZ2VuY2VJbmZvKSB7XG4gICAgICAgIGRpdmVyZ2VuY2VJbmZvLmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgIDxkaXY+0J7RgdC90L7QstC90L7QuS1BbW1vOiAke2Rpc3RNYWluVG9BbW1vLnRvRml4ZWQoMyl9PC9kaXY+XG4gICAgICAgICAgICA8ZGl2PtCe0YHQvdC+0LLQvdC+0LktQnVsbGV0OiAke2Rpc3RNYWluVG9CdWxsZXQudG9GaXhlZCgzKX08L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+QW1tby1CdWxsZXQ6ICR7ZGlzdEFtbW9CdWxsZXQudG9GaXhlZCgzKX08L2Rpdj5cbiAgICAgICAgYDtcbiAgICB9XG59XG5cbnN0YXJ0KCk7Il0sIm5hbWVzIjpbIlRIUkVFIiwic2NlbmUiLCJyZW5kZXJlciIsImRpcmVjdGlvbmFsTGlnaHQiLCJpbml0U2NlbmUiLCJjb25zb2xlIiwibG9nIiwiU2NlbmUiLCJiYWNrZ3JvdW5kIiwiQ29sb3IiLCJXZWJHTFJlbmRlcmVyIiwiYW50aWFsaWFzIiwic2V0U2l6ZSIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInNoYWRvd01hcCIsImVuYWJsZWQiLCJ0eXBlIiwiUENGU29mdFNoYWRvd01hcCIsImRvY3VtZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwiZG9tRWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbldpbmRvd1Jlc2l6ZSIsImFtYmllbnQiLCJBbWJpZW50TGlnaHQiLCJhZGQiLCJEaXJlY3Rpb25hbExpZ2h0IiwicG9zaXRpb24iLCJzZXQiLCJjYXN0U2hhZG93Iiwic2hhZG93IiwiY2FtZXJhIiwibmVhciIsImZhciIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsIm1hcFNpemUiLCJ3aWR0aCIsImhlaWdodCIsImJpYXMiLCJmaWxsTGlnaHQiLCJ1cGRhdGVTaGFkb3dDYW1lcmEiLCJjYW1lcmFEaXJlY3Rpb24iLCJWZWN0b3IzIiwiZ2V0V29ybGREaXJlY3Rpb24iLCJzdW5PZmZzZXQiLCJzdW5Qb3NpdGlvbiIsImNsb25lIiwiY29weSIsInRhcmdldE9mZnNldCIsIm11bHRpcGx5U2NhbGFyIiwidGFyZ2V0UG9zaXRpb24iLCJ0YXJnZXQiLCJ1cGRhdGVNYXRyaXhXb3JsZCIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJsb2NhbFBoeXNpY3NXb3JsZCIsIm9iamVjdHMiLCJjcmVhdGVNZXNoQW5kQm9keUZvck9iamVjdCIsImRhdGEiLCJvYmplY3RfdHlwZSIsImVycm9yIiwibWVzaCIsImNyZWF0ZVRlcnJhaW5NZXNoIiwiY3JlYXRlUGh5c2ljc0JvZHlGb3JUZXJyYWluIiwiY3JlYXRlU3BoZXJlTWVzaCIsImNyZWF0ZVBoeXNpY3NCb2R5Rm9yU3BoZXJlIiwiY3JlYXRlVHJlZU1lc2giLCJ3YXJuIiwiY29uY2F0IiwiY3JlYXRlRGVmYXVsdE1lc2giLCJBbW1vIiwidyIsImhlaWdodG1hcF93IiwiaCIsImhlaWdodG1hcF9oIiwic2NhbGVYIiwic2NhbGVfeCIsInNjYWxlWiIsInNjYWxlX3oiLCJhbW1vSGVpZ2h0RGF0YSIsIl9tYWxsb2MiLCJwIiwicDIiLCJqIiwiaSIsIkhFQVBGMzIiLCJoZWlnaHRfZGF0YSIsInNoYXBlIiwiYnRIZWlnaHRmaWVsZFRlcnJhaW5TaGFwZSIsIm1pbl9oZWlnaHQiLCJtYXhfaGVpZ2h0IiwiUEhZX0ZMT0FUIiwic2V0TG9jYWxTY2FsaW5nIiwiYnRWZWN0b3IzIiwic2NhbGVfeSIsInNldE1hcmdpbiIsInRyYW5zZm9ybSIsImJ0VHJhbnNmb3JtIiwic2V0SWRlbnRpdHkiLCJzZXRPcmlnaW4iLCJ4IiwieiIsIm1hc3MiLCJsb2NhbEluZXJ0aWEiLCJtb3Rpb25TdGF0ZSIsImJ0RGVmYXVsdE1vdGlvblN0YXRlIiwicmJJbmZvIiwiYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvIiwiYnRSaWdpZEJvZHkiLCJURVJSQUlOX0dST1VQIiwiYWRkUmlnaWRCb2R5IiwiZGVzdHJveSIsItGA0LDQt9C80LXRgNGLIiwi0LzQsNGB0YjRgtCw0LEiLCJ5Iiwi0L/QvtC30LjRhtC40Y8iLCLQvNC40L3QktGL0YHQvtGC0LAiLCLQvNCw0LrRgdCS0YvRgdC+0YLQsCIsImdlbyIsIlBsYW5lR2VvbWV0cnkiLCJyb3RhdGVYIiwiTWF0aCIsIlBJIiwidmVydHMiLCJhdHRyaWJ1dGVzIiwiYXJyYXkiLCJsZW5ndGgiLCJpeCIsIml6IiwiZmxvb3IiLCJjb21wdXRlVmVydGV4Tm9ybWFscyIsIk1lc2giLCJNZXNoUGhvbmdNYXRlcmlhbCIsImNvbG9yIiwicGFyc2VDb2xvciIsIndpcmVmcmFtZSIsImZsYXRTaGFkaW5nIiwicmVjZWl2ZVNoYWRvdyIsIlNwaGVyZUdlb21ldHJ5IiwicmFkaXVzIiwic2hpbmluZXNzIiwiZ3JvdXAiLCJHcm91cCIsImJyYW5jaGVzIiwiQXJyYXkiLCJpc0FycmF5IiwiZm9yRWFjaCIsImJyYW5jaCIsImluZGV4Iiwic3RhcnRYIiwidW5kZWZpbmVkIiwic3RhcnRZIiwic3RhcnRaIiwiZW5kWCIsImVuZFkiLCJlbmRaIiwiYnJhbmNoR2VvIiwiQ3lsaW5kZXJHZW9tZXRyeSIsInJhZGl1c1RvcCIsInJhZGl1c0JvdHRvbSIsImJyYW5jaE1hdCIsImJyYW5jaE1lc2giLCJtaWRYIiwibWlkWSIsIm1pZFoiLCJsb29rQXQiLCJzY2FsZSIsIkJveEdlb21ldHJ5IiwiTWVzaExhbWJlcnRNYXRlcmlhbCIsImJ0U3BoZXJlU2hhcGUiLCJjYWxjdWxhdGVMb2NhbEluZXJ0aWEiLCJzZXRGcmljdGlvbiIsInNldFJvbGxpbmdGcmljdGlvbiIsInNldFJlc3RpdHV0aW9uIiwic2V0RGFtcGluZyIsInNldENjZE1vdGlvblRocmVzaG9sZCIsInNldENjZFN3ZXB0U3BoZXJlUmFkaXVzIiwic2V0QWN0aXZhdGlvblN0YXRlIiwiU1BIRVJFX0dST1VQIiwiY2NkIiwibW90aW9uVGhyZXNob2xkIiwic3dlcHRTcGhlcmVSYWRpdXMiLCJmcmljdGlvbiIsInJlc3RpdHV0aW9uIiwiY29sb3JTdHIiLCJzdGFydHNXaXRoIiwicGFyc2VJbnQiLCJzbGljZSIsImNyZWF0ZVRlc3RTcGhlcmUiLCJnZW9tZXRyeSIsIm1hdGVyaWFsIiwidGVzdFNwaGVyZU9iaiIsInBoeXNpY3NCeSIsImFwcGx5SW1wdWxzZVRvU3BoZXJlIiwicmVjZWl2ZU9iamVjdFVwZGF0ZSIsIndzIiwicGh5c2ljc1N0YXJ0ZWQiLCJwZW5kaW5nT2JqZWN0cyIsInNlcnZlclRpbWVPZmZzZXQiLCJzZXJ2ZXJUaW1lT2Zmc2V0U2FtcGxlcyIsIk1BWF9PRkZTRVRfU0FNUExFUyIsInBpbmdIaXN0b3J5IiwiTUFYX1BJTkdfU0FNUExFUyIsImVzdGltYXRlU2VydmVyVGltZSIsIkRhdGUiLCJub3ciLCJ1cGRhdGVTZXJ2ZXJUaW1lT2Zmc2V0Iiwic2VydmVyVGltZSIsImN1cnJlbnRPZmZzZXQiLCJwdXNoIiwic2hpZnQiLCJzb3J0ZWRPZmZzZXRzIiwic29ydCIsImEiLCJiIiwibWVkaWFuT2Zmc2V0IiwidXBkYXRlVGltZURpc3BsYXkiLCJ1cGRhdGVQaW5nRGlzcGxheSIsInBpbmdWYWx1ZSIsInBpbmdEaXNwbGF5IiwiZ2V0RWxlbWVudEJ5SWQiLCJ0ZXh0Q29udGVudCIsInRvRml4ZWQiLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciIsInNlcnZlclRpbWVFbGVtIiwidGltZU9mZnNldEVsZW0iLCJlc3RTZXJ2ZXJUaW1lIiwic2VydmVyRGF0ZSIsInRvTG9jYWxlVGltZVN0cmluZyIsInRpbWVEaXNwbGF5SW50ZXJ2YWwiLCJoYW5kbGVNZXNzYWdlIiwic2VydmVyX3RpbWUiLCJyb3VuZFRyaXBUaW1lIiwiY2xpZW50X3RpbWUiLCJhdmdQaW5nIiwicmVkdWNlIiwic3VtIiwicGluZyIsImlkIiwib2JqIiwicGh5c2ljc19ieSIsInNlcnZlclBvcyIsInNlcnZlckNyZWF0aW9uVGltZSIsImNsaWVudENyZWF0aW9uVGltZSIsImNyZWF0ZWRBdCIsImFjdGl2YXRlIiwiZ2V0TW90aW9uU3RhdGUiLCJnZXRXb3JsZFRyYW5zZm9ybSIsInNldFdvcmxkVHJhbnNmb3JtIiwiY21kIiwic3RhY2siLCJoYW5kbGVLZXlEb3duIiwiZSIsInJlYWR5U3RhdGUiLCJXZWJTb2NrZXQiLCJPUEVOIiwiZm9yY2VYIiwiZm9yY2VZIiwiZm9yY2VaIiwia2V5IiwiY2xpZW50VGltZSIsImNvbW1hbmRPYmoiLCJzZW5kIiwiSlNPTiIsInN0cmluZ2lmeSIsImluaXROZXR3b3JrIiwib25vcGVuIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwic2VuZFBpbmciLCJvbm1lc3NhZ2UiLCJldnQiLCJwYXJzZSIsIl90eXBlb2YiLCJFcnJvciIsIm9uZXJyb3IiLCJtZXNzYWdlIiwiZXZlbnRQaGFzZSIsIm9uY2xvc2UiLCJldmVudCIsImNvZGUiLCJyZWFzb24iLCJ3YXNDbGVhbiIsInBpbmdPYmoiLCJzdGFydFBoeXNpY3NTaW11bGF0aW9uIiwiX2l0ZXJhdG9yIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJfc3RlcCIsInMiLCJuIiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiZiIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJ0IiwiciIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwibyIsImRlZmluZVByb3BlcnR5IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjIiwiYXN5bmNJdGVyYXRvciIsInUiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIndyYXAiLCJHZW5lcmF0b3IiLCJjcmVhdGUiLCJDb250ZXh0IiwibWFrZUludm9rZU1ldGhvZCIsInRyeUNhdGNoIiwiYXJnIiwiY2FsbCIsImwiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiZCIsImdldFByb3RvdHlwZU9mIiwidiIsInZhbHVlcyIsImciLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsImludm9rZSIsInJlc29sdmUiLCJfX2F3YWl0IiwidGhlbiIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwibWV0aG9kIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXNOYU4iLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsImtleXMiLCJyZXZlcnNlIiwicG9wIiwicHJldiIsImNoYXJBdCIsInN0b3AiLCJydmFsIiwiaGFuZGxlIiwiY29tcGxldGUiLCJmaW5pc2giLCJfY2F0Y2giLCJkZWxlZ2F0ZVlpZWxkIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX3RvUHJvcGVydHlLZXkiLCJfdG9QcmltaXRpdmUiLCJ0b1ByaW1pdGl2ZSIsIlN0cmluZyIsIk51bWJlciIsImFzeW5jR2VuZXJhdG9yU3RlcCIsIl9hc3luY1RvR2VuZXJhdG9yIiwiX25leHQiLCJfdGhyb3ciLCJhbW1vUHJvbWlzZSIsIkRFQURfWk9ORSIsIkNPUlJFQ1RJT05fU1RSRU5HVEgiLCJURUxFUE9SVF9USFJFU0hPTEQiLCJQUkVESUNUSU9OX1NNT09USF9GQUNUT1IiLCJQUkVESUNUSU9OX01BWF9FUlJPUiIsIkRJU1RBTkNFX0JBU0VEX1NNT09USF9GQUNUT1IiLCJORVdfT0JKRUNUX1RJTUVPVVQiLCJpbnB1dEhpc3RvcnkiLCJsYXN0U2VxdWVuY2VOdW1iZXIiLCJsYXN0U2VydmVyVXBkYXRlVGltZSIsIkxPR19JTlRFUlZBTCIsImxvZ1RpbWVycyIsIm9iamVjdENyZWF0aW9uVGltZXMiLCJNYXAiLCJ0aHJvdHRsZWRMb2ciLCJjYXRlZ29yeSIsImxvZ01haW5QbGF5ZXJJbmZvIiwibWFpblBsYXllciIsInBvcyIsInZlbCIsInZlbG9jaXR5IiwiZ2V0TGluZWFyVmVsb2NpdHkiLCJzZXR1cFBoeXNpY3NXb3JsZCIsImNvbGxpc2lvbkNvbmZpZ3VyYXRpb24iLCJidERlZmF1bHRDb2xsaXNpb25Db25maWd1cmF0aW9uIiwiZGlzcGF0Y2hlciIsImJ0Q29sbGlzaW9uRGlzcGF0Y2hlciIsImJyb2FkcGhhc2UiLCJidERidnRCcm9hZHBoYXNlIiwic29sdmVyIiwiYnRTZXF1ZW50aWFsSW1wdWxzZUNvbnN0cmFpbnRTb2x2ZXIiLCJidERpc2NyZXRlRHluYW1pY3NXb3JsZCIsInNldEdyYXZpdHkiLCJpbml0QW1tbyIsIl9pbml0QW1tbyIsIl9jYWxsZWUiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicmVqZWN0IiwiYW1tb1NjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJzcmMiLCJvbmxvYWQiLCJzZXRUaW1lb3V0Iiwic3RlcFBoeXNpY3MiLCJkZWx0YVRpbWUiLCJtYXhTdGVwIiwiZWZmZWN0aXZlU3RlcCIsIm1pbiIsImZpeGVkU3RlcCIsIm1heFN1YlN0ZXBzIiwiY2VpbCIsInN0ZXBTaW11bGF0aW9uIiwidXBkYXRlUGh5c2ljc09iamVjdHMiLCJtYWluU3BoZXJlUG9zIiwiYW1tb1NoYWRvd1BvcyIsImJ1bGxldFNoYWRvd1BvcyIsImlzTmV3T2JqZWN0IiwiaGFzIiwiZ2V0IiwidHJhbnMiLCJsb2NYIiwiZ2V0T3JpZ2luIiwibG9jWSIsImxvY1oiLCJxeCIsImdldFJvdGF0aW9uIiwicXkiLCJxeiIsInF3IiwicXVhdGVybmlvbiIsImludGVycG9sYXRpb25GYWN0b3IiLCJzZXJ2ZXJYIiwic2VydmVyWSIsInNlcnZlcloiLCJjdXJyZW50WCIsImN1cnJlbnRZIiwiY3VycmVudFoiLCJzcGVlZFNxIiwiaXNNb3ZpbmdGYXN0IiwiZHgiLCJkeSIsImR6IiwiZGlzdGFuY2UiLCJzcXJ0Iiwic21vb3RoRmFjdG9yIiwiemVybyIsInNldExpbmVhclZlbG9jaXR5Iiwic2V0QW5ndWxhclZlbG9jaXR5Iiwic2VydmVyVmVsb2NpdHkiLCJzZXJ2ZXJWZWwiLCJkYW1wZWRWZWxvY2l0eSIsInVwZGF0ZWRUcmFuc2Zvcm0iLCJweCIsInB5IiwicHoiLCJjb3JyZWN0aW9uWCIsImNvcnJlY3Rpb25ZIiwiY29ycmVjdGlvbloiLCJibGVuZGVkVmVsb2NpdHkiLCJhZGFwdGl2ZVN0cmVuZ3RoIiwibWFnbml0dWRlIiwiY29ycmVjdFkiLCJhYnMiLCJmb3JjZSIsImFwcGx5Q2VudHJhbEZvcmNlIiwibWFpblRvQW1tb0Rpc3RhbmNlIiwicG93IiwibWFpblRvQnVsbGV0RGlzdGFuY2UiLCJzZXJ2ZXJUb01haW5EaXN0YW5jZSIsInJhbmRvbSIsInZpc3VhbGl6ZURpdmVyZ2VuY2UiLCJtYWluU3BoZXJlIiwiYW1tb1NoYWRvdyIsImJ1bGxldFNoYWRvdyIsIm1haW5Qb3MiLCJhbW1vUG9zIiwiYnVsbGV0UG9zIiwiZGlzdE1haW5Ub0FtbW8iLCJkaXN0TWFpblRvQnVsbGV0IiwiZGlzdEFtbW9CdWxsZXQiLCJsYXN0RGl2ZXJnZW5jZUxvZyIsInZpc3VhbGl6ZURpdmVyZ2VuY2VMaW5lcyIsImRpdmVyZ2VuY2VMaW5lcyIsIm1haW5Ub0FtbW9NYXRlcmlhbCIsIkxpbmVCYXNpY01hdGVyaWFsIiwibWFpblRvQnVsbGV0TWF0ZXJpYWwiLCJhbW1vQnVsbGV0TWF0ZXJpYWwiLCJtYWluVG9BbW1vR2VvbWV0cnkiLCJCdWZmZXJHZW9tZXRyeSIsIm1haW5Ub0J1bGxldEdlb21ldHJ5IiwiYW1tb0J1bGxldEdlb21ldHJ5IiwibWFpblRvQW1tb0xpbmUiLCJMaW5lIiwibWFpblRvQnVsbGV0TGluZSIsImFtbW9CdWxsZXRMaW5lIiwibWFpblBsYXllcjEiLCJwYXJlbnQiLCJtYWluVG9BbW1vIiwibGluZSIsIm1haW5Ub0J1bGxldCIsImFtbW9CdWxsZXQiLCJ1cGRhdGVMaW5lIiwic3RhcnRQb3MiLCJlbmRQb3MiLCJwb3NpdGlvbnMiLCJGbG9hdDMyQXJyYXkiLCJzZXRBdHRyaWJ1dGUiLCJCdWZmZXJBdHRyaWJ1dGUiLCJuZWVkc1VwZGF0ZSIsIm9iamVjdHNMaXN0IiwidngiLCJ2eSIsInZ6IiwiY3VycmVudFNwZWVkIiwic3BlZWRGYWN0b3IiLCJtYXgiLCJpc0dyb3VuZGVkIiwiYmFzZUltcHVsc2VIb3Jpem9udGFsIiwiYmFzZUltcHVsc2VWZXJ0aWNhbCIsImltcHVsc2UiLCJhcHBseUNlbnRyYWxJbXB1bHNlIiwi0LrQvtC80LDQvdC00LAiLCLRgdC60L7RgNC+0YHRgtGMIiwi0LzQvdC+0LbQuNGC0LXQu9GMIiwi0LjQvNC/0YPQu9GM0YEiLCLQstGA0LXQvNGPX9C60LvQuNC10L3RgtCwIiwibGFzdEltcHVsc2UiLCJzeW5jRGlhZ25vc3RpY1NwaGVyZXMiLCJzZXF1ZW5jZU51bWJlciIsInRpbWVzdGFtcCIsInR3b1NlY29uZHNBZ28iLCJlbnRyeSIsIm1haW5WZWxvY2l0eSIsIm1haW5Bbmd1bGFyVmVsb2NpdHkiLCJnZXRBbmd1bGFyVmVsb2NpdHkiLCJ0aW1lU2luY2VMYXN0VXBkYXRlIiwib2xkU2VydmVyUG9zIiwibGFzdFNlcnZlclVwZGF0ZSIsInRpbWUiLCJwcmV2aW91c1NlcnZlclVwZGF0ZSIsInRpbWVEZWx0YSIsInRpbWVTaW5jZUxhc3RJbXB1bHNlIiwiY3JlYXRlRGlhZ25vc3RpY1NjZW5lIiwiY3JlYXRlRGlhZ25vc3RpY1NwaGVyZSIsInRyYW5zcGFyZW50Iiwib3BhY2l0eSIsImRpYWdub3N0aWNPYmplY3QiLCJDQU1FUkFfSEVJR0hUIiwiQ0FNRVJBX0RJU1RBTkNFIiwiU01PT1RIX0ZBQ1RPUiIsIlBMQVlFUl9JRCIsImxhc3RLbm93blBvc2l0aW9uIiwiY2FtZXJhVGFyZ2V0IiwiaW5pdENhbWVyYSIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwiYXNwZWN0IiwidXBkYXRlQ2FtZXJhIiwicGxheWVyIiwib2Zmc2V0IiwibGVycCIsImxvZ0NhbWVyYVN0YXR1cyIsImRpYWdub3N0aWNNb2RlIiwiZnJhbWVDb3VudGVyIiwiYW5pbWF0ZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJlbmRlciIsInN0YXJ0IiwiX3N0YXJ0IiwidDAiLCJjcmVhdGVEaWFnbm9zdGljVUkiLCJjb250YWluZXIiLCJwYWRkaW5nIiwiYm9yZGVyUmFkaXVzIiwiZm9udEZhbWlseSIsInRpdGxlIiwiZm9udFdlaWdodCIsIm1hcmdpbkJvdHRvbSIsImRpYWdub3N0aWNDaGVja2JveCIsImNoZWNrZWQiLCJkaWFnbm9zdGljTGFiZWwiLCJodG1sRm9yIiwicmVtb3ZlIiwiaXRlbSIsImNoZWNrYm94Q29udGFpbmVyIiwiZGl2ZXJnZW5jZUluZm8iLCJtYXJnaW5Ub3AiLCJmb250U2l6ZSIsInVwZGF0ZURpdmVyZ2VuY2VJbmZvIiwiaW5uZXJIVE1MIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///712\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,F,U,B)=>{if(!F){var C=1/0;for(s=0;s<deferred.length;s++){for(var[F,U,B]=deferred[s],L=!0,g=0;g<F.length;g++)(!1&B||C>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](F[g])))?F.splice(g--,1):(L=!1,B<C&&(C=B));if(L){deferred.splice(s--,1);var I=U();void 0!==I&&(Q=I)}}return Q}B=B||0;for(var s=deferred.length;s>0&&deferred[s-1][2]>B;s--)deferred[s]=deferred[s-1];deferred[s]=[F,U,B]},__webpack_require__.d=(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),(()=>{var Q={792:0};__webpack_require__.O.j=F=>0===Q[F];var F=(F,U)=>{var B,C,[L,g,I]=U,s=0;if(L.some((F=>0!==Q[F]))){for(B in g)__webpack_require__.o(g,B)&&(__webpack_require__.m[B]=g[B]);if(I)var t=I(__webpack_require__)}for(F&&F(U);s<L.length;s++)C=L[s],__webpack_require__.o(Q,C)&&Q[C]&&Q[C][0](),Q[C]=0;return __webpack_require__.O(t)},U=self.webpackChunkweb=self.webpackChunkweb||[];U.forEach(F.bind(null,0)),U.push=F.bind(null,U.push.bind(U))})();var __webpack_exports__=__webpack_require__.O(void 0,[233],(()=>__webpack_require__(712)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();