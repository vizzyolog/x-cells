(()=>{"use strict";var __webpack_modules__={909:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.core.js\nvar three_core = __webpack_require__(922);\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(437);\n;// ./src/three-exports.js\n// three-exports.js\n\n// Проверка наличия дубликатов Three.js\nif (typeof window.THREE !== \'undefined\') {\n  console.warn(\'[Three] ВНИМАНИЕ: Three.js уже определен в глобальном объекте!\');\n}\n\n// Проверка, не существует ли уже глобальная инстанция\nif (!window.__THREE_INSTANCE__) {\n  console.log("[Three] Создан первичный экземпляр Three.js");\n  try {\n    // Предотвращаем дублирующиеся импорты\n    var originalWarn = console.warn;\n    console.warn = function (message) {\n      if (message && typeof message === \'string\' && message.includes(\'Multiple instances of Three.js\')) {\n        console.log(\'[Three] Предотвращено предупреждение о множественных импортах Three.js\');\n        return;\n      }\n      originalWarn.apply(console, arguments);\n    };\n\n    // Создаем единственный экземпляр Three.js\n    window.__THREE_INSTANCE__ = __webpack_require__(437);\n\n    // Восстанавливаем оригинальный console.warn\n    console.warn = originalWarn;\n\n    // Также установим глобальную переменную THREE для совместимости\n    window.THREE = window.__THREE_INSTANCE__;\n  } catch (error) {\n    console.error("[Three] Ошибка при инициализации Three.js:", error);\n    throw error;\n  }\n} else {\n  console.log("[Three] Используется существующий экземпляр Three.js");\n}\n\n// Используем уже созданный экземпляр\nvar three_exports_THREE = window.__THREE_INSTANCE__;\n\n// Для надежности заменяем функцию предупреждения о дубликатах\nif (three_exports_THREE && three_exports_THREE.warn) {\n  var originalThreeWarn = three_exports_THREE.warn;\n  three_exports_THREE.warn = function (message) {\n    if (message && typeof message === \'string\' && message.includes(\'Multiple instances\')) {\n      console.log(\'[Three] Блокировано предупреждение Three.js:\', message);\n      return;\n    }\n    originalThreeWarn.apply(three_exports_THREE, arguments);\n  };\n}\n\n\n// Также экспортируем часто используемые классы для удобства\nvar Vector3 = three_exports_THREE.Vector3;\nvar Vector2 = three_exports_THREE.Vector2;\nvar Quaternion = three_exports_THREE.Quaternion;\nvar Matrix4 = three_exports_THREE.Matrix4;\nvar Color = three_exports_THREE.Color;\nvar Scene = three_exports_THREE.Scene;\nvar PerspectiveCamera = three_exports_THREE.PerspectiveCamera;\nvar WebGLRenderer = three_exports_THREE.WebGLRenderer;\nvar Mesh = three_exports_THREE.Mesh;\nvar BoxGeometry = three_exports_THREE.BoxGeometry;\nvar SphereGeometry = three_exports_THREE.SphereGeometry;\nvar MeshStandardMaterial = three_exports_THREE.MeshStandardMaterial;\nvar AmbientLight = three_exports_THREE.AmbientLight;\nvar DirectionalLight = three_exports_THREE.DirectionalLight;\nvar Clock = three_exports_THREE.Clock;\n;// ./src/physics.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// physics.js\n\n\n// Экспортируем явно с начальным значением null\nvar localPhysicsWorld = null;\nvar physics_objects = {}; // Хранилище для всех объектов\n\n// Добавляем глобальные настройки физики\nvar physicsSettings = {\n  useServerPhysics: false,\n  // false = локальная физика, true = серверная физика\n  interpolationAlpha: 0.1,\n  // Коэффициент интерполяции для серверных данных\n  debugMode: false,\n  // Выключаем режим отладки\n  sphereOffset: 2.0 // Расстояние между сферами для дебага\n};\n\n// Флаг для отслеживания, была ли уже выполнена инициализация\nvar ammoInitialized = false;\n\n// Функция для переключения режима физики\nfunction togglePhysicsMode() {\n  physicsSettings.useServerPhysics = !physicsSettings.useServerPhysics;\n  console.log("[Physics] \\u041F\\u0435\\u0440\\u0435\\u043A\\u043B\\u044E\\u0447\\u0435\\u043D\\u0438\\u0435 \\u0440\\u0435\\u0436\\u0438\\u043C\\u0430 \\u043D\\u0430: ".concat(physicsSettings.useServerPhysics ? \'серверную\' : \'локальную\', " \\u0444\\u0438\\u0437\\u0438\\u043A\\u0443"));\n}\n\n// Функция для проверки доступности Ammo.js\nfunction getAmmoLib() {\n  var ammo = window.AmmoLib || window.Ammo;\n  if (ammo) {\n    console.log("[Physics] Найдена библиотека Ammo.js:", ammo ? "присутствует" : "отсутствует");\n  }\n  return ammo;\n}\n\n// Инициализация Ammo.js\nfunction initAmmo() {\n  return _initAmmo.apply(this, arguments);\n}\n\n// Функция выполнения шага физической симуляции\nfunction _initAmmo() {\n  _initAmmo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var _window$XCells;\n    var AmmoLib, collisionConfiguration, dispatcher, broadphase, solver, gravity;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          console.log("[Physics] Начало инициализации физики...");\n\n          // Если физика уже инициализирована, возвращаем существующий мир\n          if (!(ammoInitialized && localPhysicsWorld)) {\n            _context.next = 4;\n            break;\n          }\n          console.log("[Physics] Физика уже инициализирована, повторная инициализация не требуется");\n          return _context.abrupt("return", Promise.resolve());\n        case 4:\n          if ((_window$XCells = window.XCells) !== null && _window$XCells !== void 0 && _window$XCells.isAmmoReady) {\n            _context.next = 10;\n            break;\n          }\n          console.log("[Physics] Ожидание инициализации Ammo.js...");\n\n          // Проверяем, определен ли объект XCells\n          if (!window.XCells) {\n            console.warn("[Physics] window.XCells не определен, создаем его");\n            window.XCells = {\n              isAmmoReady: false,\n              ammoCallbacks: []\n            };\n          }\n\n          // Проверяем, определен ли метод регистрации колбэков\n          if (!window.XCells.registerAmmoCallback) {\n            console.warn("[Physics] window.XCells.registerAmmoCallback не определен, создаем его");\n            window.XCells.registerAmmoCallback = function (callback) {\n              if (!window.XCells.ammoCallbacks) {\n                window.XCells.ammoCallbacks = [];\n              }\n              window.XCells.ammoCallbacks.push(callback);\n            };\n          }\n\n          // Ждем готовности Ammo.js\n          _context.next = 10;\n          return new Promise(function (resolve, reject) {\n            var timeout = setTimeout(function () {\n              reject(new Error("Таймаут ожидания инициализации Ammo.js"));\n            }, 5000);\n            var checkAmmo = function checkAmmo() {\n              var ammo = getAmmoLib();\n              if (ammo) {\n                clearTimeout(timeout);\n                window.XCells.isAmmoReady = true;\n                resolve();\n                return true;\n              }\n              return false;\n            };\n\n            // Проверяем сразу\n            if (checkAmmo()) return;\n\n            // Если не нашли, регистрируем колбэк\n            window.XCells.registerAmmoCallback(function () {\n              if (checkAmmo()) {\n                console.log("[Physics] Ammo.js успешно инициализирован через колбэк");\n              }\n            });\n          });\n        case 10:\n          _context.prev = 10;\n          AmmoLib = getAmmoLib();\n          if (AmmoLib) {\n            _context.next = 14;\n            break;\n          }\n          throw new Error("Ammo.js не найден после ожидания инициализации");\n        case 14:\n          console.log("[Physics] Ammo.js доступен, создаем физический мир");\n\n          // Создаем физический мир\n          collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n          dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n          broadphase = new AmmoLib.btDbvtBroadphase();\n          solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n          localPhysicsWorld = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n          gravity = new AmmoLib.btVector3(0, -9.81, 0);\n          localPhysicsWorld.setGravity(gravity);\n\n          // Устанавливаем флаг, что инициализация выполнена\n          ammoInitialized = true;\n          console.log("[Physics] Физический мир успешно создан");\n          return _context.abrupt("return", Promise.resolve());\n        case 27:\n          _context.prev = 27;\n          _context.t0 = _context["catch"](10);\n          console.error("[Physics] Ошибка при создании физического мира:", _context.t0);\n          return _context.abrupt("return", Promise.reject(_context.t0));\n        case 31:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[10, 27]]);\n  }));\n  return _initAmmo.apply(this, arguments);\n}\nfunction stepPhysics(deltaTime) {\n  // Пропускаем, если физика не инициализирована или используется серверная физика\n  if (!localPhysicsWorld || physicsSettings.useServerPhysics) {\n    if (!localPhysicsWorld) {\n      console.warn("[Physics] stepPhysics: localPhysicsWorld не инициализирован");\n    }\n    return;\n  }\n  try {\n    // Используем фиксированный шаг времени для стабильности\n    var fixedTimeStep = 1 / 60;\n    var maxSubSteps = 10;\n    localPhysicsWorld.stepSimulation(deltaTime, maxSubSteps, fixedTimeStep);\n  } catch (error) {\n    console.error("[Physics] Ошибка при выполнении шага физики:", error);\n  }\n}\n\n// Функция обновления объектов по физике\nfunction updatePhysicsObjects(objects) {\n  var AmmoLib = getAmmoLib();\n  // Пропускаем, если физика не инициализирована\n  if (!localPhysicsWorld || !AmmoLib) {\n    if (!localPhysicsWorld) {\n      console.warn("[Physics] updatePhysicsObjects: localPhysicsWorld не инициализирован");\n    }\n    if (!AmmoLib) {\n      console.warn("[Physics] updatePhysicsObjects: AmmoLib не найден");\n    }\n    return;\n  }\n  try {\n    for (var id in objects) {\n      var obj = objects[id];\n      if (!obj.mesh) continue;\n\n      // Обновляем по физике если есть физическое тело\n      if (obj.body) {\n        var trans = new AmmoLib.btTransform();\n        obj.body.getMotionState().getWorldTransform(trans);\n        var pos = trans.getOrigin();\n        var rot = trans.getRotation();\n        obj.mesh.position.set(pos.x(), pos.y(), pos.z());\n        obj.mesh.quaternion.set(rot.x(), rot.y(), rot.z(), rot.w());\n      }\n\n      // Корректируем по данным сервера если есть расхождение\n      if (obj.serverPos) {\n        var dx = obj.serverPos.x - obj.mesh.position.x;\n        var dy = obj.serverPos.y - obj.mesh.position.y;\n        var dz = obj.serverPos.z - obj.mesh.position.z;\n\n        // Если расхождение существенное\n        if (dx * dx + dy * dy + dz * dz > 0.1) {\n          var alpha = physicsSettings.interpolationAlpha;\n\n          // Корректируем физическое тело если оно есть\n          if (obj.body) {\n            var newX = obj.mesh.position.x + dx * alpha;\n            var newY = obj.mesh.position.y + dy * alpha;\n            var newZ = obj.mesh.position.z + dz * alpha;\n            var correction = new AmmoLib.btTransform();\n            correction.setIdentity();\n            correction.setOrigin(new AmmoLib.btVector3(newX, newY, newZ));\n            if (obj.serverRot) {\n              correction.setRotation(new AmmoLib.btQuaternion(obj.serverRot.x, obj.serverRot.y, obj.serverRot.z, obj.serverRot.w));\n            }\n            obj.body.activate(true);\n            obj.body.getMotionState().setWorldTransform(correction);\n            obj.body.setCenterOfMassTransform(correction);\n          } else {\n            // Если физического тела нет, просто интерполируем меш\n            obj.mesh.position.lerp(obj.serverPos, alpha);\n            if (obj.serverRot) {\n              obj.mesh.quaternion.slerp(obj.serverRot, alpha);\n            }\n          }\n        }\n      }\n    }\n  } catch (error) {\n    console.error("[Physics] Ошибка при обновлении объектов:", error);\n  }\n}\n\n// Функция применения импульса к сфере\nfunction applyImpulseToSphere(cmd, objects) {\n  console.log("[Physics] Попытка применить импульс:", cmd);\n\n  // Пропускаем, если физика не инициализирована\n  if (!localPhysicsWorld) {\n    console.warn("[Physics] localPhysicsWorld не инициализирован");\n    // Если физический мир не инициализирован, попытаемся инициализировать его\n    console.log("[Physics] Попытка повторной инициализации физического мира");\n    initAmmo().then(function () {\n      console.log("[Physics] Повторная инициализация завершена, статус:", !!localPhysicsWorld);\n    })["catch"](function (error) {\n      console.error("[Physics] Ошибка повторной инициализации:", error);\n    });\n    return;\n  }\n  var AmmoLib = getAmmoLib();\n  if (!AmmoLib) {\n    console.warn("[Physics] AmmoLib не найден");\n    return;\n  }\n  try {\n    var IMPULSE_STRENGTH = 10; // Сила импульса\n\n    // Получаем список всех объектов\n    var objectIds = Object.keys(objects);\n    console.log("[Physics] Доступные объекты:", objectIds);\n\n    // Находим сферу mainPlayer (ранее server_sphere)\n    var targetSphere = objects["mainPlayer"];\n    if (!targetSphere) {\n      console.warn("[Physics] Объект mainPlayer не найден. Импульс не может быть применен.");\n      return;\n    } else {\n      console.log("[Physics] Найден объект mainPlayer:", targetSphere);\n    }\n    if (!targetSphere.body) {\n      console.warn("[Physics] У объекта mainPlayer нет физического тела. Импульс не может быть применен.");\n      return;\n    }\n    var impulse = new AmmoLib.btVector3(0, 0, 0);\n    switch (cmd) {\n      case "LEFT":\n        impulse.setValue(-IMPULSE_STRENGTH, 0, 0);\n        break;\n      case "RIGHT":\n        impulse.setValue(IMPULSE_STRENGTH, 0, 0);\n        break;\n      case "UP":\n        impulse.setValue(0, 0, -IMPULSE_STRENGTH);\n        break;\n      case "DOWN":\n        impulse.setValue(0, 0, IMPULSE_STRENGTH);\n        break;\n      case "SPACE":\n        impulse.setValue(0, IMPULSE_STRENGTH * 2.0, 0);\n        break;\n      default:\n        return;\n    }\n    console.log("[Physics] \\u041F\\u0440\\u0438\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u0435 \\u0438\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441\\u0430 \\u043A ".concat(targetSphere.id, ": ").concat(cmd));\n    targetSphere.body.activate(true);\n    targetSphere.body.applyCentralImpulse(impulse);\n\n    // Выводим текущую позицию после применения импульса\n    var trans = new AmmoLib.btTransform();\n    targetSphere.body.getMotionState().getWorldTransform(trans);\n    var pos = trans.getOrigin();\n    console.log("[Physics] \\u041F\\u043E\\u0437\\u0438\\u0446\\u0438\\u044F ".concat(targetSphere.id, " \\u043F\\u043E\\u0441\\u043B\\u0435 \\u0438\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441\\u0430:"), pos.x().toFixed(2), pos.y().toFixed(2), pos.z().toFixed(2));\n  } catch (error) {\n    console.error("[Physics] Ошибка при применении импульса:", error);\n  }\n}\n\n// Создание физического объекта\nfunction physics_createPhysicsObject(obj) {\n  // Пропускаем, если физика не инициализирована или объект не поддерживает физику\n  if (!localPhysicsWorld || !window.Ammo || obj.object_type === "tree") {\n    return;\n  }\n  try {\n    var shape;\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(obj.x, obj.y, obj.z));\n\n    // Создаем физическое тело по типу объекта\n    switch (obj.object_type) {\n      case "sphere":\n        shape = new window.Ammo.btSphereShape(obj.radius);\n        obj.mass = obj.mass || 1;\n\n        // Устанавливаем margin для сферы\n        shape.setMargin(0.05);\n\n        // Создаем динамическое тело\n        var localInertia = new window.Ammo.btVector3(0, 0, 0);\n        shape.calculateLocalInertia(obj.mass, localInertia);\n        var motionState = new window.Ammo.btDefaultMotionState(transform);\n        var rbInfo = new window.Ammo.btRigidBodyConstructionInfo(obj.mass, motionState, shape, localInertia);\n        obj.body = new window.Ammo.btRigidBody(rbInfo);\n\n        // Улучшенные параметры для более реалистичной физики\n        obj.body.setRestitution(0.4); // упругость - меньше отскок\n        obj.body.setFriction(0.6); // трение - лучше сцепление с поверхностью\n\n        // Активируем тело\n        obj.body.activate(true);\n        obj.body.setCollisionFlags(0); // CF_DYNAMIC_OBJECT\n\n        localPhysicsWorld.addRigidBody(obj.body);\n        break;\n      case "terrain":\n        // Используем данные высот, пришедшие с сервера\n        if (!obj.height_data || obj.height_data.length === 0) {\n          return;\n        }\n\n        // Получаем параметры, предоставленные сервером\n        var heightData = obj.height_data;\n        var minHeight = obj.min_height !== undefined ? obj.min_height : Math.min.apply(Math, _toConsumableArray(heightData));\n        var maxHeight = obj.max_height !== undefined ? obj.max_height : Math.max.apply(Math, _toConsumableArray(heightData));\n\n        // Создаем форму террейна\n        shape = new window.Ammo.btHeightfieldTerrainShape(obj.heightmap_w, obj.heightmap_h, heightData, 1,\n        // heightScale = 1, используем setLocalScaling\n        minHeight, maxHeight, 1,\n        // upAxis = 1 для Y\n        false // flipQuadEdges = false\n        );\n\n        // Применяем масштабирование\n        shape.setLocalScaling(new window.Ammo.btVector3(obj.scale_x || 1, obj.scale_y || 1, obj.scale_z || 1));\n\n        // Устанавливаем margin\n        shape.setMargin(0.05);\n\n        // Смещаем террейн по Y для совпадения с визуальной моделью\n        transform.setOrigin(new window.Ammo.btVector3(obj.x, obj.y + (maxHeight + minHeight) / 2, obj.z));\n\n        // Создаем статическое тело с нулевой массой\n        var terrainMotionState = new window.Ammo.btDefaultMotionState(transform);\n        var terrainLocalInertia = new window.Ammo.btVector3(0, 0, 0);\n        var terrainRbInfo = new window.Ammo.btRigidBodyConstructionInfo(0,\n        // масса = 0 для статики\n        terrainMotionState, shape, terrainLocalInertia);\n        obj.body = new window.Ammo.btRigidBody(terrainRbInfo);\n\n        // Устанавливаем статический тип и параметры трения\n        obj.body.setCollisionFlags(1); // CF_STATIC_OBJECT\n        obj.body.setFriction(0.5); // Трение поверхности\n        obj.body.setRestitution(0.2); // Упругость отскока\n\n        localPhysicsWorld.addRigidBody(obj.body);\n        break;\n      default:\n        return;\n    }\n  } catch (error) {\n    console.error("[Physics] Ошибка при создании физического объекта:", error);\n  }\n}\n\n// Добавляем кнопку для отладки физики\nfunction initDebugUI() {\n  // Кнопка переключения режима физики\n  var debugButton = document.createElement(\'button\');\n  debugButton.style.position = \'fixed\';\n  debugButton.style.top = \'10px\';\n  debugButton.style.right = \'10px\';\n  debugButton.style.zIndex = \'1000\';\n  debugButton.style.padding = \'10px\';\n  debugButton.style.backgroundColor = \'#4CAF50\';\n  debugButton.style.color = \'white\';\n  debugButton.style.border = \'none\';\n  debugButton.style.borderRadius = \'5px\';\n  debugButton.style.cursor = \'pointer\';\n  debugButton.textContent = \'Toggle Physics Mode\';\n  debugButton.onclick = togglePhysicsMode;\n  document.body.appendChild(debugButton);\n\n  // Кнопка прыжка\n  var jumpButton = document.createElement(\'button\');\n  jumpButton.style.position = \'fixed\';\n  jumpButton.style.top = \'60px\';\n  jumpButton.style.right = \'10px\';\n  jumpButton.style.zIndex = \'1000\';\n  jumpButton.style.padding = \'10px\';\n  jumpButton.style.backgroundColor = \'#2196F3\';\n  jumpButton.style.color = \'white\';\n  jumpButton.style.border = \'none\';\n  jumpButton.style.borderRadius = \'5px\';\n  jumpButton.style.cursor = \'pointer\';\n  jumpButton.textContent = \'Jump\';\n  jumpButton.onclick = function () {\n    return applyImpulseToSphere(\'SPACE\', physics_objects);\n  };\n  document.body.appendChild(jumpButton);\n}\n;// ./src/scene.js\nfunction scene_typeof(o) { "@babel/helpers - typeof"; return scene_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, scene_typeof(o); }\nfunction scene_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ scene_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == scene_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(scene_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction scene_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction scene_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { scene_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { scene_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// scene.js\n\n\nvar scene, camera, renderer;\nvar clock = new three_core/* Clock */.zD7(); // Экспортируем часы для использования в index.js\n\n// Активные клавиши\nvar activeKeys = {};\nfunction initScene() {\n  return _initScene.apply(this, arguments);\n}\nfunction _initScene() {\n  _initScene = scene_asyncToGenerator(/*#__PURE__*/scene_regeneratorRuntime().mark(function _callee() {\n    var ambientLight, directionalLight, d, axesHelper, gridHelper;\n    return scene_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          console.log("[Scene] Начало инициализации сцены");\n          _context.prev = 1;\n          // Инициализируем физику в первую очередь\n          console.log("[Scene] Вызов initAmmo()...");\n          _context.next = 5;\n          return initAmmo();\n        case 5:\n          if (localPhysicsWorld) {\n            _context.next = 10;\n            break;\n          }\n          console.error("[Scene] Критическая ошибка: localPhysicsWorld не инициализирован после вызова initAmmo()");\n          throw new Error("Не удалось инициализировать физический мир");\n        case 10:\n          console.log("[Scene] Физический мир успешно инициализирован:", !!localPhysicsWorld);\n        case 11:\n          // Создаем сцену\n          scene = new three_core/* Scene */.Z58();\n          scene.background = new three_core/* Color */.Q1f(0x87ceeb); // Голубое небо\n\n          // Настраиваем туман для добавления глубины\n          scene.fog = new three_core/* FogExp2 */.cRK(0xcccccc, 0.002);\n\n          // Создаем камеру\n          camera = new three_core/* PerspectiveCamera */.ubm(75,\n          // поле зрения\n          window.innerWidth / window.innerHeight,\n          // соотношение сторон\n          0.1,\n          // ближняя плоскость отсечения\n          1000 // дальняя плоскость отсечения\n          );\n\n          // Позиционируем камеру\n          camera.position.set(0, 5, 10);\n          camera.lookAt(0, 0, 0);\n\n          // Создаем рендерер\n          renderer = new three_module.WebGLRenderer({\n            antialias: true,\n            powerPreference: "high-performance"\n          });\n          renderer.setSize(window.innerWidth, window.innerHeight);\n          renderer.setPixelRatio(window.devicePixelRatio);\n\n          // Включаем тени\n          renderer.shadowMap.enabled = true;\n          renderer.shadowMap.type = three_core/* PCFSoftShadowMap */.Wk7;\n\n          // Добавляем рендерер в DOM\n          document.body.appendChild(renderer.domElement);\n\n          // Настраиваем обработчик изменения размера окна\n          window.addEventListener(\'resize\', function () {\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n          });\n\n          // Добавляем основное освещение\n          ambientLight = new three_core/* AmbientLight */.$p8(0x404040, 1.5);\n          scene.add(ambientLight);\n          directionalLight = new three_core/* DirectionalLight */.ZyN(0xffffff, 1);\n          directionalLight.position.set(50, 100, 50);\n          directionalLight.castShadow = true;\n\n          // Настраиваем тени от направленного света\n          directionalLight.shadow.mapSize.width = 2048;\n          directionalLight.shadow.mapSize.height = 2048;\n          directionalLight.shadow.camera.near = 0.5;\n          directionalLight.shadow.camera.far = 500;\n          d = 100;\n          directionalLight.shadow.camera.left = -d;\n          directionalLight.shadow.camera.right = d;\n          directionalLight.shadow.camera.top = d;\n          directionalLight.shadow.camera.bottom = -d;\n          scene.add(directionalLight);\n\n          // Добавляем вспомогательные объекты для отладки (оси, сетку)\n          if (physicsSettings.debugMode) {\n            axesHelper = new three_core/* AxesHelper */.IzY(10);\n            scene.add(axesHelper);\n            gridHelper = new three_core/* GridHelper */.fTw(100, 100);\n            scene.add(gridHelper);\n          }\n\n          // Настраиваем обработчики клавиш\n          window.addEventListener(\'keydown\', function (event) {\n            console.log("[Scene] Нажата клавиша:", event.code);\n            activeKeys[event.code] = true;\n\n            // Проверяем наличие mainPlayer перед применением импульса\n            if (physics_objects["mainPlayer"]) {\n              var cmd = null;\n              switch (event.code) {\n                case "ArrowLeft":\n                case "KeyA":\n                  cmd = "LEFT";\n                  break;\n                case "ArrowRight":\n                case "KeyD":\n                  cmd = "RIGHT";\n                  break;\n                case "ArrowUp":\n                case "KeyW":\n                  cmd = "UP";\n                  break;\n                case "ArrowDown":\n                case "KeyS":\n                  cmd = "DOWN";\n                  break;\n                case "Space":\n                  cmd = "SPACE";\n                  break;\n              }\n              if (cmd) {\n                console.log("[Scene] Применение импульса к mainPlayer:", cmd);\n                applyImpulseToSphere(cmd, physics_objects);\n              }\n            } else {\n              console.warn("[Scene] mainPlayer не найден, импульс не может быть применен");\n            }\n          });\n          window.addEventListener(\'keyup\', function (event) {\n            delete activeKeys[event.code];\n          });\n\n          // Вешаем таймер для проверки активных клавиш и непрерывного применения импульса при удержании\n          setInterval(function () {\n            // Проверяем наличие mainPlayer\n            if (!physics_objects["mainPlayer"]) {\n              return;\n            }\n            for (var key in activeKeys) {\n              if (activeKeys[key]) {\n                var cmd = null;\n                switch (key) {\n                  case "ArrowLeft":\n                  case "KeyA":\n                    cmd = "LEFT";\n                    break;\n                  case "ArrowRight":\n                  case "KeyD":\n                    cmd = "RIGHT";\n                    break;\n                  case "ArrowUp":\n                  case "KeyW":\n                    cmd = "UP";\n                    break;\n                  case "ArrowDown":\n                  case "KeyS":\n                    cmd = "DOWN";\n                    break;\n                  case "Space":\n                    cmd = "SPACE";\n                    break;\n                }\n                if (cmd) {\n                  console.log("[Scene] Удержание клавиши, команда:", cmd);\n                  applyImpulseToSphere(cmd, physics_objects);\n                }\n              }\n            }\n          }, 100); // Проверяем каждые 100 мс\n\n          console.log("[Scene] Сцена успешно инициализирована");\n          return _context.abrupt("return", Promise.resolve());\n        case 47:\n          _context.prev = 47;\n          _context.t0 = _context["catch"](1);\n          console.error("[Scene] Ошибка при инициализации сцены:", _context.t0);\n          return _context.abrupt("return", Promise.reject(_context.t0));\n        case 51:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[1, 47]]);\n  }));\n  return _initScene.apply(this, arguments);\n}\n;// ./src/objects.js\nfunction objects_toConsumableArray(r) { return objects_arrayWithoutHoles(r) || objects_iterableToArray(r) || objects_unsupportedIterableToArray(r) || objects_nonIterableSpread(); }\nfunction objects_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction objects_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return objects_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? objects_arrayLikeToArray(r, a) : void 0; } }\nfunction objects_iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction objects_arrayWithoutHoles(r) { if (Array.isArray(r)) return objects_arrayLikeToArray(r); }\nfunction objects_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n// objects.js\n\n\n\nvar objects_objects = {}; // Словарь объектов: id -> { mesh, body, serverPos, ... }\n\nfunction objects_createMeshAndBodyForObject(obj) {\n  if (!obj) {\n    console.error("[Objects] Попытка создать меш для undefined объекта");\n    return;\n  }\n  console.log("[Objects] \\u0421\\u043E\\u0437\\u0434\\u0430\\u043D\\u0438\\u0435 \\u043C\\u0435\\u0448\\u0430 \\u0434\\u043B\\u044F \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(obj.id, " \\u0442\\u0438\\u043F\\u0430 ").concat(obj.object_type));\n\n  // Специальная обработка для mainPlayer (ранее server_sphere)\n  if (obj.id === "mainPlayer") {\n    console.log("[Objects] Создание основного игрока (mainPlayer)");\n  }\n  var mesh;\n\n  // Создаем меш в зависимости от типа объекта\n  switch (obj.object_type) {\n    case "sphere":\n      // Создаем сферу\n      var geometry = new three_core/* SphereGeometry */.Gu$(obj.radius || 1, 32, 32);\n      var material = new three_core/* MeshStandardMaterial */._4j({\n        color: obj.color || 0xff0000,\n        roughness: 0.5,\n        metalness: 0.2\n      });\n      mesh = new three_core/* Mesh */.eaF(geometry, material);\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n\n      // Если это главный игрок, добавляем визуальные индикаторы\n      if (obj.id === "mainPlayer") {\n        // Добавляем стрелку направления для наглядности\n        var arrowHelper = new three_core/* ArrowHelper */.E0M(new three_core/* Vector3 */.Pq0(1, 0, 0),\n        // направление по х\n        new three_core/* Vector3 */.Pq0(0, 0, 0),\n        // начало\n        obj.radius * 2,\n        // длина\n        0x00ff00,\n        // цвет\n        obj.radius * 0.2,\n        // размер головки\n        obj.radius * 0.1 // размер хвоста\n        );\n        mesh.add(arrowHelper);\n\n        // Добавляем оси для ориентации\n        var axesHelper = new three_core/* AxesHelper */.IzY(obj.radius * 1.5);\n        mesh.add(axesHelper);\n        console.log("[Objects] К mainPlayer добавлены индикаторы направления");\n      }\n      break;\n    case "box":\n      // Создаем куб\n      var boxGeometry = new three_core/* BoxGeometry */.iNn(obj.width || 1, obj.height || 1, obj.depth || 1);\n      var boxMaterial = new three_core/* MeshStandardMaterial */._4j({\n        color: obj.color || 0x00ff00,\n        roughness: 0.7,\n        metalness: 0.1\n      });\n      mesh = new three_core/* Mesh */.eaF(boxGeometry, boxMaterial);\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      break;\n    case "terrain":\n      mesh = createTerrainMesh(obj);\n      break;\n    case "tree":\n      mesh = createTreeMesh(obj);\n      break;\n    default:\n      console.warn("[Objects] \\u041D\\u0435\\u0438\\u0437\\u0432\\u0435\\u0441\\u0442\\u043D\\u044B\\u0439 \\u0442\\u0438\\u043F \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430: ".concat(obj.object_type));\n      return;\n  }\n\n  // Устанавливаем позицию объекта\n  mesh.position.set(obj.x || 0, obj.y || 0, obj.z || 0);\n\n  // Добавляем объект в сцену\n  if (scene) {\n    scene.add(mesh);\n    console.log("[Objects] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(obj.id, " \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D \\u0432 \\u0441\\u0446\\u0435\\u043D\\u0443"));\n  } else {\n    console.warn("[Objects] Сцена не инициализирована, невозможно добавить объект");\n  }\n\n  // Сохраняем меш в объекте\n  obj.mesh = mesh;\n  console.log("[Objects] \\u0421\\u043E\\u0437\\u0434\\u0430\\u043D \\u043C\\u0435\\u0448 \\u0434\\u043B\\u044F \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(obj.id, ":"), mesh);\n\n  // Создаем физическое тело только для объектов с физикой\n  if (obj.object_type === "sphere" || obj.object_type === "terrain") {\n    physics_createPhysicsObject(obj);\n  }\n\n  // Сохраняем объект в общий список\n  objects_objects[obj.id] = obj;\n  return obj;\n}\nfunction createTerrainMesh(obj) {\n  console.log("[Objects] Создание визуальной модели террейна", obj);\n\n  // Проверяем наличие необходимых данных\n  if (!obj.height_data || !obj.heightmap_w || !obj.heightmap_h) {\n    console.error("[Objects] Отсутствуют данные для создания террейна:", obj);\n    return new three_core/* Mesh */.eaF(new three_core/* PlaneGeometry */.bdM(1, 1), new three_core/* MeshBasicMaterial */.V9B({\n      color: 0xff0000\n    }));\n  }\n\n  // Получаем параметры террейна с сервера\n  var terrainWidth = obj.heightmap_w;\n  var terrainDepth = obj.heightmap_h;\n  var scaleX = obj.scale_x || 1;\n  var scaleY = obj.scale_y || 1;\n  var scaleZ = obj.scale_z || 1;\n\n  // Определяем диапазон высот\n  var heightData = obj.height_data;\n  var minHeight = obj.min_height !== undefined ? obj.min_height : Math.min.apply(Math, objects_toConsumableArray(heightData));\n  var maxHeight = obj.max_height !== undefined ? obj.max_height : Math.max.apply(Math, objects_toConsumableArray(heightData));\n  console.log("[Objects] Параметры террейна:", {\n    ширина: terrainWidth,\n    глубина: terrainDepth,\n    минВысота: minHeight,\n    максВысота: maxHeight,\n    масштаб: {\n      x: scaleX,\n      y: scaleY,\n      z: scaleZ\n    }\n  });\n  try {\n    // Создаем геометрию плоскости с нужным количеством сегментов\n    var geometry = new three_core/* PlaneGeometry */.bdM(terrainWidth * scaleX, terrainDepth * scaleZ, terrainWidth - 1, terrainDepth - 1);\n\n    // Поворачиваем для соответствия координатам в физическом мире\n    geometry.rotateX(-Math.PI / 2);\n\n    // Применяем данные высот к вершинам\n    var positions = geometry.attributes.position.array;\n\n    // Для каждой вершины применяем соответствующую высоту\n    for (var i = 0, j = 0; i < positions.length; i += 3, j++) {\n      var x = Math.floor(j % terrainWidth);\n      var z = Math.floor(j / terrainWidth);\n      if (x < terrainWidth && z < terrainDepth) {\n        var index = z * terrainWidth + x;\n        if (index < heightData.length) {\n          // В повернутой геометрии Y-координата отвечает за высоту\n          positions[i + 1] = heightData[index] * scaleY;\n        }\n      }\n    }\n\n    // Обновляем нормали для правильного освещения\n    geometry.computeVertexNormals();\n\n    // Смещаем геометрию по Y для выравнивания с физическим телом\n    geometry.translate(0, (maxHeight + minHeight) / 2 * scaleY, 0);\n\n    // Создаем материал\n    var material = new three_core/* MeshStandardMaterial */._4j({\n      color: obj.color ? parseColor(obj.color) : 0x5c8a50,\n      roughness: 0.8,\n      metalness: 0.1,\n      flatShading: false,\n      side: three_core/* DoubleSide */.$EB\n    });\n\n    // Создаем меш\n    var mesh = new three_core/* Mesh */.eaF(geometry, material);\n    mesh.receiveShadow = true;\n    mesh.castShadow = true;\n    console.log("[Objects] Террейн успешно создан");\n    return mesh;\n  } catch (error) {\n    console.error("[Objects] Ошибка при создании террейна:", error);\n    // Возвращаем простой меш для отладки\n    return new three_core/* Mesh */.eaF(new three_core/* PlaneGeometry */.bdM(10, 10), new three_core/* MeshBasicMaterial */.V9B({\n      color: 0xff0000,\n      wireframe: true\n    }));\n  }\n}\nfunction createSphereMesh(data) {\n  // Создаем геометрию и материал сферы\n  var geometry = new THREE.SphereGeometry(data.radius || 1, 32, 32);\n  var material = new THREE.MeshPhongMaterial({\n    color: parseColor(data.color || "#ff0000"),\n    shininess: 30,\n    specular: 0x444444\n  });\n  var mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n  return mesh;\n}\nfunction createTreeMesh(data) {\n  var group = new three_core/* Group */.YJl();\n\n  // Создаем ветки, если они заданы\n  if (data.branches && Array.isArray(data.branches)) {\n    data.branches.forEach(function (branch) {\n      // Проверяем наличие необходимых координат\n      if (!branch.startX || !branch.startY || !branch.startZ || !branch.endX || !branch.endY || !branch.endZ) {\n        return;\n      }\n\n      // Создаем геометрию и материал для ветки\n      var branchGeo = new three_core/* CylinderGeometry */.Ho_(branch.radiusTop || branch.radius || 0.1, branch.radiusBottom || branch.radius || 0.2, 1, 8);\n      var branchMat = new three_core/* MeshStandardMaterial */._4j({\n        color: parseColor(branch.color || "#654321")\n      });\n      var branchMesh = new three_core/* Mesh */.eaF(branchGeo, branchMat);\n\n      // Позиционируем и ориентируем ветку\n      var midX = (branch.startX + branch.endX) / 2;\n      var midY = (branch.startY + branch.endY) / 2;\n      var midZ = (branch.startZ + branch.endZ) / 2;\n      branchMesh.position.set(midX, midY, midZ);\n      branchMesh.lookAt(new three_core/* Vector3 */.Pq0(branch.endX, branch.endY, branch.endZ));\n\n      // Масштабируем ветку по длине\n      var length = new three_core/* Vector3 */.Pq0(branch.endX - branch.startX, branch.endY - branch.startY, branch.endZ - branch.startZ).length();\n      branchMesh.scale.set(1, length, 1);\n      group.add(branchMesh);\n    });\n  }\n  return group;\n}\nfunction createDefaultMesh(data) {\n  var geo = new THREE.BoxGeometry(1, 1, 1);\n  var mesh = new THREE.Mesh(geo, new THREE.MeshLambertMaterial({\n    color: parseColor(data.color || "#888888")\n  }));\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n  return mesh;\n}\nfunction parseColor(colorStr) {\n  if (!colorStr) return 0x888888;\n  if (typeof colorStr === \'number\') return colorStr;\n  if (colorStr.startsWith("#")) {\n    return parseInt(colorStr.slice(1), 16);\n  }\n  return 0x888888;\n}\n;// ./src/network.js\n// network.js\n\n\n\nvar socket = null;\nvar connected = false;\nfunction initNetwork() {\n  console.log("[Network] Инициализация сети");\n\n  // WebSocket URL\n  // const wsURL = "ws://" + window.location.host + "/ws";\n  var wsURL = "ws://localhost:8080/ws";\n\n  // Создание WebSocket соединения\n  try {\n    socket = new WebSocket(wsURL);\n    console.log("[Network] Создано соединение WebSocket:", wsURL);\n\n    // Обработчик открытия соединения\n    socket.onopen = function () {\n      console.log("[Network] WebSocket соединение установлено");\n      connected = true;\n\n      // Запрашиваем у сервера создание mainPlayer\n      sendCommand("CREATE_PLAYER", "");\n      console.log("[Network] Отправлен запрос на создание mainPlayer");\n    };\n\n    // Обработчик сообщений от сервера\n    socket.onmessage = function (event) {\n      try {\n        var message = JSON.parse(event.data);\n        console.log("[Network] Получено сообщение от сервера:", message);\n        handleMessage(message);\n      } catch (error) {\n        console.error("[Network] Ошибка обработки сообщения:", error);\n      }\n    };\n\n    // Обработчик закрытия соединения\n    socket.onclose = function () {\n      console.log("[Network] WebSocket соединение закрыто");\n      connected = false;\n    };\n\n    // Обработчик ошибок\n    socket.onerror = function (error) {\n      console.error("[Network] Ошибка WebSocket:", error);\n    };\n  } catch (error) {\n    console.error("[Network] Ошибка при создании WebSocket:", error);\n  }\n}\n\n// Функция отправки команды на сервер\nfunction sendCommand(cmd, data) {\n  if (socket && socket.readyState === WebSocket.OPEN) {\n    var message = {\n      cmd: cmd,\n      data: data\n    };\n    try {\n      socket.send(JSON.stringify(message));\n      console.log("[Network] Отправлена команда:", cmd, data);\n    } catch (error) {\n      console.error("[Network] Ошибка отправки команды:", error);\n    }\n  } else {\n    console.warn("[Network] WebSocket не готов для отправки команды:", cmd);\n  }\n}\n\n// Обработчик сообщений от сервера\nfunction handleMessage(message) {\n  // Отладочный вывод для всех входящих сообщений\n  console.log("[Network] Обработка сообщения:", message);\n  if (message.type === "create") {\n    // Проверяем, существует ли уже такой объект\n    if (objects_objects[message.id]) {\n      console.log("[Network] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(message.id, " \\u0443\\u0436\\u0435 \\u0441\\u0443\\u0449\\u0435\\u0441\\u0442\\u0432\\u0443\\u0435\\u0442:"), objects_objects[message.id]);\n      return;\n    }\n    console.log("[Network] \\u0421\\u043E\\u0437\\u0434\\u0430\\u043D\\u0438\\u0435 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(message.id, " \\u0442\\u0438\\u043F\\u0430 ").concat(message.object_type));\n\n    // Создание объекта\n    var obj = {\n      id: message.id,\n      object_type: message.object_type,\n      x: message.x || 0,\n      y: message.y || 1,\n      z: message.z || 0,\n      mass: message.mass || 1,\n      radius: message.radius || 1,\n      color: message.color || "#ff0000"\n    };\n\n    // Специальная обработка для mainPlayer\n    if (message.id === "mainPlayer") {\n      console.log("[Network] Создан основной игрок (mainPlayer)");\n    }\n    objects_objects[message.id] = obj;\n    objects_createMeshAndBodyForObject(obj);\n    console.log("[Network] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(message.id, " \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D \\u0438 \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D \\u0432 \\u0441\\u0446\\u0435\\u043D\\u0443"));\n  } else if (message.type === "update") {\n    // Получаем объект для обновления\n    var _obj = objects_objects[message.id];\n    if (!_obj) {\n      console.warn("[Network] \\u041D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(message.id, " \\u0434\\u043B\\u044F \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u044F"));\n      return;\n    }\n\n    // Обновляем положение и вращение\n    if (_obj.mesh) {\n      if (message.position) {\n        _obj.mesh.position.set(message.position.x || _obj.mesh.position.x, message.position.y || _obj.mesh.position.y, message.position.z || _obj.mesh.position.z);\n      }\n      if (message.rotation) {\n        _obj.mesh.rotation.set(message.rotation.x || _obj.mesh.rotation.x, message.rotation.y || _obj.mesh.rotation.y, message.rotation.z || _obj.mesh.rotation.z);\n      }\n    }\n  } else if (message.type === "command") {\n    // Обработка команд от сервера\n    console.log("[Network] Получена команда от сервера:", message.cmd);\n    if (message.cmd === "CREATE_PLAYER" && message.data) {\n      // Если сервер отправил команду на создание игрока с данными\n      try {\n        var playerData = JSON.parse(message.data);\n\n        // Создаем объект игрока, если его еще нет\n        if (!objects_objects["mainPlayer"]) {\n          var playerObj = {\n            id: "mainPlayer",\n            object_type: "sphere",\n            x: playerData.x || 0,\n            y: playerData.y || 1,\n            z: playerData.z || 0,\n            mass: playerData.mass || 1,\n            radius: playerData.radius || 1,\n            color: playerData.color || "#ff0000"\n          };\n          objects_objects["mainPlayer"] = playerObj;\n          objects_createMeshAndBodyForObject(playerObj);\n          console.log("[Network] Создан игрок по команде сервера:", playerObj);\n        }\n      } catch (error) {\n        console.error("[Network] Ошибка создания игрока по команде:", error);\n      }\n    }\n  }\n}\nfunction handleKeyPress(event) {\n  if (event.repeat) return;\n  var cmd = null;\n  switch (event.code) {\n    case "ArrowLeft":\n    case "KeyA":\n      cmd = "LEFT";\n      break;\n    case "ArrowRight":\n    case "KeyD":\n      cmd = "RIGHT";\n      break;\n    case "ArrowUp":\n    case "KeyW":\n      cmd = "UP";\n      break;\n    case "ArrowDown":\n    case "KeyS":\n      cmd = "DOWN";\n      break;\n    case "Space":\n      cmd = "SPACE";\n      break;\n  }\n  if (cmd && socket && socket.readyState === WebSocket.OPEN) {\n    console.log("[Network] Отправка команды:", cmd);\n    sendCommand(cmd, "");\n    applyImpulseToSphere(cmd, objects_objects);\n  } else if (cmd) {\n    console.warn("[Network] Не удалось отправить команду: WebSocket не готов");\n\n    // Если нет соединения с сервером, всё равно применяем импульс\n    applyImpulseToSphere(cmd, objects_objects);\n  }\n}\ndocument.addEventListener("keydown", handleKeyPress);\n;// ./src/index.js\nfunction src_typeof(o) { "@babel/helpers - typeof"; return src_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, src_typeof(o); }\nfunction src_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ src_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == src_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(src_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction src_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction src_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// index.js\n\n\n\n\n\n\n// Настройки камеры\nvar cameraSettings = {\n  height: 80,\n  // Высота камеры\n  distance: 80,\n  // Расстояние от объекта\n  smoothness: 0.1 // Плавность движения камеры\n};\n\n// Флаг для отслеживания работы анимации\nvar animationRunning = false;\nfunction animate() {\n  console.log("[Animate] Кадр анимации");\n\n  // Запрашиваем следующий кадр\n  requestAnimationFrame(animate);\n\n  // Проверяем, инициализирована ли сцена\n  if (!scene || !camera || !renderer) {\n    console.warn("[Animate] Сцена не инициализирована полностью");\n    return;\n  }\n\n  // Обновляем физику\n  var deltaTime = clock.getDelta();\n  if (deltaTime > 0) {\n    console.log("[Animate] Шаг физики, deltaTime:", deltaTime);\n    stepPhysics(deltaTime);\n\n    // Обновляем объекты на основе физики\n    updatePhysicsObjects(physics_objects);\n\n    // Выводим информацию о положении объектов (только для отладки)\n    if (Math.random() < 0.01) {\n      // Примерно раз в 100 кадров\n      for (var id in physics_objects) {\n        var obj = physics_objects[id];\n        if (obj && obj.mesh && obj.object_type === "sphere") {\n          console.log("[Debug] \\u041F\\u043E\\u0437\\u0438\\u0446\\u0438\\u044F ".concat(id, ":"), obj.mesh.position);\n        }\n      }\n    }\n  }\n\n  // Находим целевой объект для камеры - теперь это mainPlayer\n  var targetObject = physics_objects["mainPlayer"];\n\n  // Если mainPlayer не найден, ищем любую доступную сферу\n  if (!targetObject || !targetObject.mesh) {\n    for (var _id in physics_objects) {\n      var _obj = physics_objects[_id];\n      if (_obj && _obj.mesh && _obj.object_type === "sphere") {\n        targetObject = _obj;\n        break;\n      }\n    }\n  }\n\n  // Обновляем позицию камеры\n  if (targetObject && targetObject.mesh) {\n    var targetPos = targetObject.mesh.position;\n\n    // Создаем желаемую позицию камеры\n    var cameraTarget = new three_core/* Vector3 */.Pq0(targetPos.x, targetPos.y + cameraSettings.height, targetPos.z + cameraSettings.distance);\n\n    // Плавно перемещаем камеру\n    camera.position.lerp(cameraTarget, cameraSettings.smoothness);\n\n    // Настраиваем точку, на которую смотрит камера\n    var lookAtPoint = new three_core/* Vector3 */.Pq0(targetPos.x, targetPos.y, targetPos.z);\n    camera.lookAt(lookAtPoint);\n  } else {\n    // Если нет целевого объекта, устанавливаем камеру в стандартную позицию\n    camera.position.set(0, cameraSettings.height, cameraSettings.distance);\n    camera.lookAt(0, 0, 0);\n  }\n\n  // Рендеринг сцены\n  renderer.render(scene, camera);\n}\nfunction start() {\n  return _start.apply(this, arguments);\n} // Функция для создания базовых элементов сцены\nfunction _start() {\n  _start = src_asyncToGenerator(/*#__PURE__*/src_regeneratorRuntime().mark(function _callee() {\n    return src_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          console.log("[Start] Начало инициализации");\n          _context.prev = 1;\n          _context.next = 4;\n          return initScene();\n        case 4:\n          console.log("[Start] Сцена инициализирована");\n\n          // Инициализируем сеть - теперь сервер будет отвечать за создание mainPlayer\n          initNetwork();\n          console.log("[Start] Сеть инициализирована");\n\n          // Создаем базовые элементы сцены, например, пол\n          createBasicSceneElements();\n\n          // Выводим список всех объектов перед запуском анимации\n          console.log("[Start] Список объектов перед запуском анимации:", Object.keys(physics_objects));\n\n          // Помечаем, что анимация запущена\n          animationRunning = true;\n\n          // Запускаем анимацию\n          console.log("[Start] Запуск анимации");\n          animate();\n          _context.next = 17;\n          break;\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context["catch"](1);\n          console.error("[Error] Ошибка при инициализации:", _context.t0);\n        case 17:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[1, 14]]);\n  }));\n  return _start.apply(this, arguments);\n}\nfunction createBasicSceneElements() {\n  // Создаем плоскость для пола, если её ещё нет\n  if (!physics_objects["floor"]) {\n    console.log("[Index] Создание пола");\n\n    // Создаем визуальную плоскость\n    var floorGeometry = new three_core/* PlaneGeometry */.bdM(100, 100);\n    var floorMaterial = new three_core/* MeshStandardMaterial */._4j({\n      color: 0x888888,\n      roughness: 0.8,\n      metalness: 0.2\n    });\n    var floorMesh = new three_core/* Mesh */.eaF(floorGeometry, floorMaterial);\n    floorMesh.rotation.x = -Math.PI / 2; // Поворачиваем горизонтально\n    floorMesh.position.y = 0;\n    floorMesh.receiveShadow = true;\n\n    // Добавляем в сцену\n    scene.add(floorMesh);\n\n    // Создаем объект пола\n    var floor = {\n      id: "floor",\n      object_type: "box",\n      x: 0,\n      y: -0.5,\n      // Чуть ниже нуля, чтобы сфера не проваливалась\n      z: 0,\n      mass: 0,\n      // Масса 0 = статический объект\n      width: 100,\n      height: 1,\n      depth: 100\n    };\n    floor.mesh = floorMesh;\n    physics_objects["floor"] = floor;\n\n    // Создаем физическое тело для пола\n    if (window.Ammo) {\n      try {\n        var transform = new window.Ammo.btTransform();\n        transform.setIdentity();\n        transform.setOrigin(new window.Ammo.btVector3(0, -0.5, 0));\n        var shape = new window.Ammo.btBoxShape(new window.Ammo.btVector3(50, 0.5, 50));\n        var motionState = new window.Ammo.btDefaultMotionState(transform);\n        var rbInfo = new window.Ammo.btRigidBodyConstructionInfo(0,\n        // Масса 0 для статики\n        motionState, shape, new window.Ammo.btVector3(0, 0, 0));\n        floor.body = new window.Ammo.btRigidBody(rbInfo);\n        floor.body.setFriction(0.5);\n        floor.body.setRestitution(0.2);\n        floor.body.setCollisionFlags(1); // CF_STATIC_OBJECT\n\n        // Добавляем в физический мир\n        window.physicsWorld.addRigidBody(floor.body);\n      } catch (e) {\n        console.error("[Index] Ошибка при создании физического тела пола:", e);\n      }\n    }\n  }\n}\nfunction handleWebSocketMessage(event) {\n  var message = JSON.parse(event.data);\n  if (message.type === "create") {\n    var obj = {\n      id: message.id,\n      object_type: message.object_type,\n      x: message.x,\n      y: message.y,\n      z: message.z,\n      mass: message.mass,\n      radius: message.radius,\n      color: message.color,\n      height_data: message.height_data,\n      heightmap_w: message.heightmap_w,\n      heightmap_h: message.heightmap_h,\n      scale_x: message.scale_x,\n      scale_y: message.scale_y,\n      scale_z: message.scale_z\n    };\n    createMeshAndBodyForObject(obj);\n    // Создаем физическое тело для объекта\n    createPhysicsObject(obj);\n    objects[obj.id] = obj;\n  }\n}\n\n// Добавляем обработчик клавиш\nfunction handleKeyDown(event) {\n  // Игнорируем повторные события при удержании клавиши\n  if (event.repeat) return;\n  switch (event.code) {\n    case \'ArrowLeft\':\n      applyImpulseToSphere(\'LEFT\', physics_objects);\n      break;\n    case \'ArrowRight\':\n      applyImpulseToSphere(\'RIGHT\', physics_objects);\n      break;\n    case \'ArrowUp\':\n      applyImpulseToSphere(\'UP\', physics_objects);\n      break;\n    case \'ArrowDown\':\n      applyImpulseToSphere(\'DOWN\', physics_objects);\n      break;\n    case \'Space\':\n      applyImpulseToSphere(\'SPACE\', physics_objects);\n      break;\n  }\n}\n\n// Добавляем обработчик ошибок\nwindow.addEventListener(\'error\', function (event) {\n  console.error(\'[Global Error]\', event.error);\n});\n\n// Добавляем обработчик для необработанных промисов\nwindow.addEventListener(\'unhandledrejection\', function (event) {\n  console.error(\'[Unhandled Promise Rejection]\', event.reason);\n});\n\n// Добавляем обработчик клавиш\nwindow.addEventListener(\'keydown\', handleKeyDown);\n\n// Запускаем приложение\nconsole.log(\'[Init] Запуск приложения...\');\nstart()["catch"](function (error) {\n  console.error(\'[Fatal Error] Критическая ошибка при запуске:\', error);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///909\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](B,B.exports,__webpack_require__),B.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,B,F)=>{if(!U){var C=1/0;for(g=0;g<deferred.length;g++){for(var[U,B,F]=deferred[g],L=!0,s=0;s<U.length;s++)(!1&F||C>=F)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[s])))?U.splice(s--,1):(L=!1,F<C&&(C=F));if(L){deferred.splice(g--,1);var I=B();void 0!==I&&(Q=I)}}return Q}F=F||0;for(var g=deferred.length;g>0&&deferred[g-1][2]>F;g--)deferred[g]=deferred[g-1];deferred[g]=[U,B,F]},__webpack_require__.d=(Q,U)=>{for(var B in U)__webpack_require__.o(U,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:U[B]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},(()=>{var Q={792:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,B)=>{var F,C,[L,s,I]=B,g=0;if(L.some((U=>0!==Q[U]))){for(F in s)__webpack_require__.o(s,F)&&(__webpack_require__.m[F]=s[F]);if(I)var t=I(__webpack_require__)}for(U&&U(B);g<L.length;g++)C=L[g],__webpack_require__.o(Q,C)&&Q[C]&&Q[C][0](),Q[C]=0;return __webpack_require__.O(t)},B=self.webpackChunkweb=self.webpackChunkweb||[];B.forEach(U.bind(null,0)),B.push=U.bind(null,B.push.bind(B))})();var __webpack_exports__=__webpack_require__.O(void 0,[233],(()=>__webpack_require__(909)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();