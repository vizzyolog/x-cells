(()=>{"use strict";var __webpack_modules__={251:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.core.js\nvar three_core = __webpack_require__(922);\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(437);\n;// ./src/scene.js\n// scene.js\n\nvar scene, camera, renderer;\nfunction initScene() {\n  console.log("try to initScene");\n  scene = new three_core/* Scene */.Z58();\n  scene.background = new three_core/* Color */.Q1f(0x88ccff);\n  camera = new three_core/* PerspectiveCamera */.ubm(60, window.innerWidth / window.innerHeight, 0.2, 2000);\n  camera.position.set(0, 50, 100);\n  camera.lookAt(0, 0, 0);\n  renderer = new three_module/* WebGLRenderer */.JeP({\n    antialias: true\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  // Включаем поддержку теней\n  renderer.shadowMap.enabled = true;\n  renderer.shadowMap.type = three_core/* PCFSoftShadowMap */.Wk7;\n  document.body.appendChild(renderer.domElement);\n  window.addEventListener(\'resize\', onWindowResize);\n\n  // Настраиваем освещение\n  var ambient = new three_core/* AmbientLight */.$p8(0xffffff, 0.5);\n  scene.add(ambient);\n\n  // Основной направленный свет с тенями\n  var directional = new three_core/* DirectionalLight */.ZyN(0xffffff, 1);\n  directional.position.set(50, 100, 50);\n  directional.castShadow = true;\n  // Настраиваем параметры теней\n  directional.shadow.camera.near = 0.1;\n  directional.shadow.camera.far = 500;\n  directional.shadow.camera.left = -100;\n  directional.shadow.camera.right = 100;\n  directional.shadow.camera.top = 100;\n  directional.shadow.camera.bottom = -100;\n  directional.shadow.mapSize.width = 2048;\n  directional.shadow.mapSize.height = 2048;\n  scene.add(directional);\n\n  // Добавляем вспомогательный свет для подсветки теней\n  var fillLight = new three_core/* DirectionalLight */.ZyN(0xffffff, 0.3);\n  fillLight.position.set(-50, 50, -50);\n  scene.add(fillLight);\n}\nfunction onWindowResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\n;// ./src/physics.js\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// physics.js\n\nvar localPhysicsWorld = null;\nvar ammoPromise = null;\nfunction initAmmo() {\n  return _initAmmo.apply(this, arguments);\n}\nfunction _initAmmo() {\n  _initAmmo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!ammoPromise) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt("return", ammoPromise);\n        case 2:\n          ammoPromise = new Promise(function (resolve, reject) {\n            var script = document.createElement(\'script\');\n            script.src = \'/ammo/ammo.wasm.js\'; // путь от корня веб-сервера\n            script.async = true;\n            script.onload = function () {\n              console.log("[Ammo] Скрипт загружен, инициализация...");\n              Ammo().then(function (AmmoLib) {\n                window.Ammo = AmmoLib;\n\n                // Инициализируем физический мир после загрузки Ammo\n                var collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n                var dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n                var broadphase = new AmmoLib.btDbvtBroadphase();\n                var solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n                localPhysicsWorld = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n                localPhysicsWorld.setGravity(new AmmoLib.btVector3(0, -9.81, 0));\n                console.log("[Ammo] Инициализация успешна");\n                resolve(AmmoLib);\n              })["catch"](reject);\n            };\n            script.onerror = function (error) {\n              console.error("[Ammo] Ошибка загрузки скрипта:", error);\n              reject(error);\n            };\n            document.body.appendChild(script);\n          });\n          return _context.abrupt("return", ammoPromise);\n        case 4:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _initAmmo.apply(this, arguments);\n}\nfunction stepPhysics(deltaTime) {\n  if (localPhysicsWorld) {\n    // Проверяем, что deltaTime имеет разумное значение\n    if (deltaTime <= 0 || deltaTime > 1) {\n      console.warn("[Physics] Подозрительное значение deltaTime:", deltaTime);\n      deltaTime = 1 / 60; // используем фиксированный шаг если что-то не так\n    }\n\n    // if (Math.random() < 0.016) { // примерно раз в секунду при 60 FPS\n    //     console.log("[Physics] Шаг симуляции:", {\n    //         deltaTime: deltaTime,\n    //     });\n    // }\n\n    localPhysicsWorld.stepSimulation(deltaTime, 10);\n  } else {\n    console.warn("[Physics] Физический мир не инициализирован");\n  }\n}\nfunction updatePhysicsObjects(objects) {\n  for (var id in objects) {\n    var obj = objects[id];\n    if (!obj.mesh) continue;\n    console.log("[Physics] \\u041E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(id, " \\u0441 physicsBy: ").concat(obj.physicsBy));\n    switch (obj.physicsBy) {\n      case "ammo":\n        // Обновление только по физике Ammo.js\n        if (obj.body && obj.object_type !== "terrain") {\n          var trans = new window.Ammo.btTransform();\n          obj.body.getMotionState().getWorldTransform(trans);\n          var locX = trans.getOrigin().x();\n          var locY = trans.getOrigin().y();\n          var locZ = trans.getOrigin().z();\n          var qx = trans.getRotation().x();\n          var qy = trans.getRotation().y();\n          var qz = trans.getRotation().z();\n          var qw = trans.getRotation().w();\n          obj.mesh.position.set(locX, locY, locZ);\n          obj.mesh.quaternion.set(qx, qy, qz, qw);\n        }\n        break;\n      case "bullet":\n        // Обновление только по серверным данным\n        if (obj.serverPos && obj.object_type !== "terrain") {\n          obj.mesh.position.set(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z);\n        }\n        break;\n      case "both":\n        // Обновление по обоим источникам\n        if (obj.object_type !== "terrain") {\n          if (obj.serverPos) {\n            // Обновляем физическое тело на основе серверной позиции\n            if (obj.body) {\n              var ms = obj.body.getMotionState();\n              if (ms) {\n                var transform = new window.Ammo.btTransform();\n                ms.getWorldTransform(transform);\n                transform.setOrigin(new window.Ammo.btVector3(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z));\n                ms.setWorldTransform(transform);\n\n                // Активируем тело, чтобы оно реагировало на физику\n                obj.body.activate(true);\n\n                // Сбрасываем скорость, чтобы избежать накопления\n                var zero = new window.Ammo.btVector3(0, 0, 0);\n                obj.body.setLinearVelocity(zero);\n                obj.body.setAngularVelocity(zero);\n                window.Ammo.destroy(zero);\n                window.Ammo.destroy(transform);\n              }\n            }\n\n            // Обновляем меш\n            obj.mesh.position.set(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z);\n          }\n        }\n        break;\n      default:\n        console.warn("[Physics] \\u041D\\u0435\\u0438\\u0437\\u0432\\u0435\\u0441\\u0442\\u043D\\u044B\\u0439 \\u0442\\u0438\\u043F physicsBy \\u0434\\u043B\\u044F \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(id, ": ").concat(obj.physicsBy));\n        break;\n    }\n  }\n}\nfunction applyImpulseToSphere(cmd, objects) {\n  console.log("[Debug] Переданные объекты в applyImpulseToSphere:", objects);\n  // Проверяем, что objects передан и является объектом\n  if (!objects || _typeof(objects) !== \'object\') {\n    console.warn("[Physics] Некорректные объекты переданы в applyImpulseToSphere");\n    return;\n  }\n\n  // Создаем импульс заранее, чтобы не создавать его для каждого шара\n  var impulse = new window.Ammo.btVector3(0, 0, 0);\n  if (cmd === "LEFT") impulse.setValue(-5, 0, 0);\n  if (cmd === "RIGHT") impulse.setValue(5, 0, 0);\n  if (cmd === "UP") impulse.setValue(0, 0, -5);\n  if (cmd === "DOWN") impulse.setValue(0, 0, 5);\n  if (cmd === "SPACE") impulse.setValue(0, 10, 0);\n\n  // Проходим по всем объектам и применяем импульс только к шарам с physicsBy: "ammo"\n  for (var id in objects) {\n    var obj = objects[id];\n    if (obj && obj.mesh && obj.mesh.geometry && obj.mesh.geometry.type === "SphereGeometry" && obj.body && obj.physicsBy === "ammo" // Только для локально управляемых объектов\n    ) {\n      obj.body.activate(true);\n      obj.body.applyCentralImpulse(impulse);\n\n      // Добавляем диагностику для каждого шара\n      var velocity = obj.body.getLinearVelocity();\n      console.log("[Physics] Состояние шара:", {\n        id: id,\n        physicsBy: obj.physicsBy,\n        команда: cmd,\n        позиция: obj.mesh.position,\n        скорость: {\n          x: velocity.x(),\n          y: velocity.y(),\n          z: velocity.z()\n        }\n      });\n    }\n  }\n\n  // Очищаем память\n  Ammo.destroy(impulse);\n}\n;// ./src/objects.js\n// objects.js\n\n\n\nvar objects = {}; // Словарь объектов: id -> { mesh, body, serverPos, ... }\n\nfunction createMeshAndBodyForObject(data) {\n  if (!data || !data.object_type) {\n    console.error("Invalid data received for object creation:", data);\n    return null;\n  }\n  var type = data.object_type;\n  var mesh,\n    body = null;\n  switch (type) {\n    case "terrain":\n      mesh = createTerrainMesh(data);\n      body = createPhysicsBodyForTerrain(data);\n      break;\n    case "sphere":\n      mesh = createSphereMesh(data);\n      body = createPhysicsBodyForSphere(data);\n      break;\n    case "tree":\n      mesh = createTreeMesh(data);\n      break;\n    default:\n      console.warn("Unknown object type: ".concat(type));\n      mesh = createDefaultMesh(data);\n      break;\n  }\n  scene.add(mesh);\n  return {\n    mesh: mesh,\n    body: body\n  };\n}\nfunction createPhysicsBodyForTerrain(data) {\n  if (typeof Ammo === \'undefined\') {\n    console.error(\'Ammo.js не инициализирован\');\n    return null;\n  }\n  if (!localPhysicsWorld) {\n    console.error(\'Физический мир не инициализирован\');\n    return null;\n  }\n  var w = data.heightmap_w;\n  var h = data.heightmap_h;\n  var scaleX = data.scale_x;\n  var scaleZ = data.scale_z;\n\n  // Создаем буфер в памяти Ammo для данных высот\n  var ammoHeightData = Ammo._malloc(4 * w * h);\n\n  // Копируем данные высот в память Ammo\n  var p = 0;\n  var p2 = 0;\n  for (var j = 0; j < h; j++) {\n    for (var i = 0; i < w; i++) {\n      Ammo.HEAPF32[ammoHeightData + p2 >> 2] = data.height_data[p];\n      p++;\n      p2 += 4;\n    }\n  }\n\n  // Создаем форму террейна\n  var shape = new Ammo.btHeightfieldTerrainShape(w, h, ammoHeightData, 1,\n  // heightScale\n  data.min_height, data.max_height, 1,\n  // up axis = 1 для Y\n  Ammo.PHY_FLOAT, false // flipQuadEdges\n  );\n\n  // Устанавливаем масштабирование\n  shape.setLocalScaling(new Ammo.btVector3(scaleX, data.scale_y, scaleZ));\n  shape.setMargin(0.5);\n\n  // Создаем трансформацию\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n\n  // Важно! Смещаем террейн, так как Bullet центрирует его по ограничивающему боксу\n  transform.setOrigin(new Ammo.btVector3(data.x || 0, (data.min_height + data.max_height) / 2, data.z || 0));\n  var mass = 0; // Статическое тело\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Добавляем тело в физический мир с правильными параметрами коллизий\n  var TERRAIN_GROUP = 1; // группа для террейна\n  var SPHERE_GROUP = 2; // группа для сфер\n  localPhysicsWorld.addRigidBody(body, TERRAIN_GROUP, SPHERE_GROUP); // террейн сталкивается только со сферами\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n  console.log("[Terrain] Физическое тело создано:", {\n    размеры: {\n      w: w,\n      h: h\n    },\n    масштаб: {\n      x: scaleX,\n      y: data.scale_y,\n      z: scaleZ\n    },\n    позиция: {\n      x: data.x || 0,\n      y: (data.min_height + data.max_height) / 2,\n      z: data.z || 0\n    },\n    минВысота: data.min_height,\n    максВысота: data.max_height\n  });\n  return body;\n}\nfunction createTerrainMesh(data) {\n  var w = data.heightmap_w || 64;\n  var h = data.heightmap_h || 64;\n  var geo = new three_core/* PlaneGeometry */.bdM(w * data.scale_x, h * data.scale_z, w - 1, h - 1);\n  geo.rotateX(-Math.PI / 2);\n  if (data.height_data) {\n    var verts = geo.attributes.position.array;\n    for (var i = 0; i < verts.length; i += 3) {\n      var ix = i / 3 % w;\n      var iz = Math.floor(i / 3 / w);\n      verts[i + 1] = data.height_data[iz * w + ix] * data.scale_y;\n    }\n    geo.computeVertexNormals();\n  }\n  var mesh = new three_core/* Mesh */.eaF(geo, new three_core/* MeshPhongMaterial */.tXL({\n    color: parseColor(data.color || "#888888"),\n    wireframe: false,\n    flatShading: true\n  }));\n\n  // Включаем тени для террейна\n  mesh.receiveShadow = true;\n  return mesh;\n}\nfunction createSphereMesh(data) {\n  var geo = new three_core/* SphereGeometry */.Gu$(data.radius || 1, 32, 32);\n  var mesh = new three_core/* Mesh */.eaF(geo, new three_core/* MeshPhongMaterial */.tXL({\n    color: parseColor(data.color || "#888888"),\n    shininess: 30\n  }));\n\n  // Включаем тени для сфер\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n  return mesh;\n}\nfunction createTreeMesh(data) {\n  var group = new three_core/* Group */.YJl();\n  if (data.branches && Array.isArray(data.branches)) {\n    data.branches.forEach(function (branch, index) {\n      if (branch.startX === undefined || branch.startY === undefined || branch.startZ === undefined || branch.endX === undefined || branch.endY === undefined || branch.endZ === undefined) {\n        console.warn("Branch coordinates are missing or invalid at index ".concat(index, ":"), branch);\n        return;\n      }\n      var branchGeo = new three_core/* CylinderGeometry */.Ho_(branch.radiusTop || branch.radius || 0.1,\n      // верхний радиус\n      branch.radiusBottom || branch.radius || 0.2,\n      // нижний радиус\n      1, 8);\n      var branchMat = new three_core/* MeshPhongMaterial */.tXL({\n        color: parseColor(branch.color || "#654321"),\n        shininess: 10\n      });\n      var branchMesh = new three_core/* Mesh */.eaF(branchGeo, branchMat);\n\n      // Включаем тени для веток\n      branchMesh.castShadow = true;\n      branchMesh.receiveShadow = true;\n      var midX = (branch.startX + branch.endX) / 2;\n      var midY = (branch.startY + branch.endY) / 2;\n      var midZ = (branch.startZ + branch.endZ) / 2;\n      branchMesh.position.set(midX, midY, midZ);\n      branchMesh.lookAt(new three_core/* Vector3 */.Pq0(branch.endX, branch.endY, branch.endZ));\n      var length = new three_core/* Vector3 */.Pq0(branch.endX - branch.startX, branch.endY - branch.startY, branch.endZ - branch.startZ).length();\n      branchMesh.scale.set(1, length, 1);\n      group.add(branchMesh);\n    });\n  }\n  return group;\n}\nfunction createDefaultMesh(data) {\n  var geo = new three_core/* BoxGeometry */.iNn(1, 1, 1);\n  return new three_core/* Mesh */.eaF(geo, new three_core/* MeshLambertMaterial */.G_z({\n    color: parseColor(data.color || "#888888")\n  }));\n}\nfunction createPhysicsBodyForSphere(data) {\n  try {\n    if (typeof Ammo === \'undefined\') {\n      console.error(\'Ammo.js не инициализирован\');\n      return null;\n    }\n    if (!localPhysicsWorld) {\n      console.error(\'Физический мир не инициализирован\');\n      return null;\n    }\n    var radius = data.radius || 1;\n    var mass = data.mass || 1;\n\n    // Создаем все Ammo объекты через window.Ammo\n    var shape = new window.Ammo.btSphereShape(radius);\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(data.x || 0, data.y || 0, data.z || 0));\n    var localInertia = new window.Ammo.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    var motionState = new window.Ammo.btDefaultMotionState(transform);\n    var rbInfo = new window.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    var body = new window.Ammo.btRigidBody(rbInfo);\n\n    // Добавляем тело в физический мир с правильными параметрами коллизий\n    var TERRAIN_GROUP = 1; // группа для террейна\n    var SPHERE_GROUP = 2; // группа для сфер\n    localPhysicsWorld.addRigidBody(body, SPHERE_GROUP, TERRAIN_GROUP); // сферы сталкиваются только с террейном\n\n    // Очистка памяти\n    window.Ammo.destroy(rbInfo);\n    window.Ammo.destroy(localInertia);\n    return body;\n  } catch (error) {\n    console.error(\'Ошибка при создании физического тела:\', error);\n    return null;\n  }\n}\n\n// export function debugPhysicsWorld() {\n//     if (!localPhysicsWorld) {\n//         console.error("[Physics Debug] Физический мир не инициализирован");\n//         return;\n//     }\n\n//     const numBodies = localPhysicsWorld.getNumCollisionObjects();\n//     console.log(`[Physics Debug] В физическом мире ${numBodies} объектов`);\n\n//     for (let i = 0; i < numBodies; i++) {\n//         const obj = localPhysicsWorld.getCollisionObjectArray().at(i);\n//         const transform = new Ammo.btTransform();\n\n//         if (obj.getMotionState()) {\n//             obj.getMotionState().getWorldTransform(transform);\n//         } else {\n//             obj.getWorldTransform(transform);\n//         }\n\n//         const pos = transform.getOrigin();\n//         const rot = transform.getRotation();\n\n//         console.log(`[Physics Debug] Объект #${i}:`, {\n//             позиция: { x: pos.x(), y: pos.y(), z: pos.z() },\n//             вращение: { x: rot.x(), y: rot.y(), z: rot.z(), w: rot.w() },\n//             активен: obj.isActive(),\n//             статичен: obj.isStaticObject(),\n//             кинематичен: obj.isKinematicObject()\n//         });\n//     }\n// }\n\nfunction parseColor(colorStr) {\n  if (!colorStr) return 0x888888;\n  if (colorStr.startsWith("#")) {\n    return parseInt(colorStr.slice(1), 16);\n  }\n  return 0x888888;\n}\nfunction createTestSphere() {\n  // Создаем визуальную сферу\n  var radius = 1;\n  var geometry = new three_core/* SphereGeometry */.Gu$(radius, 32, 32);\n  var material = new three_core/* MeshPhongMaterial */.tXL({\n    color: 0xff00ff,\n    shininess: 30\n  });\n  var mesh = new three_core/* Mesh */.eaF(geometry, material);\n\n  // Включаем тени для тестовой сферы\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n\n  // Позиционируем сферу высоко над террейном\n  var startY = 58; // Высота над террейном\n  mesh.position.set(0, startY, 0);\n  scene.add(mesh);\n\n  // Создаем физическое тело\n  var shape = new Ammo.btSphereShape(radius);\n  var mass = 1;\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n  transform.setOrigin(new Ammo.btVector3(0, startY, 0));\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  shape.calculateLocalInertia(mass, localInertia);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Важные настройки для физического тела\n  body.setActivationState(4); // DISABLE_DEACTIVATION\n  body.setFriction(0.5);\n  body.setRollingFriction(0.1);\n  body.setRestitution(0.5); // Упругость\n\n  // Добавляем тело в физический мир с правильными параметрами коллизий\n  var TERRAIN_GROUP = 1; // группа для террейна\n  var SPHERE_GROUP = 2; // группа для сфер\n  localPhysicsWorld.addRigidBody(body, SPHERE_GROUP, TERRAIN_GROUP); // сферы сталкиваются только с террейном\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n\n  // Добавляем объект в наш список объектов\n  var testSphereObj = {\n    mesh: mesh,\n    body: body,\n    object_type: "test_sphere",\n    physicsBy: "ammo" // Изменено с "both" на "ammo", чтобы управлялось только локальной физикой\n  };\n  objects["test_sphere"] = testSphereObj;\n  return testSphereObj;\n}\n;// ./src/network.js\nfunction network_typeof(o) { "@babel/helpers - typeof"; return network_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, network_typeof(o); }\n// network.js\n\n\nvar ws = null;\nfunction handleMessage(data) {\n  try {\n    if (data.type === "create" && data.id) {\n      console.log("[WS] Обработка create сообщения для id:", data.id);\n\n      // Создаем объект и добавляем его в список объектов\n      var obj = createMeshAndBodyForObject(data);\n      obj.physicsBy = data.physics_by || "both"; // Убедитесь, что свойство устанавливается\n      objects[data.id] = obj;\n      console.log("[WS] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, " \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D \\u0441 physicsBy: ").concat(obj.physicsBy)); // Логирование установленного свойства\n    } else if (data.type === "update" && data.id && objects[data.id]) {\n      console.log("[WS] Обработка update сообщения для id:", data.id);\n      var _obj = objects[data.id];\n      _obj.serverPos = {\n        x: data.x || 0,\n        y: data.y || 0,\n        z: data.z || 0\n      };\n    }\n  } catch (error) {\n    console.error("[WS] Ошибка при обработке сообщения:", error);\n    console.error("[WS] Стек вызовов:", error.stack);\n  }\n}\nfunction handleKeyDown(e) {\n  if (!ws || ws.readyState !== WebSocket.OPEN) return;\n  var cmd = "";\n  switch (e.key) {\n    case "ArrowLeft":\n      cmd = "LEFT";\n      break;\n    case "ArrowRight":\n      cmd = "RIGHT";\n      break;\n    case "ArrowUp":\n      cmd = "UP";\n      break;\n    case "ArrowDown":\n      cmd = "DOWN";\n      break;\n    case " ":\n      cmd = "SPACE";\n      break;\n    default:\n      return;\n  }\n  try {\n    ws.send(JSON.stringify({\n      type: "cmd",\n      cmd: cmd\n    }));\n    applyImpulseToSphere(cmd, objects);\n  } catch (error) {\n    console.error("[WS] Ошибка отправки:", error);\n  }\n}\nfunction initNetwork() {\n  try {\n    console.log("[WS] Начало инициализации WebSocket");\n    ws = new WebSocket("ws://localhost:8080/ws");\n    ws.onopen = function () {\n      console.log("[WS] connected");\n      // Отправим тестовое сообщение\n      try {\n        ws.send(JSON.stringify({\n          type: "ping"\n        }));\n        console.log("[WS] Отправлено тестовое сообщение");\n      } catch (e) {\n        console.error("[WS] Ошибка отправки тестового сообщения:", e);\n      }\n    };\n    ws.onmessage = function (evt) {\n      try {\n        var data = JSON.parse(evt.data);\n        if (!data || network_typeof(data) !== \'object\') {\n          throw new Error(\'Неверный формат данных\');\n        }\n        handleMessage(data);\n      } catch (error) {\n        console.error("[WS] Полная ошибка:", error);\n        console.error("[WS] Стек вызовов:", error.stack);\n      }\n    };\n    ws.onerror = function (error) {\n      console.error("[WS] WebSocket error:", error);\n      console.error("[WS] Детали ошибки:", {\n        message: error.message,\n        type: error.type,\n        eventPhase: error.eventPhase\n      });\n    };\n    ws.onclose = function (event) {\n      console.log("[WS] Соединение закрыто:", {\n        code: event.code,\n        reason: event.reason,\n        wasClean: event.wasClean\n      });\n    };\n    document.addEventListener("keydown", handleKeyDown);\n  } catch (error) {\n    console.error("[WS] Ошибка при создании WebSocket:", error);\n    console.error("[WS] Стек вызовов:", error.stack);\n  }\n}\n;// ./src/index.js\nfunction src_typeof(o) { "@babel/helpers - typeof"; return src_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, src_typeof(o); }\nfunction src_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ src_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == src_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(src_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction src_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction src_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// index.js\n\n\n\n\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Выполняем шаг физической симуляции (например, 1/60 секунды)\n  stepPhysics(1 / 60);\n  updatePhysicsObjects(objects);\n\n  // Пример обновления камеры: следим за первым найденным шаром\n  var targetObject = null;\n  for (var id in objects) {\n    var obj = objects[id];\n    if (obj && obj.mesh && obj.mesh.geometry && obj.mesh.geometry.type === "SphereGeometry") {\n      targetObject = obj;\n      break;\n    }\n  }\n  if (targetObject) {\n    var targetPos = targetObject.mesh.position;\n    var offset = new three_core/* Vector3 */.Pq0(0, 50, 100);\n    var cameraTarget = targetPos.clone().add(offset);\n    camera.position.lerp(cameraTarget, 0.1);\n    camera.lookAt(targetPos);\n  }\n  renderer.render(scene, camera);\n}\nfunction start() {\n  return _start.apply(this, arguments);\n}\nfunction _start() {\n  _start = src_asyncToGenerator(/*#__PURE__*/src_regeneratorRuntime().mark(function _callee() {\n    return src_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          console.log("Start");\n          initScene();\n          _context.prev = 2;\n          _context.next = 5;\n          return new Promise(function (resolve) {\n            return setTimeout(resolve, 500);\n          });\n        case 5:\n          _context.next = 7;\n          return initAmmo();\n        case 7:\n          // Создаем тестовую сферу после инициализации Ammo\n          createTestSphere();\n          initNetwork();\n          animate();\n          _context.next = 15;\n          break;\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context["catch"](2);\n          console.error("Ошибка при инициализации Ammo.js:", _context.t0);\n        case 15:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[2, 12]]);\n  }));\n  return _start.apply(this, arguments);\n}\nstart();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QTtNQUFBO0lBQUEsR0FBQWlCLE9BQUE7RUFBQSxDQUVqRTtFQUFBLE9BQUFvTixNQUFBLENBQUEzTixLQUFBLE9BQUFELFNBQUE7QUFBQTtBQUVEMk4sS0FBSyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi9zcmMvc2NlbmUuanM/MjY0YyIsIndlYnBhY2s6Ly93ZWIvLi9zcmMvcGh5c2ljcy5qcz9jNDgzIiwid2VicGFjazovL3dlYi8uL3NyYy9vYmplY3RzLmpzP2M4ZWMiLCJ3ZWJwYWNrOi8vd2ViLy4vc3JjL25ldHdvcmsuanM/YmQ5MiIsIndlYnBhY2s6Ly93ZWIvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzY2VuZS5qc1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5leHBvcnQgbGV0IHNjZW5lLCBjYW1lcmEsIHJlbmRlcmVyO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdFNjZW5lKCkge1xuICAgIGNvbnNvbGUubG9nKFwidHJ5IHRvIGluaXRTY2VuZVwiKVxuICAgIHNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG4gICAgc2NlbmUuYmFja2dyb3VuZCA9IG5ldyBUSFJFRS5Db2xvcigweDg4Y2NmZik7IFxuXG4gICAgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKFxuICAgICAgICA2MCxcbiAgICAgICAgd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICAgIDAuMixcbiAgICAgICAgMjAwMFxuICAgICk7XG4gICAgY2FtZXJhLnBvc2l0aW9uLnNldCgwLCA1MCwgMTAwKTtcbiAgICBjYW1lcmEubG9va0F0KDAsIDAsIDApO1xuXG4gICAgcmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcih7IGFudGlhbGlhczogdHJ1ZSB9KTtcbiAgICByZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgIC8vINCS0LrQu9GO0YfQsNC10Lwg0L/QvtC00LTQtdGA0LbQutGDINGC0LXQvdC10LlcbiAgICByZW5kZXJlci5zaGFkb3dNYXAuZW5hYmxlZCA9IHRydWU7XG4gICAgcmVuZGVyZXIuc2hhZG93TWFwLnR5cGUgPSBUSFJFRS5QQ0ZTb2Z0U2hhZG93TWFwO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudCk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25XaW5kb3dSZXNpemUpO1xuXG4gICAgLy8g0J3QsNGB0YLRgNCw0LjQstCw0LXQvCDQvtGB0LLQtdGJ0LXQvdC40LVcbiAgICBjb25zdCBhbWJpZW50ID0gbmV3IFRIUkVFLkFtYmllbnRMaWdodCgweGZmZmZmZiwgMC41KTtcbiAgICBzY2VuZS5hZGQoYW1iaWVudCk7XG5cbiAgICAvLyDQntGB0L3QvtCy0L3QvtC5INC90LDQv9GA0LDQstC70LXQvdC90YvQuSDRgdCy0LXRgiDRgSDRgtC10L3Rj9C80LhcbiAgICBjb25zdCBkaXJlY3Rpb25hbCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KDB4ZmZmZmZmLCAxKTtcbiAgICBkaXJlY3Rpb25hbC5wb3NpdGlvbi5zZXQoNTAsIDEwMCwgNTApO1xuICAgIGRpcmVjdGlvbmFsLmNhc3RTaGFkb3cgPSB0cnVlO1xuICAgIC8vINCd0LDRgdGC0YDQsNC40LLQsNC10Lwg0L/QsNGA0LDQvNC10YLRgNGLINGC0LXQvdC10LlcbiAgICBkaXJlY3Rpb25hbC5zaGFkb3cuY2FtZXJhLm5lYXIgPSAwLjE7XG4gICAgZGlyZWN0aW9uYWwuc2hhZG93LmNhbWVyYS5mYXIgPSA1MDA7XG4gICAgZGlyZWN0aW9uYWwuc2hhZG93LmNhbWVyYS5sZWZ0ID0gLTEwMDtcbiAgICBkaXJlY3Rpb25hbC5zaGFkb3cuY2FtZXJhLnJpZ2h0ID0gMTAwO1xuICAgIGRpcmVjdGlvbmFsLnNoYWRvdy5jYW1lcmEudG9wID0gMTAwO1xuICAgIGRpcmVjdGlvbmFsLnNoYWRvdy5jYW1lcmEuYm90dG9tID0gLTEwMDtcbiAgICBkaXJlY3Rpb25hbC5zaGFkb3cubWFwU2l6ZS53aWR0aCA9IDIwNDg7XG4gICAgZGlyZWN0aW9uYWwuc2hhZG93Lm1hcFNpemUuaGVpZ2h0ID0gMjA0ODtcbiAgICBzY2VuZS5hZGQoZGlyZWN0aW9uYWwpO1xuXG4gICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INCy0YHQv9C+0LzQvtCz0LDRgtC10LvRjNC90YvQuSDRgdCy0LXRgiDQtNC70Y8g0L/QvtC00YHQstC10YLQutC4INGC0LXQvdC10LlcbiAgICBjb25zdCBmaWxsTGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweGZmZmZmZiwgMC4zKTtcbiAgICBmaWxsTGlnaHQucG9zaXRpb24uc2V0KC01MCwgNTAsIC01MCk7XG4gICAgc2NlbmUuYWRkKGZpbGxMaWdodCk7XG59XG5cbmZ1bmN0aW9uIG9uV2luZG93UmVzaXplKCkge1xuICAgIGNhbWVyYS5hc3BlY3QgPSB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICBjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG59XG5cbmV4cG9ydCB7IG9uV2luZG93UmVzaXplIH07IiwiLy8gcGh5c2ljcy5qc1xuXG5leHBvcnQgbGV0IGxvY2FsUGh5c2ljc1dvcmxkID0gbnVsbDtcbmxldCBhbW1vUHJvbWlzZSA9IG51bGw7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0QW1tbygpIHtcbiAgICBpZiAoYW1tb1Byb21pc2UpIHtcbiAgICAgICAgcmV0dXJuIGFtbW9Qcm9taXNlO1xuICAgIH1cblxuICAgIGFtbW9Qcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgc2NyaXB0LnNyYyA9ICcvYW1tby9hbW1vLndhc20uanMnOyAvLyDQv9GD0YLRjCDQvtGCINC60L7RgNC90Y8g0LLQtdCxLdGB0LXRgNCy0LXRgNCwXG4gICAgICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgICAgIFxuICAgICAgICBzY3JpcHQub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbQW1tb10g0KHQutGA0LjQv9GCINC30LDQs9GA0YPQttC10L0sINC40L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPLi4uXCIpO1xuICAgICAgICAgICAgQW1tbygpLnRoZW4oKEFtbW9MaWIpID0+IHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuQW1tbyA9IEFtbW9MaWI7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8g0JjQvdC40YbQuNCw0LvQuNC30LjRgNGD0LXQvCDRhNC40LfQuNGH0LXRgdC60LjQuSDQvNC40YAg0L/QvtGB0LvQtSDQt9Cw0LPRgNGD0LfQutC4IEFtbW9cbiAgICAgICAgICAgICAgICBjb25zdCBjb2xsaXNpb25Db25maWd1cmF0aW9uID0gbmV3IEFtbW9MaWIuYnREZWZhdWx0Q29sbGlzaW9uQ29uZmlndXJhdGlvbigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3BhdGNoZXIgPSBuZXcgQW1tb0xpYi5idENvbGxpc2lvbkRpc3BhdGNoZXIoY29sbGlzaW9uQ29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICAgICAgY29uc3QgYnJvYWRwaGFzZSA9IG5ldyBBbW1vTGliLmJ0RGJ2dEJyb2FkcGhhc2UoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzb2x2ZXIgPSBuZXcgQW1tb0xpYi5idFNlcXVlbnRpYWxJbXB1bHNlQ29uc3RyYWludFNvbHZlcigpO1xuICAgICAgICAgICAgICAgIGxvY2FsUGh5c2ljc1dvcmxkID0gbmV3IEFtbW9MaWIuYnREaXNjcmV0ZUR5bmFtaWNzV29ybGQoXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoZXIsXG4gICAgICAgICAgICAgICAgICAgIGJyb2FkcGhhc2UsXG4gICAgICAgICAgICAgICAgICAgIHNvbHZlcixcbiAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9uQ29uZmlndXJhdGlvblxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgbG9jYWxQaHlzaWNzV29ybGQuc2V0R3Jhdml0eShuZXcgQW1tb0xpYi5idFZlY3RvcjMoMCwgLTkuODEsIDApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0FtbW9dINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGD0YHQv9C10YjQvdCwXCIpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoQW1tb0xpYik7XG4gICAgICAgICAgICB9KS5jYXRjaChyZWplY3QpO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgc2NyaXB0Lm9uZXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbQW1tb10g0J7RiNC40LHQutCwINC30LDQs9GA0YPQt9C60Lgg0YHQutGA0LjQv9GC0LA6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFtbW9Qcm9taXNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RlcFBoeXNpY3MoZGVsdGFUaW1lKSB7XG4gICAgaWYgKGxvY2FsUGh5c2ljc1dvcmxkKSB7XG4gICAgICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCwg0YfRgtC+IGRlbHRhVGltZSDQuNC80LXQtdGCINGA0LDQt9GD0LzQvdC+0LUg0LfQvdCw0YfQtdC90LjQtVxuICAgICAgICBpZiAoZGVsdGFUaW1lIDw9IDAgfHwgZGVsdGFUaW1lID4gMSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiW1BoeXNpY3NdINCf0L7QtNC+0LfRgNC40YLQtdC70YzQvdC+0LUg0LfQvdCw0YfQtdC90LjQtSBkZWx0YVRpbWU6XCIsIGRlbHRhVGltZSk7XG4gICAgICAgICAgICBkZWx0YVRpbWUgPSAxLzYwOyAvLyDQuNGB0L/QvtC70YzQt9GD0LXQvCDRhNC40LrRgdC40YDQvtCy0LDQvdC90YvQuSDRiNCw0LMg0LXRgdC70Lgg0YfRgtC+LdGC0L4g0L3QtSDRgtCw0LpcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gaWYgKE1hdGgucmFuZG9tKCkgPCAwLjAxNikgeyAvLyDQv9GA0LjQvNC10YDQvdC+INGA0LDQtyDQsiDRgdC10LrRg9C90LTRgyDQv9GA0LggNjAgRlBTXG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhcIltQaHlzaWNzXSDQqNCw0LMg0YHQuNC80YPQu9GP0YbQuNC4OlwiLCB7XG4gICAgICAgIC8vICAgICAgICAgZGVsdGFUaW1lOiBkZWx0YVRpbWUsXG4gICAgICAgIC8vICAgICB9KTtcbiAgICAgICAgLy8gfVxuICAgICAgICBcbiAgICAgICAgbG9jYWxQaHlzaWNzV29ybGQuc3RlcFNpbXVsYXRpb24oZGVsdGFUaW1lLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiW1BoeXNpY3NdINCk0LjQt9C40YfQtdGB0LrQuNC5INC80LjRgCDQvdC1INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvVwiKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVQaHlzaWNzT2JqZWN0cyhvYmplY3RzKSB7XG4gICAgZm9yIChsZXQgaWQgaW4gb2JqZWN0cykge1xuICAgICAgICBjb25zdCBvYmogPSBvYmplY3RzW2lkXTtcbiAgICAgICAgaWYgKCFvYmoubWVzaCkgY29udGludWU7XG5cbiAgICAgICAgY29uc29sZS5sb2coYFtQaHlzaWNzXSDQntCx0L3QvtCy0LvQtdC90LjQtSDQvtCx0YrQtdC60YLQsCAke2lkfSDRgSBwaHlzaWNzQnk6ICR7b2JqLnBoeXNpY3NCeX1gKTsgXG5cbiAgICAgICAgc3dpdGNoIChvYmoucGh5c2ljc0J5KSB7XG4gICAgICAgICAgICBjYXNlIFwiYW1tb1wiOlxuICAgICAgICAgICAgICAgIC8vINCe0LHQvdC+0LLQu9C10L3QuNC1INGC0L7Qu9GM0LrQviDQv9C+INGE0LjQt9C40LrQtSBBbW1vLmpzXG4gICAgICAgICAgICAgICAgaWYgKG9iai5ib2R5ICYmIG9iai5vYmplY3RfdHlwZSAhPT0gXCJ0ZXJyYWluXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnMgPSBuZXcgd2luZG93LkFtbW8uYnRUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgICAgICAgICAgb2JqLmJvZHkuZ2V0TW90aW9uU3RhdGUoKS5nZXRXb3JsZFRyYW5zZm9ybSh0cmFucyk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9jWCA9IHRyYW5zLmdldE9yaWdpbigpLngoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9jWSA9IHRyYW5zLmdldE9yaWdpbigpLnkoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9jWiA9IHRyYW5zLmdldE9yaWdpbigpLnooKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBxeCA9IHRyYW5zLmdldFJvdGF0aW9uKCkueCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBxeSA9IHRyYW5zLmdldFJvdGF0aW9uKCkueSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBxeiA9IHRyYW5zLmdldFJvdGF0aW9uKCkueigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBxdyA9IHRyYW5zLmdldFJvdGF0aW9uKCkudygpO1xuXG4gICAgICAgICAgICAgICAgICAgIG9iai5tZXNoLnBvc2l0aW9uLnNldChsb2NYLCBsb2NZLCBsb2NaKTtcbiAgICAgICAgICAgICAgICAgICAgb2JqLm1lc2gucXVhdGVybmlvbi5zZXQocXgsIHF5LCBxeiwgcXcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcImJ1bGxldFwiOlxuICAgICAgICAgICAgICAgIC8vINCe0LHQvdC+0LLQu9C10L3QuNC1INGC0L7Qu9GM0LrQviDQv9C+INGB0LXRgNCy0LXRgNC90YvQvCDQtNCw0L3QvdGL0LxcbiAgICAgICAgICAgICAgICBpZiAob2JqLnNlcnZlclBvcyAmJiBvYmoub2JqZWN0X3R5cGUgIT09IFwidGVycmFpblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5tZXNoLnBvc2l0aW9uLnNldChvYmouc2VydmVyUG9zLngsIG9iai5zZXJ2ZXJQb3MueSwgb2JqLnNlcnZlclBvcy56KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJib3RoXCI6XG4gICAgICAgICAgICAgICAgLy8g0J7QsdC90L7QstC70LXQvdC40LUg0L/QviDQvtCx0L7QuNC8INC40YHRgtC+0YfQvdC40LrQsNC8XG4gICAgICAgICAgICAgICAgaWYgKG9iai5vYmplY3RfdHlwZSAhPT0gXCJ0ZXJyYWluXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5zZXJ2ZXJQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDRhNC40LfQuNGH0LXRgdC60L7QtSDRgtC10LvQviDQvdCwINC+0YHQvdC+0LLQtSDRgdC10YDQstC10YDQvdC+0Lkg0L/QvtC30LjRhtC40LhcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmouYm9keSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1zID0gb2JqLmJvZHkuZ2V0TW90aW9uU3RhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IHdpbmRvdy5BbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zLmdldFdvcmxkVHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybS5zZXRPcmlnaW4obmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zZXJ2ZXJQb3MueCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zZXJ2ZXJQb3MueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zZXJ2ZXJQb3MuelxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXMuc2V0V29ybGRUcmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCQ0LrRgtC40LLQuNGA0YPQtdC8INGC0LXQu9C+LCDRh9GC0L7QsdGLINC+0L3QviDRgNC10LDQs9C40YDQvtCy0LDQu9C+INC90LAg0YTQuNC30LjQutGDXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LmFjdGl2YXRlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0KHQsdGA0LDRgdGL0LLQsNC10Lwg0YHQutC+0YDQvtGB0YLRjCwg0YfRgtC+0LHRiyDQuNC30LHQtdC20LDRgtGMINC90LDQutC+0L/Qu9C10L3QuNGPXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHplcm8gPSBuZXcgd2luZG93LkFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouYm9keS5zZXRMaW5lYXJWZWxvY2l0eSh6ZXJvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmJvZHkuc2V0QW5ndWxhclZlbG9jaXR5KHplcm8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuQW1tby5kZXN0cm95KHplcm8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveSh0cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INC80LXRiFxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm1lc2gucG9zaXRpb24uc2V0KG9iai5zZXJ2ZXJQb3MueCwgb2JqLnNlcnZlclBvcy55LCBvYmouc2VydmVyUG9zLnopO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgW1BoeXNpY3NdINCd0LXQuNC30LLQtdGB0YLQvdGL0Lkg0YLQuNC/IHBoeXNpY3NCeSDQtNC70Y8g0L7QsdGK0LXQutGC0LAgJHtpZH06ICR7b2JqLnBoeXNpY3NCeX1gKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5SW1wdWxzZVRvU3BoZXJlKGNtZCwgb2JqZWN0cykge1xuICAgIGNvbnNvbGUubG9nKFwiW0RlYnVnXSDQn9C10YDQtdC00LDQvdC90YvQtSDQvtCx0YrQtdC60YLRiyDQsiBhcHBseUltcHVsc2VUb1NwaGVyZTpcIiwgb2JqZWN0cyk7XG4gICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8LCDRh9GC0L4gb2JqZWN0cyDQv9C10YDQtdC00LDQvSDQuCDRj9Cy0LvRj9C10YLRgdGPINC+0LHRitC10LrRgtC+0LxcbiAgICBpZiAoIW9iamVjdHMgfHwgdHlwZW9mIG9iamVjdHMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIltQaHlzaWNzXSDQndC10LrQvtGA0YDQtdC60YLQvdGL0LUg0L7QsdGK0LXQutGC0Ysg0L/QtdGA0LXQtNCw0L3RiyDQsiBhcHBseUltcHVsc2VUb1NwaGVyZVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vINCh0L7Qt9C00LDQtdC8INC40LzQv9GD0LvRjNGBINC30LDRgNCw0L3QtdC1LCDRh9GC0L7QsdGLINC90LUg0YHQvtC30LTQsNCy0LDRgtGMINC10LPQviDQtNC70Y8g0LrQsNC20LTQvtCz0L4g0YjQsNGA0LBcbiAgICBjb25zdCBpbXB1bHNlID0gbmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICBpZiAoY21kID09PSBcIkxFRlRcIikgaW1wdWxzZS5zZXRWYWx1ZSgtNSwgMCwgMCk7XG4gICAgaWYgKGNtZCA9PT0gXCJSSUdIVFwiKSBpbXB1bHNlLnNldFZhbHVlKDUsIDAsIDApO1xuICAgIGlmIChjbWQgPT09IFwiVVBcIikgaW1wdWxzZS5zZXRWYWx1ZSgwLCAwLCAtNSk7XG4gICAgaWYgKGNtZCA9PT0gXCJET1dOXCIpIGltcHVsc2Uuc2V0VmFsdWUoMCwgMCwgNSk7XG4gICAgaWYgKGNtZCA9PT0gXCJTUEFDRVwiKSBpbXB1bHNlLnNldFZhbHVlKDAsIDEwLCAwKTtcblxuICAgIC8vINCf0YDQvtGF0L7QtNC40Lwg0L/QviDQstGB0LXQvCDQvtCx0YrQtdC60YLQsNC8INC4INC/0YDQuNC80LXQvdGP0LXQvCDQuNC80L/Rg9C70YzRgSDRgtC+0LvRjNC60L4g0Log0YjQsNGA0LDQvCDRgSBwaHlzaWNzQnk6IFwiYW1tb1wiXG4gICAgZm9yIChsZXQgaWQgaW4gb2JqZWN0cykge1xuICAgICAgICBjb25zdCBvYmogPSBvYmplY3RzW2lkXTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgb2JqICYmXG4gICAgICAgICAgICBvYmoubWVzaCAmJlxuICAgICAgICAgICAgb2JqLm1lc2guZ2VvbWV0cnkgJiZcbiAgICAgICAgICAgIG9iai5tZXNoLmdlb21ldHJ5LnR5cGUgPT09IFwiU3BoZXJlR2VvbWV0cnlcIiAmJlxuICAgICAgICAgICAgb2JqLmJvZHkgJiZcbiAgICAgICAgICAgIG9iai5waHlzaWNzQnkgPT09IFwiYW1tb1wiICAvLyDQotC+0LvRjNC60L4g0LTQu9GPINC70L7QutCw0LvRjNC90L4g0YPQv9GA0LDQstC70Y/QtdC80YvRhSDQvtCx0YrQtdC60YLQvtCyXG4gICAgICAgICkge1xuICAgICAgICAgICAgb2JqLmJvZHkuYWN0aXZhdGUodHJ1ZSk7XG4gICAgICAgICAgICBvYmouYm9keS5hcHBseUNlbnRyYWxJbXB1bHNlKGltcHVsc2UpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0LTQuNCw0LPQvdC+0YHRgtC40LrRgyDQtNC70Y8g0LrQsNC20LTQvtCz0L4g0YjQsNGA0LBcbiAgICAgICAgICAgIGNvbnN0IHZlbG9jaXR5ID0gb2JqLmJvZHkuZ2V0TGluZWFyVmVsb2NpdHkoKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW1BoeXNpY3NdINCh0L7RgdGC0L7Rj9C90LjQtSDRiNCw0YDQsDpcIiwge1xuICAgICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgICBwaHlzaWNzQnk6IG9iai5waHlzaWNzQnksXG4gICAgICAgICAgICAgICAg0LrQvtC80LDQvdC00LA6IGNtZCxcbiAgICAgICAgICAgICAgICDQv9C+0LfQuNGG0LjRjzogb2JqLm1lc2gucG9zaXRpb24sXG4gICAgICAgICAgICAgICAg0YHQutC+0YDQvtGB0YLRjDoge1xuICAgICAgICAgICAgICAgICAgICB4OiB2ZWxvY2l0eS54KCksXG4gICAgICAgICAgICAgICAgICAgIHk6IHZlbG9jaXR5LnkoKSxcbiAgICAgICAgICAgICAgICAgICAgejogdmVsb2NpdHkueigpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDQntGH0LjRidCw0LXQvCDQv9Cw0LzRj9GC0YxcbiAgICBBbW1vLmRlc3Ryb3koaW1wdWxzZSk7XG59IiwiLy8gb2JqZWN0cy5qc1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0IHsgc2NlbmUgfSBmcm9tICcuL3NjZW5lJztcbmltcG9ydCB7IGxvY2FsUGh5c2ljc1dvcmxkIH0gZnJvbSAnLi9waHlzaWNzJztcblxuZXhwb3J0IGxldCBvYmplY3RzID0ge307IC8vINCh0LvQvtCy0LDRgNGMINC+0LHRitC10LrRgtC+0LI6IGlkIC0+IHsgbWVzaCwgYm9keSwgc2VydmVyUG9zLCAuLi4gfVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWVzaEFuZEJvZHlGb3JPYmplY3QoZGF0YSkge1xuICAgIGlmICghZGF0YSB8fCAhZGF0YS5vYmplY3RfdHlwZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBkYXRhIHJlY2VpdmVkIGZvciBvYmplY3QgY3JlYXRpb246XCIsIGRhdGEpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB0eXBlID0gZGF0YS5vYmplY3RfdHlwZTtcbiAgICBsZXQgbWVzaCwgYm9keSA9IG51bGw7XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcInRlcnJhaW5cIjpcbiAgICAgICAgICAgIG1lc2ggPSBjcmVhdGVUZXJyYWluTWVzaChkYXRhKTtcbiAgICAgICAgICAgIGJvZHkgPSBjcmVhdGVQaHlzaWNzQm9keUZvclRlcnJhaW4oZGF0YSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInNwaGVyZVwiOlxuICAgICAgICAgICAgbWVzaCA9IGNyZWF0ZVNwaGVyZU1lc2goZGF0YSk7XG4gICAgICAgICAgICBib2R5ID0gY3JlYXRlUGh5c2ljc0JvZHlGb3JTcGhlcmUoZGF0YSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInRyZWVcIjpcbiAgICAgICAgICAgIG1lc2ggPSBjcmVhdGVUcmVlTWVzaChkYXRhKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBVbmtub3duIG9iamVjdCB0eXBlOiAke3R5cGV9YCk7XG4gICAgICAgICAgICBtZXNoID0gY3JlYXRlRGVmYXVsdE1lc2goZGF0YSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzY2VuZS5hZGQobWVzaCk7XG4gICAgcmV0dXJuIHsgbWVzaCwgYm9keSB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVQaHlzaWNzQm9keUZvclRlcnJhaW4oZGF0YSkge1xuICAgIGlmICh0eXBlb2YgQW1tbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignQW1tby5qcyDQvdC1INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvScpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIWxvY2FsUGh5c2ljc1dvcmxkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ9Ck0LjQt9C40YfQtdGB0LrQuNC5INC80LjRgCDQvdC1INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvScpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB3ID0gZGF0YS5oZWlnaHRtYXBfdztcbiAgICBjb25zdCBoID0gZGF0YS5oZWlnaHRtYXBfaDtcbiAgICBjb25zdCBzY2FsZVggPSBkYXRhLnNjYWxlX3g7XG4gICAgY29uc3Qgc2NhbGVaID0gZGF0YS5zY2FsZV96O1xuXG4gICAgLy8g0KHQvtC30LTQsNC10Lwg0LHRg9GE0LXRgCDQsiDQv9Cw0LzRj9GC0LggQW1tbyDQtNC70Y8g0LTQsNC90L3Ri9GFINCy0YvRgdC+0YJcbiAgICBjb25zdCBhbW1vSGVpZ2h0RGF0YSA9IEFtbW8uX21hbGxvYyg0ICogdyAqIGgpO1xuICAgIFxuICAgIC8vINCa0L7Qv9C40YDRg9C10Lwg0LTQsNC90L3Ri9C1INCy0YvRgdC+0YIg0LIg0L/QsNC80Y/RgtGMIEFtbW9cbiAgICBsZXQgcCA9IDA7XG4gICAgbGV0IHAyID0gMDtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGg7IGorKykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHc7IGkrKykge1xuICAgICAgICAgICAgQW1tby5IRUFQRjMyW2FtbW9IZWlnaHREYXRhICsgcDIgPj4gMl0gPSBkYXRhLmhlaWdodF9kYXRhW3BdO1xuICAgICAgICAgICAgcCsrO1xuICAgICAgICAgICAgcDIgKz0gNDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vINCh0L7Qt9C00LDQtdC8INGE0L7RgNC80YMg0YLQtdGA0YDQtdC50L3QsFxuICAgIGNvbnN0IHNoYXBlID0gbmV3IEFtbW8uYnRIZWlnaHRmaWVsZFRlcnJhaW5TaGFwZShcbiAgICAgICAgdyxcbiAgICAgICAgaCxcbiAgICAgICAgYW1tb0hlaWdodERhdGEsXG4gICAgICAgIDEsICAvLyBoZWlnaHRTY2FsZVxuICAgICAgICBkYXRhLm1pbl9oZWlnaHQsXG4gICAgICAgIGRhdGEubWF4X2hlaWdodCxcbiAgICAgICAgMSwgIC8vIHVwIGF4aXMgPSAxINC00LvRjyBZXG4gICAgICAgIEFtbW8uUEhZX0ZMT0FULFxuICAgICAgICBmYWxzZSAgLy8gZmxpcFF1YWRFZGdlc1xuICAgICk7XG5cbiAgICAvLyDQo9GB0YLQsNC90LDQstC70LjQstCw0LXQvCDQvNCw0YHRiNGC0LDQsdC40YDQvtCy0LDQvdC40LVcbiAgICBzaGFwZS5zZXRMb2NhbFNjYWxpbmcobmV3IEFtbW8uYnRWZWN0b3IzKHNjYWxlWCwgZGF0YS5zY2FsZV95LCBzY2FsZVopKTtcbiAgICBzaGFwZS5zZXRNYXJnaW4oMC41KTtcblxuICAgIC8vINCh0L7Qt9C00LDQtdC8INGC0YDQsNC90YHRhNC+0YDQvNCw0YbQuNGOXG4gICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IEFtbW8uYnRUcmFuc2Zvcm0oKTtcbiAgICB0cmFuc2Zvcm0uc2V0SWRlbnRpdHkoKTtcbiAgICBcbiAgICAvLyDQktCw0LbQvdC+ISDQodC80LXRidCw0LXQvCDRgtC10YDRgNC10LnQvSwg0YLQsNC6INC60LDQuiBCdWxsZXQg0YbQtdC90YLRgNC40YDRg9C10YIg0LXQs9C+INC/0L4g0L7Qs9GA0LDQvdC40YfQuNCy0LDRjtGJ0LXQvNGDINCx0L7QutGB0YNcbiAgICB0cmFuc2Zvcm0uc2V0T3JpZ2luKG5ldyBBbW1vLmJ0VmVjdG9yMyhcbiAgICAgICAgZGF0YS54IHx8IDAsXG4gICAgICAgIChkYXRhLm1pbl9oZWlnaHQgKyBkYXRhLm1heF9oZWlnaHQpIC8gMixcbiAgICAgICAgZGF0YS56IHx8IDBcbiAgICApKTtcblxuICAgIGNvbnN0IG1hc3MgPSAwOyAvLyDQodGC0LDRgtC40YfQtdGB0LrQvtC1INGC0LXQu9C+XG4gICAgY29uc3QgbG9jYWxJbmVydGlhID0gbmV3IEFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xuICAgIGNvbnN0IG1vdGlvblN0YXRlID0gbmV3IEFtbW8uYnREZWZhdWx0TW90aW9uU3RhdGUodHJhbnNmb3JtKTtcbiAgICBjb25zdCByYkluZm8gPSBuZXcgQW1tby5idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm8obWFzcywgbW90aW9uU3RhdGUsIHNoYXBlLCBsb2NhbEluZXJ0aWEpO1xuICAgIGNvbnN0IGJvZHkgPSBuZXcgQW1tby5idFJpZ2lkQm9keShyYkluZm8pO1xuXG4gICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INGC0LXQu9C+INCyINGE0LjQt9C40YfQtdGB0LrQuNC5INC80LjRgCDRgSDQv9GA0LDQstC40LvRjNC90YvQvNC4INC/0LDRgNCw0LzQtdGC0YDQsNC80Lgg0LrQvtC70LvQuNC30LjQuVxuICAgIGNvbnN0IFRFUlJBSU5fR1JPVVAgPSAxOyAgLy8g0LPRgNGD0L/Qv9CwINC00LvRjyDRgtC10YDRgNC10LnQvdCwXG4gICAgY29uc3QgU1BIRVJFX0dST1VQID0gMjsgICAvLyDQs9GA0YPQv9C/0LAg0LTQu9GPINGB0YTQtdGAXG4gICAgbG9jYWxQaHlzaWNzV29ybGQuYWRkUmlnaWRCb2R5KGJvZHksIFRFUlJBSU5fR1JPVVAsIFNQSEVSRV9HUk9VUCk7IC8vINGC0LXRgNGA0LXQudC9INGB0YLQsNC70LrQuNCy0LDQtdGC0YHRjyDRgtC+0LvRjNC60L4g0YHQviDRgdGE0LXRgNCw0LzQuFxuXG4gICAgLy8g0J7Rh9C40YHRgtC60LAg0L/QsNC80Y/RgtC4XG4gICAgQW1tby5kZXN0cm95KHJiSW5mbyk7XG4gICAgQW1tby5kZXN0cm95KGxvY2FsSW5lcnRpYSk7XG5cbiAgICBjb25zb2xlLmxvZyhcIltUZXJyYWluXSDQpNC40LfQuNGH0LXRgdC60L7QtSDRgtC10LvQviDRgdC+0LfQtNCw0L3QvjpcIiwge1xuICAgICAgICDRgNCw0LfQvNC10YDRizogeyB3LCBoIH0sXG4gICAgICAgINC80LDRgdGI0YLQsNCxOiB7IHg6IHNjYWxlWCwgeTogZGF0YS5zY2FsZV95LCB6OiBzY2FsZVogfSxcbiAgICAgICAg0L/QvtC30LjRhtC40Y86IHsgXG4gICAgICAgICAgICB4OiBkYXRhLnggfHwgMCwgXG4gICAgICAgICAgICB5OiAoZGF0YS5taW5faGVpZ2h0ICsgZGF0YS5tYXhfaGVpZ2h0KSAvIDIsXG4gICAgICAgICAgICB6OiBkYXRhLnogfHwgMCBcbiAgICAgICAgfSxcbiAgICAgICAg0LzQuNC90JLRi9GB0L7RgtCwOiBkYXRhLm1pbl9oZWlnaHQsXG4gICAgICAgINC80LDQutGB0JLRi9GB0L7RgtCwOiBkYXRhLm1heF9oZWlnaHRcbiAgICB9KTtcblxuICAgIHJldHVybiBib2R5O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXJyYWluTWVzaChkYXRhKSB7XG4gICAgY29uc3QgdyA9IGRhdGEuaGVpZ2h0bWFwX3cgfHwgNjQ7XG4gICAgY29uc3QgaCA9IGRhdGEuaGVpZ2h0bWFwX2ggfHwgNjQ7XG4gICAgY29uc3QgZ2VvID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoXG4gICAgICAgIHcgKiBkYXRhLnNjYWxlX3gsXG4gICAgICAgIGggKiBkYXRhLnNjYWxlX3osXG4gICAgICAgIHcgLSAxLFxuICAgICAgICBoIC0gMVxuICAgICk7XG4gICAgZ2VvLnJvdGF0ZVgoLU1hdGguUEkgLyAyKTtcblxuICAgIGlmIChkYXRhLmhlaWdodF9kYXRhKSB7XG4gICAgICAgIGNvbnN0IHZlcnRzID0gZ2VvLmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmVydHMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgICAgIGNvbnN0IGl4ID0gKGkgLyAzKSAlIHc7XG4gICAgICAgICAgICBjb25zdCBpeiA9IE1hdGguZmxvb3IoaSAvIDMgLyB3KTtcbiAgICAgICAgICAgIHZlcnRzW2kgKyAxXSA9IGRhdGEuaGVpZ2h0X2RhdGFbaXogKiB3ICsgaXhdICogZGF0YS5zY2FsZV95O1xuICAgICAgICB9XG4gICAgICAgIGdlby5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuICAgIH1cblxuICAgIGNvbnN0IG1lc2ggPSBuZXcgVEhSRUUuTWVzaChcbiAgICAgICAgZ2VvLFxuICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe1xuICAgICAgICAgICAgY29sb3I6IHBhcnNlQ29sb3IoZGF0YS5jb2xvciB8fCBcIiM4ODg4ODhcIiksXG4gICAgICAgICAgICB3aXJlZnJhbWU6IGZhbHNlLFxuICAgICAgICAgICAgZmxhdFNoYWRpbmc6IHRydWVcbiAgICAgICAgfSlcbiAgICApO1xuICAgIFxuICAgIC8vINCS0LrQu9GO0YfQsNC10Lwg0YLQtdC90Lgg0LTQu9GPINGC0LXRgNGA0LXQudC90LBcbiAgICBtZXNoLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuICAgIFxuICAgIHJldHVybiBtZXNoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3BoZXJlTWVzaChkYXRhKSB7XG4gICAgY29uc3QgZ2VvID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KGRhdGEucmFkaXVzIHx8IDEsIDMyLCAzMik7XG4gICAgY29uc3QgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKFxuICAgICAgICBnZW8sXG4gICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7IFxuICAgICAgICAgICAgY29sb3I6IHBhcnNlQ29sb3IoZGF0YS5jb2xvciB8fCBcIiM4ODg4ODhcIiksXG4gICAgICAgICAgICBzaGluaW5lc3M6IDMwXG4gICAgICAgIH0pXG4gICAgKTtcbiAgICBcbiAgICAvLyDQktC60LvRjtGH0LDQtdC8INGC0LXQvdC4INC00LvRjyDRgdGE0LXRgFxuICAgIG1lc2guY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgbWVzaC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcbiAgICBcbiAgICByZXR1cm4gbWVzaDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJlZU1lc2goZGF0YSkge1xuICAgIGNvbnN0IGdyb3VwID0gbmV3IFRIUkVFLkdyb3VwKCk7XG5cbiAgICBpZiAoZGF0YS5icmFuY2hlcyAmJiBBcnJheS5pc0FycmF5KGRhdGEuYnJhbmNoZXMpKSB7XG4gICAgICAgIGRhdGEuYnJhbmNoZXMuZm9yRWFjaCgoYnJhbmNoLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGJyYW5jaC5zdGFydFggPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgIGJyYW5jaC5zdGFydFkgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgIGJyYW5jaC5zdGFydFogPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgIGJyYW5jaC5lbmRYID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICBicmFuY2guZW5kWSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgYnJhbmNoLmVuZFogPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgICBgQnJhbmNoIGNvb3JkaW5hdGVzIGFyZSBtaXNzaW5nIG9yIGludmFsaWQgYXQgaW5kZXggJHtpbmRleH06YCxcbiAgICAgICAgICAgICAgICAgICAgYnJhbmNoXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGJyYW5jaEdlbyA9IG5ldyBUSFJFRS5DeWxpbmRlckdlb21ldHJ5KFxuICAgICAgICAgICAgICAgIGJyYW5jaC5yYWRpdXNUb3AgfHwgYnJhbmNoLnJhZGl1cyB8fCAwLjEsICAgIC8vINCy0LXRgNGF0L3QuNC5INGA0LDQtNC40YPRgVxuICAgICAgICAgICAgICAgIGJyYW5jaC5yYWRpdXNCb3R0b20gfHwgYnJhbmNoLnJhZGl1cyB8fCAwLjIsIC8vINC90LjQttC90LjQuSDRgNCw0LTQuNGD0YFcbiAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgIDhcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCBicmFuY2hNYXQgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe1xuICAgICAgICAgICAgICAgIGNvbG9yOiBwYXJzZUNvbG9yKGJyYW5jaC5jb2xvciB8fCBcIiM2NTQzMjFcIiksXG4gICAgICAgICAgICAgICAgc2hpbmluZXNzOiAxMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBicmFuY2hNZXNoID0gbmV3IFRIUkVFLk1lc2goYnJhbmNoR2VvLCBicmFuY2hNYXQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQktC60LvRjtGH0LDQtdC8INGC0LXQvdC4INC00LvRjyDQstC10YLQvtC6XG4gICAgICAgICAgICBicmFuY2hNZXNoLmNhc3RTaGFkb3cgPSB0cnVlO1xuICAgICAgICAgICAgYnJhbmNoTWVzaC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcblxuICAgICAgICAgICAgY29uc3QgbWlkWCA9IChicmFuY2guc3RhcnRYICsgYnJhbmNoLmVuZFgpIC8gMjtcbiAgICAgICAgICAgIGNvbnN0IG1pZFkgPSAoYnJhbmNoLnN0YXJ0WSArIGJyYW5jaC5lbmRZKSAvIDI7XG4gICAgICAgICAgICBjb25zdCBtaWRaID0gKGJyYW5jaC5zdGFydFogKyBicmFuY2guZW5kWikgLyAyO1xuXG4gICAgICAgICAgICBicmFuY2hNZXNoLnBvc2l0aW9uLnNldChtaWRYLCBtaWRZLCBtaWRaKTtcbiAgICAgICAgICAgIGJyYW5jaE1lc2gubG9va0F0KG5ldyBUSFJFRS5WZWN0b3IzKGJyYW5jaC5lbmRYLCBicmFuY2guZW5kWSwgYnJhbmNoLmVuZFopKTtcblxuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gbmV3IFRIUkVFLlZlY3RvcjMoXG4gICAgICAgICAgICAgICAgYnJhbmNoLmVuZFggLSBicmFuY2guc3RhcnRYLFxuICAgICAgICAgICAgICAgIGJyYW5jaC5lbmRZIC0gYnJhbmNoLnN0YXJ0WSxcbiAgICAgICAgICAgICAgICBicmFuY2guZW5kWiAtIGJyYW5jaC5zdGFydFpcbiAgICAgICAgICAgICkubGVuZ3RoKCk7XG5cbiAgICAgICAgICAgIGJyYW5jaE1lc2guc2NhbGUuc2V0KDEsIGxlbmd0aCwgMSk7XG5cbiAgICAgICAgICAgIGdyb3VwLmFkZChicmFuY2hNZXNoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdyb3VwO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWZhdWx0TWVzaChkYXRhKSB7XG4gICAgY29uc3QgZ2VvID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDEsIDEsIDEpO1xuICAgIHJldHVybiBuZXcgVEhSRUUuTWVzaChcbiAgICAgICAgZ2VvLFxuICAgICAgICBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCh7IGNvbG9yOiBwYXJzZUNvbG9yKGRhdGEuY29sb3IgfHwgXCIjODg4ODg4XCIpIH0pXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGh5c2ljc0JvZHlGb3JTcGhlcmUoZGF0YSkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgQW1tbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0FtbW8uanMg0L3QtSDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0L0nKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFsb2NhbFBoeXNpY3NXb3JsZCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcign0KTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAINC90LUg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC9Jyk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IGRhdGEucmFkaXVzIHx8IDE7XG4gICAgICAgIGNvbnN0IG1hc3MgPSBkYXRhLm1hc3MgfHwgMTtcblxuICAgICAgICAvLyDQodC+0LfQtNCw0LXQvCDQstGB0LUgQW1tbyDQvtCx0YrQtdC60YLRiyDRh9C10YDQtdC3IHdpbmRvdy5BbW1vXG4gICAgICAgIGNvbnN0IHNoYXBlID0gbmV3IHdpbmRvdy5BbW1vLmJ0U3BoZXJlU2hhcGUocmFkaXVzKTtcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IHdpbmRvdy5BbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgICAgIHRyYW5zZm9ybS5zZXRJZGVudGl0eSgpO1xuICAgICAgICB0cmFuc2Zvcm0uc2V0T3JpZ2luKG5ldyB3aW5kb3cuQW1tby5idFZlY3RvcjMoZGF0YS54IHx8IDAsIGRhdGEueSB8fCAwLCBkYXRhLnogfHwgMCkpO1xuXG4gICAgICAgIGNvbnN0IGxvY2FsSW5lcnRpYSA9IG5ldyB3aW5kb3cuQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgICAgIHNoYXBlLmNhbGN1bGF0ZUxvY2FsSW5lcnRpYShtYXNzLCBsb2NhbEluZXJ0aWEpO1xuXG4gICAgICAgIGNvbnN0IG1vdGlvblN0YXRlID0gbmV3IHdpbmRvdy5BbW1vLmJ0RGVmYXVsdE1vdGlvblN0YXRlKHRyYW5zZm9ybSk7XG4gICAgICAgIGNvbnN0IHJiSW5mbyA9IG5ldyB3aW5kb3cuQW1tby5idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm8oXG4gICAgICAgICAgICBtYXNzLFxuICAgICAgICAgICAgbW90aW9uU3RhdGUsXG4gICAgICAgICAgICBzaGFwZSxcbiAgICAgICAgICAgIGxvY2FsSW5lcnRpYVxuICAgICAgICApO1xuICAgICAgICBjb25zdCBib2R5ID0gbmV3IHdpbmRvdy5BbW1vLmJ0UmlnaWRCb2R5KHJiSW5mbyk7XG5cbiAgICAgICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INGC0LXQu9C+INCyINGE0LjQt9C40YfQtdGB0LrQuNC5INC80LjRgCDRgSDQv9GA0LDQstC40LvRjNC90YvQvNC4INC/0LDRgNCw0LzQtdGC0YDQsNC80Lgg0LrQvtC70LvQuNC30LjQuVxuICAgICAgICBjb25zdCBURVJSQUlOX0dST1VQID0gMTsgIC8vINCz0YDRg9C/0L/QsCDQtNC70Y8g0YLQtdGA0YDQtdC50L3QsFxuICAgICAgICBjb25zdCBTUEhFUkVfR1JPVVAgPSAyOyAgIC8vINCz0YDRg9C/0L/QsCDQtNC70Y8g0YHRhNC10YBcbiAgICAgICAgbG9jYWxQaHlzaWNzV29ybGQuYWRkUmlnaWRCb2R5KGJvZHksIFNQSEVSRV9HUk9VUCwgVEVSUkFJTl9HUk9VUCk7IC8vINGB0YTQtdGA0Ysg0YHRgtCw0LvQutC40LLQsNGO0YLRgdGPINGC0L7Qu9GM0LrQviDRgSDRgtC10YDRgNC10LnQvdC+0LxcblxuICAgICAgICAvLyDQntGH0LjRgdGC0LrQsCDQv9Cw0LzRj9GC0LhcbiAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveShyYkluZm8pO1xuICAgICAgICB3aW5kb3cuQW1tby5kZXN0cm95KGxvY2FsSW5lcnRpYSk7XG5cbiAgICAgICAgcmV0dXJuIGJvZHk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcign0J7RiNC40LHQutCwINC/0YDQuCDRgdC+0LfQtNCw0L3QuNC4INGE0LjQt9C40YfQtdGB0LrQvtCz0L4g0YLQtdC70LA6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBkZWJ1Z1BoeXNpY3NXb3JsZCgpIHtcbi8vICAgICBpZiAoIWxvY2FsUGh5c2ljc1dvcmxkKSB7XG4vLyAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbUGh5c2ljcyBEZWJ1Z10g0KTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAINC90LUg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC9XCIpO1xuLy8gICAgICAgICByZXR1cm47XG4vLyAgICAgfVxuICAgIFxuLy8gICAgIGNvbnN0IG51bUJvZGllcyA9IGxvY2FsUGh5c2ljc1dvcmxkLmdldE51bUNvbGxpc2lvbk9iamVjdHMoKTtcbi8vICAgICBjb25zb2xlLmxvZyhgW1BoeXNpY3MgRGVidWddINCSINGE0LjQt9C40YfQtdGB0LrQvtC8INC80LjRgNC1ICR7bnVtQm9kaWVzfSDQvtCx0YrQtdC60YLQvtCyYCk7XG4gICAgXG4vLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Cb2RpZXM7IGkrKykge1xuLy8gICAgICAgICBjb25zdCBvYmogPSBsb2NhbFBoeXNpY3NXb3JsZC5nZXRDb2xsaXNpb25PYmplY3RBcnJheSgpLmF0KGkpO1xuLy8gICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBuZXcgQW1tby5idFRyYW5zZm9ybSgpO1xuICAgICAgICBcbi8vICAgICAgICAgaWYgKG9iai5nZXRNb3Rpb25TdGF0ZSgpKSB7XG4vLyAgICAgICAgICAgICBvYmouZ2V0TW90aW9uU3RhdGUoKS5nZXRXb3JsZFRyYW5zZm9ybSh0cmFuc2Zvcm0pO1xuLy8gICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgb2JqLmdldFdvcmxkVHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4vLyAgICAgICAgIH1cbiAgICAgICAgXG4vLyAgICAgICAgIGNvbnN0IHBvcyA9IHRyYW5zZm9ybS5nZXRPcmlnaW4oKTtcbi8vICAgICAgICAgY29uc3Qgcm90ID0gdHJhbnNmb3JtLmdldFJvdGF0aW9uKCk7XG4gICAgICAgIFxuLy8gICAgICAgICBjb25zb2xlLmxvZyhgW1BoeXNpY3MgRGVidWddINCe0LHRitC10LrRgiAjJHtpfTpgLCB7XG4vLyAgICAgICAgICAgICDQv9C+0LfQuNGG0LjRjzogeyB4OiBwb3MueCgpLCB5OiBwb3MueSgpLCB6OiBwb3MueigpIH0sXG4vLyAgICAgICAgICAgICDQstGA0LDRidC10L3QuNC1OiB7IHg6IHJvdC54KCksIHk6IHJvdC55KCksIHo6IHJvdC56KCksIHc6IHJvdC53KCkgfSxcbi8vICAgICAgICAgICAgINCw0LrRgtC40LLQtdC9OiBvYmouaXNBY3RpdmUoKSxcbi8vICAgICAgICAgICAgINGB0YLQsNGC0LjRh9C10L06IG9iai5pc1N0YXRpY09iamVjdCgpLFxuLy8gICAgICAgICAgICAg0LrQuNC90LXQvNCw0YLQuNGH0LXQvTogb2JqLmlzS2luZW1hdGljT2JqZWN0KClcbi8vICAgICAgICAgfSk7XG4vLyAgICAgfVxuLy8gfVxuXG5mdW5jdGlvbiBwYXJzZUNvbG9yKGNvbG9yU3RyKSB7XG4gICAgaWYgKCFjb2xvclN0cikgcmV0dXJuIDB4ODg4ODg4O1xuICAgIGlmIChjb2xvclN0ci5zdGFydHNXaXRoKFwiI1wiKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoY29sb3JTdHIuc2xpY2UoMSksIDE2KTtcbiAgICB9XG4gICAgcmV0dXJuIDB4ODg4ODg4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGVzdFNwaGVyZSgpIHtcbiAgICAvLyDQodC+0LfQtNCw0LXQvCDQstC40LfRg9Cw0LvRjNC90YPRjiDRgdGE0LXRgNGDXG4gICAgY29uc3QgcmFkaXVzID0gMTtcbiAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeShyYWRpdXMsIDMyLCAzMik7XG4gICAgY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoeyBcbiAgICAgICAgY29sb3I6IDB4ZmYwMGZmLFxuICAgICAgICBzaGluaW5lc3M6IDMwXG4gICAgfSk7XG4gICAgY29uc3QgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XG4gICAgXG4gICAgLy8g0JLQutC70Y7Rh9Cw0LXQvCDRgtC10L3QuCDQtNC70Y8g0YLQtdGB0YLQvtCy0L7QuSDRgdGE0LXRgNGLXG4gICAgbWVzaC5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICBtZXNoLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuICAgIFxuICAgIC8vINCf0L7Qt9C40YbQuNC+0L3QuNGA0YPQtdC8INGB0YTQtdGA0YMg0LLRi9GB0L7QutC+INC90LDQtCDRgtC10YDRgNC10LnQvdC+0LxcbiAgICBjb25zdCBzdGFydFkgPSA1ODsgLy8g0JLRi9GB0L7RgtCwINC90LDQtCDRgtC10YDRgNC10LnQvdC+0LxcbiAgICBtZXNoLnBvc2l0aW9uLnNldCgwLCBzdGFydFksIDApO1xuICAgIHNjZW5lLmFkZChtZXNoKTtcblxuICAgIC8vINCh0L7Qt9C00LDQtdC8INGE0LjQt9C40YfQtdGB0LrQvtC1INGC0LXQu9C+XG4gICAgY29uc3Qgc2hhcGUgPSBuZXcgQW1tby5idFNwaGVyZVNoYXBlKHJhZGl1cyk7XG4gICAgY29uc3QgbWFzcyA9IDE7XG4gICAgXG4gICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IEFtbW8uYnRUcmFuc2Zvcm0oKTtcbiAgICB0cmFuc2Zvcm0uc2V0SWRlbnRpdHkoKTtcbiAgICB0cmFuc2Zvcm0uc2V0T3JpZ2luKG5ldyBBbW1vLmJ0VmVjdG9yMygwLCBzdGFydFksIDApKTtcblxuICAgIGNvbnN0IGxvY2FsSW5lcnRpYSA9IG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICBzaGFwZS5jYWxjdWxhdGVMb2NhbEluZXJ0aWEobWFzcywgbG9jYWxJbmVydGlhKTtcblxuICAgIGNvbnN0IG1vdGlvblN0YXRlID0gbmV3IEFtbW8uYnREZWZhdWx0TW90aW9uU3RhdGUodHJhbnNmb3JtKTtcbiAgICBjb25zdCByYkluZm8gPSBuZXcgQW1tby5idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm8obWFzcywgbW90aW9uU3RhdGUsIHNoYXBlLCBsb2NhbEluZXJ0aWEpO1xuICAgIGNvbnN0IGJvZHkgPSBuZXcgQW1tby5idFJpZ2lkQm9keShyYkluZm8pO1xuXG4gICAgLy8g0JLQsNC20L3Ri9C1INC90LDRgdGC0YDQvtC50LrQuCDQtNC70Y8g0YTQuNC30LjRh9C10YHQutC+0LPQviDRgtC10LvQsFxuICAgIGJvZHkuc2V0QWN0aXZhdGlvblN0YXRlKDQpOyAvLyBESVNBQkxFX0RFQUNUSVZBVElPTlxuICAgIGJvZHkuc2V0RnJpY3Rpb24oMC41KTtcbiAgICBib2R5LnNldFJvbGxpbmdGcmljdGlvbigwLjEpO1xuICAgIGJvZHkuc2V0UmVzdGl0dXRpb24oMC41KTsgLy8g0KPQv9GA0YPQs9C+0YHRgtGMXG5cbiAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0YLQtdC70L4g0LIg0YTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAINGBINC/0YDQsNCy0LjQu9GM0L3Ri9C80Lgg0L/QsNGA0LDQvNC10YLRgNCw0LzQuCDQutC+0LvQu9C40LfQuNC5XG4gICAgY29uc3QgVEVSUkFJTl9HUk9VUCA9IDE7ICAvLyDQs9GA0YPQv9C/0LAg0LTQu9GPINGC0LXRgNGA0LXQudC90LBcbiAgICBjb25zdCBTUEhFUkVfR1JPVVAgPSAyOyAgIC8vINCz0YDRg9C/0L/QsCDQtNC70Y8g0YHRhNC10YBcbiAgICBsb2NhbFBoeXNpY3NXb3JsZC5hZGRSaWdpZEJvZHkoYm9keSwgU1BIRVJFX0dST1VQLCBURVJSQUlOX0dST1VQKTsgLy8g0YHRhNC10YDRiyDRgdGC0LDQu9C60LjQstCw0Y7RgtGB0Y8g0YLQvtC70YzQutC+INGBINGC0LXRgNGA0LXQudC90L7QvFxuXG4gICAgLy8g0J7Rh9C40YHRgtC60LAg0L/QsNC80Y/RgtC4XG4gICAgQW1tby5kZXN0cm95KHJiSW5mbyk7XG4gICAgQW1tby5kZXN0cm95KGxvY2FsSW5lcnRpYSk7XG5cbiAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0L7QsdGK0LXQutGCINCyINC90LDRiCDRgdC/0LjRgdC+0Log0L7QsdGK0LXQutGC0L7QslxuICAgIGNvbnN0IHRlc3RTcGhlcmVPYmogPSB7XG4gICAgICAgIG1lc2gsXG4gICAgICAgIGJvZHksXG4gICAgICAgIG9iamVjdF90eXBlOiBcInRlc3Rfc3BoZXJlXCIsXG4gICAgICAgIHBoeXNpY3NCeTogXCJhbW1vXCIgLy8g0JjQt9C80LXQvdC10L3QviDRgSBcImJvdGhcIiDQvdCwIFwiYW1tb1wiLCDRh9GC0L7QsdGLINGD0L/RgNCw0LLQu9GP0LvQvtGB0Ywg0YLQvtC70YzQutC+INC70L7QutCw0LvRjNC90L7QuSDRhNC40LfQuNC60L7QuVxuICAgIH07XG4gICAgb2JqZWN0c1tcInRlc3Rfc3BoZXJlXCJdID0gdGVzdFNwaGVyZU9iajtcblxuICAgIHJldHVybiB0ZXN0U3BoZXJlT2JqO1xufSIsIi8vIG5ldHdvcmsuanNcbmltcG9ydCB7IG9iamVjdHMsIGNyZWF0ZU1lc2hBbmRCb2R5Rm9yT2JqZWN0IH0gZnJvbSAnLi9vYmplY3RzJztcbmltcG9ydCB7IGFwcGx5SW1wdWxzZVRvU3BoZXJlIH0gZnJvbSAnLi9waHlzaWNzJztcblxubGV0IHdzID0gbnVsbDtcblxuZnVuY3Rpb24gaGFuZGxlTWVzc2FnZShkYXRhKSB7ICAgICAgXG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGRhdGEudHlwZSA9PT0gXCJjcmVhdGVcIiAmJiBkYXRhLmlkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltXU10g0J7QsdGA0LDQsdC+0YLQutCwIGNyZWF0ZSDRgdC+0L7QsdGJ0LXQvdC40Y8g0LTQu9GPIGlkOlwiLCBkYXRhLmlkKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0KHQvtC30LTQsNC10Lwg0L7QsdGK0LXQutGCINC4INC00L7QsdCw0LLQu9GP0LXQvCDQtdCz0L4g0LIg0YHQv9C40YHQvtC6INC+0LHRitC10LrRgtC+0LJcbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IGNyZWF0ZU1lc2hBbmRCb2R5Rm9yT2JqZWN0KGRhdGEpO1xuICAgICAgICAgICAgb2JqLnBoeXNpY3NCeSA9IGRhdGEucGh5c2ljc19ieSB8fCBcImJvdGhcIjsgLy8g0KPQsdC10LTQuNGC0LXRgdGMLCDRh9GC0L4g0YHQstC+0LnRgdGC0LLQviDRg9GB0YLQsNC90LDQstC70LjQstCw0LXRgtGB0Y9cbiAgICAgICAgICAgIG9iamVjdHNbZGF0YS5pZF0gPSBvYmo7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbV1NdINCe0LHRitC10LrRgiAke2RhdGEuaWR9INGB0L7Qt9C00LDQvSDRgSBwaHlzaWNzQnk6ICR7b2JqLnBoeXNpY3NCeX1gKTsgLy8g0JvQvtCz0LjRgNC+0LLQsNC90LjQtSDRg9GB0YLQsNC90L7QstC70LXQvdC90L7Qs9C+INGB0LLQvtC50YHRgtCy0LBcbiAgICAgICAgfSBcbiAgICAgICAgZWxzZSBpZiAoZGF0YS50eXBlID09PSBcInVwZGF0ZVwiICYmIGRhdGEuaWQgJiYgb2JqZWN0c1tkYXRhLmlkXSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbV1NdINCe0LHRgNCw0LHQvtGC0LrQsCB1cGRhdGUg0YHQvtC+0LHRidC10L3QuNGPINC00LvRjyBpZDpcIiwgZGF0YS5pZCk7XG4gICAgICAgICAgICBjb25zdCBvYmogPSBvYmplY3RzW2RhdGEuaWRdO1xuICAgICAgICAgICAgb2JqLnNlcnZlclBvcyA9IHtcbiAgICAgICAgICAgICAgICB4OiBkYXRhLnggfHwgMCxcbiAgICAgICAgICAgICAgICB5OiBkYXRhLnkgfHwgMCxcbiAgICAgICAgICAgICAgICB6OiBkYXRhLnogfHwgMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV1NdINCe0YjQuNCx0LrQsCDQv9GA0Lgg0L7QsdGA0LDQsdC+0YLQutC1INGB0L7QvtCx0YnQtdC90LjRjzpcIiwgZXJyb3IpO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dTXSDQodGC0LXQuiDQstGL0LfQvtCy0L7QsjpcIiwgZXJyb3Iuc3RhY2spO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlS2V5RG93bihlKSB7XG4gICAgaWYgKCF3cyB8fCB3cy5yZWFkeVN0YXRlICE9PSBXZWJTb2NrZXQuT1BFTikgcmV0dXJuO1xuXG4gICAgbGV0IGNtZCA9IFwiXCI7XG4gICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6IGNtZCA9IFwiTEVGVFwiOyBicmVhaztcbiAgICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjogY21kID0gXCJSSUdIVFwiOyBicmVhaztcbiAgICAgICAgY2FzZSBcIkFycm93VXBcIjogY21kID0gXCJVUFwiOyBicmVhaztcbiAgICAgICAgY2FzZSBcIkFycm93RG93blwiOiBjbWQgPSBcIkRPV05cIjsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCIgXCI6IGNtZCA9IFwiU1BBQ0VcIjsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICB3cy5zZW5kKEpTT04uc3RyaW5naWZ5KHsgdHlwZTogXCJjbWRcIiwgY21kIH0pKTtcbiAgICAgICAgYXBwbHlJbXB1bHNlVG9TcGhlcmUoY21kLCBvYmplY3RzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dTXSDQntGI0LjQsdC60LAg0L7RgtC/0YDQsNCy0LrQuDpcIiwgZXJyb3IpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXROZXR3b3JrKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiW1dTXSDQndCw0YfQsNC70L4g0LjQvdC40YbQuNCw0LvQuNC30LDRhtC40LggV2ViU29ja2V0XCIpO1xuICAgICAgICB3cyA9IG5ldyBXZWJTb2NrZXQoXCJ3czovL2xvY2FsaG9zdDo4MDgwL3dzXCIpO1xuICAgICAgICBcbiAgICAgICAgd3Mub25vcGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbV1NdIGNvbm5lY3RlZFwiKTtcbiAgICAgICAgICAgIC8vINCe0YLQv9GA0LDQstC40Lwg0YLQtdGB0YLQvtCy0L7QtSDRgdC+0L7QsdGJ0LXQvdC40LVcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgd3Muc2VuZChKU09OLnN0cmluZ2lmeSh7IHR5cGU6IFwicGluZ1wiIH0pKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltXU10g0J7RgtC/0YDQsNCy0LvQtdC90L4g0YLQtdGB0YLQvtCy0L7QtSDRgdC+0L7QsdGJ0LXQvdC40LVcIik7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIltXU10g0J7RiNC40LHQutCwINC+0YLQv9GA0LDQstC60Lgg0YLQtdGB0YLQvtCy0L7Qs9C+INGB0L7QvtCx0YnQtdC90LjRjzpcIiwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgd3Mub25tZXNzYWdlID0gKGV2dCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShldnQuZGF0YSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ9Cd0LXQstC10YDQvdGL0Lkg0YTQvtGA0LzQsNGCINC00LDQvdC90YvRhScpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGhhbmRsZU1lc3NhZ2UoZGF0YSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV1NdINCf0L7Qu9C90LDRjyDQvtGI0LjQsdC60LA6XCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dTXSDQodGC0LXQuiDQstGL0LfQvtCy0L7QsjpcIiwgZXJyb3Iuc3RhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHdzLm9uZXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV1NdIFdlYlNvY2tldCBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIltXU10g0JTQtdGC0LDQu9C4INC+0YjQuNCx0LrQuDpcIiwge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgdHlwZTogZXJyb3IudHlwZSxcbiAgICAgICAgICAgICAgICBldmVudFBoYXNlOiBlcnJvci5ldmVudFBoYXNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB3cy5vbmNsb3NlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltXU10g0KHQvtC10LTQuNC90LXQvdC40LUg0LfQsNC60YDRi9GC0L46XCIsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBldmVudC5jb2RlLFxuICAgICAgICAgICAgICAgIHJlYXNvbjogZXZlbnQucmVhc29uLFxuICAgICAgICAgICAgICAgIHdhc0NsZWFuOiBldmVudC53YXNDbGVhblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgaGFuZGxlS2V5RG93bik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIltXU10g0J7RiNC40LHQutCwINC/0YDQuCDRgdC+0LfQtNCw0L3QuNC4IFdlYlNvY2tldDpcIiwgZXJyb3IpO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dTXSDQodGC0LXQuiDQstGL0LfQvtCy0L7QsjpcIiwgZXJyb3Iuc3RhY2spO1xuICAgIH1cbn0iLCIvLyBpbmRleC5qc1xuaW1wb3J0IHsgaW5pdFNjZW5lLCBzY2VuZSwgY2FtZXJhLCByZW5kZXJlciB9IGZyb20gJy4vc2NlbmUnO1xuaW1wb3J0IHsgaW5pdEFtbW8sIHN0ZXBQaHlzaWNzLCB1cGRhdGVQaHlzaWNzT2JqZWN0cywgYXBwbHlJbXB1bHNlVG9TcGhlcmUgfSBmcm9tICcuL3BoeXNpY3MnO1xuaW1wb3J0IHsgaW5pdE5ldHdvcmsgfSBmcm9tICcuL25ldHdvcmsnO1xuaW1wb3J0IHsgb2JqZWN0cywgZGVidWdQaHlzaWNzV29ybGQsIGNyZWF0ZVRlc3RTcGhlcmUgfSBmcm9tICcuL29iamVjdHMnO1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5mdW5jdGlvbiBhbmltYXRlKCkge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcblxuICAgIC8vINCS0YvQv9C+0LvQvdGP0LXQvCDRiNCw0LMg0YTQuNC30LjRh9C10YHQutC+0Lkg0YHQuNC80YPQu9GP0YbQuNC4ICjQvdCw0L/RgNC40LzQtdGALCAxLzYwINGB0LXQutGD0L3QtNGLKVxuICAgIHN0ZXBQaHlzaWNzKDEgLyA2MCk7XG4gICAgdXBkYXRlUGh5c2ljc09iamVjdHMob2JqZWN0cyk7XG5cbiAgICAvLyDQn9GA0LjQvNC10YAg0L7QsdC90L7QstC70LXQvdC40Y8g0LrQsNC80LXRgNGLOiDRgdC70LXQtNC40Lwg0LfQsCDQv9C10YDQstGL0Lwg0L3QsNC50LTQtdC90L3Ri9C8INGI0LDRgNC+0LxcbiAgICBsZXQgdGFyZ2V0T2JqZWN0ID0gbnVsbDtcbiAgICBmb3IgKGxldCBpZCBpbiBvYmplY3RzKSB7XG4gICAgICAgIGxldCBvYmogPSBvYmplY3RzW2lkXTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgb2JqICYmXG4gICAgICAgICAgICBvYmoubWVzaCAmJlxuICAgICAgICAgICAgb2JqLm1lc2guZ2VvbWV0cnkgJiZcbiAgICAgICAgICAgIG9iai5tZXNoLmdlb21ldHJ5LnR5cGUgPT09IFwiU3BoZXJlR2VvbWV0cnlcIlxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRhcmdldE9iamVjdCA9IG9iajtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0YXJnZXRPYmplY3QpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0UG9zID0gdGFyZ2V0T2JqZWN0Lm1lc2gucG9zaXRpb247XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDUwLCAxMDApO1xuICAgICAgICBjb25zdCBjYW1lcmFUYXJnZXQgPSB0YXJnZXRQb3MuY2xvbmUoKS5hZGQob2Zmc2V0KTtcblxuICAgICAgICBjYW1lcmEucG9zaXRpb24ubGVycChjYW1lcmFUYXJnZXQsIDAuMSk7XG4gICAgICAgIGNhbWVyYS5sb29rQXQodGFyZ2V0UG9zKTtcbiAgICB9XG5cbiAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgIGNvbnNvbGUubG9nKFwiU3RhcnRcIilcbiAgICBpbml0U2NlbmUoKTtcbiAgICB0cnkge1xuICAgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0L3QtdCx0L7Qu9GM0YjRg9GOINC30LDQtNC10YDQttC60YMg0L/QtdGA0LXQtCDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQtdC5XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCA1MDApKTtcbiAgICAgICAgYXdhaXQgaW5pdEFtbW8oKTtcbiAgICAgICAgLy8g0KHQvtC30LTQsNC10Lwg0YLQtdGB0YLQvtCy0YPRjiDRgdGE0LXRgNGDINC/0L7RgdC70LUg0LjQvdC40YbQuNCw0LvQuNC30LDRhtC40LggQW1tb1xuICAgICAgICBjcmVhdGVUZXN0U3BoZXJlKCk7XG4gICAgICAgIGluaXROZXR3b3JrKCk7XG4gICAgICAgIGFuaW1hdGUoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwi0J7RiNC40LHQutCwINC/0YDQuCDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQuCBBbW1vLmpzOlwiLCBlcnJvcik7XG4gICAgfVxufVxuXG5zdGFydCgpOyJdLCJuYW1lcyI6WyJUSFJFRSIsInNjZW5lIiwiY2FtZXJhIiwicmVuZGVyZXIiLCJpbml0U2NlbmUiLCJjb25zb2xlIiwibG9nIiwiU2NlbmUiLCJiYWNrZ3JvdW5kIiwiQ29sb3IiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInBvc2l0aW9uIiwic2V0IiwibG9va0F0IiwiV2ViR0xSZW5kZXJlciIsImFudGlhbGlhcyIsInNldFNpemUiLCJzaGFkb3dNYXAiLCJlbmFibGVkIiwidHlwZSIsIlBDRlNvZnRTaGFkb3dNYXAiLCJkb2N1bWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImRvbUVsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwib25XaW5kb3dSZXNpemUiLCJhbWJpZW50IiwiQW1iaWVudExpZ2h0IiwiYWRkIiwiZGlyZWN0aW9uYWwiLCJEaXJlY3Rpb25hbExpZ2h0IiwiY2FzdFNoYWRvdyIsInNoYWRvdyIsIm5lYXIiLCJmYXIiLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJtYXBTaXplIiwid2lkdGgiLCJoZWlnaHQiLCJmaWxsTGlnaHQiLCJhc3BlY3QiLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4IiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsImUiLCJ0IiwiciIsIk9iamVjdCIsInByb3RvdHlwZSIsIm4iLCJoYXNPd25Qcm9wZXJ0eSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiaSIsIlN5bWJvbCIsImEiLCJpdGVyYXRvciIsImMiLCJhc3luY0l0ZXJhdG9yIiwidSIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwid3JhcCIsIkdlbmVyYXRvciIsImNyZWF0ZSIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJhcmciLCJjYWxsIiwiaCIsImwiLCJmIiwicyIsInkiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwicCIsImQiLCJnZXRQcm90b3R5cGVPZiIsInYiLCJ2YWx1ZXMiLCJnIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiaW52b2tlIiwiX3R5cGVvZiIsInJlc29sdmUiLCJfX2F3YWl0IiwidGhlbiIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiRXJyb3IiLCJkb25lIiwibWV0aG9kIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsImlzTmFOIiwibGVuZ3RoIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJrZXlzIiwicmV2ZXJzZSIsInBvcCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJydmFsIiwiaGFuZGxlIiwiY29tcGxldGUiLCJmaW5pc2giLCJfY2F0Y2giLCJkZWxlZ2F0ZVlpZWxkIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJhcmd1bWVudHMiLCJhcHBseSIsIl9uZXh0IiwiX3Rocm93IiwibG9jYWxQaHlzaWNzV29ybGQiLCJhbW1vUHJvbWlzZSIsImluaXRBbW1vIiwiX2luaXRBbW1vIiwiX2NhbGxlZSIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJyZWplY3QiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwib25sb2FkIiwiQW1tbyIsIkFtbW9MaWIiLCJjb2xsaXNpb25Db25maWd1cmF0aW9uIiwiYnREZWZhdWx0Q29sbGlzaW9uQ29uZmlndXJhdGlvbiIsImRpc3BhdGNoZXIiLCJidENvbGxpc2lvbkRpc3BhdGNoZXIiLCJicm9hZHBoYXNlIiwiYnREYnZ0QnJvYWRwaGFzZSIsInNvbHZlciIsImJ0U2VxdWVudGlhbEltcHVsc2VDb25zdHJhaW50U29sdmVyIiwiYnREaXNjcmV0ZUR5bmFtaWNzV29ybGQiLCJzZXRHcmF2aXR5IiwiYnRWZWN0b3IzIiwib25lcnJvciIsImVycm9yIiwic3RlcFBoeXNpY3MiLCJkZWx0YVRpbWUiLCJ3YXJuIiwic3RlcFNpbXVsYXRpb24iLCJ1cGRhdGVQaHlzaWNzT2JqZWN0cyIsIm9iamVjdHMiLCJpZCIsIm9iaiIsIm1lc2giLCJjb25jYXQiLCJwaHlzaWNzQnkiLCJvYmplY3RfdHlwZSIsInRyYW5zIiwiYnRUcmFuc2Zvcm0iLCJnZXRNb3Rpb25TdGF0ZSIsImdldFdvcmxkVHJhbnNmb3JtIiwibG9jWCIsImdldE9yaWdpbiIsIngiLCJsb2NZIiwibG9jWiIsInoiLCJxeCIsImdldFJvdGF0aW9uIiwicXkiLCJxeiIsInF3IiwidyIsInF1YXRlcm5pb24iLCJzZXJ2ZXJQb3MiLCJtcyIsInRyYW5zZm9ybSIsInNldE9yaWdpbiIsInNldFdvcmxkVHJhbnNmb3JtIiwiYWN0aXZhdGUiLCJ6ZXJvIiwic2V0TGluZWFyVmVsb2NpdHkiLCJzZXRBbmd1bGFyVmVsb2NpdHkiLCJkZXN0cm95IiwiYXBwbHlJbXB1bHNlVG9TcGhlcmUiLCJjbWQiLCJpbXB1bHNlIiwic2V0VmFsdWUiLCJnZW9tZXRyeSIsImFwcGx5Q2VudHJhbEltcHVsc2UiLCJ2ZWxvY2l0eSIsImdldExpbmVhclZlbG9jaXR5Iiwi0LrQvtC80LDQvdC00LAiLCLQv9C+0LfQuNGG0LjRjyIsItGB0LrQvtGA0L7RgdGC0YwiLCJjcmVhdGVNZXNoQW5kQm9keUZvck9iamVjdCIsImRhdGEiLCJjcmVhdGVUZXJyYWluTWVzaCIsImNyZWF0ZVBoeXNpY3NCb2R5Rm9yVGVycmFpbiIsImNyZWF0ZVNwaGVyZU1lc2giLCJjcmVhdGVQaHlzaWNzQm9keUZvclNwaGVyZSIsImNyZWF0ZVRyZWVNZXNoIiwiY3JlYXRlRGVmYXVsdE1lc2giLCJoZWlnaHRtYXBfdyIsImhlaWdodG1hcF9oIiwic2NhbGVYIiwic2NhbGVfeCIsInNjYWxlWiIsInNjYWxlX3oiLCJhbW1vSGVpZ2h0RGF0YSIsIl9tYWxsb2MiLCJwMiIsImoiLCJIRUFQRjMyIiwiaGVpZ2h0X2RhdGEiLCJzaGFwZSIsImJ0SGVpZ2h0ZmllbGRUZXJyYWluU2hhcGUiLCJtaW5faGVpZ2h0IiwibWF4X2hlaWdodCIsIlBIWV9GTE9BVCIsInNldExvY2FsU2NhbGluZyIsInNjYWxlX3kiLCJzZXRNYXJnaW4iLCJzZXRJZGVudGl0eSIsIm1hc3MiLCJsb2NhbEluZXJ0aWEiLCJtb3Rpb25TdGF0ZSIsImJ0RGVmYXVsdE1vdGlvblN0YXRlIiwicmJJbmZvIiwiYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvIiwiYnRSaWdpZEJvZHkiLCJURVJSQUlOX0dST1VQIiwiU1BIRVJFX0dST1VQIiwiYWRkUmlnaWRCb2R5Iiwi0YDQsNC30LzQtdGA0YsiLCLQvNCw0YHRiNGC0LDQsSIsItC80LjQvdCS0YvRgdC+0YLQsCIsItC80LDQutGB0JLRi9GB0L7RgtCwIiwiZ2VvIiwiUGxhbmVHZW9tZXRyeSIsInJvdGF0ZVgiLCJNYXRoIiwiUEkiLCJ2ZXJ0cyIsImF0dHJpYnV0ZXMiLCJhcnJheSIsIml4IiwiaXoiLCJmbG9vciIsImNvbXB1dGVWZXJ0ZXhOb3JtYWxzIiwiTWVzaCIsIk1lc2hQaG9uZ01hdGVyaWFsIiwiY29sb3IiLCJwYXJzZUNvbG9yIiwid2lyZWZyYW1lIiwiZmxhdFNoYWRpbmciLCJyZWNlaXZlU2hhZG93IiwiU3BoZXJlR2VvbWV0cnkiLCJyYWRpdXMiLCJzaGluaW5lc3MiLCJncm91cCIsIkdyb3VwIiwiYnJhbmNoZXMiLCJBcnJheSIsImlzQXJyYXkiLCJicmFuY2giLCJpbmRleCIsInN0YXJ0WCIsInVuZGVmaW5lZCIsInN0YXJ0WSIsInN0YXJ0WiIsImVuZFgiLCJlbmRZIiwiZW5kWiIsImJyYW5jaEdlbyIsIkN5bGluZGVyR2VvbWV0cnkiLCJyYWRpdXNUb3AiLCJyYWRpdXNCb3R0b20iLCJicmFuY2hNYXQiLCJicmFuY2hNZXNoIiwibWlkWCIsIm1pZFkiLCJtaWRaIiwiVmVjdG9yMyIsInNjYWxlIiwiQm94R2VvbWV0cnkiLCJNZXNoTGFtYmVydE1hdGVyaWFsIiwiYnRTcGhlcmVTaGFwZSIsImNhbGN1bGF0ZUxvY2FsSW5lcnRpYSIsImNvbG9yU3RyIiwic3RhcnRzV2l0aCIsInBhcnNlSW50IiwiY3JlYXRlVGVzdFNwaGVyZSIsIm1hdGVyaWFsIiwic2V0QWN0aXZhdGlvblN0YXRlIiwic2V0RnJpY3Rpb24iLCJzZXRSb2xsaW5nRnJpY3Rpb24iLCJzZXRSZXN0aXR1dGlvbiIsInRlc3RTcGhlcmVPYmoiLCJ3cyIsImhhbmRsZU1lc3NhZ2UiLCJwaHlzaWNzX2J5Iiwic3RhY2siLCJoYW5kbGVLZXlEb3duIiwicmVhZHlTdGF0ZSIsIldlYlNvY2tldCIsIk9QRU4iLCJrZXkiLCJzZW5kIiwiSlNPTiIsInN0cmluZ2lmeSIsImluaXROZXR3b3JrIiwib25vcGVuIiwib25tZXNzYWdlIiwiZXZ0IiwicGFyc2UiLCJtZXNzYWdlIiwiZXZlbnRQaGFzZSIsIm9uY2xvc2UiLCJldmVudCIsImNvZGUiLCJyZWFzb24iLCJ3YXNDbGVhbiIsImRlYnVnUGh5c2ljc1dvcmxkIiwiYW5pbWF0ZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRhcmdldE9iamVjdCIsInRhcmdldFBvcyIsIm9mZnNldCIsImNhbWVyYVRhcmdldCIsImNsb25lIiwibGVycCIsInJlbmRlciIsInN0YXJ0IiwiX3N0YXJ0Iiwic2V0VGltZW91dCIsInQwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///251\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var s=1/0;for(I=0;I<deferred.length;I++){for(var[U,F,B]=deferred[I],L=!0,C=0;C<U.length;C++)(!1&B||s>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[C])))?U.splice(C--,1):(L=!1,B<s&&(s=B));if(L){deferred.splice(I--,1);var t=F();void 0!==t&&(Q=t)}}return Q}B=B||0;for(var I=deferred.length;I>0&&deferred[I-1][2]>B;I--)deferred[I]=deferred[I-1];deferred[I]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),(()=>{var Q={792:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,s,[L,C,t]=F,I=0;if(L.some((U=>0!==Q[U]))){for(B in C)__webpack_require__.o(C,B)&&(__webpack_require__.m[B]=C[B]);if(t)var E=t(__webpack_require__)}for(U&&U(F);I<L.length;I++)s=L[I],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(E)},F=self.webpackChunkweb=self.webpackChunkweb||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[233],(()=>__webpack_require__(251)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();