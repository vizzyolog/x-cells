(()=>{"use strict";var __webpack_modules__={251:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.core.js\nvar three_core = __webpack_require__(922);\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(437);\n;// ./src/scene.js\n// scene.js\n\nvar scene_scene, camera, renderer;\nfunction initScene() {\n  console.log("try to initScene");\n  scene_scene = new three_core/* Scene */.Z58();\n  scene_scene.background = new three_core/* Color */.Q1f(0x88ccff);\n  camera = new three_core/* PerspectiveCamera */.ubm(60, window.innerWidth / window.innerHeight, 0.2, 2000);\n  camera.position.set(0, 50, 100);\n  camera.lookAt(0, 0, 0);\n  renderer = new three_module/* WebGLRenderer */.JeP({\n    antialias: true\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  // Включаем поддержку теней\n  renderer.shadowMap.enabled = true;\n  renderer.shadowMap.type = three_core/* PCFSoftShadowMap */.Wk7;\n  document.body.appendChild(renderer.domElement);\n  window.addEventListener(\'resize\', onWindowResize);\n\n  // Настраиваем освещение\n  var ambient = new three_core/* AmbientLight */.$p8(0xffffff, 0.5);\n  scene_scene.add(ambient);\n\n  // Основной направленный свет с тенями\n  var directional = new three_core/* DirectionalLight */.ZyN(0xffffff, 1);\n  directional.position.set(50, 100, 50);\n  directional.castShadow = true;\n  // Настраиваем параметры теней\n  directional.shadow.camera.near = 0.1;\n  directional.shadow.camera.far = 500;\n  directional.shadow.camera.left = -100;\n  directional.shadow.camera.right = 100;\n  directional.shadow.camera.top = 100;\n  directional.shadow.camera.bottom = -100;\n  directional.shadow.mapSize.width = 2048;\n  directional.shadow.mapSize.height = 2048;\n  scene_scene.add(directional);\n\n  // Добавляем вспомогательный свет для подсветки теней\n  var fillLight = new three_core/* DirectionalLight */.ZyN(0xffffff, 0.3);\n  fillLight.position.set(-50, 50, -50);\n  scene_scene.add(fillLight);\n}\nfunction onWindowResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\n;// ./src/physics.js\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// physics.js\n\nvar physics_localPhysicsWorld = null;\nvar ammoPromise = null;\nfunction initAmmo() {\n  return _initAmmo.apply(this, arguments);\n}\nfunction _initAmmo() {\n  _initAmmo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!ammoPromise) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt("return", ammoPromise);\n        case 2:\n          ammoPromise = new Promise(function (resolve, reject) {\n            var script = document.createElement(\'script\');\n            script.src = \'/ammo/ammo.wasm.js\'; // путь от корня веб-сервера\n            script.async = true;\n            script.onload = function () {\n              console.log("[Ammo] Скрипт загружен, инициализация...");\n              Ammo().then(function (AmmoLib) {\n                window.Ammo = AmmoLib;\n\n                // Инициализируем физический мир после загрузки Ammo\n                var collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n                var dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n                var broadphase = new AmmoLib.btDbvtBroadphase();\n                var solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n                physics_localPhysicsWorld = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n                physics_localPhysicsWorld.setGravity(new AmmoLib.btVector3(0, -9.81, 0));\n                console.log("[Ammo] Инициализация успешна");\n                resolve(AmmoLib);\n              })["catch"](reject);\n            };\n            script.onerror = function (error) {\n              console.error("[Ammo] Ошибка загрузки скрипта:", error);\n              reject(error);\n            };\n            document.body.appendChild(script);\n          });\n          return _context.abrupt("return", ammoPromise);\n        case 4:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _initAmmo.apply(this, arguments);\n}\nfunction stepPhysics(deltaTime) {\n  if (physics_localPhysicsWorld) {\n    // Проверяем, что deltaTime имеет разумное значение\n    if (deltaTime <= 0 || deltaTime > 1) {\n      console.warn("[Physics] Подозрительное значение deltaTime:", deltaTime);\n      deltaTime = 1 / 60; // используем фиксированный шаг если что-то не так\n    }\n\n    // if (Math.random() < 0.016) { // примерно раз в секунду при 60 FPS\n    //     console.log("[Physics] Шаг симуляции:", {\n    //         deltaTime: deltaTime,\n    //     });\n    // }\n\n    physics_localPhysicsWorld.stepSimulation(deltaTime, 10);\n  } else {\n    console.warn("[Physics] Физический мир не инициализирован");\n  }\n}\nfunction updatePhysicsObjects(objects) {\n  for (var id in objects) {\n    var obj = objects[id];\n    if (!obj.mesh) continue;\n    console.log("[Physics] \\u041E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(id, " \\u0441 physicsBy: ").concat(obj.physicsBy));\n    switch (obj.physicsBy) {\n      case "ammo":\n        // Обновление только по физике Ammo.js\n        if (obj.body && obj.object_type !== "terrain") {\n          var trans = new window.Ammo.btTransform();\n          obj.body.getMotionState().getWorldTransform(trans);\n          var locX = trans.getOrigin().x();\n          var locY = trans.getOrigin().y();\n          var locZ = trans.getOrigin().z();\n          var qx = trans.getRotation().x();\n          var qy = trans.getRotation().y();\n          var qz = trans.getRotation().z();\n          var qw = trans.getRotation().w();\n          obj.mesh.position.set(locX, locY, locZ);\n          obj.mesh.quaternion.set(qx, qy, qz, qw);\n        }\n        break;\n      case "bullet":\n        // Обновление только по серверным данным\n        if (obj.serverPos && obj.object_type !== "terrain") {\n          obj.mesh.position.set(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z);\n        }\n        break;\n      case "both":\n        // Обновление по обоим источникам\n        if (obj.object_type !== "terrain") {\n          if (obj.serverPos) {\n            // Обновляем физическое тело на основе серверной позиции\n            if (obj.body) {\n              var ms = obj.body.getMotionState();\n              if (ms) {\n                var transform = new window.Ammo.btTransform();\n                ms.getWorldTransform(transform);\n                transform.setOrigin(new window.Ammo.btVector3(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z));\n                ms.setWorldTransform(transform);\n\n                // Активируем тело, чтобы оно реагировало на физику\n                obj.body.activate(true);\n\n                // Сбрасываем скорость, чтобы избежать накопления\n                var zero = new window.Ammo.btVector3(0, 0, 0);\n                obj.body.setLinearVelocity(zero);\n                obj.body.setAngularVelocity(zero);\n                window.Ammo.destroy(zero);\n                window.Ammo.destroy(transform);\n              }\n            }\n\n            // Обновляем меш\n            obj.mesh.position.set(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z);\n          }\n        }\n        break;\n      default:\n        console.warn("[Physics] \\u041D\\u0435\\u0438\\u0437\\u0432\\u0435\\u0441\\u0442\\u043D\\u044B\\u0439 \\u0442\\u0438\\u043F physicsBy \\u0434\\u043B\\u044F \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(id, ": ").concat(obj.physicsBy));\n        break;\n    }\n  }\n}\nfunction applyImpulseToSphere(cmd, objects) {\n  console.log("[Debug] Переданные объекты в applyImpulseToSphere:", objects);\n  // Проверяем, что objects передан и является объектом\n  if (!objects || _typeof(objects) !== \'object\') {\n    console.warn("[Physics] Некорректные объекты переданы в applyImpulseToSphere");\n    return;\n  }\n\n  // Создаем импульс заранее, чтобы не создавать его для каждого шара\n  var impulse = new window.Ammo.btVector3(0, 0, 0);\n  if (cmd === "LEFT") impulse.setValue(-5, 0, 0);\n  if (cmd === "RIGHT") impulse.setValue(5, 0, 0);\n  if (cmd === "UP") impulse.setValue(0, 0, -5);\n  if (cmd === "DOWN") impulse.setValue(0, 0, 5);\n  if (cmd === "SPACE") impulse.setValue(0, 10, 0);\n\n  // Проходим по всем объектам и применяем импульс только к шарам с physicsBy: "ammo"\n  for (var id in objects) {\n    var obj = objects[id];\n    if (obj && obj.mesh && obj.mesh.geometry && obj.mesh.geometry.type === "SphereGeometry" && obj.body && obj.physicsBy === "ammo" // Только для локально управляемых объектов\n    ) {\n      obj.body.activate(true);\n      obj.body.applyCentralImpulse(impulse);\n\n      // Добавляем диагностику для каждого шара\n      var velocity = obj.body.getLinearVelocity();\n      console.log("[Physics] Состояние шара:", {\n        id: id,\n        physicsBy: obj.physicsBy,\n        команда: cmd,\n        позиция: obj.mesh.position,\n        скорость: {\n          x: velocity.x(),\n          y: velocity.y(),\n          z: velocity.z()\n        }\n      });\n    }\n  }\n\n  // Очищаем память\n  Ammo.destroy(impulse);\n}\n;// ./src/objects.js\n// objects.js\n\n\n\nvar objects = {}; // Словарь объектов: id -> { mesh, body, serverPos, ... }\n\nfunction createMeshAndBodyForObject(data) {\n  if (!data || !data.object_type) {\n    console.error("Invalid data received for object creation:", data);\n    return null;\n  }\n  var type = data.object_type;\n  var mesh,\n    body = null;\n  switch (type) {\n    case "terrain":\n      mesh = createTerrainMesh(data);\n      body = createPhysicsBodyForTerrain(data);\n      break;\n    case "sphere":\n      mesh = createSphereMesh(data);\n      body = createPhysicsBodyForSphere(data);\n      break;\n    case "tree":\n      mesh = createTreeMesh(data);\n      break;\n    default:\n      console.warn("Unknown object type: ".concat(type));\n      mesh = createDefaultMesh(data);\n      break;\n  }\n  scene_scene.add(mesh);\n  return {\n    mesh: mesh,\n    body: body\n  };\n}\nfunction createPhysicsBodyForTerrain(data) {\n  if (typeof Ammo === \'undefined\') {\n    console.error(\'Ammo.js не инициализирован\');\n    return null;\n  }\n  if (!physics_localPhysicsWorld) {\n    console.error(\'Физический мир не инициализирован\');\n    return null;\n  }\n  var w = data.heightmap_w;\n  var h = data.heightmap_h;\n  var scaleX = data.scale_x;\n  var scaleZ = data.scale_z;\n\n  // Создаем буфер в памяти Ammo для данных высот\n  var ammoHeightData = Ammo._malloc(4 * w * h);\n\n  // Копируем данные высот в память Ammo\n  var p = 0;\n  var p2 = 0;\n  for (var j = 0; j < h; j++) {\n    for (var i = 0; i < w; i++) {\n      Ammo.HEAPF32[ammoHeightData + p2 >> 2] = data.height_data[p];\n      p++;\n      p2 += 4;\n    }\n  }\n\n  // Создаем форму террейна\n  var shape = new Ammo.btHeightfieldTerrainShape(w, h, ammoHeightData, 1,\n  // heightScale\n  data.min_height, data.max_height, 1,\n  // up axis = 1 для Y\n  Ammo.PHY_FLOAT, false // flipQuadEdges\n  );\n\n  // Устанавливаем масштабирование\n  shape.setLocalScaling(new Ammo.btVector3(scaleX, data.scale_y, scaleZ));\n  shape.setMargin(0.5);\n\n  // Создаем трансформацию\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n\n  // Важно! Смещаем террейн, так как Bullet центрирует его по ограничивающему боксу\n  transform.setOrigin(new Ammo.btVector3(data.x || 0, (data.min_height + data.max_height) / 2, data.z || 0));\n  var mass = 0; // Статическое тело\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Добавляем тело в физический мир\n  var TERRAIN_GROUP = 1;\n  physics_localPhysicsWorld.addRigidBody(body, TERRAIN_GROUP, -1); // Террейн сталкивается со всеми\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n  console.log("[Terrain] Физическое тело создано:", {\n    размеры: {\n      w: w,\n      h: h\n    },\n    масштаб: {\n      x: scaleX,\n      y: data.scale_y,\n      z: scaleZ\n    },\n    позиция: {\n      x: data.x || 0,\n      y: (data.min_height + data.max_height) / 2,\n      z: data.z || 0\n    },\n    минВысота: data.min_height,\n    максВысота: data.max_height\n  });\n  return body;\n}\nfunction createTerrainMesh(data) {\n  var w = data.heightmap_w || 64;\n  var h = data.heightmap_h || 64;\n  var geo = new three_core/* PlaneGeometry */.bdM(w * data.scale_x, h * data.scale_z, w - 1, h - 1);\n  geo.rotateX(-Math.PI / 2);\n  if (data.height_data) {\n    var verts = geo.attributes.position.array;\n    for (var i = 0; i < verts.length; i += 3) {\n      var ix = i / 3 % w;\n      var iz = Math.floor(i / 3 / w);\n      verts[i + 1] = data.height_data[iz * w + ix] * data.scale_y;\n    }\n    geo.computeVertexNormals();\n  }\n  var mesh = new three_core/* Mesh */.eaF(geo, new three_core/* MeshPhongMaterial */.tXL({\n    color: parseColor(data.color || "#888888"),\n    wireframe: false,\n    flatShading: true\n  }));\n\n  // Включаем тени для террейна\n  mesh.receiveShadow = true;\n  return mesh;\n}\nfunction createSphereMesh(data) {\n  var geo = new three_core/* SphereGeometry */.Gu$(data.radius || 1, 32, 32);\n  var mesh = new three_core/* Mesh */.eaF(geo, new three_core/* MeshPhongMaterial */.tXL({\n    color: parseColor(data.color || "#888888"),\n    shininess: 30\n  }));\n\n  // Включаем тени для сфер\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n  return mesh;\n}\nfunction createTreeMesh(data) {\n  var group = new three_core/* Group */.YJl();\n  if (data.branches && Array.isArray(data.branches)) {\n    data.branches.forEach(function (branch, index) {\n      if (branch.startX === undefined || branch.startY === undefined || branch.startZ === undefined || branch.endX === undefined || branch.endY === undefined || branch.endZ === undefined) {\n        console.warn("Branch coordinates are missing or invalid at index ".concat(index, ":"), branch);\n        return;\n      }\n      var branchGeo = new three_core/* CylinderGeometry */.Ho_(branch.radiusTop || branch.radius || 0.1,\n      // верхний радиус\n      branch.radiusBottom || branch.radius || 0.2,\n      // нижний радиус\n      1, 8);\n      var branchMat = new three_core/* MeshPhongMaterial */.tXL({\n        color: parseColor(branch.color || "#654321"),\n        shininess: 10\n      });\n      var branchMesh = new three_core/* Mesh */.eaF(branchGeo, branchMat);\n\n      // Включаем тени для веток\n      branchMesh.castShadow = true;\n      branchMesh.receiveShadow = true;\n      var midX = (branch.startX + branch.endX) / 2;\n      var midY = (branch.startY + branch.endY) / 2;\n      var midZ = (branch.startZ + branch.endZ) / 2;\n      branchMesh.position.set(midX, midY, midZ);\n      branchMesh.lookAt(new three_core/* Vector3 */.Pq0(branch.endX, branch.endY, branch.endZ));\n      var length = new three_core/* Vector3 */.Pq0(branch.endX - branch.startX, branch.endY - branch.startY, branch.endZ - branch.startZ).length();\n      branchMesh.scale.set(1, length, 1);\n      group.add(branchMesh);\n    });\n  }\n  return group;\n}\nfunction createDefaultMesh(data) {\n  var geo = new three_core/* BoxGeometry */.iNn(1, 1, 1);\n  return new three_core/* Mesh */.eaF(geo, new three_core/* MeshLambertMaterial */.G_z({\n    color: parseColor(data.color || "#888888")\n  }));\n}\nfunction createPhysicsBodyForSphere(data) {\n  try {\n    if (typeof Ammo === \'undefined\') {\n      console.error(\'Ammo.js не инициализирован\');\n      return null;\n    }\n    if (!physics_localPhysicsWorld) {\n      console.error(\'Физический мир не инициализирован\');\n      return null;\n    }\n    var radius = data.radius || 1;\n    var mass = data.mass || 1;\n\n    // Создаем все Ammo объекты через window.Ammo\n    var shape = new window.Ammo.btSphereShape(radius);\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(data.x || 0, data.y || 0, data.z || 0));\n    var localInertia = new window.Ammo.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    var motionState = new window.Ammo.btDefaultMotionState(transform);\n    var rbInfo = new window.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    var body = new window.Ammo.btRigidBody(rbInfo);\n\n    // Добавляем тело в физический мир\n    var SPHERE_GROUP = 2;\n    physics_localPhysicsWorld.addRigidBody(body, SPHERE_GROUP, -1); // Сферы сталкиваются со всеми\n\n    // Очистка памяти\n    window.Ammo.destroy(rbInfo);\n    window.Ammo.destroy(localInertia);\n    return body;\n  } catch (error) {\n    console.error(\'Ошибка при создании физического тела:\', error);\n    return null;\n  }\n}\nfunction parseColor(colorStr) {\n  if (!colorStr) return 0x888888;\n  if (colorStr.startsWith("#")) {\n    return parseInt(colorStr.slice(1), 16);\n  }\n  return 0x888888;\n}\nfunction createTestSphere() {\n  // Создаем визуальную сферу\n  var radius = 1;\n  var geometry = new THREE.SphereGeometry(radius, 32, 32);\n  var material = new THREE.MeshPhongMaterial({\n    color: 0xff00ff,\n    shininess: 30\n  });\n  var mesh = new THREE.Mesh(geometry, material);\n\n  // Включаем тени для тестовой сферы\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n\n  // Позиционируем сферу высоко над террейном\n  var startY = 58; // Высота над террейном\n  mesh.position.set(0, startY, 0);\n  scene.add(mesh);\n\n  // Создаем физическое тело\n  var shape = new Ammo.btSphereShape(radius);\n  var mass = 1;\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n  transform.setOrigin(new Ammo.btVector3(0, startY, 0));\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  shape.calculateLocalInertia(mass, localInertia);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Важные настройки для физического тела\n  body.setActivationState(4); // DISABLE_DEACTIVATION\n  body.setFriction(0.5);\n  body.setRollingFriction(0.1);\n  body.setRestitution(0.5); // Упругость\n\n  // Добавляем тело в физический мир\n  var SPHERE_GROUP = 2;\n  localPhysicsWorld.addRigidBody(body, SPHERE_GROUP, -1); // Тестовая сфера сталкивается со всеми\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n\n  // Добавляем объект в наш список объектов\n  var testSphereObj = {\n    mesh: mesh,\n    body: body,\n    object_type: "test_sphere",\n    physicsBy: "ammo" // Изменено с "both" на "ammo", чтобы управлялось только локальной физикой\n  };\n  objects["test_sphere"] = testSphereObj;\n  return testSphereObj;\n}\n;// ./src/network.js\nfunction network_typeof(o) { "@babel/helpers - typeof"; return network_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, network_typeof(o); }\n// network.js\n\n\nvar ws = null;\nfunction handleMessage(data) {\n  try {\n    if (data.type === "create" && data.id) {\n      console.log("[WS] Обработка create сообщения для id:", data.id);\n\n      // Создаем объект и добавляем его в список объектов\n      var obj = createMeshAndBodyForObject(data);\n      obj.physicsBy = data.physics_by || "both"; // Убедитесь, что свойство устанавливается\n      objects[data.id] = obj;\n      console.log("[WS] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, " \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D \\u0441 physicsBy: ").concat(obj.physicsBy)); // Логирование установленного свойства\n    } else if (data.type === "update" && data.id && objects[data.id]) {\n      console.log("[WS] Обработка update сообщения для id:", data.id);\n      var _obj = objects[data.id];\n      _obj.serverPos = {\n        x: data.x || 0,\n        y: data.y || 0,\n        z: data.z || 0\n      };\n    }\n  } catch (error) {\n    console.error("[WS] Ошибка при обработке сообщения:", error);\n    console.error("[WS] Стек вызовов:", error.stack);\n  }\n}\nfunction handleKeyDown(e) {\n  if (!ws || ws.readyState !== WebSocket.OPEN) return;\n  var cmd = "";\n  switch (e.key) {\n    case "ArrowLeft":\n      cmd = "LEFT";\n      break;\n    case "ArrowRight":\n      cmd = "RIGHT";\n      break;\n    case "ArrowUp":\n      cmd = "UP";\n      break;\n    case "ArrowDown":\n      cmd = "DOWN";\n      break;\n    case " ":\n      cmd = "SPACE";\n      break;\n    default:\n      return;\n  }\n  try {\n    ws.send(JSON.stringify({\n      type: "cmd",\n      cmd: cmd\n    }));\n    applyImpulseToSphere(cmd, objects);\n  } catch (error) {\n    console.error("[WS] Ошибка отправки:", error);\n  }\n}\nfunction initNetwork() {\n  try {\n    console.log("[WS] Начало инициализации WebSocket");\n    ws = new WebSocket("ws://localhost:8080/ws");\n    ws.onopen = function () {\n      console.log("[WS] connected");\n      // Отправим тестовое сообщение\n      try {\n        ws.send(JSON.stringify({\n          type: "ping"\n        }));\n        console.log("[WS] Отправлено тестовое сообщение");\n      } catch (e) {\n        console.error("[WS] Ошибка отправки тестового сообщения:", e);\n      }\n    };\n    ws.onmessage = function (evt) {\n      try {\n        var data = JSON.parse(evt.data);\n        if (!data || network_typeof(data) !== \'object\') {\n          throw new Error(\'Неверный формат данных\');\n        }\n        handleMessage(data);\n      } catch (error) {\n        console.error("[WS] Полная ошибка:", error);\n        console.error("[WS] Стек вызовов:", error.stack);\n      }\n    };\n    ws.onerror = function (error) {\n      console.error("[WS] WebSocket error:", error);\n      console.error("[WS] Детали ошибки:", {\n        message: error.message,\n        type: error.type,\n        eventPhase: error.eventPhase\n      });\n    };\n    ws.onclose = function (event) {\n      console.log("[WS] Соединение закрыто:", {\n        code: event.code,\n        reason: event.reason,\n        wasClean: event.wasClean\n      });\n    };\n    document.addEventListener("keydown", handleKeyDown);\n  } catch (error) {\n    console.error("[WS] Ошибка при создании WebSocket:", error);\n    console.error("[WS] Стек вызовов:", error.stack);\n  }\n}\n;// ./src/index.js\nfunction src_typeof(o) { "@babel/helpers - typeof"; return src_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, src_typeof(o); }\nfunction src_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ src_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == src_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(src_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction src_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction src_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// index.js\n\n\n\n\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Выполняем шаг физической симуляции (например, 1/60 секунды)\n  stepPhysics(1 / 60);\n  updatePhysicsObjects(objects);\n\n  // Пример обновления камеры: следим за первым найденным шаром\n  var targetObject = null;\n  for (var id in objects) {\n    var obj = objects[id];\n    if (obj && obj.mesh && obj.mesh.geometry && obj.mesh.geometry.type === "SphereGeometry") {\n      targetObject = obj;\n      break;\n    }\n  }\n  if (targetObject) {\n    var targetPos = targetObject.mesh.position;\n    var offset = new three_core/* Vector3 */.Pq0(0, 50, 100);\n    var cameraTarget = targetPos.clone().add(offset);\n    camera.position.lerp(cameraTarget, 0.1);\n    camera.lookAt(targetPos);\n  }\n  renderer.render(scene_scene, camera);\n}\nfunction start() {\n  return _start.apply(this, arguments);\n}\nfunction _start() {\n  _start = src_asyncToGenerator(/*#__PURE__*/src_regeneratorRuntime().mark(function _callee() {\n    return src_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          console.log("Start");\n          initScene();\n          _context.prev = 2;\n          _context.next = 5;\n          return new Promise(function (resolve) {\n            return setTimeout(resolve, 500);\n          });\n        case 5:\n          _context.next = 7;\n          return initAmmo();\n        case 7:\n          //createTestSphere();\n          initNetwork();\n          animate();\n          _context.next = 14;\n          break;\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context["catch"](2);\n          console.error("Ошибка при инициализации Ammo.js:", _context.t0);\n        case 14:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[2, 11]]);\n  }));\n  return _start.apply(this, arguments);\n}\nstart();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bUYsSUFBQSxDQUFwQixTQUFBNkIsUUFBQTtJQUFBLE9BQUFoSCxzQkFBQSxHQUFBdUIsSUFBQSxVQUFBMEYsU0FBQUMsUUFBQTtNQUFBLGtCQUFBQSxRQUFBLENBQUF0QixJQUFBLEdBQUFzQixRQUFBLENBQUFqRCxJQUFBO1FBQUE7VUFDSTdHLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLE9BQU8sQ0FBQztVQUNwQkYsU0FBUyxDQUFDLENBQUM7VUFBQytKLFFBQUEsQ0FBQXRCLElBQUE7VUFBQXNCLFFBQUEsQ0FBQWpELElBQUE7VUFBQSxPQUdGLElBQUl1QixPQUFPLENBQUMsVUFBQXRDLE9BQU87WUFBQSxPQUFJbVIsVUFBVSxDQUFDblIsT0FBTyxFQUFFLEdBQUcsQ0FBQztVQUFBLEVBQUM7UUFBQTtVQUFBZ0UsUUFBQSxDQUFBakQsSUFBQTtVQUFBLE9BQ2hENkMsUUFBUSxDQUFDLENBQUM7UUFBQTtVQUVoQjtVQUNBK0wsV0FBVyxDQUFDLENBQUM7VUFDYmEsT0FBTyxDQUFDLENBQUM7VUFBQ3hNLFFBQUEsQ0FBQWpELElBQUE7VUFBQTtRQUFBO1VBQUFpRCxRQUFBLENBQUF0QixJQUFBO1VBQUFzQixRQUFBLENBQUFvTixFQUFBLEdBQUFwTixRQUFBO1VBRVY5SixPQUFPLENBQUNrTCxLQUFLLENBQUMsbUNBQW1DLEVBQUFwQixRQUFBLENBQUFvTixFQUFPLENBQUM7UUFBQztRQUFBO1VBQUEsT0FBQXBOLFFBQUEsQ0FBQW5CLElBQUE7TUFBQTtJQUFBLEdBQUFpQixPQUFBO0VBQUEsQ0FFakU7RUFBQSxPQUFBb04sTUFBQSxDQUFBM04sS0FBQSxPQUFBRCxTQUFBO0FBQUE7QUFFRDJOLEtBQUssQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4vc3JjL3NjZW5lLmpzPzI2NGMiLCJ3ZWJwYWNrOi8vd2ViLy4vc3JjL3BoeXNpY3MuanM/YzQ4MyIsIndlYnBhY2s6Ly93ZWIvLi9zcmMvb2JqZWN0cy5qcz9jOGVjIiwid2VicGFjazovL3dlYi8uL3NyYy9uZXR3b3JrLmpzP2JkOTIiLCJ3ZWJwYWNrOi8vd2ViLy4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc2NlbmUuanNcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuZXhwb3J0IGxldCBzY2VuZSwgY2FtZXJhLCByZW5kZXJlcjtcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRTY2VuZSgpIHtcbiAgICBjb25zb2xlLmxvZyhcInRyeSB0byBpbml0U2NlbmVcIilcbiAgICBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xuICAgIHNjZW5lLmJhY2tncm91bmQgPSBuZXcgVEhSRUUuQ29sb3IoMHg4OGNjZmYpOyBcblxuICAgIGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYShcbiAgICAgICAgNjAsXG4gICAgICAgIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LFxuICAgICAgICAwLjIsXG4gICAgICAgIDIwMDBcbiAgICApO1xuICAgIGNhbWVyYS5wb3NpdGlvbi5zZXQoMCwgNTAsIDEwMCk7XG4gICAgY2FtZXJhLmxvb2tBdCgwLCAwLCAwKTtcblxuICAgIHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoeyBhbnRpYWxpYXM6IHRydWUgfSk7XG4gICAgcmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICAvLyDQktC60LvRjtGH0LDQtdC8INC/0L7QtNC00LXRgNC20LrRgyDRgtC10L3QtdC5XG4gICAgcmVuZGVyZXIuc2hhZG93TWFwLmVuYWJsZWQgPSB0cnVlO1xuICAgIHJlbmRlcmVyLnNoYWRvd01hcC50eXBlID0gVEhSRUUuUENGU29mdFNoYWRvd01hcDtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJlbmRlcmVyLmRvbUVsZW1lbnQpO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uV2luZG93UmVzaXplKTtcblxuICAgIC8vINCd0LDRgdGC0YDQsNC40LLQsNC10Lwg0L7RgdCy0LXRidC10L3QuNC1XG4gICAgY29uc3QgYW1iaWVudCA9IG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoMHhmZmZmZmYsIDAuNSk7XG4gICAgc2NlbmUuYWRkKGFtYmllbnQpO1xuXG4gICAgLy8g0J7RgdC90L7QstC90L7QuSDQvdCw0L/RgNCw0LLQu9C10L3QvdGL0Lkg0YHQstC10YIg0YEg0YLQtdC90Y/QvNC4XG4gICAgY29uc3QgZGlyZWN0aW9uYWwgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweGZmZmZmZiwgMSk7XG4gICAgZGlyZWN0aW9uYWwucG9zaXRpb24uc2V0KDUwLCAxMDAsIDUwKTtcbiAgICBkaXJlY3Rpb25hbC5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICAvLyDQndCw0YHRgtGA0LDQuNCy0LDQtdC8INC/0LDRgNCw0LzQtdGC0YDRiyDRgtC10L3QtdC5XG4gICAgZGlyZWN0aW9uYWwuc2hhZG93LmNhbWVyYS5uZWFyID0gMC4xO1xuICAgIGRpcmVjdGlvbmFsLnNoYWRvdy5jYW1lcmEuZmFyID0gNTAwO1xuICAgIGRpcmVjdGlvbmFsLnNoYWRvdy5jYW1lcmEubGVmdCA9IC0xMDA7XG4gICAgZGlyZWN0aW9uYWwuc2hhZG93LmNhbWVyYS5yaWdodCA9IDEwMDtcbiAgICBkaXJlY3Rpb25hbC5zaGFkb3cuY2FtZXJhLnRvcCA9IDEwMDtcbiAgICBkaXJlY3Rpb25hbC5zaGFkb3cuY2FtZXJhLmJvdHRvbSA9IC0xMDA7XG4gICAgZGlyZWN0aW9uYWwuc2hhZG93Lm1hcFNpemUud2lkdGggPSAyMDQ4O1xuICAgIGRpcmVjdGlvbmFsLnNoYWRvdy5tYXBTaXplLmhlaWdodCA9IDIwNDg7XG4gICAgc2NlbmUuYWRkKGRpcmVjdGlvbmFsKTtcblxuICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDQstGB0L/QvtC80L7Qs9Cw0YLQtdC70YzQvdGL0Lkg0YHQstC10YIg0LTQu9GPINC/0L7QtNGB0LLQtdGC0LrQuCDRgtC10L3QtdC5XG4gICAgY29uc3QgZmlsbExpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHhmZmZmZmYsIDAuMyk7XG4gICAgZmlsbExpZ2h0LnBvc2l0aW9uLnNldCgtNTAsIDUwLCAtNTApO1xuICAgIHNjZW5lLmFkZChmaWxsTGlnaHQpO1xufVxuXG5mdW5jdGlvbiBvbldpbmRvd1Jlc2l6ZSgpIHtcbiAgICBjYW1lcmEuYXNwZWN0ID0gd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICByZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xufVxuXG5leHBvcnQgeyBvbldpbmRvd1Jlc2l6ZSB9OyIsIi8vIHBoeXNpY3MuanNcblxuZXhwb3J0IGxldCBsb2NhbFBoeXNpY3NXb3JsZCA9IG51bGw7XG5sZXQgYW1tb1Byb21pc2UgPSBudWxsO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdEFtbW8oKSB7XG4gICAgaWYgKGFtbW9Qcm9taXNlKSB7XG4gICAgICAgIHJldHVybiBhbW1vUHJvbWlzZTtcbiAgICB9XG5cbiAgICBhbW1vUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIHNjcmlwdC5zcmMgPSAnL2FtbW8vYW1tby53YXNtLmpzJzsgLy8g0L/Rg9GC0Ywg0L7RgiDQutC+0YDQvdGPINCy0LXQsS3RgdC10YDQstC10YDQsFxuICAgICAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgICAgICBcbiAgICAgICAgc2NyaXB0Lm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0FtbW9dINCh0LrRgNC40L/RgiDQt9Cw0LPRgNGD0LbQtdC9LCDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjRjy4uLlwiKTtcbiAgICAgICAgICAgIEFtbW8oKS50aGVuKChBbW1vTGliKSA9PiB7XG4gICAgICAgICAgICAgICAgd2luZG93LkFtbW8gPSBBbW1vTGliO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vINCY0L3QuNGG0LjQsNC70LjQt9C40YDRg9C10Lwg0YTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAINC/0L7RgdC70LUg0LfQsNCz0YDRg9C30LrQuCBBbW1vXG4gICAgICAgICAgICAgICAgY29uc3QgY29sbGlzaW9uQ29uZmlndXJhdGlvbiA9IG5ldyBBbW1vTGliLmJ0RGVmYXVsdENvbGxpc2lvbkNvbmZpZ3VyYXRpb24oKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXNwYXRjaGVyID0gbmV3IEFtbW9MaWIuYnRDb2xsaXNpb25EaXNwYXRjaGVyKGNvbGxpc2lvbkNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJyb2FkcGhhc2UgPSBuZXcgQW1tb0xpYi5idERidnRCcm9hZHBoYXNlKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc29sdmVyID0gbmV3IEFtbW9MaWIuYnRTZXF1ZW50aWFsSW1wdWxzZUNvbnN0cmFpbnRTb2x2ZXIoKTtcbiAgICAgICAgICAgICAgICBsb2NhbFBoeXNpY3NXb3JsZCA9IG5ldyBBbW1vTGliLmJ0RGlzY3JldGVEeW5hbWljc1dvcmxkKFxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaGVyLFxuICAgICAgICAgICAgICAgICAgICBicm9hZHBoYXNlLFxuICAgICAgICAgICAgICAgICAgICBzb2x2ZXIsXG4gICAgICAgICAgICAgICAgICAgIGNvbGxpc2lvbkNvbmZpZ3VyYXRpb25cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGxvY2FsUGh5c2ljc1dvcmxkLnNldEdyYXZpdHkobmV3IEFtbW9MaWIuYnRWZWN0b3IzKDAsIC05LjgxLCAwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIltBbW1vXSDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRg9GB0L/QtdGI0L3QsFwiKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKEFtbW9MaWIpO1xuICAgICAgICAgICAgfSkuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHNjcmlwdC5vbmVycm9yID0gKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW0FtbW9dINCe0YjQuNCx0LrQsCDQt9Cw0LPRgNGD0LfQutC4INGB0LrRgNC40L/RgtCwOlwiLCBlcnJvcik7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBhbW1vUHJvbWlzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0ZXBQaHlzaWNzKGRlbHRhVGltZSkge1xuICAgIGlmIChsb2NhbFBoeXNpY3NXb3JsZCkge1xuICAgICAgICAvLyDQn9GA0L7QstC10YDRj9C10LwsINGH0YLQviBkZWx0YVRpbWUg0LjQvNC10LXRgiDRgNCw0LfRg9C80L3QvtC1INC30L3QsNGH0LXQvdC40LVcbiAgICAgICAgaWYgKGRlbHRhVGltZSA8PSAwIHx8IGRlbHRhVGltZSA+IDEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIltQaHlzaWNzXSDQn9C+0LTQvtC30YDQuNGC0LXQu9GM0L3QvtC1INC30L3QsNGH0LXQvdC40LUgZGVsdGFUaW1lOlwiLCBkZWx0YVRpbWUpO1xuICAgICAgICAgICAgZGVsdGFUaW1lID0gMS82MDsgLy8g0LjRgdC/0L7Qu9GM0LfRg9C10Lwg0YTQuNC60YHQuNGA0L7QstCw0L3QvdGL0Lkg0YjQsNCzINC10YHQu9C4INGH0YLQvi3RgtC+INC90LUg0YLQsNC6XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIGlmIChNYXRoLnJhbmRvbSgpIDwgMC4wMTYpIHsgLy8g0L/RgNC40LzQtdGA0L3QviDRgNCw0Lcg0LIg0YHQtdC60YPQvdC00YMg0L/RgNC4IDYwIEZQU1xuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coXCJbUGh5c2ljc10g0KjQsNCzINGB0LjQvNGD0LvRj9GG0LjQuDpcIiwge1xuICAgICAgICAvLyAgICAgICAgIGRlbHRhVGltZTogZGVsdGFUaW1lLFxuICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgXG4gICAgICAgIGxvY2FsUGh5c2ljc1dvcmxkLnN0ZXBTaW11bGF0aW9uKGRlbHRhVGltZSwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIltQaHlzaWNzXSDQpNC40LfQuNGH0LXRgdC60LjQuSDQvNC40YAg0L3QtSDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0L1cIik7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlUGh5c2ljc09iamVjdHMob2JqZWN0cykge1xuICAgIGZvciAobGV0IGlkIGluIG9iamVjdHMpIHtcbiAgICAgICAgY29uc3Qgb2JqID0gb2JqZWN0c1tpZF07XG4gICAgICAgIGlmICghb2JqLm1lc2gpIGNvbnRpbnVlO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKGBbUGh5c2ljc10g0J7QsdC90L7QstC70LXQvdC40LUg0L7QsdGK0LXQutGC0LAgJHtpZH0g0YEgcGh5c2ljc0J5OiAke29iai5waHlzaWNzQnl9YCk7IFxuXG4gICAgICAgIHN3aXRjaCAob2JqLnBoeXNpY3NCeSkge1xuICAgICAgICAgICAgY2FzZSBcImFtbW9cIjpcbiAgICAgICAgICAgICAgICAvLyDQntCx0L3QvtCy0LvQtdC90LjQtSDRgtC+0LvRjNC60L4g0L/QviDRhNC40LfQuNC60LUgQW1tby5qc1xuICAgICAgICAgICAgICAgIGlmIChvYmouYm9keSAmJiBvYmoub2JqZWN0X3R5cGUgIT09IFwidGVycmFpblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zID0gbmV3IHdpbmRvdy5BbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LmdldE1vdGlvblN0YXRlKCkuZ2V0V29ybGRUcmFuc2Zvcm0odHJhbnMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY1ggPSB0cmFucy5nZXRPcmlnaW4oKS54KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY1kgPSB0cmFucy5nZXRPcmlnaW4oKS55KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY1ogPSB0cmFucy5nZXRPcmlnaW4oKS56KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcXggPSB0cmFucy5nZXRSb3RhdGlvbigpLngoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcXkgPSB0cmFucy5nZXRSb3RhdGlvbigpLnkoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcXogPSB0cmFucy5nZXRSb3RhdGlvbigpLnooKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcXcgPSB0cmFucy5nZXRSb3RhdGlvbigpLncoKTtcblxuICAgICAgICAgICAgICAgICAgICBvYmoubWVzaC5wb3NpdGlvbi5zZXQobG9jWCwgbG9jWSwgbG9jWik7XG4gICAgICAgICAgICAgICAgICAgIG9iai5tZXNoLnF1YXRlcm5pb24uc2V0KHF4LCBxeSwgcXosIHF3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJidWxsZXRcIjpcbiAgICAgICAgICAgICAgICAvLyDQntCx0L3QvtCy0LvQtdC90LjQtSDRgtC+0LvRjNC60L4g0L/QviDRgdC10YDQstC10YDQvdGL0Lwg0LTQsNC90L3Ri9C8XG4gICAgICAgICAgICAgICAgaWYgKG9iai5zZXJ2ZXJQb3MgJiYgb2JqLm9iamVjdF90eXBlICE9PSBcInRlcnJhaW5cIikge1xuICAgICAgICAgICAgICAgICAgICBvYmoubWVzaC5wb3NpdGlvbi5zZXQob2JqLnNlcnZlclBvcy54LCBvYmouc2VydmVyUG9zLnksIG9iai5zZXJ2ZXJQb3Mueik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwiYm90aFwiOlxuICAgICAgICAgICAgICAgIC8vINCe0LHQvdC+0LLQu9C10L3QuNC1INC/0L4g0L7QsdC+0LjQvCDQuNGB0YLQvtGH0L3QuNC60LDQvFxuICAgICAgICAgICAgICAgIGlmIChvYmoub2JqZWN0X3R5cGUgIT09IFwidGVycmFpblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvYmouc2VydmVyUG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0YTQuNC30LjRh9C10YHQutC+0LUg0YLQtdC70L4g0L3QsCDQvtGB0L3QvtCy0LUg0YHQtdGA0LLQtdGA0L3QvtC5INC/0L7Qt9C40YbQuNC4XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLmJvZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtcyA9IG9iai5ib2R5LmdldE1vdGlvblN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyB3aW5kb3cuQW1tby5idFRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtcy5nZXRXb3JsZFRyYW5zZm9ybSh0cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm0uc2V0T3JpZ2luKG5ldyB3aW5kb3cuQW1tby5idFZlY3RvcjMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2VydmVyUG9zLngsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2VydmVyUG9zLnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2VydmVyUG9zLnpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zLnNldFdvcmxkVHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQkNC60YLQuNCy0LjRgNGD0LXQvCDRgtC10LvQviwg0YfRgtC+0LHRiyDQvtC90L4g0YDQtdCw0LPQuNGA0L7QstCw0LvQviDQvdCwINGE0LjQt9C40LrRg1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouYm9keS5hY3RpdmF0ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCh0LHRgNCw0YHRi9Cy0LDQtdC8INGB0LrQvtGA0L7RgdGC0YwsINGH0YLQvtCx0Ysg0LjQt9Cx0LXQttCw0YLRjCDQvdCw0LrQvtC/0LvQtdC90LjRj1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB6ZXJvID0gbmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmJvZHkuc2V0TGluZWFyVmVsb2NpdHkoemVybyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LnNldEFuZ3VsYXJWZWxvY2l0eSh6ZXJvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveSh6ZXJvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3kodHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQvNC10YhcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5tZXNoLnBvc2l0aW9uLnNldChvYmouc2VydmVyUG9zLngsIG9iai5zZXJ2ZXJQb3MueSwgb2JqLnNlcnZlclBvcy56KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFtQaHlzaWNzXSDQndC10LjQt9Cy0LXRgdGC0L3Ri9C5INGC0LjQvyBwaHlzaWNzQnkg0LTQu9GPINC+0LHRitC10LrRgtCwICR7aWR9OiAke29iai5waHlzaWNzQnl9YCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseUltcHVsc2VUb1NwaGVyZShjbWQsIG9iamVjdHMpIHtcbiAgICBjb25zb2xlLmxvZyhcIltEZWJ1Z10g0J/QtdGA0LXQtNCw0L3QvdGL0LUg0L7QsdGK0LXQutGC0Ysg0LIgYXBwbHlJbXB1bHNlVG9TcGhlcmU6XCIsIG9iamVjdHMpO1xuICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCwg0YfRgtC+IG9iamVjdHMg0L/QtdGA0LXQtNCw0L0g0Lgg0Y/QstC70Y/QtdGC0YHRjyDQvtCx0YrQtdC60YLQvtC8XG4gICAgaWYgKCFvYmplY3RzIHx8IHR5cGVvZiBvYmplY3RzICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJbUGh5c2ljc10g0J3QtdC60L7RgNGA0LXQutGC0L3Ri9C1INC+0LHRitC10LrRgtGLINC/0LXRgNC10LTQsNC90Ysg0LIgYXBwbHlJbXB1bHNlVG9TcGhlcmVcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyDQodC+0LfQtNCw0LXQvCDQuNC80L/Rg9C70YzRgSDQt9Cw0YDQsNC90LXQtSwg0YfRgtC+0LHRiyDQvdC1INGB0L7Qt9C00LDQstCw0YLRjCDQtdCz0L4g0LTQu9GPINC60LDQttC00L7Qs9C+INGI0LDRgNCwXG4gICAgY29uc3QgaW1wdWxzZSA9IG5ldyB3aW5kb3cuQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgaWYgKGNtZCA9PT0gXCJMRUZUXCIpIGltcHVsc2Uuc2V0VmFsdWUoLTUsIDAsIDApO1xuICAgIGlmIChjbWQgPT09IFwiUklHSFRcIikgaW1wdWxzZS5zZXRWYWx1ZSg1LCAwLCAwKTtcbiAgICBpZiAoY21kID09PSBcIlVQXCIpIGltcHVsc2Uuc2V0VmFsdWUoMCwgMCwgLTUpO1xuICAgIGlmIChjbWQgPT09IFwiRE9XTlwiKSBpbXB1bHNlLnNldFZhbHVlKDAsIDAsIDUpO1xuICAgIGlmIChjbWQgPT09IFwiU1BBQ0VcIikgaW1wdWxzZS5zZXRWYWx1ZSgwLCAxMCwgMCk7XG5cbiAgICAvLyDQn9GA0L7RhdC+0LTQuNC8INC/0L4g0LLRgdC10Lwg0L7QsdGK0LXQutGC0LDQvCDQuCDQv9GA0LjQvNC10L3Rj9C10Lwg0LjQvNC/0YPQu9GM0YEg0YLQvtC70YzQutC+INC6INGI0LDRgNCw0Lwg0YEgcGh5c2ljc0J5OiBcImFtbW9cIlxuICAgIGZvciAobGV0IGlkIGluIG9iamVjdHMpIHtcbiAgICAgICAgY29uc3Qgb2JqID0gb2JqZWN0c1tpZF07XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIG9iaiAmJlxuICAgICAgICAgICAgb2JqLm1lc2ggJiZcbiAgICAgICAgICAgIG9iai5tZXNoLmdlb21ldHJ5ICYmXG4gICAgICAgICAgICBvYmoubWVzaC5nZW9tZXRyeS50eXBlID09PSBcIlNwaGVyZUdlb21ldHJ5XCIgJiZcbiAgICAgICAgICAgIG9iai5ib2R5ICYmXG4gICAgICAgICAgICBvYmoucGh5c2ljc0J5ID09PSBcImFtbW9cIiAgLy8g0KLQvtC70YzQutC+INC00LvRjyDQu9C+0LrQsNC70YzQvdC+INGD0L/RgNCw0LLQu9GP0LXQvNGL0YUg0L7QsdGK0LXQutGC0L7QslxuICAgICAgICApIHtcbiAgICAgICAgICAgIG9iai5ib2R5LmFjdGl2YXRlKHRydWUpO1xuICAgICAgICAgICAgb2JqLmJvZHkuYXBwbHlDZW50cmFsSW1wdWxzZShpbXB1bHNlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC00LjQsNCz0L3QvtGB0YLQuNC60YMg0LTQu9GPINC60LDQttC00L7Qs9C+INGI0LDRgNCwXG4gICAgICAgICAgICBjb25zdCB2ZWxvY2l0eSA9IG9iai5ib2R5LmdldExpbmVhclZlbG9jaXR5KCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltQaHlzaWNzXSDQodC+0YHRgtC+0Y/QvdC40LUg0YjQsNGA0LA6XCIsIHtcbiAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgcGh5c2ljc0J5OiBvYmoucGh5c2ljc0J5LFxuICAgICAgICAgICAgICAgINC60L7QvNCw0L3QtNCwOiBjbWQsXG4gICAgICAgICAgICAgICAg0L/QvtC30LjRhtC40Y86IG9iai5tZXNoLnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgINGB0LrQvtGA0L7RgdGC0Yw6IHtcbiAgICAgICAgICAgICAgICAgICAgeDogdmVsb2NpdHkueCgpLFxuICAgICAgICAgICAgICAgICAgICB5OiB2ZWxvY2l0eS55KCksXG4gICAgICAgICAgICAgICAgICAgIHo6IHZlbG9jaXR5LnooKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8g0J7Rh9C40YnQsNC10Lwg0L/QsNC80Y/RgtGMXG4gICAgQW1tby5kZXN0cm95KGltcHVsc2UpO1xufSIsIi8vIG9iamVjdHMuanNcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB7IHNjZW5lIH0gZnJvbSAnLi9zY2VuZSc7XG5pbXBvcnQgeyBsb2NhbFBoeXNpY3NXb3JsZCB9IGZyb20gJy4vcGh5c2ljcyc7XG5cbmV4cG9ydCBsZXQgb2JqZWN0cyA9IHt9OyAvLyDQodC70L7QstCw0YDRjCDQvtCx0YrQtdC60YLQvtCyOiBpZCAtPiB7IG1lc2gsIGJvZHksIHNlcnZlclBvcywgLi4uIH1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1lc2hBbmRCb2R5Rm9yT2JqZWN0KGRhdGEpIHtcbiAgICBpZiAoIWRhdGEgfHwgIWRhdGEub2JqZWN0X3R5cGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkludmFsaWQgZGF0YSByZWNlaXZlZCBmb3Igb2JqZWN0IGNyZWF0aW9uOlwiLCBkYXRhKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgdHlwZSA9IGRhdGEub2JqZWN0X3R5cGU7XG4gICAgbGV0IG1lc2gsIGJvZHkgPSBudWxsO1xuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJ0ZXJyYWluXCI6XG4gICAgICAgICAgICBtZXNoID0gY3JlYXRlVGVycmFpbk1lc2goZGF0YSk7XG4gICAgICAgICAgICBib2R5ID0gY3JlYXRlUGh5c2ljc0JvZHlGb3JUZXJyYWluKGRhdGEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzcGhlcmVcIjpcbiAgICAgICAgICAgIG1lc2ggPSBjcmVhdGVTcGhlcmVNZXNoKGRhdGEpO1xuICAgICAgICAgICAgYm9keSA9IGNyZWF0ZVBoeXNpY3NCb2R5Rm9yU3BoZXJlKGRhdGEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ0cmVlXCI6XG4gICAgICAgICAgICBtZXNoID0gY3JlYXRlVHJlZU1lc2goZGF0YSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgVW5rbm93biBvYmplY3QgdHlwZTogJHt0eXBlfWApO1xuICAgICAgICAgICAgbWVzaCA9IGNyZWF0ZURlZmF1bHRNZXNoKGRhdGEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgc2NlbmUuYWRkKG1lc2gpO1xuICAgIHJldHVybiB7IG1lc2gsIGJvZHkgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGh5c2ljc0JvZHlGb3JUZXJyYWluKGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIEFtbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0FtbW8uanMg0L3QtSDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0L0nKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFsb2NhbFBoeXNpY3NXb3JsZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCfQpNC40LfQuNGH0LXRgdC60LjQuSDQvNC40YAg0L3QtSDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0L0nKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgdyA9IGRhdGEuaGVpZ2h0bWFwX3c7XG4gICAgY29uc3QgaCA9IGRhdGEuaGVpZ2h0bWFwX2g7XG4gICAgY29uc3Qgc2NhbGVYID0gZGF0YS5zY2FsZV94O1xuICAgIGNvbnN0IHNjYWxlWiA9IGRhdGEuc2NhbGVfejtcblxuICAgIC8vINCh0L7Qt9C00LDQtdC8INCx0YPRhNC10YAg0LIg0L/QsNC80Y/RgtC4IEFtbW8g0LTQu9GPINC00LDQvdC90YvRhSDQstGL0YHQvtGCXG4gICAgY29uc3QgYW1tb0hlaWdodERhdGEgPSBBbW1vLl9tYWxsb2MoNCAqIHcgKiBoKTtcbiAgICBcbiAgICAvLyDQmtC+0L/QuNGA0YPQtdC8INC00LDQvdC90YvQtSDQstGL0YHQvtGCINCyINC/0LDQvNGP0YLRjCBBbW1vXG4gICAgbGV0IHAgPSAwO1xuICAgIGxldCBwMiA9IDA7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBoOyBqKyspIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3OyBpKyspIHtcbiAgICAgICAgICAgIEFtbW8uSEVBUEYzMlthbW1vSGVpZ2h0RGF0YSArIHAyID4+IDJdID0gZGF0YS5oZWlnaHRfZGF0YVtwXTtcbiAgICAgICAgICAgIHArKztcbiAgICAgICAgICAgIHAyICs9IDQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDQodC+0LfQtNCw0LXQvCDRhNC+0YDQvNGDINGC0LXRgNGA0LXQudC90LBcbiAgICBjb25zdCBzaGFwZSA9IG5ldyBBbW1vLmJ0SGVpZ2h0ZmllbGRUZXJyYWluU2hhcGUoXG4gICAgICAgIHcsXG4gICAgICAgIGgsXG4gICAgICAgIGFtbW9IZWlnaHREYXRhLFxuICAgICAgICAxLCAgLy8gaGVpZ2h0U2NhbGVcbiAgICAgICAgZGF0YS5taW5faGVpZ2h0LFxuICAgICAgICBkYXRhLm1heF9oZWlnaHQsXG4gICAgICAgIDEsICAvLyB1cCBheGlzID0gMSDQtNC70Y8gWVxuICAgICAgICBBbW1vLlBIWV9GTE9BVCxcbiAgICAgICAgZmFsc2UgIC8vIGZsaXBRdWFkRWRnZXNcbiAgICApO1xuXG4gICAgLy8g0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10Lwg0LzQsNGB0YjRgtCw0LHQuNGA0L7QstCw0L3QuNC1XG4gICAgc2hhcGUuc2V0TG9jYWxTY2FsaW5nKG5ldyBBbW1vLmJ0VmVjdG9yMyhzY2FsZVgsIGRhdGEuc2NhbGVfeSwgc2NhbGVaKSk7XG4gICAgc2hhcGUuc2V0TWFyZ2luKDAuNSk7XG5cbiAgICAvLyDQodC+0LfQtNCw0LXQvCDRgtGA0LDQvdGB0YTQvtGA0LzQsNGG0LjRjlxuICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyBBbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgdHJhbnNmb3JtLnNldElkZW50aXR5KCk7XG4gICAgXG4gICAgLy8g0JLQsNC20L3QviEg0KHQvNC10YnQsNC10Lwg0YLQtdGA0YDQtdC50L0sINGC0LDQuiDQutCw0LogQnVsbGV0INGG0LXQvdGC0YDQuNGA0YPQtdGCINC10LPQviDQv9C+INC+0LPRgNCw0L3QuNGH0LjQstCw0Y7RidC10LzRgyDQsdC+0LrRgdGDXG4gICAgdHJhbnNmb3JtLnNldE9yaWdpbihuZXcgQW1tby5idFZlY3RvcjMoXG4gICAgICAgIGRhdGEueCB8fCAwLFxuICAgICAgICAoZGF0YS5taW5faGVpZ2h0ICsgZGF0YS5tYXhfaGVpZ2h0KSAvIDIsXG4gICAgICAgIGRhdGEueiB8fCAwXG4gICAgKSk7XG5cbiAgICBjb25zdCBtYXNzID0gMDsgLy8g0KHRgtCw0YLQuNGH0LXRgdC60L7QtSDRgtC10LvQvlxuICAgIGNvbnN0IGxvY2FsSW5lcnRpYSA9IG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICBjb25zdCBtb3Rpb25TdGF0ZSA9IG5ldyBBbW1vLmJ0RGVmYXVsdE1vdGlvblN0YXRlKHRyYW5zZm9ybSk7XG4gICAgY29uc3QgcmJJbmZvID0gbmV3IEFtbW8uYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvKG1hc3MsIG1vdGlvblN0YXRlLCBzaGFwZSwgbG9jYWxJbmVydGlhKTtcbiAgICBjb25zdCBib2R5ID0gbmV3IEFtbW8uYnRSaWdpZEJvZHkocmJJbmZvKTtcblxuICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDRgtC10LvQviDQsiDRhNC40LfQuNGH0LXRgdC60LjQuSDQvNC40YBcbiAgICBjb25zdCBURVJSQUlOX0dST1VQID0gMTtcbiAgICBsb2NhbFBoeXNpY3NXb3JsZC5hZGRSaWdpZEJvZHkoYm9keSwgVEVSUkFJTl9HUk9VUCwgLTEpOyAvLyDQotC10YDRgNC10LnQvSDRgdGC0LDQu9C60LjQstCw0LXRgtGB0Y8g0YHQviDQstGB0LXQvNC4XG5cbiAgICAvLyDQntGH0LjRgdGC0LrQsCDQv9Cw0LzRj9GC0LhcbiAgICBBbW1vLmRlc3Ryb3kocmJJbmZvKTtcbiAgICBBbW1vLmRlc3Ryb3kobG9jYWxJbmVydGlhKTtcblxuICAgIGNvbnNvbGUubG9nKFwiW1RlcnJhaW5dINCk0LjQt9C40YfQtdGB0LrQvtC1INGC0LXQu9C+INGB0L7Qt9C00LDQvdC+OlwiLCB7XG4gICAgICAgINGA0LDQt9C80LXRgNGLOiB7IHcsIGggfSxcbiAgICAgICAg0LzQsNGB0YjRgtCw0LE6IHsgeDogc2NhbGVYLCB5OiBkYXRhLnNjYWxlX3ksIHo6IHNjYWxlWiB9LFxuICAgICAgICDQv9C+0LfQuNGG0LjRjzogeyBcbiAgICAgICAgICAgIHg6IGRhdGEueCB8fCAwLCBcbiAgICAgICAgICAgIHk6IChkYXRhLm1pbl9oZWlnaHQgKyBkYXRhLm1heF9oZWlnaHQpIC8gMixcbiAgICAgICAgICAgIHo6IGRhdGEueiB8fCAwIFxuICAgICAgICB9LFxuICAgICAgICDQvNC40L3QktGL0YHQvtGC0LA6IGRhdGEubWluX2hlaWdodCxcbiAgICAgICAg0LzQsNC60YHQktGL0YHQvtGC0LA6IGRhdGEubWF4X2hlaWdodFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJvZHk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRlcnJhaW5NZXNoKGRhdGEpIHtcbiAgICBjb25zdCB3ID0gZGF0YS5oZWlnaHRtYXBfdyB8fCA2NDtcbiAgICBjb25zdCBoID0gZGF0YS5oZWlnaHRtYXBfaCB8fCA2NDtcbiAgICBjb25zdCBnZW8gPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShcbiAgICAgICAgdyAqIGRhdGEuc2NhbGVfeCxcbiAgICAgICAgaCAqIGRhdGEuc2NhbGVfeixcbiAgICAgICAgdyAtIDEsXG4gICAgICAgIGggLSAxXG4gICAgKTtcbiAgICBnZW8ucm90YXRlWCgtTWF0aC5QSSAvIDIpO1xuXG4gICAgaWYgKGRhdGEuaGVpZ2h0X2RhdGEpIHtcbiAgICAgICAgY29uc3QgdmVydHMgPSBnZW8uYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0cy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgICAgY29uc3QgaXggPSAoaSAvIDMpICUgdztcbiAgICAgICAgICAgIGNvbnN0IGl6ID0gTWF0aC5mbG9vcihpIC8gMyAvIHcpO1xuICAgICAgICAgICAgdmVydHNbaSArIDFdID0gZGF0YS5oZWlnaHRfZGF0YVtpeiAqIHcgKyBpeF0gKiBkYXRhLnNjYWxlX3k7XG4gICAgICAgIH1cbiAgICAgICAgZ2VvLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7XG4gICAgfVxuXG4gICAgY29uc3QgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKFxuICAgICAgICBnZW8sXG4gICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7XG4gICAgICAgICAgICBjb2xvcjogcGFyc2VDb2xvcihkYXRhLmNvbG9yIHx8IFwiIzg4ODg4OFwiKSxcbiAgICAgICAgICAgIHdpcmVmcmFtZTogZmFsc2UsXG4gICAgICAgICAgICBmbGF0U2hhZGluZzogdHJ1ZVxuICAgICAgICB9KVxuICAgICk7XG4gICAgXG4gICAgLy8g0JLQutC70Y7Rh9Cw0LXQvCDRgtC10L3QuCDQtNC70Y8g0YLQtdGA0YDQtdC50L3QsFxuICAgIG1lc2gucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG4gICAgXG4gICAgcmV0dXJuIG1lc2g7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTcGhlcmVNZXNoKGRhdGEpIHtcbiAgICBjb25zdCBnZW8gPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoZGF0YS5yYWRpdXMgfHwgMSwgMzIsIDMyKTtcbiAgICBjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goXG4gICAgICAgIGdlbyxcbiAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHsgXG4gICAgICAgICAgICBjb2xvcjogcGFyc2VDb2xvcihkYXRhLmNvbG9yIHx8IFwiIzg4ODg4OFwiKSxcbiAgICAgICAgICAgIHNoaW5pbmVzczogMzBcbiAgICAgICAgfSlcbiAgICApO1xuICAgIFxuICAgIC8vINCS0LrQu9GO0YfQsNC10Lwg0YLQtdC90Lgg0LTQu9GPINGB0YTQtdGAXG4gICAgbWVzaC5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICBtZXNoLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuICAgIFxuICAgIHJldHVybiBtZXNoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUcmVlTWVzaChkYXRhKSB7XG4gICAgY29uc3QgZ3JvdXAgPSBuZXcgVEhSRUUuR3JvdXAoKTtcblxuICAgIGlmIChkYXRhLmJyYW5jaGVzICYmIEFycmF5LmlzQXJyYXkoZGF0YS5icmFuY2hlcykpIHtcbiAgICAgICAgZGF0YS5icmFuY2hlcy5mb3JFYWNoKChicmFuY2gsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgYnJhbmNoLnN0YXJ0WCA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgYnJhbmNoLnN0YXJ0WSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgYnJhbmNoLnN0YXJ0WiA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgYnJhbmNoLmVuZFggPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgIGJyYW5jaC5lbmRZID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICBicmFuY2guZW5kWiA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICAgIGBCcmFuY2ggY29vcmRpbmF0ZXMgYXJlIG1pc3Npbmcgb3IgaW52YWxpZCBhdCBpbmRleCAke2luZGV4fTpgLFxuICAgICAgICAgICAgICAgICAgICBicmFuY2hcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgYnJhbmNoR2VvID0gbmV3IFRIUkVFLkN5bGluZGVyR2VvbWV0cnkoXG4gICAgICAgICAgICAgICAgYnJhbmNoLnJhZGl1c1RvcCB8fCBicmFuY2gucmFkaXVzIHx8IDAuMSwgICAgLy8g0LLQtdGA0YXQvdC40Lkg0YDQsNC00LjRg9GBXG4gICAgICAgICAgICAgICAgYnJhbmNoLnJhZGl1c0JvdHRvbSB8fCBicmFuY2gucmFkaXVzIHx8IDAuMiwgLy8g0L3QuNC20L3QuNC5INGA0LDQtNC40YPRgVxuICAgICAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAgICAgOFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnN0IGJyYW5jaE1hdCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7XG4gICAgICAgICAgICAgICAgY29sb3I6IHBhcnNlQ29sb3IoYnJhbmNoLmNvbG9yIHx8IFwiIzY1NDMyMVwiKSxcbiAgICAgICAgICAgICAgICBzaGluaW5lc3M6IDEwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGJyYW5jaE1lc2ggPSBuZXcgVEhSRUUuTWVzaChicmFuY2hHZW8sIGJyYW5jaE1hdCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCS0LrQu9GO0YfQsNC10Lwg0YLQtdC90Lgg0LTQu9GPINCy0LXRgtC+0LpcbiAgICAgICAgICAgIGJyYW5jaE1lc2guY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgICAgICAgICBicmFuY2hNZXNoLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuXG4gICAgICAgICAgICBjb25zdCBtaWRYID0gKGJyYW5jaC5zdGFydFggKyBicmFuY2guZW5kWCkgLyAyO1xuICAgICAgICAgICAgY29uc3QgbWlkWSA9IChicmFuY2guc3RhcnRZICsgYnJhbmNoLmVuZFkpIC8gMjtcbiAgICAgICAgICAgIGNvbnN0IG1pZFogPSAoYnJhbmNoLnN0YXJ0WiArIGJyYW5jaC5lbmRaKSAvIDI7XG5cbiAgICAgICAgICAgIGJyYW5jaE1lc2gucG9zaXRpb24uc2V0KG1pZFgsIG1pZFksIG1pZFopO1xuICAgICAgICAgICAgYnJhbmNoTWVzaC5sb29rQXQobmV3IFRIUkVFLlZlY3RvcjMoYnJhbmNoLmVuZFgsIGJyYW5jaC5lbmRZLCBicmFuY2guZW5kWikpO1xuXG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBuZXcgVEhSRUUuVmVjdG9yMyhcbiAgICAgICAgICAgICAgICBicmFuY2guZW5kWCAtIGJyYW5jaC5zdGFydFgsXG4gICAgICAgICAgICAgICAgYnJhbmNoLmVuZFkgLSBicmFuY2guc3RhcnRZLFxuICAgICAgICAgICAgICAgIGJyYW5jaC5lbmRaIC0gYnJhbmNoLnN0YXJ0WlxuICAgICAgICAgICAgKS5sZW5ndGgoKTtcblxuICAgICAgICAgICAgYnJhbmNoTWVzaC5zY2FsZS5zZXQoMSwgbGVuZ3RoLCAxKTtcblxuICAgICAgICAgICAgZ3JvdXAuYWRkKGJyYW5jaE1lc2gpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ3JvdXA7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRNZXNoKGRhdGEpIHtcbiAgICBjb25zdCBnZW8gPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMSwgMSwgMSk7XG4gICAgcmV0dXJuIG5ldyBUSFJFRS5NZXNoKFxuICAgICAgICBnZW8sXG4gICAgICAgIG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHsgY29sb3I6IHBhcnNlQ29sb3IoZGF0YS5jb2xvciB8fCBcIiM4ODg4ODhcIikgfSlcbiAgICApO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVQaHlzaWNzQm9keUZvclNwaGVyZShkYXRhKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBBbW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignQW1tby5qcyDQvdC1INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvScpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWxvY2FsUGh5c2ljc1dvcmxkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCfQpNC40LfQuNGH0LXRgdC60LjQuSDQvNC40YAg0L3QtSDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0L0nKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmFkaXVzID0gZGF0YS5yYWRpdXMgfHwgMTtcbiAgICAgICAgY29uc3QgbWFzcyA9IGRhdGEubWFzcyB8fCAxO1xuXG4gICAgICAgIC8vINCh0L7Qt9C00LDQtdC8INCy0YHQtSBBbW1vINC+0LHRitC10LrRgtGLINGH0LXRgNC10Lcgd2luZG93LkFtbW9cbiAgICAgICAgY29uc3Qgc2hhcGUgPSBuZXcgd2luZG93LkFtbW8uYnRTcGhlcmVTaGFwZShyYWRpdXMpO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBuZXcgd2luZG93LkFtbW8uYnRUcmFuc2Zvcm0oKTtcbiAgICAgICAgdHJhbnNmb3JtLnNldElkZW50aXR5KCk7XG4gICAgICAgIHRyYW5zZm9ybS5zZXRPcmlnaW4obmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMyhkYXRhLnggfHwgMCwgZGF0YS55IHx8IDAsIGRhdGEueiB8fCAwKSk7XG5cbiAgICAgICAgY29uc3QgbG9jYWxJbmVydGlhID0gbmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgc2hhcGUuY2FsY3VsYXRlTG9jYWxJbmVydGlhKG1hc3MsIGxvY2FsSW5lcnRpYSk7XG5cbiAgICAgICAgY29uc3QgbW90aW9uU3RhdGUgPSBuZXcgd2luZG93LkFtbW8uYnREZWZhdWx0TW90aW9uU3RhdGUodHJhbnNmb3JtKTtcbiAgICAgICAgY29uc3QgcmJJbmZvID0gbmV3IHdpbmRvdy5BbW1vLmJ0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mbyhcbiAgICAgICAgICAgIG1hc3MsXG4gICAgICAgICAgICBtb3Rpb25TdGF0ZSxcbiAgICAgICAgICAgIHNoYXBlLFxuICAgICAgICAgICAgbG9jYWxJbmVydGlhXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGJvZHkgPSBuZXcgd2luZG93LkFtbW8uYnRSaWdpZEJvZHkocmJJbmZvKTtcblxuICAgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0YLQtdC70L4g0LIg0YTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAXG4gICAgICAgIGNvbnN0IFNQSEVSRV9HUk9VUCA9IDI7XG4gICAgICAgIGxvY2FsUGh5c2ljc1dvcmxkLmFkZFJpZ2lkQm9keShib2R5LCBTUEhFUkVfR1JPVVAsIC0xKTsgLy8g0KHRhNC10YDRiyDRgdGC0LDQu9C60LjQstCw0Y7RgtGB0Y8g0YHQviDQstGB0LXQvNC4XG5cbiAgICAgICAgLy8g0J7Rh9C40YHRgtC60LAg0L/QsNC80Y/RgtC4XG4gICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3kocmJJbmZvKTtcbiAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveShsb2NhbEluZXJ0aWEpO1xuXG4gICAgICAgIHJldHVybiBib2R5O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ9Ce0YjQuNCx0LrQsCDQv9GA0Lgg0YHQvtC30LTQsNC90LjQuCDRhNC40LfQuNGH0LXRgdC60L7Qs9C+INGC0LXQu9CwOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZUNvbG9yKGNvbG9yU3RyKSB7XG4gICAgaWYgKCFjb2xvclN0cikgcmV0dXJuIDB4ODg4ODg4O1xuICAgIGlmIChjb2xvclN0ci5zdGFydHNXaXRoKFwiI1wiKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoY29sb3JTdHIuc2xpY2UoMSksIDE2KTtcbiAgICB9XG4gICAgcmV0dXJuIDB4ODg4ODg4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGVzdFNwaGVyZSgpIHtcbiAgICAvLyDQodC+0LfQtNCw0LXQvCDQstC40LfRg9Cw0LvRjNC90YPRjiDRgdGE0LXRgNGDXG4gICAgY29uc3QgcmFkaXVzID0gMTtcbiAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeShyYWRpdXMsIDMyLCAzMik7XG4gICAgY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoeyBcbiAgICAgICAgY29sb3I6IDB4ZmYwMGZmLFxuICAgICAgICBzaGluaW5lc3M6IDMwXG4gICAgfSk7XG4gICAgY29uc3QgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7XG4gICAgXG4gICAgLy8g0JLQutC70Y7Rh9Cw0LXQvCDRgtC10L3QuCDQtNC70Y8g0YLQtdGB0YLQvtCy0L7QuSDRgdGE0LXRgNGLXG4gICAgbWVzaC5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICBtZXNoLnJlY2VpdmVTaGFkb3cgPSB0cnVlO1xuICAgIFxuICAgIC8vINCf0L7Qt9C40YbQuNC+0L3QuNGA0YPQtdC8INGB0YTQtdGA0YMg0LLRi9GB0L7QutC+INC90LDQtCDRgtC10YDRgNC10LnQvdC+0LxcbiAgICBjb25zdCBzdGFydFkgPSA1ODsgLy8g0JLRi9GB0L7RgtCwINC90LDQtCDRgtC10YDRgNC10LnQvdC+0LxcbiAgICBtZXNoLnBvc2l0aW9uLnNldCgwLCBzdGFydFksIDApO1xuICAgIHNjZW5lLmFkZChtZXNoKTtcblxuICAgIC8vINCh0L7Qt9C00LDQtdC8INGE0LjQt9C40YfQtdGB0LrQvtC1INGC0LXQu9C+XG4gICAgY29uc3Qgc2hhcGUgPSBuZXcgQW1tby5idFNwaGVyZVNoYXBlKHJhZGl1cyk7XG4gICAgY29uc3QgbWFzcyA9IDE7XG4gICAgXG4gICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IEFtbW8uYnRUcmFuc2Zvcm0oKTtcbiAgICB0cmFuc2Zvcm0uc2V0SWRlbnRpdHkoKTtcbiAgICB0cmFuc2Zvcm0uc2V0T3JpZ2luKG5ldyBBbW1vLmJ0VmVjdG9yMygwLCBzdGFydFksIDApKTtcblxuICAgIGNvbnN0IGxvY2FsSW5lcnRpYSA9IG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICBzaGFwZS5jYWxjdWxhdGVMb2NhbEluZXJ0aWEobWFzcywgbG9jYWxJbmVydGlhKTtcblxuICAgIGNvbnN0IG1vdGlvblN0YXRlID0gbmV3IEFtbW8uYnREZWZhdWx0TW90aW9uU3RhdGUodHJhbnNmb3JtKTtcbiAgICBjb25zdCByYkluZm8gPSBuZXcgQW1tby5idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm8obWFzcywgbW90aW9uU3RhdGUsIHNoYXBlLCBsb2NhbEluZXJ0aWEpO1xuICAgIGNvbnN0IGJvZHkgPSBuZXcgQW1tby5idFJpZ2lkQm9keShyYkluZm8pO1xuXG4gICAgLy8g0JLQsNC20L3Ri9C1INC90LDRgdGC0YDQvtC50LrQuCDQtNC70Y8g0YTQuNC30LjRh9C10YHQutC+0LPQviDRgtC10LvQsFxuICAgIGJvZHkuc2V0QWN0aXZhdGlvblN0YXRlKDQpOyAvLyBESVNBQkxFX0RFQUNUSVZBVElPTlxuICAgIGJvZHkuc2V0RnJpY3Rpb24oMC41KTtcbiAgICBib2R5LnNldFJvbGxpbmdGcmljdGlvbigwLjEpO1xuICAgIGJvZHkuc2V0UmVzdGl0dXRpb24oMC41KTsgLy8g0KPQv9GA0YPQs9C+0YHRgtGMXG5cbiAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0YLQtdC70L4g0LIg0YTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAXG4gICAgY29uc3QgU1BIRVJFX0dST1VQID0gMjtcbiAgICBsb2NhbFBoeXNpY3NXb3JsZC5hZGRSaWdpZEJvZHkoYm9keSwgU1BIRVJFX0dST1VQLCAtMSk7IC8vINCi0LXRgdGC0L7QstCw0Y8g0YHRhNC10YDQsCDRgdGC0LDQu9C60LjQstCw0LXRgtGB0Y8g0YHQviDQstGB0LXQvNC4XG5cbiAgICAvLyDQntGH0LjRgdGC0LrQsCDQv9Cw0LzRj9GC0LhcbiAgICBBbW1vLmRlc3Ryb3kocmJJbmZvKTtcbiAgICBBbW1vLmRlc3Ryb3kobG9jYWxJbmVydGlhKTtcblxuICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDQvtCx0YrQtdC60YIg0LIg0L3QsNGIINGB0L/QuNGB0L7QuiDQvtCx0YrQtdC60YLQvtCyXG4gICAgY29uc3QgdGVzdFNwaGVyZU9iaiA9IHtcbiAgICAgICAgbWVzaCxcbiAgICAgICAgYm9keSxcbiAgICAgICAgb2JqZWN0X3R5cGU6IFwidGVzdF9zcGhlcmVcIixcbiAgICAgICAgcGh5c2ljc0J5OiBcImFtbW9cIiAvLyDQmNC30LzQtdC90LXQvdC+INGBIFwiYm90aFwiINC90LAgXCJhbW1vXCIsINGH0YLQvtCx0Ysg0YPQv9GA0LDQstC70Y/Qu9C+0YHRjCDRgtC+0LvRjNC60L4g0LvQvtC60LDQu9GM0L3QvtC5INGE0LjQt9C40LrQvtC5XG4gICAgfTtcbiAgICBvYmplY3RzW1widGVzdF9zcGhlcmVcIl0gPSB0ZXN0U3BoZXJlT2JqO1xuXG4gICAgcmV0dXJuIHRlc3RTcGhlcmVPYmo7XG59IiwiLy8gbmV0d29yay5qc1xuaW1wb3J0IHsgb2JqZWN0cywgY3JlYXRlTWVzaEFuZEJvZHlGb3JPYmplY3QgfSBmcm9tICcuL29iamVjdHMnO1xuaW1wb3J0IHsgYXBwbHlJbXB1bHNlVG9TcGhlcmUgfSBmcm9tICcuL3BoeXNpY3MnO1xuXG5sZXQgd3MgPSBudWxsO1xuXG5mdW5jdGlvbiBoYW5kbGVNZXNzYWdlKGRhdGEpIHsgICAgICBcbiAgICB0cnkge1xuICAgICAgICBpZiAoZGF0YS50eXBlID09PSBcImNyZWF0ZVwiICYmIGRhdGEuaWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW1dTXSDQntCx0YDQsNCx0L7RgtC60LAgY3JlYXRlINGB0L7QvtCx0YnQtdC90LjRjyDQtNC70Y8gaWQ6XCIsIGRhdGEuaWQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQodC+0LfQtNCw0LXQvCDQvtCx0YrQtdC60YIg0Lgg0LTQvtCx0LDQstC70Y/QtdC8INC10LPQviDQsiDRgdC/0LjRgdC+0Log0L7QsdGK0LXQutGC0L7QslxuICAgICAgICAgICAgY29uc3Qgb2JqID0gY3JlYXRlTWVzaEFuZEJvZHlGb3JPYmplY3QoZGF0YSk7XG4gICAgICAgICAgICBvYmoucGh5c2ljc0J5ID0gZGF0YS5waHlzaWNzX2J5IHx8IFwiYm90aFwiOyAvLyDQo9Cx0LXQtNC40YLQtdGB0YwsINGH0YLQviDRgdCy0L7QudGB0YLQstC+INGD0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdGC0YHRj1xuICAgICAgICAgICAgb2JqZWN0c1tkYXRhLmlkXSA9IG9iajtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coYFtXU10g0J7QsdGK0LXQutGCICR7ZGF0YS5pZH0g0YHQvtC30LTQsNC9INGBIHBoeXNpY3NCeTogJHtvYmoucGh5c2ljc0J5fWApOyAvLyDQm9C+0LPQuNGA0L7QstCw0L3QuNC1INGD0YHRgtCw0L3QvtCy0LvQtdC90L3QvtCz0L4g0YHQstC+0LnRgdGC0LLQsFxuICAgICAgICB9IFxuICAgICAgICBlbHNlIGlmIChkYXRhLnR5cGUgPT09IFwidXBkYXRlXCIgJiYgZGF0YS5pZCAmJiBvYmplY3RzW2RhdGEuaWRdKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltXU10g0J7QsdGA0LDQsdC+0YLQutCwIHVwZGF0ZSDRgdC+0L7QsdGJ0LXQvdC40Y8g0LTQu9GPIGlkOlwiLCBkYXRhLmlkKTtcbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IG9iamVjdHNbZGF0YS5pZF07XG4gICAgICAgICAgICBvYmouc2VydmVyUG9zID0ge1xuICAgICAgICAgICAgICAgIHg6IGRhdGEueCB8fCAwLFxuICAgICAgICAgICAgICAgIHk6IGRhdGEueSB8fCAwLFxuICAgICAgICAgICAgICAgIHo6IGRhdGEueiB8fCAwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIltXU10g0J7RiNC40LHQutCwINC/0YDQuCDQvtCx0YDQsNCx0L7RgtC60LUg0YHQvtC+0LHRidC10L3QuNGPOlwiLCBlcnJvcik7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV1NdINCh0YLQtdC6INCy0YvQt9C+0LLQvtCyOlwiLCBlcnJvci5zdGFjayk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVLZXlEb3duKGUpIHtcbiAgICBpZiAoIXdzIHx8IHdzLnJlYWR5U3RhdGUgIT09IFdlYlNvY2tldC5PUEVOKSByZXR1cm47XG5cbiAgICBsZXQgY21kID0gXCJcIjtcbiAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICAgIGNhc2UgXCJBcnJvd0xlZnRcIjogY21kID0gXCJMRUZUXCI7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiQXJyb3dSaWdodFwiOiBjbWQgPSBcIlJJR0hUXCI7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiQXJyb3dVcFwiOiBjbWQgPSBcIlVQXCI7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiQXJyb3dEb3duXCI6IGNtZCA9IFwiRE9XTlwiOyBicmVhaztcbiAgICAgICAgY2FzZSBcIiBcIjogY21kID0gXCJTUEFDRVwiOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkoeyB0eXBlOiBcImNtZFwiLCBjbWQgfSkpO1xuICAgICAgICBhcHBseUltcHVsc2VUb1NwaGVyZShjbWQsIG9iamVjdHMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV1NdINCe0YjQuNCx0LrQsCDQvtGC0L/RgNCw0LLQutC4OlwiLCBlcnJvcik7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdE5ldHdvcmsoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJbV1NdINCd0LDRh9Cw0LvQviDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQuCBXZWJTb2NrZXRcIik7XG4gICAgICAgIHdzID0gbmV3IFdlYlNvY2tldChcIndzOi8vbG9jYWxob3N0OjgwODAvd3NcIik7XG4gICAgICAgIFxuICAgICAgICB3cy5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltXU10gY29ubmVjdGVkXCIpO1xuICAgICAgICAgICAgLy8g0J7RgtC/0YDQsNCy0LjQvCDRgtC10YHRgtC+0LLQvtC1INGB0L7QvtCx0YnQtdC90LjQtVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB3cy5zZW5kKEpTT04uc3RyaW5naWZ5KHsgdHlwZTogXCJwaW5nXCIgfSkpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW1dTXSDQntGC0L/RgNCw0LLQu9C10L3QviDRgtC10YHRgtC+0LLQvtC1INGB0L7QvtCx0YnQtdC90LjQtVwiKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dTXSDQntGI0LjQsdC60LAg0L7RgtC/0YDQsNCy0LrQuCDRgtC10YHRgtC+0LLQvtCz0L4g0YHQvtC+0LHRidC10L3QuNGPOlwiLCBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB3cy5vbm1lc3NhZ2UgPSAoZXZ0KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGV2dC5kYXRhKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign0J3QtdCy0LXRgNC90YvQuSDRhNC+0YDQvNCw0YIg0LTQsNC90L3Ri9GFJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaGFuZGxlTWVzc2FnZShkYXRhKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIltXU10g0J/QvtC70L3QsNGPINC+0YjQuNCx0LrQsDpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV1NdINCh0YLQtdC6INCy0YvQt9C+0LLQvtCyOlwiLCBlcnJvci5zdGFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgd3Mub25lcnJvciA9IChlcnJvcikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIltXU10gV2ViU29ja2V0IGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dTXSDQlNC10YLQsNC70Lgg0L7RiNC40LHQutC4OlwiLCB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgICAgICB0eXBlOiBlcnJvci50eXBlLFxuICAgICAgICAgICAgICAgIGV2ZW50UGhhc2U6IGVycm9yLmV2ZW50UGhhc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHdzLm9uY2xvc2UgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW1dTXSDQodC+0LXQtNC40L3QtdC90LjQtSDQt9Cw0LrRgNGL0YLQvjpcIiwge1xuICAgICAgICAgICAgICAgIGNvZGU6IGV2ZW50LmNvZGUsXG4gICAgICAgICAgICAgICAgcmVhc29uOiBldmVudC5yZWFzb24sXG4gICAgICAgICAgICAgICAgd2FzQ2xlYW46IGV2ZW50Lndhc0NsZWFuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBoYW5kbGVLZXlEb3duKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW1dTXSDQntGI0LjQsdC60LAg0L/RgNC4INGB0L7Qt9C00LDQvdC40LggV2ViU29ja2V0OlwiLCBlcnJvcik7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbV1NdINCh0YLQtdC6INCy0YvQt9C+0LLQvtCyOlwiLCBlcnJvci5zdGFjayk7XG4gICAgfVxufSIsIi8vIGluZGV4LmpzXG5pbXBvcnQgeyBpbml0U2NlbmUsIHNjZW5lLCBjYW1lcmEsIHJlbmRlcmVyIH0gZnJvbSAnLi9zY2VuZSc7XG5pbXBvcnQgeyBpbml0QW1tbywgc3RlcFBoeXNpY3MsIHVwZGF0ZVBoeXNpY3NPYmplY3RzLCBhcHBseUltcHVsc2VUb1NwaGVyZSB9IGZyb20gJy4vcGh5c2ljcyc7XG5pbXBvcnQgeyBpbml0TmV0d29yayB9IGZyb20gJy4vbmV0d29yayc7XG5pbXBvcnQgeyBvYmplY3RzLCBkZWJ1Z1BoeXNpY3NXb3JsZCwgY3JlYXRlVGVzdFNwaGVyZSB9IGZyb20gJy4vb2JqZWN0cyc7XG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbmZ1bmN0aW9uIGFuaW1hdGUoKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xuXG4gICAgLy8g0JLRi9C/0L7Qu9C90Y/QtdC8INGI0LDQsyDRhNC40LfQuNGH0LXRgdC60L7QuSDRgdC40LzRg9C70Y/RhtC40LggKNC90LDQv9GA0LjQvNC10YAsIDEvNjAg0YHQtdC60YPQvdC00YspXG4gICAgc3RlcFBoeXNpY3MoMSAvIDYwKTtcbiAgICB1cGRhdGVQaHlzaWNzT2JqZWN0cyhvYmplY3RzKTtcblxuICAgIC8vINCf0YDQuNC80LXRgCDQvtCx0L3QvtCy0LvQtdC90LjRjyDQutCw0LzQtdGA0Ys6INGB0LvQtdC00LjQvCDQt9CwINC/0LXRgNCy0YvQvCDQvdCw0LnQtNC10L3QvdGL0Lwg0YjQsNGA0L7QvFxuICAgIGxldCB0YXJnZXRPYmplY3QgPSBudWxsO1xuICAgIGZvciAobGV0IGlkIGluIG9iamVjdHMpIHtcbiAgICAgICAgbGV0IG9iaiA9IG9iamVjdHNbaWRdO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBvYmogJiZcbiAgICAgICAgICAgIG9iai5tZXNoICYmXG4gICAgICAgICAgICBvYmoubWVzaC5nZW9tZXRyeSAmJlxuICAgICAgICAgICAgb2JqLm1lc2guZ2VvbWV0cnkudHlwZSA9PT0gXCJTcGhlcmVHZW9tZXRyeVwiXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGFyZ2V0T2JqZWN0ID0gb2JqO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRhcmdldE9iamVjdCkge1xuICAgICAgICBjb25zdCB0YXJnZXRQb3MgPSB0YXJnZXRPYmplY3QubWVzaC5wb3NpdGlvbjtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwgNTAsIDEwMCk7XG4gICAgICAgIGNvbnN0IGNhbWVyYVRhcmdldCA9IHRhcmdldFBvcy5jbG9uZSgpLmFkZChvZmZzZXQpO1xuXG4gICAgICAgIGNhbWVyYS5wb3NpdGlvbi5sZXJwKGNhbWVyYVRhcmdldCwgMC4xKTtcbiAgICAgICAgY2FtZXJhLmxvb2tBdCh0YXJnZXRQb3MpO1xuICAgIH1cblxuICAgIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgY29uc29sZS5sb2coXCJTdGFydFwiKVxuICAgIGluaXRTY2VuZSgpO1xuICAgIHRyeSB7XG4gICAgICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDQvdC10LHQvtC70YzRiNGD0Y4g0LfQsNC00LXRgNC20LrRgyDQv9C10YDQtdC0INC40L3QuNGG0LjQsNC70LjQt9Cw0YbQuNC10LlcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDUwMCkpO1xuICAgICAgICBhd2FpdCBpbml0QW1tbygpO1xuICAgICAgICBcbiAgICAgICAgLy9jcmVhdGVUZXN0U3BoZXJlKCk7XG4gICAgICAgIGluaXROZXR3b3JrKCk7XG4gICAgICAgIGFuaW1hdGUoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwi0J7RiNC40LHQutCwINC/0YDQuCDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQuCBBbW1vLmpzOlwiLCBlcnJvcik7XG4gICAgfVxufVxuXG5zdGFydCgpOyJdLCJuYW1lcyI6WyJUSFJFRSIsInNjZW5lIiwiY2FtZXJhIiwicmVuZGVyZXIiLCJpbml0U2NlbmUiLCJjb25zb2xlIiwibG9nIiwiU2NlbmUiLCJiYWNrZ3JvdW5kIiwiQ29sb3IiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInBvc2l0aW9uIiwic2V0IiwibG9va0F0IiwiV2ViR0xSZW5kZXJlciIsImFudGlhbGlhcyIsInNldFNpemUiLCJzaGFkb3dNYXAiLCJlbmFibGVkIiwidHlwZSIsIlBDRlNvZnRTaGFkb3dNYXAiLCJkb2N1bWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImRvbUVsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwib25XaW5kb3dSZXNpemUiLCJhbWJpZW50IiwiQW1iaWVudExpZ2h0IiwiYWRkIiwiZGlyZWN0aW9uYWwiLCJEaXJlY3Rpb25hbExpZ2h0IiwiY2FzdFNoYWRvdyIsInNoYWRvdyIsIm5lYXIiLCJmYXIiLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJtYXBTaXplIiwid2lkdGgiLCJoZWlnaHQiLCJmaWxsTGlnaHQiLCJhc3BlY3QiLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4IiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsImUiLCJ0IiwiciIsIk9iamVjdCIsInByb3RvdHlwZSIsIm4iLCJoYXNPd25Qcm9wZXJ0eSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiaSIsIlN5bWJvbCIsImEiLCJpdGVyYXRvciIsImMiLCJhc3luY0l0ZXJhdG9yIiwidSIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwid3JhcCIsIkdlbmVyYXRvciIsImNyZWF0ZSIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJhcmciLCJjYWxsIiwiaCIsImwiLCJmIiwicyIsInkiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwicCIsImQiLCJnZXRQcm90b3R5cGVPZiIsInYiLCJ2YWx1ZXMiLCJnIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiaW52b2tlIiwiX3R5cGVvZiIsInJlc29sdmUiLCJfX2F3YWl0IiwidGhlbiIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiRXJyb3IiLCJkb25lIiwibWV0aG9kIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsImlzTmFOIiwibGVuZ3RoIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJrZXlzIiwicmV2ZXJzZSIsInBvcCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJydmFsIiwiaGFuZGxlIiwiY29tcGxldGUiLCJmaW5pc2giLCJfY2F0Y2giLCJkZWxlZ2F0ZVlpZWxkIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJhcmd1bWVudHMiLCJhcHBseSIsIl9uZXh0IiwiX3Rocm93IiwibG9jYWxQaHlzaWNzV29ybGQiLCJhbW1vUHJvbWlzZSIsImluaXRBbW1vIiwiX2luaXRBbW1vIiwiX2NhbGxlZSIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJyZWplY3QiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwib25sb2FkIiwiQW1tbyIsIkFtbW9MaWIiLCJjb2xsaXNpb25Db25maWd1cmF0aW9uIiwiYnREZWZhdWx0Q29sbGlzaW9uQ29uZmlndXJhdGlvbiIsImRpc3BhdGNoZXIiLCJidENvbGxpc2lvbkRpc3BhdGNoZXIiLCJicm9hZHBoYXNlIiwiYnREYnZ0QnJvYWRwaGFzZSIsInNvbHZlciIsImJ0U2VxdWVudGlhbEltcHVsc2VDb25zdHJhaW50U29sdmVyIiwiYnREaXNjcmV0ZUR5bmFtaWNzV29ybGQiLCJzZXRHcmF2aXR5IiwiYnRWZWN0b3IzIiwib25lcnJvciIsImVycm9yIiwic3RlcFBoeXNpY3MiLCJkZWx0YVRpbWUiLCJ3YXJuIiwic3RlcFNpbXVsYXRpb24iLCJ1cGRhdGVQaHlzaWNzT2JqZWN0cyIsIm9iamVjdHMiLCJpZCIsIm9iaiIsIm1lc2giLCJjb25jYXQiLCJwaHlzaWNzQnkiLCJvYmplY3RfdHlwZSIsInRyYW5zIiwiYnRUcmFuc2Zvcm0iLCJnZXRNb3Rpb25TdGF0ZSIsImdldFdvcmxkVHJhbnNmb3JtIiwibG9jWCIsImdldE9yaWdpbiIsIngiLCJsb2NZIiwibG9jWiIsInoiLCJxeCIsImdldFJvdGF0aW9uIiwicXkiLCJxeiIsInF3IiwidyIsInF1YXRlcm5pb24iLCJzZXJ2ZXJQb3MiLCJtcyIsInRyYW5zZm9ybSIsInNldE9yaWdpbiIsInNldFdvcmxkVHJhbnNmb3JtIiwiYWN0aXZhdGUiLCJ6ZXJvIiwic2V0TGluZWFyVmVsb2NpdHkiLCJzZXRBbmd1bGFyVmVsb2NpdHkiLCJkZXN0cm95IiwiYXBwbHlJbXB1bHNlVG9TcGhlcmUiLCJjbWQiLCJpbXB1bHNlIiwic2V0VmFsdWUiLCJnZW9tZXRyeSIsImFwcGx5Q2VudHJhbEltcHVsc2UiLCJ2ZWxvY2l0eSIsImdldExpbmVhclZlbG9jaXR5Iiwi0LrQvtC80LDQvdC00LAiLCLQv9C+0LfQuNGG0LjRjyIsItGB0LrQvtGA0L7RgdGC0YwiLCJjcmVhdGVNZXNoQW5kQm9keUZvck9iamVjdCIsImRhdGEiLCJjcmVhdGVUZXJyYWluTWVzaCIsImNyZWF0ZVBoeXNpY3NCb2R5Rm9yVGVycmFpbiIsImNyZWF0ZVNwaGVyZU1lc2giLCJjcmVhdGVQaHlzaWNzQm9keUZvclNwaGVyZSIsImNyZWF0ZVRyZWVNZXNoIiwiY3JlYXRlRGVmYXVsdE1lc2giLCJoZWlnaHRtYXBfdyIsImhlaWdodG1hcF9oIiwic2NhbGVYIiwic2NhbGVfeCIsInNjYWxlWiIsInNjYWxlX3oiLCJhbW1vSGVpZ2h0RGF0YSIsIl9tYWxsb2MiLCJwMiIsImoiLCJIRUFQRjMyIiwiaGVpZ2h0X2RhdGEiLCJzaGFwZSIsImJ0SGVpZ2h0ZmllbGRUZXJyYWluU2hhcGUiLCJtaW5faGVpZ2h0IiwibWF4X2hlaWdodCIsIlBIWV9GTE9BVCIsInNldExvY2FsU2NhbGluZyIsInNjYWxlX3kiLCJzZXRNYXJnaW4iLCJzZXRJZGVudGl0eSIsIm1hc3MiLCJsb2NhbEluZXJ0aWEiLCJtb3Rpb25TdGF0ZSIsImJ0RGVmYXVsdE1vdGlvblN0YXRlIiwicmJJbmZvIiwiYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvIiwiYnRSaWdpZEJvZHkiLCJURVJSQUlOX0dST1VQIiwiYWRkUmlnaWRCb2R5Iiwi0YDQsNC30LzQtdGA0YsiLCLQvNCw0YHRiNGC0LDQsSIsItC80LjQvdCS0YvRgdC+0YLQsCIsItC80LDQutGB0JLRi9GB0L7RgtCwIiwiZ2VvIiwiUGxhbmVHZW9tZXRyeSIsInJvdGF0ZVgiLCJNYXRoIiwiUEkiLCJ2ZXJ0cyIsImF0dHJpYnV0ZXMiLCJhcnJheSIsIml4IiwiaXoiLCJmbG9vciIsImNvbXB1dGVWZXJ0ZXhOb3JtYWxzIiwiTWVzaCIsIk1lc2hQaG9uZ01hdGVyaWFsIiwiY29sb3IiLCJwYXJzZUNvbG9yIiwid2lyZWZyYW1lIiwiZmxhdFNoYWRpbmciLCJyZWNlaXZlU2hhZG93IiwiU3BoZXJlR2VvbWV0cnkiLCJyYWRpdXMiLCJzaGluaW5lc3MiLCJncm91cCIsIkdyb3VwIiwiYnJhbmNoZXMiLCJBcnJheSIsImlzQXJyYXkiLCJicmFuY2giLCJpbmRleCIsInN0YXJ0WCIsInVuZGVmaW5lZCIsInN0YXJ0WSIsInN0YXJ0WiIsImVuZFgiLCJlbmRZIiwiZW5kWiIsImJyYW5jaEdlbyIsIkN5bGluZGVyR2VvbWV0cnkiLCJyYWRpdXNUb3AiLCJyYWRpdXNCb3R0b20iLCJicmFuY2hNYXQiLCJicmFuY2hNZXNoIiwibWlkWCIsIm1pZFkiLCJtaWRaIiwiVmVjdG9yMyIsInNjYWxlIiwiQm94R2VvbWV0cnkiLCJNZXNoTGFtYmVydE1hdGVyaWFsIiwiYnRTcGhlcmVTaGFwZSIsImNhbGN1bGF0ZUxvY2FsSW5lcnRpYSIsIlNQSEVSRV9HUk9VUCIsImNvbG9yU3RyIiwic3RhcnRzV2l0aCIsInBhcnNlSW50IiwiY3JlYXRlVGVzdFNwaGVyZSIsIm1hdGVyaWFsIiwic2V0QWN0aXZhdGlvblN0YXRlIiwic2V0RnJpY3Rpb24iLCJzZXRSb2xsaW5nRnJpY3Rpb24iLCJzZXRSZXN0aXR1dGlvbiIsInRlc3RTcGhlcmVPYmoiLCJ3cyIsImhhbmRsZU1lc3NhZ2UiLCJwaHlzaWNzX2J5Iiwic3RhY2siLCJoYW5kbGVLZXlEb3duIiwicmVhZHlTdGF0ZSIsIldlYlNvY2tldCIsIk9QRU4iLCJrZXkiLCJzZW5kIiwiSlNPTiIsInN0cmluZ2lmeSIsImluaXROZXR3b3JrIiwib25vcGVuIiwib25tZXNzYWdlIiwiZXZ0IiwicGFyc2UiLCJtZXNzYWdlIiwiZXZlbnRQaGFzZSIsIm9uY2xvc2UiLCJldmVudCIsImNvZGUiLCJyZWFzb24iLCJ3YXNDbGVhbiIsImRlYnVnUGh5c2ljc1dvcmxkIiwiYW5pbWF0ZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRhcmdldE9iamVjdCIsInRhcmdldFBvcyIsIm9mZnNldCIsImNhbWVyYVRhcmdldCIsImNsb25lIiwibGVycCIsInJlbmRlciIsInN0YXJ0IiwiX3N0YXJ0Iiwic2V0VGltZW91dCIsInQwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///251\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,F,U,B)=>{if(!F){var s=1/0;for(E=0;E<deferred.length;E++){for(var[F,U,B]=deferred[E],L=!0,C=0;C<F.length;C++)(!1&B||s>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](F[C])))?F.splice(C--,1):(L=!1,B<s&&(s=B));if(L){deferred.splice(E--,1);var t=U();void 0!==t&&(Q=t)}}return Q}B=B||0;for(var E=deferred.length;E>0&&deferred[E-1][2]>B;E--)deferred[E]=deferred[E-1];deferred[E]=[F,U,B]},__webpack_require__.d=(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),(()=>{var Q={792:0};__webpack_require__.O.j=F=>0===Q[F];var F=(F,U)=>{var B,s,[L,C,t]=U,E=0;if(L.some((F=>0!==Q[F]))){for(B in C)__webpack_require__.o(C,B)&&(__webpack_require__.m[B]=C[B]);if(t)var I=t(__webpack_require__)}for(F&&F(U);E<L.length;E++)s=L[E],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(I)},U=self.webpackChunkweb=self.webpackChunkweb||[];U.forEach(F.bind(null,0)),U.push=F.bind(null,U.push.bind(U))})();var __webpack_exports__=__webpack_require__.O(void 0,[233],(()=>__webpack_require__(251)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();