(()=>{"use strict";var __webpack_modules__={308:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// UNUSED EXPORTS: applyTestImpulse, createTestObject, initNewApp, stopApp\n\n// EXTERNAL MODULE: ./node_modules/three/build/three.core.js\nvar three_core = __webpack_require__(922);\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(437);\n;// ./src/scene.js\n// scene.js\n\nvar scene_scene, renderer;\nvar directionalLight; // Экспортируем свет для доступности в других модулях\n\nfunction initScene() {\n  console.log("try to initScene");\n  scene_scene = new three_core/* Scene */.Z58();\n  scene_scene.background = new three_core/* Color */.Q1f(0x88ccff);\n  renderer = new three_module/* WebGLRenderer */.JeP({\n    antialias: true\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  // Включаем поддержку теней\n  renderer.shadowMap.enabled = true;\n  renderer.shadowMap.type = three_core/* PCFSoftShadowMap */.Wk7;\n  document.body.appendChild(renderer.domElement);\n  window.addEventListener(\'resize\', onWindowResize);\n\n  // Настраиваем освещение\n  var ambient = new three_core/* AmbientLight */.$p8(0xffffff, 0.8);\n  scene_scene.add(ambient);\n\n  // Основной направленный свет с тенями\n  directionalLight = new three_core/* DirectionalLight */.ZyN(0xffffff, 1);\n  directionalLight.position.set(50, 100, 50);\n  directionalLight.castShadow = true;\n\n  // Настраиваем параметры теней для охвата большой области\n  directionalLight.shadow.camera.near = 0.1;\n  directionalLight.shadow.camera.far = 500;\n  directionalLight.shadow.camera.left = -100;\n  directionalLight.shadow.camera.right = 100;\n  directionalLight.shadow.camera.top = 100;\n  directionalLight.shadow.camera.bottom = -100;\n  directionalLight.shadow.mapSize.width = 512; // Большее разрешение для лучшего качества\n  directionalLight.shadow.mapSize.height = 512;\n  // directionalLight.shadow.bias = -0.0001; // Уменьшаем артефакты тени\n  scene_scene.add(directionalLight);\n\n  // Добавляем вспомогательный свет для подсветки теней\n  var fillLight = new three_core/* DirectionalLight */.ZyN(0xffffff, 1);\n  fillLight.position.set(-50, 50, -50);\n  scene_scene.add(fillLight);\n\n  // Можно добавить помощник для отладки теней (раскомментируйте при необходимости)\n  // const helper = new THREE.CameraHelper(directionalLight.shadow.camera);\n  // scene.add(helper);\n}\nfunction onWindowResize() {\n  // Обработка изменения размера окна только для рендерера\n  // (камера обрабатывается в camera.js)\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\n// Добавляем функцию для обновления положения источника света относительно камеры, как солнце\nfunction updateShadowCamera(camera) {\n  if (!directionalLight || !camera) return;\n\n  // Получаем направление взгляда камеры\n  var cameraDirection = new THREE.Vector3();\n  camera.getWorldDirection(cameraDirection);\n\n  // Создаем позицию "солнца" относительно камеры\n  // Поднимаем "солнце" на 200 единиц вверх от позиции камеры и смещаем немного в сторону и назад\n  var sunOffset = new THREE.Vector3(100, 200, -50);\n  var sunPosition = camera.position.clone().add(sunOffset);\n\n  // Обновляем позицию света\n  directionalLight.position.copy(sunPosition);\n\n  // Определяем точку, куда направлен свет - перед камерой на расстоянии 100 единиц\n  var targetOffset = cameraDirection.clone().multiplyScalar(100);\n  var targetPosition = camera.position.clone().add(targetOffset);\n  directionalLight.target.position.copy(targetPosition);\n\n  // Обновляем матрицу трансформации цели света\n  directionalLight.target.updateMatrixWorld();\n\n  // Обновляем матрицу камеры теней\n  directionalLight.shadow.camera.updateProjectionMatrix();\n}\n\n// EXTERNAL MODULE: ./node_modules/events/events.js\nvar events = __webpack_require__(7);\n;// ./src/network.js\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// network_new.js - Новый модуль сети с поддержкой временных меток\n\n\n\n\n// Конфигурация сети\nvar NETWORK_CONFIG = {\n  PING_INTERVAL: 1000,\n  // Интервал пинга в мс\n  TIME_SYNC_INTERVAL: 5000,\n  // Интервал синхронизации времени в мс\n  MAX_PING_SAMPLES: 20,\n  // Максимальное количество образцов пинга\n  MAX_TIME_OFFSET_SAMPLES: 10,\n  // Максимальное количество образцов смещения времени\n  RECONNECT_DELAY: 2000,\n  // Задержка переподключения в мс\n  MAX_RECONNECT_ATTEMPTS: 5 // Максимальное количество попыток переподключения\n};\n\n// Состояние соединения\nvar ws = null;\nvar connectionState = \'disconnected\'; // disconnected, connecting, connected\nvar reconnectAttempts = 0;\nvar lastPingTime = 0;\nvar pingHistory = [];\nvar timeOffsetHistory = (/* unused pure expression or super */ null && ([]));\n\n// Статистика\nvar networkMetrics = {\n  packetsReceived: 0,\n  packetsLost: 0,\n  totalLatency: 0,\n  averageLatency: 0,\n  jitter: 0,\n  lastPacketTime: 0,\n  connectionQuality: \'unknown\' // excellent, good, fair, poor\n};\n\n// Буфер для обработки пакетов\nvar packetBuffer = (/* unused pure expression or super */ null && ([]));\nvar lastProcessedPacketId = 0;\n\n// Глобальная конфигурация физики\nvar globalPhysicsConfig = null;\n\n// Инициализация сетевого соединения\nfunction initNewNetwork(_x) {\n  return _initNewNetwork.apply(this, arguments);\n}\n\n// Подключение к серверу\nfunction _initNewNetwork() {\n  _initNewNetwork = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(serverUrl) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          console.log("[NewNetwork] Инициализация нового сетевого модуля...");\n          _context.prev = 1;\n          _context.next = 4;\n          return connectToServer(serverUrl);\n        case 4:\n          startPeriodicTasks();\n          return _context.abrupt("return", true);\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context["catch"](1);\n          console.error("[NewNetwork] Ошибка инициализации:", _context.t0);\n          return _context.abrupt("return", false);\n        case 12:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[1, 8]]);\n  }));\n  return _initNewNetwork.apply(this, arguments);\n}\nfunction connectToServer(_x2) {\n  return _connectToServer.apply(this, arguments);\n} // Обработка входящих сообщений\nfunction _connectToServer() {\n  _connectToServer = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(serverUrl) {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt("return", new Promise(function (resolve, reject) {\n            connectionState = \'connecting\';\n            ws = new WebSocket(serverUrl);\n            ws.onopen = function () {\n              console.log("[NewNetwork] Соединение установлено");\n              connectionState = \'connected\';\n              reconnectAttempts = 0;\n\n              // Сразу отправляем пинг для синхронизации времени\n              sendPing();\n              resolve();\n            };\n            ws.onmessage = function (event) {\n              handleMessage(event.data);\n            };\n            ws.onclose = function (event) {\n              console.log("[NewNetwork] Соединение закрыто:", event.code, event.reason);\n              connectionState = \'disconnected\';\n\n              // Автоматическое переподключение\n              if (reconnectAttempts < NETWORK_CONFIG.MAX_RECONNECT_ATTEMPTS) {\n                setTimeout(function () {\n                  reconnectAttempts++;\n                  console.log("[NewNetwork] \\u041F\\u043E\\u043F\\u044B\\u0442\\u043A\\u0430 \\u043F\\u0435\\u0440\\u0435\\u043F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0435\\u043D\\u0438\\u044F ".concat(reconnectAttempts, "/").concat(NETWORK_CONFIG.MAX_RECONNECT_ATTEMPTS));\n                  connectToServer(serverUrl);\n                }, NETWORK_CONFIG.RECONNECT_DELAY);\n              }\n            };\n            ws.onerror = function (error) {\n              console.error("[NewNetwork] Ошибка WebSocket:", error);\n              reject(error);\n            };\n\n            // Таймаут подключения\n            setTimeout(function () {\n              if (connectionState === \'connecting\') {\n                ws.close();\n                reject(new Error(\'Таймаут подключения\'));\n              }\n            }, 10000);\n          }));\n        case 1:\n        case "end":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _connectToServer.apply(this, arguments);\n}\nfunction handleMessage(data) {\n  try {\n    var message = JSON.parse(data);\n\n    // Обновляем статистику\n    networkMetrics.packetsReceived++;\n    networkMetrics.lastPacketTime = Date.now();\n    switch (message.type) {\n      case \'ping\':\n        handlePing(message);\n        break;\n      case \'pong\':\n        handlePong(message);\n        break;\n      case \'update\':\n        handleObjectUpdate(message);\n        break;\n      case \'batch_update\':\n        handleBatchUpdate(message);\n        break;\n      case \'time_sync\':\n        handleTimeSync(message);\n        break;\n      case \'create\':\n        handleObjectCreate(message);\n        break;\n      case \'food_spawned\':\n        handleFoodSpawned(message);\n        break;\n      case \'physics_config\':\n        handlePhysicsConfig(message);\n        break;\n      case \'info\':\n        handleInfo(message);\n        break;\n      case \'player_id\':\n        handlePlayerId(message);\n        break;\n      case \'cmd_ack\':\n        handleCommandAck(message);\n        break;\n      default:\n        console.warn("[NewNetwork] Неизвестный тип сообщения:", message.type);\n    }\n  } catch (error) {\n    console.error("[NewNetwork] Ошибка обработки сообщения:", error);\n  }\n}\n\n// Обработка пинга от сервера\nfunction handlePing(message) {\n  // Отвечаем pong\'ом\n  var pongMessage = {\n    type: \'pong\',\n    client_time: message.client_time || Date.now(),\n    server_time: message.server_time || Date.now()\n  };\n  try {\n    ws.send(JSON.stringify(pongMessage));\n  } catch (error) {\n    console.error("[NewNetwork] Ошибка отправки pong:", error);\n  }\n}\n\n// Обработка ответа на пинг\nfunction handlePong(message) {\n  var now = Date.now();\n  var latency = now - message.client_time;\n\n  // Обновляем историю пинга\n  pingHistory.push(latency);\n  if (pingHistory.length > NETWORK_CONFIG.MAX_PING_SAMPLES) {\n    pingHistory.shift();\n  }\n\n  // Вычисляем средний пинг и джиттер\n  var averagePing = pingHistory.reduce(function (sum, ping) {\n    return sum + ping;\n  }, 0) / pingHistory.length;\n  if (pingHistory.length > 1) {\n    var jitter = pingHistory.reduce(function (sum, ping, index) {\n      if (index === 0) return sum;\n      return sum + Math.abs(ping - pingHistory[index - 1]);\n    }, 0) / (pingHistory.length - 1);\n    networkMetrics.jitter = jitter;\n  }\n  networkMetrics.averageLatency = averagePing;\n  networkMetrics.totalLatency += latency;\n\n  // Обновляем пинг в системе физики\n  updatePing(averagePing);\n\n  // Синхронизируем время\n  if (message.server_time) {\n    updateServerTimeOffset(message.server_time, message.client_time);\n  }\n\n  // Обновляем качество соединения\n  updateConnectionQuality();\n\n  // Логируем пинг только изредка\n  if (Math.random() < 0.1) {\n    // 10% от пингов\n    console.log("[NewNetwork] \\u041F\\u0438\\u043D\\u0433: ".concat(latency, "\\u043C\\u0441, \\u0421\\u0440\\u0435\\u0434\\u043D\\u0438\\u0439: ").concat(averagePing.toFixed(1), "\\u043C\\u0441, \\u0414\\u0436\\u0438\\u0442\\u0442\\u0435\\u0440: ").concat(networkMetrics.jitter.toFixed(1), "\\u043C\\u0441"));\n  }\n}\n\n// Обработка обновления объекта\nfunction handleObjectUpdate(message) {\n  if (!message.id) {\n    console.warn("[NewNetwork] Обновление объекта без ID");\n    return;\n  }\n\n  // Добавляем временную метку получения\n  message.received_at = Date.now();\n\n  // Передаем в систему физики\n  receiveObjectUpdate(message);\n}\n\n// Обработка пакетного обновления\nfunction handleBatchUpdate(message) {\n  if (!message.updates || _typeof(message.updates) !== \'object\') {\n    console.warn("[NewNetwork] Некорректное пакетное обновление");\n    return;\n  }\n  var receivedAt = Date.now();\n  var serverTime = message.time; // Сервер отправляет \'time\', а не \'server_time\'\n\n  // Обрабатываем каждый объект в пакете\n  var objectIds = Object.keys(message.updates);\n  for (var _i = 0, _objectIds = objectIds; _i < _objectIds.length; _i++) {\n    var objectId = _objectIds[_i];\n    var objectData = message.updates[objectId];\n    if (objectData && objectData.id) {\n      // Проверяем тип сообщения\n      if (objectData.type !== \'update\') {\n        console.warn("[NewNetwork] \\u041D\\u0435\\u0438\\u0437\\u0432\\u0435\\u0441\\u0442\\u043D\\u044B\\u0439 \\u0442\\u0438\\u043F \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u044F \\u0432 \\u043F\\u0430\\u043A\\u0435\\u0442\\u043D\\u043E\\u043C \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0438: ".concat(objectData.type));\n        continue;\n      }\n\n      // Проверяем, существует ли объект в коллекции\n      if (!objects_objects[objectData.id]) {\n        var _objectData$position, _objectData$position2, _objectData$position3;\n        // Создаем объект без лишних логов\n        // Пытаемся создать объект на основе данных обновления\n        // Для этого нужно определить тип объекта\n        var objectType = \'sphere\'; // По умолчанию\n        if (objectData.id.includes(\'terrain\')) objectType = \'terrain\';else if (objectData.id.includes(\'player\')) objectType = \'sphere\';\n        var createData = {\n          id: objectData.id,\n          object_type: objectType,\n          x: ((_objectData$position = objectData.position) === null || _objectData$position === void 0 ? void 0 : _objectData$position.x) || 0,\n          y: ((_objectData$position2 = objectData.position) === null || _objectData$position2 === void 0 ? void 0 : _objectData$position2.y) || 0,\n          z: ((_objectData$position3 = objectData.position) === null || _objectData$position3 === void 0 ? void 0 : _objectData$position3.z) || 0,\n          physics_by: \'both\',\n          // По умолчанию\n          mass: 1.0,\n          radius: 1.0\n        };\n        handleObjectCreate(createData);\n      }\n      objectData.received_at = receivedAt;\n      objectData.server_time = serverTime;\n      receiveObjectUpdate(objectData);\n    }\n  }\n\n  // Логируем пакетные обновления реже\n  if (objectIds.length > 0 && Math.random() < 0.1) {\n    console.log("[NewNetwork] \\u041E\\u0431\\u0440\\u0430\\u0431\\u043E\\u0442\\u0430\\u043D\\u043E \\u043F\\u0430\\u043A\\u0435\\u0442\\u043D\\u044B\\u0445 \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0439: ".concat(objectIds.length));\n  }\n}\n\n// Обработка синхронизации времени\nfunction handleTimeSync(message) {\n  if (message.server_time && message.client_time) {\n    updateServerTimeOffset(message.server_time, message.client_time);\n  }\n}\n\n// Обработка создания объекта\nfunction handleObjectCreate(message) {\n  console.log("[NewNetwork] \\u0421\\u043E\\u0437\\u0434\\u0430\\u043D\\u0438\\u0435 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430: ".concat(message.id));\n\n  // Проверяем, что объект еще не существует\n  if (objects_objects[message.id]) {\n    console.warn("[NewNetwork] Объект уже существует:", message.id);\n    return;\n  }\n\n  // Создаем объект\n  var obj = createMeshAndBodyForObject(message);\n  if (obj) {\n    // ВАЖНО: Регистрируем объект в коллекции\n    objects_objects[message.id] = obj;\n    console.log("[NewNetwork] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 \\u0437\\u0430\\u0440\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D: ".concat(message.id));\n\n    // Дополнительная логика для специальных типов объектов (без лишних логов)\n  } else {\n    console.error("[NewNetwork] Не удалось создать объект:", message.id);\n  }\n}\n\n// Обработка появления еды\nfunction handleFoodSpawned(message) {\n  // Появление еды (без логов)\n}\n\n// Обработка конфигурации физики\nfunction handlePhysicsConfig(message) {\n  console.log("[NewNetwork] Получена конфигурация физики:", message);\n  if (!message.config && !message.world && !message.player && !message.control) {\n    console.warn("[NewNetwork] Конфигурация физики пуста или имеет неверный формат");\n    return;\n  }\n\n  // Извлекаем конфигурацию в зависимости от формата сообщения\n  var config = message.config || message;\n  try {\n    // Применяем конфигурацию к физическому миру Ammo.js\n    applyAmmoPhysicsConfig(config);\n\n    // Сохраняем конфигурацию глобально для новых объектов\n    globalPhysicsConfig = config;\n    console.log("[NewNetwork] Конфигурация физики успешно применена");\n  } catch (error) {\n    console.error("[NewNetwork] Ошибка применения конфигурации физики:", error);\n  }\n}\n\n// Обработка информационных сообщений\nfunction handleInfo(message) {\n  // Информационные сообщения обычно содержат общую информацию о сервере\n  // Логируем только важные инфо-сообщения\n  if (message.level === \'important\' || message.important) {\n    console.info("[NewNetwork] Информация от сервера:", message.text || message.message || "");\n  }\n}\n\n// Обработка установки ID игрока\nfunction handlePlayerId(message) {\n  var playerId = message.player_id || message.id;\n  if (playerId) {\n    console.log("[NewNetwork] \\u041F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D ID \\u0438\\u0433\\u0440\\u043E\\u043A\\u0430: ".concat(playerId));\n\n    // Устанавливаем ID игрока в GameStateManager\n    // player_id сообщение может содержать как player ID, так и object ID\n    // Если это просто ID, используем его как объект ID\n    gamestatemanager.setPlayerID(playerId, playerId);\n    console.log("[NewNetwork] ID \\u0438\\u0433\\u0440\\u043E\\u043A\\u0430 \\u0443\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D \\u0432 GameStateManager: ".concat(playerId));\n  } else {\n    console.warn("[NewNetwork] Получено сообщение player_id без ID игрока");\n  }\n}\n\n// Обработка подтверждения команд\nfunction handleCommandAck(message) {\n  // Сервер подтверждает получение и обработку команды\n  // Можем логировать только ошибки или важные события\n  if (message.status === \'error\') {\n    console.warn("[NewNetwork] \\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\\u0438\\u044F \\u043A\\u043E\\u043C\\u0430\\u043D\\u0434\\u044B: ".concat(message.error || \'неизвестная ошибка\'));\n  } else if (message.status === \'success\' && Math.random() < 0.1) {\n    // Логируем успешные подтверждения только в 10% случаев\n    console.log("[NewNetwork] \\u041A\\u043E\\u043C\\u0430\\u043D\\u0434\\u0430 \\u0432\\u044B\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\\u0430: ".concat(message.cmd || \'неизвестная\'));\n  }\n\n  // Здесь можно добавить обработку специфичных подтверждений\n  // Например, обновление состояния UI или метрик\n}\n\n// Отправка пинга\nfunction sendPing() {\n  if (connectionState !== \'connected\') return;\n  var pingMessage = {\n    type: \'ping\',\n    client_time: Date.now()\n  };\n  try {\n    ws.send(JSON.stringify(pingMessage));\n    lastPingTime = Date.now();\n  } catch (error) {\n    console.error("[NewNetwork] Ошибка отправки пинга:", error);\n  }\n}\n\n// Отправка команды\nfunction sendCommand(command) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (connectionState !== \'connected\') {\n    console.warn("[NewNetwork] Попытка отправки команды при отсутствии соединения");\n    return false;\n  }\n  var message = {\n    type: \'cmd\',\n    cmd: command,\n    client_time: Date.now(),\n    data: data\n  };\n  try {\n    ws.send(JSON.stringify(message));\n    return true;\n  } catch (error) {\n    console.error("[NewNetwork] Ошибка отправки команды:", error);\n    return false;\n  }\n}\n\n// Отправка импульса объекту\nfunction sendImpulse(objectId, direction) {\n  var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;\n  return sendCommand(\'impulse\', {\n    object_id: objectId,\n    direction: direction,\n    force: force,\n    timestamp: Date.now()\n  });\n}\n\n// Запуск периодических задач\nfunction startPeriodicTasks() {\n  // Периодический пинг\n  setInterval(function () {\n    if (connectionState === \'connected\') {\n      sendPing();\n    }\n  }, NETWORK_CONFIG.PING_INTERVAL);\n\n  // Периодическая синхронизация времени\n  setInterval(function () {\n    if (connectionState === \'connected\') {\n      requestTimeSync();\n    }\n  }, NETWORK_CONFIG.TIME_SYNC_INTERVAL);\n\n  // Периодическое обновление статистики\n  setInterval(function () {\n    updateNetworkStatistics();\n  }, 1000);\n}\n\n// Запрос синхронизации времени\nfunction requestTimeSync() {\n  var message = {\n    type: \'time_sync_request\',\n    client_time: Date.now()\n  };\n  try {\n    ws.send(JSON.stringify(message));\n  } catch (error) {\n    console.error("[NewNetwork] Ошибка запроса синхронизации времени:", error);\n  }\n}\n\n// Обновление качества соединения\nfunction updateConnectionQuality() {\n  var ping = networkMetrics.averageLatency;\n  var jitter = networkMetrics.jitter;\n  var packetLoss = networkMetrics.packetsLost / Math.max(1, networkMetrics.packetsReceived);\n  if (ping < 50 && jitter < 10 && packetLoss < 0.01) {\n    networkMetrics.connectionQuality = \'excellent\';\n  } else if (ping < 100 && jitter < 20 && packetLoss < 0.03) {\n    networkMetrics.connectionQuality = \'good\';\n  } else if (ping < 200 && jitter < 50 && packetLoss < 0.05) {\n    networkMetrics.connectionQuality = \'fair\';\n  } else {\n    networkMetrics.connectionQuality = \'poor\';\n  }\n}\n\n// Обновление сетевой статистики\nfunction updateNetworkStatistics() {\n  var now = Date.now();\n\n  // Проверяем потерю пакетов (если давно не было обновлений)\n  if (now - networkMetrics.lastPacketTime > 1000) {\n    networkMetrics.packetsLost++;\n  }\n\n  // Обновляем качество соединения\n  updateConnectionQuality();\n\n  // Выводим статистику редко\n  if (connectionState === \'connected\' && Math.random() < 0.05) {\n    // 5% времени\n    var stats = getDetailedNetworkStats();\n    console.log("[NewNetwork] \\u0421\\u0442\\u0430\\u0442\\u0438\\u0441\\u0442\\u0438\\u043A\\u0430: \\u041F\\u0438\\u043D\\u0433=".concat(stats.ping.toFixed(1), "\\u043C\\u0441, \\u0414\\u0436\\u0438\\u0442\\u0442\\u0435\\u0440=").concat(stats.jitter.toFixed(1), "\\u043C\\u0441, \\u041A\\u0430\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E=").concat(stats.quality));\n  }\n}\n\n// Получение детальной статистики сети\nfunction getDetailedNetworkStats() {\n  return {\n    connectionState: connectionState,\n    ping: networkMetrics.averageLatency,\n    jitter: networkMetrics.jitter,\n    packetLoss: networkMetrics.packetsLost / Math.max(1, networkMetrics.packetsReceived),\n    packetsReceived: networkMetrics.packetsReceived,\n    packetsLost: networkMetrics.packetsLost,\n    quality: networkMetrics.connectionQuality,\n    reconnectAttempts: reconnectAttempts\n  };\n}\n\n// Получение состояния соединения\nfunction getConnectionState() {\n  return connectionState;\n}\n\n// Закрытие соединения\nfunction closeConnection() {\n  if (ws) {\n    connectionState = \'disconnected\';\n    ws.close();\n    ws = null;\n  }\n  console.log("[NewNetwork] Соединение закрыто");\n}\n\n// Обработка событий видимости страницы\ndocument.addEventListener(\'visibilitychange\', function () {\n  if (document.hidden) {\n    console.log("[NewNetwork] Страница скрыта");\n  } else {\n    console.log("[NewNetwork] Страница видима");\n    // Отправляем пинг для быстрой синхронизации\n    if (connectionState === \'connected\') {\n      sendPing();\n    }\n  }\n});\n\n// Обработка событий фокуса окна\nwindow.addEventListener(\'focus\', function () {\n  console.log("[NewNetwork] Окно получило фокус");\n  if (connectionState === \'connected\') {\n    sendPing();\n  }\n});\nwindow.addEventListener(\'blur\', function () {\n  console.log("[NewNetwork] Окно потеряло фокус");\n});\n\n// Применение конфигурации физики к Ammo.js\nfunction applyAmmoPhysicsConfig(config) {\n  if (!window.Ammo || !physics_getPhysicsWorld()) {\n    console.warn("[NewNetwork] Ammo.js или физический мир не инициализированы");\n    return;\n  }\n  var physicsWorld = physics_getPhysicsWorld();\n\n  // Применяем настройки мира (WorldPhysicsConfig)\n  if (config.world) {\n    var worldConfig = config.world;\n\n    // Устанавливаем гравитацию\n    if (worldConfig.gravity_x !== undefined || worldConfig.gravity_y !== undefined || worldConfig.gravity_z !== undefined) {\n      var gravity = new Ammo.btVector3(worldConfig.gravity_x || 0, worldConfig.gravity_y || -9.81, worldConfig.gravity_z || 0);\n      physicsWorld.setGravity(gravity);\n      console.log("[NewNetwork] \\u0423\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0430 \\u0433\\u0440\\u0430\\u0432\\u0438\\u0442\\u0430\\u0446\\u0438\\u044F: {x: ".concat(gravity.x(), ", y: ").concat(gravity.y(), ", z: ").concat(gravity.z(), "}"));\n      Ammo.destroy(gravity);\n    }\n\n    // Применяем к существующим объектам настройки затухания и трения\n    for (var objectId in objects_objects) {\n      var obj = objects_objects[objectId];\n      if (!obj || !obj.body) continue;\n      try {\n        // Линейное затухание\n        if (worldConfig.linear_damping !== undefined) {\n          obj.body.setDamping(worldConfig.linear_damping, obj.body.getAngularDamping());\n        }\n\n        // Угловое затухание\n        if (worldConfig.angular_damping !== undefined) {\n          obj.body.setDamping(obj.body.getLinearDamping(), worldConfig.angular_damping);\n        }\n\n        // Трение\n        if (worldConfig.friction !== undefined) {\n          obj.body.setFriction(worldConfig.friction);\n        }\n\n        // Трение качения\n        if (worldConfig.rolling_friction !== undefined) {\n          obj.body.setRollingFriction(worldConfig.rolling_friction);\n        }\n\n        // Активируем объект для применения изменений\n        obj.body.activate(true);\n      } catch (error) {\n        console.error("[NewNetwork] \\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u044F \\u043C\\u0438\\u0440\\u043E\\u0432\\u044B\\u0445 \\u043D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0435\\u043A \\u043A ".concat(objectId, ":"), error);\n      }\n    }\n  }\n\n  // Применяем настройки игрока (PlayerConfig)\n  if (config.player) {\n    var playerConfig = config.player;\n    for (var _objectId in objects_objects) {\n      var _obj = objects_objects[_objectId];\n      if (!_obj || !_obj.body) continue;\n\n      // Применяем настройки только к игрокам\n      if (_objectId.includes(\'player\') || _objectId === gamestatemanager.getPlayerObjectID()) {\n        try {\n          // Масса игрока\n          if (playerConfig.player_mass !== undefined) {\n            var mass = playerConfig.player_mass;\n            var shape = _obj.body.getCollisionShape();\n            var localInertia = new Ammo.btVector3(0, 0, 0);\n            if (mass > 0) {\n              shape.calculateLocalInertia(mass, localInertia);\n            }\n            _obj.body.setMassProps(mass, localInertia);\n            _obj.mass = mass;\n            console.log("[NewNetwork] \\u0423\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0430 \\u043C\\u0430\\u0441\\u0441\\u0430 \\u0438\\u0433\\u0440\\u043E\\u043A\\u0430 ".concat(_objectId, ": ").concat(mass));\n            Ammo.destroy(localInertia);\n          }\n\n          // Упругость (способность к отскоку)\n          if (playerConfig.restitution !== undefined) {\n            _obj.body.setRestitution(playerConfig.restitution);\n          }\n\n          // Активируем объект\n          _obj.body.activate(true);\n        } catch (error) {\n          console.error("[NewNetwork] \\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u044F \\u043D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0435\\u043A \\u0438\\u0433\\u0440\\u043E\\u043A\\u0430 \\u043A ".concat(_objectId, ":"), error);\n        }\n      }\n    }\n  }\n\n  // Настройки управления (ControlConfig) сохраняем для gamepad\n  if (config.control) {\n    // Экспортируем настройки управления для использования в gamepad.js\n    window.CONTROL_CONFIG = config.control;\n    console.log("[NewNetwork] Сохранены настройки управления:", config.control);\n  }\n}\n\n// Экспорт функции для получения текущей конфигурации физики\nfunction getGlobalPhysicsConfig() {\n  return globalPhysicsConfig;\n}\n;// ./src/eyes.js\nfunction eyes_typeof(o) { "@babel/helpers - typeof"; return eyes_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, eyes_typeof(o); }\nfunction eyes_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ eyes_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == eyes_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(eyes_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction eyes_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction eyes_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { eyes_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { eyes_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == eyes_typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != eyes_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != eyes_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\n\n\n// Системы глаз для сферы\nvar EyeSystem = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {\n  function EyeSystem() {\n    _classCallCheck(this, EyeSystem);\n    this.eyeTexture = null;\n    this.leftEye = null;\n    this.rightEye = null;\n    this.sphereMesh = null;\n\n    // Параметры глаз - ОГРОМНЫЕ, больше сферы!\n    this.eyeSize = 8.0; // Увеличиваем до огромного размера!\n    this.eyeDistance = 6.0; // Увеличиваем расстояние между глазами\n    this.eyeOffset = 0.9; // расстояние от центра сферы\n\n    // Карта эмоций и их координат в спрайт-карте (горизонтальная раскладка)\n    this.emotions = {\n      \'normal\': {\n        u: 0,\n        v: 0\n      },\n      \'happy\': {\n        u: 0.166,\n        v: 0\n      },\n      // 1/6\n      \'angry\': {\n        u: 0.333,\n        v: 0\n      },\n      // 2/6\n      \'scared\': {\n        u: 0.5,\n        v: 0\n      },\n      // 3/6\n      \'looking_left\': {\n        u: 0.666,\n        v: 0\n      },\n      // 4/6\n      \'looking_right\': {\n        u: 0.833,\n        v: 0\n      } // 5/6\n    };\n    this.currentEmotion = \'normal\';\n    this.loadTexture();\n  }\n  return _createClass(EyeSystem, [{\n    key: "loadTexture",\n    value: function () {\n      var _loadTexture = eyes_asyncToGenerator(/*#__PURE__*/eyes_regeneratorRuntime().mark(function _callee() {\n        var loader;\n        return eyes_regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\'[Eyes] Начинаю загрузку текстуры eyes.png...\');\n              _context.prev = 1;\n              loader = new THREE.TextureLoader();\n              _context.next = 5;\n              return new Promise(function (resolve, reject) {\n                loader.load(\'./eyes.png\', function (texture) {\n                  console.log(\'[Eyes] Текстура успешно загружена:\', texture);\n                  console.log(\'[Eyes] Размер текстуры:\', texture.image.width, \'x\', texture.image.height);\n                  resolve(texture);\n                }, function (progress) {\n                  console.log(\'[Eyes] Прогресс загрузки:\', progress);\n                }, function (error) {\n                  console.error(\'[Eyes] Ошибка загрузки текстуры:\', error);\n                  reject(error);\n                });\n              });\n            case 5:\n              this.eyeTexture = _context.sent;\n              // Настраиваем текстуру\n              this.eyeTexture.magFilter = THREE.NearestFilter;\n              this.eyeTexture.minFilter = THREE.NearestFilter;\n              this.eyeTexture.wrapS = THREE.ClampToEdgeWrapping;\n              this.eyeTexture.wrapT = THREE.ClampToEdgeWrapping;\n              console.log(\'[Eyes] Текстура глаз настроена и готова к использованию\');\n              _context.next = 17;\n              break;\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context["catch"](1);\n              console.error(\'[Eyes] Ошибка загрузки текстуры глаз:\', _context.t0);\n\n              // Создаем fallback текстуру\n              this.createFallbackTexture();\n            case 17:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, this, [[1, 13]]);\n      }));\n      function loadTexture() {\n        return _loadTexture.apply(this, arguments);\n      }\n      return loadTexture;\n    }()\n  }, {\n    key: "createFallbackTexture",\n    value: function createFallbackTexture() {\n      console.log(\'[Eyes] Создаю fallback текстуру...\');\n      // Создаем ОГРОМНЫЕ выразительные глаза больше самой сферы!\n      var canvas = document.createElement(\'canvas\');\n      canvas.width = 600; // 6 эмоций по 100px\n      canvas.height = 100;\n      var ctx = canvas.getContext(\'2d\');\n\n      // Заполняем прозрачным\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Создаем ОГРОМНЫЕ глаза для каждой эмоции\n      var emotions = [{\n        name: \'normal\',\n        pupilX: 50,\n        pupilY: 50,\n        pupilSize: 25\n      }, {\n        name: \'happy\',\n        pupilX: 50,\n        pupilY: 60,\n        pupilSize: 30,\n        eyeHeight: 50\n      },\n      // Прищуренные счастливые\n      {\n        name: \'angry\',\n        pupilX: 50,\n        pupilY: 35,\n        pupilSize: 35,\n        eyeColor: \'#FFE6E6\'\n      },\n      // Налитые кровью\n      {\n        name: \'scared\',\n        pupilX: 50,\n        pupilY: 30,\n        pupilSize: 40,\n        eyeColor: \'#E6F3FF\'\n      },\n      // Широко открытые\n      {\n        name: \'left\',\n        pupilX: 30,\n        pupilY: 50,\n        pupilSize: 25\n      }, {\n        name: \'right\',\n        pupilX: 70,\n        pupilY: 50,\n        pupilSize: 25\n      } // Добавляем "вправо"\n      ];\n      emotions.forEach(function (emotion, index) {\n        var x = index * 100;\n\n        // Белок глаза (ОГРОМНЫЙ!)\n        ctx.fillStyle = emotion.eyeColor || \'#FFFFFF\';\n        var eyeHeight = emotion.eyeHeight || 70;\n        ctx.beginPath();\n        ctx.ellipse(x + 50, 50, 35, eyeHeight / 2, 0, 0, Math.PI * 2);\n        ctx.fill();\n\n        // Черная обводка\n        ctx.strokeStyle = \'#000000\';\n        ctx.lineWidth = 3;\n        ctx.stroke();\n\n        // ОГРОМНЫЙ зрачок\n        ctx.fillStyle = \'#000000\';\n        ctx.beginPath();\n        ctx.ellipse(x + emotion.pupilX, emotion.pupilY, emotion.pupilSize / 2, emotion.pupilSize / 2, 0, 0, Math.PI * 2);\n        ctx.fill();\n\n        // Блик в глазу для живости\n        ctx.fillStyle = \'#FFFFFF\';\n        ctx.beginPath();\n        ctx.ellipse(x + emotion.pupilX - 8, emotion.pupilY - 8, 6, 6, 0, 0, Math.PI * 2);\n        ctx.fill();\n      });\n      this.eyeTexture = new THREE.CanvasTexture(canvas);\n      this.eyeTexture.magFilter = THREE.NearestFilter;\n      this.eyeTexture.minFilter = THREE.NearestFilter;\n      console.log(\'[Eyes] Создана fallback текстура с ОГРОМНЫМИ глазами размером:\', canvas.width, \'x\', canvas.height);\n    }\n  }, {\n    key: "createEyes",\n    value: function createEyes(sphereMesh) {\n      if (!this.eyeTexture) {\n        console.warn(\'[Eyes] Текстура глаз еще не загружена\');\n        return;\n      }\n      console.log(\'[Eyes] Создаю глаза для сферы:\', sphereMesh);\n      this.sphereMesh = sphereMesh;\n      var radius = sphereMesh.geometry.parameters.radius;\n      console.log(\'[Eyes] Радиус сферы:\', radius);\n\n      // Создаем геометрию для глаз (плоские квадраты) - ОГРОМНЫЕ!\n      var eyeGeometry = new THREE.PlaneGeometry(this.eyeSize, this.eyeSize);\n      console.log(\'[Eyes] Размер ОГРОМНЫХ глаз:\', this.eyeSize);\n\n      // Создаем материал с текстурой\n      var eyeMaterial = new THREE.MeshBasicMaterial({\n        map: this.eyeTexture.clone(),\n        transparent: true,\n        alphaTest: 0.1,\n        side: THREE.DoubleSide\n      });\n      console.log(\'[Eyes] Материал создан:\', eyeMaterial);\n\n      // Левый глаз - ОГРОМНЫЙ и НЕЗАВИСИМЫЙ!\n      this.leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial.clone());\n\n      // Правый глаз - ОГРОМНЫЙ и НЕЗАВИСИМЫЙ!\n      this.rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial.clone());\n\n      // НЕ добавляем глаза к сфере! Добавляем их в главную сцену\n      var scene = sphereMesh.parent; // Получаем сцену\n      if (scene) {\n        scene.add(this.leftEye);\n        scene.add(this.rightEye);\n        console.log(\'[Eyes] ОГРОМНЫЕ глаза добавлены в сцену как независимые объекты\');\n      }\n\n      // Обновляем позиции глаз\n      this.updateEyePositions();\n      this.updateEmotion(this.currentEmotion);\n      console.log(\'[Eyes] ОГРОМНЫЕ глаза созданы и добавлены в сцену\');\n    }\n\n    // Новый метод для обновления позиций глаз\n  }, {\n    key: "updateEyePositions",\n    value: function updateEyePositions() {\n      if (!this.sphereMesh || !this.leftEye || !this.rightEye) {\n        return;\n      }\n      var spherePos = this.sphereMesh.position;\n      var radius = this.sphereMesh.geometry.parameters.radius;\n\n      // Пытаемся получить направление вектора из глобальных переменных gamepad\n      var direction = null;\n      try {\n        // Проверяем доступность функций gamepad через глобальные переменные\n        if (window.gamepadDirection && window.gamepadDirection.length() > 0) {\n          direction = window.gamepadDirection;\n          this.positionEyesAroundSphere(spherePos, radius, direction);\n          return;\n        }\n      } catch (error) {\n        // Игнорируем ошибки\n      }\n\n      // Если направление не доступно, используем позицию по умолчанию\n      this.positionEyesDefault(spherePos, radius);\n    }\n\n    // Позиционируем глаза вокруг сферы в направлении вектора\n  }, {\n    key: "positionEyesAroundSphere",\n    value: function positionEyesAroundSphere(spherePos, radius, direction) {\n      // Нормализуем направление\n      var normalizedDir = direction.clone().normalize();\n\n      // ИНВЕРТИРУЕМ направление - глаза размещаются в противоположной стороне от вектора!\n      var oppositeDir = normalizedDir.clone().negate();\n\n      // Создаем векторы для позиционирования глаз как спутников\n      // Глаза размещаются на противоположной стороне сферы от того, куда указывает вектор\n      var eyeDistance = radius + 2.0; // Расстояние от центра сферы до глаз\n      var eyeSeparation = 3.0; // Расстояние между глазами\n\n      // Вычисляем базовую позицию в противоположном направлении от вектора\n      var basePosition = new THREE.Vector3().copy(oppositeDir).multiplyScalar(eyeDistance).add(spherePos);\n\n      // Создаем перпендикулярный вектор для разделения глаз\n      var up = new THREE.Vector3(0, 1, 0);\n      var right = new THREE.Vector3().crossVectors(oppositeDir, up).normalize();\n\n      // Если вектор направлен строго вверх или вниз, используем другой базовый вектор\n      if (right.length() < 0.1) {\n        right.set(1, 0, 0).cross(oppositeDir).normalize();\n      }\n\n      // Позиционируем левый и правый глаз\n      this.leftEye.position.copy(basePosition).add(right.clone().multiplyScalar(-eyeSeparation / 2));\n      this.rightEye.position.copy(basePosition).add(right.clone().multiplyScalar(eyeSeparation / 2));\n\n      // Поворачиваем глаза к центру сферы (чтобы они "смотрели" на неё)\n      this.leftEye.lookAt(spherePos);\n      this.rightEye.lookAt(spherePos);\n      console.log(\'[Eyes] ОГРОМНЫЕ глаза-спутники убегают от курсора:\');\n      console.log(\'  Направление вектора:\', normalizedDir);\n      console.log(\'  Противоположное направление:\', oppositeDir);\n      console.log(\'  Левый глаз:\', this.leftEye.position);\n      console.log(\'  Правый глаз:\', this.rightEye.position);\n    }\n\n    // Позиция по умолчанию (спереди сферы)\n  }, {\n    key: "positionEyesDefault",\n    value: function positionEyesDefault(spherePos, radius) {\n      var eyeDistance = radius + 2.0;\n\n      // Размещаем глаза спереди по умолчанию\n      this.leftEye.position.set(spherePos.x - 3.0, spherePos.y + 1.0, spherePos.z + eyeDistance);\n      this.rightEye.position.set(spherePos.x + 3.0, spherePos.y + 1.0, spherePos.z + eyeDistance);\n\n      // Поворачиваем к центру сферы\n      this.leftEye.lookAt(spherePos);\n      this.rightEye.lookAt(spherePos);\n    }\n  }, {\n    key: "updateEmotion",\n    value: function updateEmotion(emotion) {\n      if (!this.emotions[emotion]) {\n        console.warn("[Eyes] \\u041D\\u0435\\u0438\\u0437\\u0432\\u0435\\u0441\\u0442\\u043D\\u0430\\u044F \\u044D\\u043C\\u043E\\u0446\\u0438\\u044F: ".concat(emotion));\n        return;\n      }\n      this.currentEmotion = emotion;\n      if (!this.leftEye || !this.rightEye) {\n        return;\n      }\n      var coords = this.emotions[emotion];\n\n      // Обновляем UV координаты для отображения нужной части спрайт-карты\n      // Горизонтальная раскладка 6 эмоций в ряд\n      var uvOffsetX = coords.u;\n      var uvOffsetY = coords.v;\n      var uvScaleX = 0.166; // 1/6 для 6 эмоций в ряд\n      var uvScaleY = 1.0; // вся высота\n\n      // Обновляем UV для левого глаза\n      if (this.leftEye.material.map) {\n        this.leftEye.material.map.offset.set(uvOffsetX, uvOffsetY);\n        this.leftEye.material.map.repeat.set(uvScaleX, uvScaleY);\n        this.leftEye.material.needsUpdate = true;\n      }\n\n      // Обновляем UV для правого глаза\n      if (this.rightEye.material.map) {\n        this.rightEye.material.map.offset.set(uvOffsetX, uvOffsetY);\n        this.rightEye.material.map.repeat.set(uvScaleX, uvScaleY);\n        this.rightEye.material.needsUpdate = true;\n      }\n      console.log("[Eyes] \\u042D\\u043C\\u043E\\u0446\\u0438\\u044F \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0430 \\u043D\\u0430: ".concat(emotion));\n    }\n\n    // Показать направление движения\n  }, {\n    key: "showDirection",\n    value: function showDirection(direction) {\n      if (direction.x > 0.1) {\n        this.updateEmotion(\'looking_right\');\n      } else if (direction.x < -0.1) {\n        this.updateEmotion(\'looking_left\');\n      } else {\n        this.updateEmotion(\'normal\');\n      }\n    }\n\n    // Показать агрессию\n  }, {\n    key: "showAggression",\n    value: function showAggression() {\n      this.updateEmotion(\'angry\');\n    }\n\n    // Показать страх\n  }, {\n    key: "showFear",\n    value: function showFear() {\n      this.updateEmotion(\'scared\');\n    }\n\n    // Показать радость\n  }, {\n    key: "showHappiness",\n    value: function showHappiness() {\n      this.updateEmotion(\'happy\');\n    }\n\n    // Вернуться к нормальному состоянию\n  }, {\n    key: "showNormal",\n    value: function showNormal() {\n      this.updateEmotion(\'normal\');\n    }\n\n    // Удалить глаза\n  }, {\n    key: "removeEyes",\n    value: function removeEyes() {\n      if (this.leftEye) {\n        // Удаляем из сцены, а не из сферы\n        var scene = this.leftEye.parent;\n        if (scene) {\n          scene.remove(this.leftEye);\n        }\n        this.leftEye.geometry.dispose();\n        this.leftEye.material.dispose();\n        this.leftEye = null;\n      }\n      if (this.rightEye) {\n        // Удаляем из сцены, а не из сферы  \n        var _scene = this.rightEye.parent;\n        if (_scene) {\n          _scene.remove(this.rightEye);\n        }\n        this.rightEye.geometry.dispose();\n        this.rightEye.material.dispose();\n        this.rightEye = null;\n      }\n      this.sphereMesh = null;\n    }\n  }]);\n}())); // Глобальная система глаз\nvar globalEyeSystem = null;\nfunction initEyeSystem() {\n  if (!globalEyeSystem) {\n    globalEyeSystem = new EyeSystem();\n  }\n  return globalEyeSystem;\n}\nfunction addEyesToSphere(sphereMesh) {\n  console.log(\'[Eyes] addEyesToSphere вызвана для:\', sphereMesh);\n  if (!globalEyeSystem) {\n    console.log(\'[Eyes] Инициализирую глобальную систему глаз\');\n    globalEyeSystem = initEyeSystem();\n  }\n\n  // Ждем загрузки текстуры\n  var _checkAndCreate = function checkAndCreate() {\n    if (globalEyeSystem.eyeTexture) {\n      console.log(\'[Eyes] Текстура готова, создаю глаза\');\n      globalEyeSystem.createEyes(sphereMesh);\n    } else {\n      console.log(\'[Eyes] Ожидаю загрузки текстуры...\');\n      setTimeout(_checkAndCreate, 100);\n    }\n  };\n  _checkAndCreate();\n}\nfunction updateSphereEmotion(emotion) {\n  if (globalEyeSystem) {\n    globalEyeSystem.updateEmotion(emotion);\n  }\n}\nfunction showDirectionOnSphere(direction) {\n  if (globalEyeSystem) {\n    globalEyeSystem.showDirection(direction);\n  }\n}\nfunction showAggressionOnSphere() {\n  if (globalEyeSystem) {\n    globalEyeSystem.showAggression();\n  }\n}\nfunction showFearOnSphere() {\n  if (globalEyeSystem) {\n    globalEyeSystem.showFear();\n  }\n}\nfunction showHappinessOnSphere() {\n  if (globalEyeSystem) {\n    globalEyeSystem.showHappiness();\n  }\n}\nfunction showNormalOnSphere() {\n  if (globalEyeSystem) {\n    globalEyeSystem.showNormal();\n  }\n}\nfunction updateEyePositions() {\n  if (globalEyeSystem) {\n    globalEyeSystem.updateEyePositions();\n  }\n}\n\n;// ./src/diagnostics.js\nfunction diagnostics_typeof(o) { "@babel/helpers - typeof"; return diagnostics_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, diagnostics_typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = diagnostics_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction diagnostics_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction diagnostics_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, diagnostics_toPropertyKey(o.key), o); } }\nfunction diagnostics_createClass(e, r, t) { return r && diagnostics_defineProperties(e.prototype, r), t && diagnostics_defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction diagnostics_toPropertyKey(t) { var i = diagnostics_toPrimitive(t, "string"); return "symbol" == diagnostics_typeof(i) ? i : i + ""; }\nfunction diagnostics_toPrimitive(t, r) { if ("object" != diagnostics_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != diagnostics_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\n// Система диагностики движения\nvar MovementDiagnostics = /*#__PURE__*/function () {\n  function MovementDiagnostics() {\n    diagnostics_classCallCheck(this, MovementDiagnostics);\n    this.enabled = false;\n    this.logs = [];\n    this.maxLogs = 50; // Храним последние 50 записей\n    this.stats = {\n      clientCommands: 0,\n      serverUpdates: 0,\n      localImpulses: 0,\n      corrections: 0,\n      teleports: 0\n    };\n    this.lastPrintTime = 0;\n    this.printInterval = 2000; // Печатаем статистику каждые 2 секунды\n  }\n  return diagnostics_createClass(MovementDiagnostics, [{\n    key: "enable",\n    value: function enable() {\n      this.enabled = true;\n      console.log(\'[Diagnostics] 🔍 Диагностика движения включена\');\n    }\n  }, {\n    key: "disable",\n    value: function disable() {\n      this.enabled = false;\n      console.log(\'[Diagnostics] Диагностика движения выключена\');\n    }\n  }, {\n    key: "log",\n    value: function log(category, data) {\n      if (!this.enabled) return;\n      var timestamp = Date.now();\n      var entry = {\n        timestamp: timestamp,\n        category: category,\n        data: _objectSpread({}, data)\n      };\n      this.logs.push(entry);\n\n      // Удаляем старые записи\n      if (this.logs.length > this.maxLogs) {\n        this.logs.shift();\n      }\n\n      // Обновляем статистику\n      this.stats[category] = (this.stats[category] || 0) + 1;\n\n      // Печатаем сводку периодически\n      if (timestamp - this.lastPrintTime > this.printInterval) {\n        this.printSummary();\n        this.lastPrintTime = timestamp;\n      }\n    }\n\n    // Отправка команды на сервер\n  }, {\n    key: "logClientCommand",\n    value: function logClientCommand(direction, distance, playerObjectID) {\n      this.log(\'clientCommands\', {\n        direction: {\n          x: direction.x.toFixed(3),\n          y: direction.y.toFixed(3),\n          z: direction.z.toFixed(3)\n        },\n        distance: distance.toFixed(2),\n        playerObjectID: playerObjectID,\n        timestamp: Date.now()\n      });\n    }\n\n    // Получение обновления с сервера\n  }, {\n    key: "logServerUpdate",\n    value: function logServerUpdate(objectId, position, velocity, timestamp) {\n      this.log(\'serverUpdates\', {\n        objectId: objectId,\n        position: {\n          x: position.x.toFixed(3),\n          y: position.y.toFixed(3),\n          z: position.z.toFixed(3)\n        },\n        velocity: velocity ? {\n          x: velocity.x.toFixed(3),\n          y: velocity.y.toFixed(3),\n          z: velocity.z.toFixed(3),\n          magnitude: Math.sqrt(Math.pow(velocity.x, 2) + Math.pow(velocity.y, 2) + Math.pow(velocity.z, 2)).toFixed(3)\n        } : null,\n        serverTimestamp: timestamp,\n        clientTime: Date.now()\n      });\n    }\n\n    // Локальный импульс\n  }, {\n    key: "logLocalImpulse",\n    value: function logLocalImpulse(playerObjectID, force, distance) {\n      this.log(\'localImpulses\', {\n        playerObjectID: playerObjectID,\n        force: {\n          x: force.x.toFixed(4),\n          y: force.y.toFixed(4),\n          z: force.z.toFixed(4),\n          magnitude: Math.sqrt(Math.pow(force.x, 2) + Math.pow(force.y, 2) + Math.pow(force.z, 2)).toFixed(4)\n        },\n        distance: distance.toFixed(2),\n        timestamp: Date.now()\n      });\n    }\n\n    // Коррекция позиции\n  }, {\n    key: "logCorrection",\n    value: function logCorrection(objectId, currentPos, targetPos, distance, type) {\n      this.log(\'corrections\', {\n        objectId: objectId,\n        currentPos: {\n          x: currentPos.x.toFixed(3),\n          y: currentPos.y.toFixed(3),\n          z: currentPos.z.toFixed(3)\n        },\n        targetPos: {\n          x: targetPos.x.toFixed(3),\n          y: targetPos.y.toFixed(3),\n          z: targetPos.z.toFixed(3)\n        },\n        distance: distance.toFixed(3),\n        type: type,\n        // \'smooth\', \'hard\', \'teleport\'\n        timestamp: Date.now()\n      });\n    }\n\n    // Телепортация\n  }, {\n    key: "logTeleport",\n    value: function logTeleport(objectId, fromPos, toPos, reason) {\n      this.log(\'teleports\', {\n        objectId: objectId,\n        fromPos: {\n          x: fromPos.x.toFixed(3),\n          y: fromPos.y.toFixed(3),\n          z: fromPos.z.toFixed(3)\n        },\n        toPos: {\n          x: toPos.x.toFixed(3),\n          y: toPos.y.toFixed(3),\n          z: toPos.z.toFixed(3)\n        },\n        distance: Math.sqrt(Math.pow(toPos.x - fromPos.x, 2) + Math.pow(toPos.y - fromPos.y, 2) + Math.pow(toPos.z - fromPos.z, 2)).toFixed(3),\n        reason: reason,\n        timestamp: Date.now()\n      });\n    }\n  }, {\n    key: "printSummary",\n    value: function printSummary() {\n      if (!this.enabled) return;\n      console.log(\'📊 [Diagnostics] Сводка за последние 2 секунды:\');\n      console.log("   \\uD83D\\uDCE4 \\u041A\\u043E\\u043C\\u0430\\u043D\\u0434 \\u043A\\u043B\\u0438\\u0435\\u043D\\u0442\\u0430: ".concat(this.stats.clientCommands || 0));\n      console.log("   \\uD83D\\uDCE5 \\u041E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0439 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430: ".concat(this.stats.serverUpdates || 0));\n      console.log("   \\u26A1 \\u041B\\u043E\\u043A\\u0430\\u043B\\u044C\\u043D\\u044B\\u0445 \\u0438\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441\\u043E\\u0432: ".concat(this.stats.localImpulses || 0));\n      console.log("   \\uD83D\\uDD27 \\u041A\\u043E\\u0440\\u0440\\u0435\\u043A\\u0446\\u0438\\u0439: ".concat(this.stats.corrections || 0));\n      console.log("   \\uD83C\\uDFAF \\u0422\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0430\\u0446\\u0438\\u0439: ".concat(this.stats.teleports || 0));\n\n      // Подробная информация о последних событиях\n      this.printDetailedInfo();\n\n      // Сбрасываем статистику\n      this.stats = {\n        clientCommands: 0,\n        serverUpdates: 0,\n        localImpulses: 0,\n        corrections: 0,\n        teleports: 0\n      };\n    }\n  }, {\n    key: "printDetailedInfo",\n    value: function printDetailedInfo() {\n      var now = Date.now();\n      var recentTime = now - this.printInterval;\n\n      // Последние коррекции (если есть)\n      var recentCorrections = this.logs.filter(function (log) {\n        return log.category === \'corrections\' && log.timestamp > recentTime;\n      });\n      if (recentCorrections.length > 0) {\n        console.log(\'🔧 [Diagnostics] Последние коррекции:\');\n        recentCorrections.slice(-3).forEach(function (log) {\n          var d = log.data;\n          console.log("   ".concat(d.type.toUpperCase(), ": \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ").concat(d.objectId, ", \\u0440\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435 ").concat(d.distance, ", \\n   \\u043E\\u0442 (").concat(d.currentPos.x, ", ").concat(d.currentPos.y, ", ").concat(d.currentPos.z, ") \\n   \\u043A  (").concat(d.targetPos.x, ", ").concat(d.targetPos.y, ", ").concat(d.targetPos.z, ")"));\n        });\n      }\n\n      // Последние команды клиента (образцы)\n      var recentCommands = this.logs.filter(function (log) {\n        return log.category === \'clientCommands\' && log.timestamp > recentTime;\n      });\n      if (recentCommands.length > 0) {\n        var sample = recentCommands[recentCommands.length - 1].data;\n        console.log("\\uD83D\\uDCE4 [Diagnostics] \\u041F\\u0440\\u0438\\u043C\\u0435\\u0440 \\u043A\\u043E\\u043C\\u0430\\u043D\\u0434\\u044B \\u043A\\u043B\\u0438\\u0435\\u043D\\u0442\\u0430: \\u043D\\u0430\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 (".concat(sample.direction.x, ", ").concat(sample.direction.y, ", ").concat(sample.direction.z, "), \\u0441\\u0438\\u043B\\u0430 ").concat(sample.distance));\n      }\n\n      // Последние серверные обновления (образцы)\n      var recentUpdates = this.logs.filter(function (log) {\n        return log.category === \'serverUpdates\' && log.timestamp > recentTime;\n      });\n      if (recentUpdates.length > 0) {\n        var _sample$velocity;\n        var _sample = recentUpdates[recentUpdates.length - 1].data;\n        console.log("\\uD83D\\uDCE5 [Diagnostics] \\u041F\\u0440\\u0438\\u043C\\u0435\\u0440 \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u044F \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430: \\u043F\\u043E\\u0437\\u0438\\u0446\\u0438\\u044F (".concat(_sample.position.x, ", ").concat(_sample.position.y, ", ").concat(_sample.position.z, "), \\u0441\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C ").concat(((_sample$velocity = _sample.velocity) === null || _sample$velocity === void 0 ? void 0 : _sample$velocity.magnitude) || \'н/д\'));\n      }\n\n      // Локальные импульсы (если есть)\n      var recentImpulses = this.logs.filter(function (log) {\n        return log.category === \'localImpulses\' && log.timestamp > recentTime;\n      });\n      if (recentImpulses.length > 0) {\n        var _sample2 = recentImpulses[recentImpulses.length - 1].data;\n        console.log("\\u26A1 [Diagnostics] \\u041F\\u0440\\u0438\\u043C\\u0435\\u0440 \\u043B\\u043E\\u043A\\u0430\\u043B\\u044C\\u043D\\u043E\\u0433\\u043E \\u0438\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441\\u0430: \\u0441\\u0438\\u043B\\u0430 ".concat(_sample2.force.magnitude, ", \\u0440\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435 ").concat(_sample2.distance));\n      }\n\n      // Телепортации (если есть)\n      var recentTeleports = this.logs.filter(function (log) {\n        return log.category === \'teleports\' && log.timestamp > recentTime;\n      });\n      if (recentTeleports.length > 0) {\n        console.log(\'🎯 [Diagnostics] Телепортации:\');\n        recentTeleports.forEach(function (log) {\n          var d = log.data;\n          console.log("   \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(d.objectId, ": \\u043F\\u0440\\u044B\\u0436\\u043E\\u043A \\u043D\\u0430 ").concat(d.distance, " \\u0435\\u0434\\u0438\\u043D\\u0438\\u0446, \\u043F\\u0440\\u0438\\u0447\\u0438\\u043D\\u0430: ").concat(d.reason));\n        });\n      }\n      console.log(\'━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\');\n    }\n\n    // Получить последние записи для отладки\n  }, {\n    key: "getRecentLogs",\n    value: function getRecentLogs() {\n      var category = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n      var filtered = this.logs;\n      if (category) {\n        filtered = this.logs.filter(function (log) {\n          return log.category === category;\n        });\n      }\n      return filtered.slice(-count);\n    }\n\n    // Экспорт логов для анализа\n  }, {\n    key: "exportLogs",\n    value: function exportLogs() {\n      return {\n        logs: this.logs,\n        timestamp: Date.now(),\n        stats: _objectSpread({}, this.stats)\n      };\n    }\n  }]);\n}();\n\n// Глобальный экземпляр диагностики\nvar diagnostics = new MovementDiagnostics();\n\n// Включаем диагностику по умолчанию для тестирования\ndiagnostics.enable();\n\n// Добавляем в window для доступа из консоли\nif (typeof window !== \'undefined\') {\n  window.diagnostics = diagnostics;\n  window.enableDiag = function () {\n    return diagnostics.enable();\n  };\n  window.disableDiag = function () {\n    return diagnostics.disable();\n  };\n  window.diagLogs = function (category, count) {\n    return diagnostics.getRecentLogs(category, count);\n  };\n}\n;// ./src/telemetry.js\nfunction telemetry_typeof(o) { "@babel/helpers - typeof"; return telemetry_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, telemetry_typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction telemetry_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction telemetry_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? telemetry_ownKeys(Object(t), !0).forEach(function (r) { telemetry_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : telemetry_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction telemetry_defineProperty(e, r, t) { return (r = telemetry_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction telemetry_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction telemetry_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, telemetry_toPropertyKey(o.key), o); } }\nfunction telemetry_createClass(e, r, t) { return r && telemetry_defineProperties(e.prototype, r), t && telemetry_defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction telemetry_toPropertyKey(t) { var i = telemetry_toPrimitive(t, "string"); return "symbol" == telemetry_typeof(i) ? i : i + ""; }\nfunction telemetry_toPrimitive(t, r) { if ("object" != telemetry_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != telemetry_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\n// Профессиональная клиентская телеметрия\nvar ClientTelemetry = /*#__PURE__*/function () {\n  function ClientTelemetry() {\n    telemetry_classCallCheck(this, ClientTelemetry);\n    this.enabled = true;\n    this.verboseMode = false; // Подробный режим по умолчанию выключен\n    this.data = [];\n    this.maxEntries = 200; // Храним последние 200 записей\n    this.counters = {};\n    this.lastPrint = Date.now();\n    this.printInterval = 5000; // Выводим статистику каждые 5 секунд (было 2)\n\n    // Кэш для отслеживания изменений\n    this.lastStates = new Map();\n\n    // console.log(\'🔬 [ClientTelemetry] Клиентская телеметрия инициализирована (тихий режим)\');\n    // console.log(\'💡 Команды: enableVerboseTelemetry() / disableVerboseTelemetry()\');\n  }\n\n  // Логирование состояния объекта\n  return telemetry_createClass(ClientTelemetry, [{\n    key: "logObjectState",\n    value: function logObjectState(objectId, objectType, physicsType, position, velocity, mass, radius) {\n      var source = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : \'client\';\n      if (!this.enabled) return;\n      var speed = this.calculateSpeed(velocity);\n      var entry = {\n        timestamp: Date.now(),\n        objectId: objectId,\n        objectType: objectType,\n        physicsType: physicsType,\n        position: telemetry_objectSpread({}, position),\n        velocity: telemetry_objectSpread({}, velocity),\n        mass: mass,\n        radius: radius,\n        speed: speed,\n        source: source\n      };\n      this.data.push(entry);\n\n      // Ограничиваем размер буфера\n      if (this.data.length > this.maxEntries) {\n        this.data.shift();\n      }\n\n      // Обновляем счетчики\n      var key = "".concat(objectType, "_").concat(physicsType);\n      this.counters[key] = (this.counters[key] || 0) + 1;\n\n      // Проверяем нужно ли печатать сводку\n      this.checkPrintSummary();\n    }\n\n    // Логирование применения импульса\n  }, {\n    key: "logImpulse",\n    value: function logImpulse(objectId, objectType, physicsType, position, velocity, mass, radius, impulse) {\n      var source = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : \'client\';\n      if (!this.enabled) return;\n      var speed = this.calculateSpeed(velocity);\n      var entry = {\n        timestamp: Date.now(),\n        objectId: objectId,\n        objectType: objectType,\n        physicsType: physicsType,\n        position: telemetry_objectSpread({}, position),\n        velocity: telemetry_objectSpread({}, velocity),\n        mass: mass,\n        radius: radius,\n        speed: speed,\n        appliedImpulse: telemetry_objectSpread({}, impulse),\n        source: source\n      };\n      this.data.push(entry);\n\n      // Ограничиваем размер буфера\n      if (this.data.length > this.maxEntries) {\n        this.data.shift();\n      }\n\n      // Обновляем счетчики\n      this.counters["impulse_".concat(objectType)] = (this.counters["impulse_".concat(objectType)] || 0) + 1;\n\n      // Проверяем нужно ли печатать сводку\n      this.checkPrintSummary();\n    }\n\n    // Логирование коррекции позиции\n  }, {\n    key: "logCorrection",\n    value: function logCorrection(objectId, currentPos, targetPos, correctionType, distance) {\n      if (!this.enabled) return;\n      var entry = {\n        timestamp: Date.now(),\n        objectId: objectId,\n        objectType: \'player\',\n        // Коррекции обычно для игроков\n        eventType: \'correction\',\n        currentPos: telemetry_objectSpread({}, currentPos),\n        targetPos: telemetry_objectSpread({}, targetPos),\n        correctionType: correctionType,\n        // \'smooth\', \'hard\', \'teleport\'\n        distance: distance,\n        source: \'client\'\n      };\n      this.data.push(entry);\n      if (this.data.length > this.maxEntries) {\n        this.data.shift();\n      }\n      this.counters["correction_".concat(correctionType)] = (this.counters["correction_".concat(correctionType)] || 0) + 1;\n      this.checkPrintSummary();\n    }\n\n    // Логирование команды клиента\n  }, {\n    key: "logClientCommand",\n    value: function logClientCommand(direction, distance, force) {\n      if (!this.enabled) return;\n      var entry = {\n        timestamp: Date.now(),\n        eventType: \'client_command\',\n        direction: telemetry_objectSpread({}, direction),\n        distance: distance,\n        force: force ? telemetry_objectSpread({}, force) : null,\n        source: \'client\'\n      };\n      this.data.push(entry);\n      if (this.data.length > this.maxEntries) {\n        this.data.shift();\n      }\n      this.counters[\'client_commands\'] = (this.counters[\'client_commands\'] || 0) + 1;\n      this.checkPrintSummary();\n    }\n\n    // Логирование обновления с сервера\n  }, {\n    key: "logServerUpdate",\n    value: function logServerUpdate(objectId, position, velocity) {\n      var hasGarbageData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      if (!this.enabled) return;\n      var entry = {\n        timestamp: Date.now(),\n        objectId: objectId,\n        eventType: \'server_update\',\n        position: position ? telemetry_objectSpread({}, position) : null,\n        velocity: velocity ? telemetry_objectSpread({}, velocity) : null,\n        hasGarbageData: hasGarbageData,\n        source: \'server\'\n      };\n      this.data.push(entry);\n      if (this.data.length > this.maxEntries) {\n        this.data.shift();\n      }\n      var key = hasGarbageData ? \'server_updates_garbage\' : \'server_updates_valid\';\n      this.counters[key] = (this.counters[key] || 0) + 1;\n      this.checkPrintSummary();\n    }\n\n    // Проверка нужно ли печатать сводку\n  }, {\n    key: "checkPrintSummary",\n    value: function checkPrintSummary() {\n      var now = Date.now();\n      if (now - this.lastPrint >= this.printInterval) {\n        this.printSummary();\n        this.lastPrint = now;\n      }\n    }\n\n    // Печать сводки телеметрии\n  }, {\n    key: "printSummary",\n    value: function printSummary() {\n      if (!this.enabled) return;\n      if (this.verboseMode) {\n        // Подробный режим\n        // console.log(\'🔬 [ClientTelemetry] ===== КЛИЕНТСКАЯ ТЕЛЕМЕТРИЯ =====\');\n        // console.log(`📊 [ClientTelemetry] Всего записей: ${this.data.length}`);\n\n        // Статистика по счетчикам\n        // for (const [key, count] of Object.entries(this.counters)) {\n        //     console.log(`📈 [ClientTelemetry] ${key}: ${count}`);\n        // }\n\n        // Последние данные по игрокам\n        this.printRecentPlayerData();\n\n        // Анализ проблем\n        this.analyzeIssues();\n\n        // console.log(\'🔬 [ClientTelemetry] ===================================\');\n      } else {\n        // Краткий режим - только проблемы\n        this.printCompactSummary();\n      }\n\n      // Сброс счетчиков\n      this.counters = {};\n    }\n\n    // Краткая сводка (только проблемы)\n  }, {\n    key: "printCompactSummary",\n    value: function printCompactSummary() {\n      var recentTime = Date.now() - this.printInterval;\n      var recentData = this.data.filter(function (entry) {\n        return entry.timestamp > recentTime;\n      });\n\n      // Считаем только основные метрики\n      var corrections = recentData.filter(function (entry) {\n        return entry.eventType === \'correction\';\n      }).length;\n      var garbageUpdates = recentData.filter(function (entry) {\n        return entry.eventType === \'server_update\' && entry.hasGarbageData;\n      }).length;\n\n      // Показываем только если есть проблемы\n      if (corrections > 10 || garbageUpdates > 0) {\n        // console.warn(`🔬 [ClientTelemetry] Проблемы: коррекций ${corrections}, мусорных данных ${garbageUpdates}`);\n\n        // Анализ только серьезных проблем\n        this.analyzeIssues();\n      } else {\n        // Просто тихий индикатор что телеметрия работает\n        // console.log(`🔬 [ClientTelemetry] ОК (записей: ${this.data.length})`);\n      }\n    }\n\n    // Печать данных о последних состояниях игроков\n  }, {\n    key: "printRecentPlayerData",\n    value: function printRecentPlayerData() {\n      // Собираем последние данные по каждому игроку\n      var playerData = new Map();\n      for (var i = this.data.length - 1; i >= 0; i--) {\n        var entry = this.data[i];\n        if (entry.objectType === \'player\' && entry.position && !playerData.has(entry.objectId)) {\n          playerData.set(entry.objectId, entry);\n        }\n      }\n      var _iterator = _createForOfIteratorHelper(playerData),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            playerId = _step$value[0],\n            data = _step$value[1];\n          // Конвертируем timestamp в читаемое время\n          var timestamp = new Date(data.timestamp);\n          var timeStr = timestamp.toLocaleTimeString(\'ru-RU\', {\n            hour12: false,\n            hour: \'2-digit\',\n            minute: \'2-digit\',\n            second: \'2-digit\',\n            fractionalSecondDigits: 3\n          });\n\n          // console.log(`🎮 [ClientTelemetry] Игрок ${playerId} [${timeStr}]:`);\n          // console.log(`   📍 Позиция: (${data.position.x.toFixed(2)}, ${data.position.y.toFixed(2)}, ${data.position.z.toFixed(2)})`);\n\n          if (data.velocity) {\n            // console.log(`   🏃 Скорость: (${data.velocity.x.toFixed(2)}, ${data.velocity.y.toFixed(2)}, ${data.velocity.z.toFixed(2)}) |${data.speed.toFixed(2)}|`);\n          }\n          if (data.mass !== undefined) {\n            // console.log(`   ⚖️  Масса: ${data.mass.toFixed(2)} кг, Радиус: ${data.radius.toFixed(2)}`);\n          }\n\n          // console.log(`   🔧 Физика: ${data.physicsType}, Источник: ${data.source}`);\n          // console.log(`   ⏰ Временная метка: ${data.timestamp}`);\n\n          if (data.appliedImpulse) {\n            // console.log(`   💥 Импульс: (${data.appliedImpulse.x.toFixed(2)}, ${data.appliedImpulse.y.toFixed(2)}, ${data.appliedImpulse.z.toFixed(2)})`);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    // Анализ проблем\n  }, {\n    key: "analyzeIssues",\n    value: function analyzeIssues() {\n      var recentTime = Date.now() - this.printInterval;\n      var recentData = this.data.filter(function (entry) {\n        return entry.timestamp > recentTime;\n      });\n\n      // Анализ мусорных данных с сервера\n      var garbageUpdates = recentData.filter(function (entry) {\n        return entry.eventType === \'server_update\' && entry.hasGarbageData;\n      });\n      if (garbageUpdates.length > 0) {\n        // console.warn(`⚠️  [ClientTelemetry] Обнаружено ${garbageUpdates.length} мусорных обновлений с сервера`);\n      }\n\n      // Анализ коррекций\n      var corrections = recentData.filter(function (entry) {\n        return entry.eventType === \'correction\';\n      });\n      if (corrections.length > 0) {\n        var avgDistance = corrections.reduce(function (sum, c) {\n          return sum + c.distance;\n        }, 0) / corrections.length;\n        // console.warn(`🔧 [ClientTelemetry] ${corrections.length} коррекций, средняя дистанция: ${avgDistance.toFixed(2)}`);\n\n        // Показываем самые большие коррекции\n        var bigCorrections = corrections.filter(function (c) {\n          return c.distance > 5.0;\n        });\n        if (bigCorrections.length > 0) {\n          // console.warn(`🚨 [ClientTelemetry] ${bigCorrections.length} больших коррекций (>5.0 единиц)`);\n        }\n      }\n\n      // Анализ скорости обновлений\n      var serverUpdates = recentData.filter(function (entry) {\n        return entry.eventType === \'server_update\';\n      });\n      var clientCommands = recentData.filter(function (entry) {\n        return entry.eventType === \'client_command\';\n      });\n      if (serverUpdates.length > 100) {\n        // console.warn(`📈 [ClientTelemetry] Высокая частота серверных обновлений: ${serverUpdates.length}/2сек`);\n      }\n      if (clientCommands.length > 50) {\n        // console.warn(`📈 [ClientTelemetry] Высокая частота клиентских команд: ${clientCommands.length}/2сек`);\n      }\n\n      // Анализ временных расхождений\n      this.analyzeTimeDiscrepancies(recentData);\n    }\n\n    // Анализ временных расхождений между клиентом и сервером\n  }, {\n    key: "analyzeTimeDiscrepancies",\n    value: function analyzeTimeDiscrepancies(recentData) {\n      var clientStates = recentData.filter(function (entry) {\n        return entry.objectType === \'player\' && entry.source === \'client\';\n      });\n      var serverStates = recentData.filter(function (entry) {\n        return entry.objectType === \'player\' && entry.source === \'server\';\n      });\n      if (clientStates.length > 0 && serverStates.length > 0) {\n        // Сравниваем времена последних состояний\n        var latestClient = clientStates[clientStates.length - 1];\n        var latestServer = serverStates[serverStates.length - 1];\n        var timeDiff = Math.abs(latestClient.timestamp - latestServer.timestamp);\n        if (timeDiff > 1000) {// Больше 1 секунды расхождение\n          // console.warn(`⏰ [ClientTelemetry] Большое временное расхождение: ${timeDiff}мс`);\n        }\n\n        // Анализ расхождений позиций\n        if (latestClient.position && latestServer.position) {\n          var posDiff = Math.sqrt(Math.pow(latestClient.position.x - latestServer.position.x, 2) + Math.pow(latestClient.position.y - latestServer.position.y, 2) + Math.pow(latestClient.position.z - latestServer.position.z, 2));\n          if (posDiff > 2.0) {\n            // console.warn(`📍 [ClientTelemetry] Расхождение позиций клиент-сервер: ${posDiff.toFixed(2)} единиц`);\n            // console.log(`   Клиент: (${latestClient.position.x.toFixed(2)}, ${latestClient.position.y.toFixed(2)}, ${latestClient.position.z.toFixed(2)})`);\n            // console.log(`   Сервер: (${latestServer.position.x.toFixed(2)}, ${latestServer.position.y.toFixed(2)}, ${latestServer.position.z.toFixed(2)})`);\n          }\n        }\n      }\n    }\n\n    // Вычисление модуля скорости\n  }, {\n    key: "calculateSpeed",\n    value: function calculateSpeed(velocity) {\n      if (!velocity) return 0;\n      return Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z);\n    }\n\n    // Включение/выключение телеметрии\n  }, {\n    key: "setEnabled",\n    value: function setEnabled(enabled) {\n      this.enabled = enabled;\n      // console.log(`🔬 [ClientTelemetry] Телеметрия ${enabled ? \'включена\' : \'выключена\'}`);\n    }\n\n    // Включение/выключение подробного режима\n  }, {\n    key: "setVerboseMode",\n    value: function setVerboseMode(verbose) {\n      this.verboseMode = verbose;\n      // console.log(`🔬 [ClientTelemetry] ${verbose ? \'Подробный\' : \'Тихий\'} режим включен`);\n    }\n\n    // Очистка данных\n  }, {\n    key: "clear",\n    value: function clear() {\n      this.data = [];\n      this.counters = {};\n      this.lastStates.clear();\n      // console.log(\'🔬 [ClientTelemetry] Данные телеметрии очищены\');\n    }\n\n    // Экспорт данных в JSON\n  }, {\n    key: "exportJSON",\n    value: function exportJSON() {\n      return JSON.stringify(this.data, null, 2);\n    }\n\n    // Экспорт данных в формате совместимом с серверной телеметрией\n  }, {\n    key: "exportForComparison",\n    value: function exportForComparison() {\n      var compatibleData = this.data.map(function (entry) {\n        return {\n          timestamp: entry.timestamp,\n          object_id: entry.objectId,\n          object_type: entry.objectType,\n          physics_type: entry.physicsType,\n          position: entry.position,\n          velocity: entry.velocity,\n          mass: entry.mass,\n          radius: entry.radius,\n          speed: entry.speed,\n          applied_impulse: entry.appliedImpulse,\n          source: entry.source,\n          event_type: entry.eventType,\n          correction_type: entry.correctionType,\n          distance: entry.distance\n        };\n      });\n      return JSON.stringify(compatibleData, null, 2);\n    }\n\n    // Получение статистики\n  }, {\n    key: "getStats",\n    value: function getStats() {\n      var now = Date.now();\n      var last5sec = this.data.filter(function (entry) {\n        return now - entry.timestamp < 5000;\n      });\n      return {\n        totalEntries: this.data.length,\n        entriesLast5sec: last5sec.length,\n        counters: telemetry_objectSpread({}, this.counters),\n        enabled: this.enabled\n      };\n    }\n  }]);\n}();\n\n// Глобальный экземпляр телеметрии\nvar clientTelemetry = new ClientTelemetry();\n\n// Интеграция с визуальным интерфейсом\nvar telemetryUI = null;\n\n// Добавляем интеграцию с UI, если он доступен\nfunction integrateWithUI() {\n  if (window.telemetryUI && !telemetryUI) {\n    telemetryUI = window.telemetryUI;\n    // console.log(\'🖥️ [ClientTelemetry] Интеграция с визуальным интерфейсом включена\');\n  }\n}\n\n// Переопределяем методы логирования для интеграции с UI\nvar originalLogCorrection = clientTelemetry.logCorrection.bind(clientTelemetry);\nclientTelemetry.logCorrection = function (objectId, currentPos, targetPos, correctionType, distance) {\n  originalLogCorrection(objectId, currentPos, targetPos, correctionType, distance);\n  if (telemetryUI) {\n    telemetryUI.logCorrection(objectId, currentPos, targetPos, correctionType, distance);\n  }\n};\nvar originalLogServerUpdate = clientTelemetry.logServerUpdate.bind(clientTelemetry);\nclientTelemetry.logServerUpdate = function (objectId, position, velocity) {\n  var hasGarbageData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  originalLogServerUpdate(objectId, position, velocity, hasGarbageData);\n  if (telemetryUI) {\n    telemetryUI.logServerUpdate(objectId, position, velocity, hasGarbageData);\n  }\n};\nvar originalLogClientCommand = clientTelemetry.logClientCommand.bind(clientTelemetry);\nclientTelemetry.logClientCommand = function (direction, distance, force) {\n  originalLogClientCommand(direction, distance, force);\n  if (telemetryUI) {\n    telemetryUI.logClientCommand(direction, distance, force);\n  }\n};\nvar originalLogObjectState = clientTelemetry.logObjectState.bind(clientTelemetry);\nclientTelemetry.logObjectState = function (objectId, objectType, physicsType, position, velocity, mass, radius) {\n  var source = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : \'client\';\n  originalLogObjectState(objectId, objectType, physicsType, position, velocity, mass, radius, source);\n  if (telemetryUI) {\n    var speed = this.calculateSpeed(velocity);\n    telemetryUI.addDetailedEntry(\'object-state\', {\n      objectId: objectId,\n      objectType: objectType,\n      physicsType: physicsType,\n      position: position,\n      velocity: velocity,\n      mass: mass,\n      radius: radius,\n      speed: speed,\n      source: source\n    });\n  }\n};\nvar originalLogImpulse = clientTelemetry.logImpulse.bind(clientTelemetry);\nclientTelemetry.logImpulse = function (objectId, objectType, physicsType, position, velocity, mass, radius, impulse) {\n  var source = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : \'client\';\n  originalLogImpulse(objectId, objectType, physicsType, position, velocity, mass, radius, impulse, source);\n  if (telemetryUI) {\n    telemetryUI.addDetailedEntry(\'object-state\', {\n      objectId: objectId,\n      objectType: objectType,\n      physicsType: physicsType,\n      position: position,\n      velocity: velocity,\n      mass: mass,\n      radius: radius,\n      speed: this.calculateSpeed(velocity),\n      appliedImpulse: impulse,\n      source: source\n    });\n  }\n};\nvar originalPrintSummary = clientTelemetry.printSummary.bind(clientTelemetry);\nclientTelemetry.printSummary = function () {\n  originalPrintSummary();\n  if (telemetryUI) {\n    var stats = clientTelemetry.getStats();\n    telemetryUI.logSummary(stats);\n  }\n};\n\n// Пытаемся интегрироваться с UI при загрузке и через таймер\nsetTimeout(integrateWithUI, 100);\nsetInterval(function () {\n  if (!telemetryUI) integrateWithUI();\n}, 1000);\n\n// Консольные команды для удобства\nwindow.enableClientTelemetry = function () {\n  return clientTelemetry.setEnabled(true);\n};\nwindow.disableClientTelemetry = function () {\n  return clientTelemetry.setEnabled(false);\n};\nwindow.enableVerboseTelemetry = function () {\n  return clientTelemetry.setVerboseMode(true);\n};\nwindow.disableVerboseTelemetry = function () {\n  return clientTelemetry.setVerboseMode(false);\n};\nwindow.clearClientTelemetry = function () {\n  return clientTelemetry.clear();\n};\nwindow.exportClientTelemetry = function () {\n  // console.log(clientTelemetry.exportJSON());\n  return clientTelemetry.exportJSON();\n};\nwindow.clientTelemetryStats = function () {\n  // console.log(clientTelemetry.getStats());\n  return clientTelemetry.getStats();\n};\nwindow.exportClientTelemetryForComparison = function () {\n  // console.log(clientTelemetry.exportForComparison());\n  return clientTelemetry.exportForComparison();\n};\n;// ./src/gamepad.js\n\n\n\n\n\n // Импортируем систему глаз\n\n\n\n// Константы для настройки поведения\nvar DEBUG_MODE = true; // Включает/выключает отладочные элементы (arrowHelper)\nvar MIN_ARROW_LENGTH = 10;\nvar MAX_ARROW_LENGTH = 150;\nvar SEND_INTERVAL = 50; // Синхронизируем с серверным интервалом\nvar ARROW_HEIGHT_OFFSET = 2; // Смещение стрелки по высоте над игроком\nvar RAY_UPDATE_INTERVAL = 50; // Синхронизируем с серверным интервалом\nvar KEY_FORCE = 1.0; // Мягкая сила импульса для клавиатурного управления\nvar MIN_DEADZONE = 10.0; // Минимальная мертвая зона\nvar MAX_DEADZONE = 30.0; // Максимальная мертвая зона\n\nvar arrowHelper;\nvar lastSentPosition = new three_core/* Vector3 */.Pq0();\nvar lastSendTime = 0;\nvar raycaster = new three_core/* Raycaster */.tBo();\nvar mouse = new three_core/* Vector2 */.I9Y();\nvar cameraLastPosition = new three_core/* Vector3 */.Pq0();\nvar lastRayUpdateTime = 0;\nvar lastIntersectPoint = new three_core/* Vector3 */.Pq0();\nvar isMouseActive = true; // Флаг активности мыши над игровой областью (временно true для отладки)\n\n// Флаги для клавиатурного управления\nvar keys = {\n  w: false,\n  a: false,\n  s: false,\n  d: false\n};\n\n// Переменные для хранения направления\nvar currentDirection = new three_core/* Vector3 */.Pq0();\nvar directionNeedsUpdate = false;\nvar terrainMeshRef = null;\nvar playerMeshRef = null;\nvar cameraRef = null;\n\n// Добавляем переменные для дебаунса и времени\nvar lastLocalImpulseTime = 0;\nvar lastFrameTime = Date.now();\nvar LOCAL_IMPULSE_INTERVAL = 50; // Синхронизируем с серверным интервалом\nvar MIN_DISTANCE_TO_TARGET = 8; // Минимальное расстояние до цели для остановки\n\nfunction getArrowDirection() {\n  return lastSentPosition.clone();\n}\nfunction initGamepad(camera, terrainMesh, playerMesh, scene) {\n  // Убираем спам при инициализации\n\n  // Сохраняем ссылки на объекты для использования в других функциях\n  terrainMeshRef = terrainMesh;\n  playerMeshRef = playerMesh;\n  cameraRef = camera;\n  cameraLastPosition.copy(camera.position);\n\n  // Создаем и добавляем arrowHelper в сцену\n  arrowHelper = new three_core/* ArrowHelper */.E0M(new three_core/* Vector3 */.Pq0(0, 0, 1),\n  // Начальное направление\n  playerMesh.position,\n  // Начальная позиция\n  MIN_ARROW_LENGTH,\n  // Длина стрелки (начальная)\n  0xffff00 // Цвет стрелки\n  );\n\n  // Добавляем arrowHelper в сцену только если DEBUG_MODE включен\n  if (DEBUG_MODE) {\n    scene.add(arrowHelper);\n  }\n\n  // Добавляем обработчики событий мыши и клавиатуры\n  window.addEventListener(\'mousemove\', onMouseMove);\n  window.addEventListener(\'keydown\', onKeyDown);\n  window.addEventListener(\'keyup\', onKeyUp);\n\n  // Добавляем обработчики для отслеживания когда мышь покидает канвас\n  var canvas = document.querySelector(\'canvas\');\n  if (canvas) {\n    canvas.addEventListener(\'mouseenter\', onMouseEnter);\n    canvas.addEventListener(\'mouseleave\', onMouseLeave);\n\n    // Проверяем, находится ли мышь уже в канвасе при инициализации\n    var rect = canvas.getBoundingClientRect();\n    var mouseX = window.mouseX || window.innerWidth / 2;\n    var mouseY = window.mouseY || window.innerHeight / 2;\n    if (mouseX >= rect.left && mouseX <= rect.right && mouseY >= rect.top && mouseY <= rect.bottom) {\n      isMouseActive = true;\n    }\n  }\n\n  // Инициализируем начальное направление (центр экрана)\n  mouse.x = 0;\n  mouse.y = 0;\n  setTimeout(function () {\n    // Даем время для инициализации всех объектов\n    if (cameraRef && terrainMeshRef && playerMeshRef) {\n      castRayAndUpdateDirection();\n    }\n  }, 100);\n\n  // Запускаем анимацию для обновления стрелки и обработки клавиатурного ввода\n  animate();\n  function animate() {\n    requestAnimationFrame(animate);\n\n    // Обновляем стрелку если нужно и если она видима\n    if (directionNeedsUpdate && DEBUG_MODE) {\n      updateArrowHelper(playerMesh);\n      directionNeedsUpdate = false;\n    }\n\n    // Проверяем, двигалась ли камера и нужно ли обновить луч\n    var now = Date.now();\n    if (isMouseActive && cameraRef && now - lastRayUpdateTime > RAY_UPDATE_INTERVAL) {\n      // Если камера движется и мышь активна над игровой областью\n      if (!cameraRef.position.equals(cameraLastPosition)) {\n        // Обновляем луч с последних координат мыши\n        updateRayFromLastMouse();\n        cameraLastPosition.copy(cameraRef.position);\n        lastRayUpdateTime = now;\n      }\n    }\n\n    // Обрабатываем локальную физику для мышиного управления (клавиатурное управление пока не используется)\n    processLocalPhysics();\n  }\n  function processKeyboardInput() {\n    if (!playerMeshRef) return;\n\n    // Обрабатываем локальную физику даже без сервера\n    processLocalPhysics();\n\n    // Проверяем состояние сетевого соединения только для отправки команд\n    if (getConnectionState() !== \'connected\') {\n      return; // Убираем предупреждение - это нормально для локальной физики\n    }\n\n    // Проверяем, если хотя бы одна клавиша нажата\n    if (keys.w || keys.a || keys.s || keys.d) {\n      // Создаем вектор направления на основе нажатых клавиш\n      var direction = new three_core/* Vector3 */.Pq0(0, 0, 0);\n      if (keys.w) direction.z -= 1;\n      if (keys.s) direction.z += 1;\n      if (keys.a) direction.x -= 1;\n      if (keys.d) direction.x += 1;\n\n      // Нормализуем направление, если оно не нулевое\n      if (direction.length() > 0) {\n        direction.normalize();\n\n        // Экспортируем направление в глобальную переменную для глаз\n        window.gamepadDirection = direction.clone();\n\n        // Отправляем направление на сервер\n        if (Date.now() - lastSendTime > SEND_INTERVAL) {\n          // Получаем текущую конфигурацию физики\n          var physicsConfig = getPhysicsConfig();\n\n          // Используем множитель импульса из конфигурации, если она доступна\n          var keyForce = KEY_FORCE;\n          if (physicsConfig && physicsConfig.impulse_multiplier) {\n            keyForce = physicsConfig.base_impulse; // Увеличиваем в 8 раз базовый импульс\n          } else {\n            keyForce = KEY_FORCE; // Или увеличиваем в 4 раза значение по умолчанию\n          }\n\n          // Отправляем импульс на сервер напрямую\n          sendDirectionToServer(direction, keyForce);\n          lastSendTime = Date.now();\n\n          // Показываем направление движения глазами\n          showDirectionOnSphere(direction);\n\n          // Обновляем lastSentPosition для отображения стрелки\n          lastSentPosition.copy(direction);\n          lastSentPosition.userData = {\n            distance: keyForce\n          };\n          directionNeedsUpdate = true;\n        }\n      }\n    } else {\n      // Возвращаем глаза в нормальное состояние, когда нет движения\n      showNormalOnSphere();\n    }\n  }\n\n  // Обработка локальной физики (только когда сервер отключен)\n  function processLocalPhysics() {\n    // Применяем локальную физику только если сервер отключен\n    if (getConnectionState() === \'connected\') {\n      return; // Сервер подключен - используем серверную физику\n    }\n    var currentTime = Date.now();\n    var deltaTime = (currentTime - lastFrameTime) / 1000.0; // В секундах\n    lastFrameTime = currentTime;\n\n    // Получаем ID объекта игрока\n    var playerObjectID = gamestatemanager.getPlayerObjectID();\n    if (!playerObjectID || !playerMeshRef) return;\n\n    // Проверяем расстояние до цели - если мышь близко к сфере, останавливаем движение\n    var shouldMove = false;\n    if (lastIntersectPoint && lastSentPosition && lastSentPosition.userData) {\n      var distanceToTarget = playerMeshRef.position.distanceTo(lastIntersectPoint);\n\n      // Двигаемся только если цель достаточно далеко\n      if (distanceToTarget > MIN_DISTANCE_TO_TARGET) {\n        shouldMove = true;\n      }\n    }\n\n    // Если нужно двигаться, применяем непрерывные импульсы\n    if (shouldMove && lastSentPosition && lastSentPosition.userData && lastSentPosition.userData.distance > 0) {\n      var timeSinceLastImpulse = currentTime - lastLocalImpulseTime;\n\n      // Применяем импульсы с интервалом как на сервере\n      if (timeSinceLastImpulse >= LOCAL_IMPULSE_INTERVAL) {\n        try {\n          // Используем силу как импульс - НЕ умножаем на deltaTime!\n          // Импульс - это мгновенное изменение скорости, а не сила во времени\n          var baseForce = Math.min(lastSentPosition.userData.distance * 0.5, 20); // Увеличенная сила\n\n          // Применяем импульс напрямую без deltaTime\n          var force = {\n            x: lastSentPosition.x * baseForce,\n            y: lastSentPosition.y * baseForce,\n            z: lastSentPosition.z * baseForce\n          };\n\n          // Логируем в диагностику вместо консоли\n          diagnostics.logLocalImpulse(playerObjectID, force, lastSentPosition.userData.distance);\n          applyImpulseToSphere(playerObjectID, force);\n          lastLocalImpulseTime = currentTime;\n        } catch (error) {\n          console.error(\'[Gamepad] Ошибка применения локального импульса:\', error);\n        }\n      }\n    }\n  }\n  function onKeyDown(event) {\n    // Обновляем состояние клавиш\n    switch (event.key.toLowerCase()) {\n      case \'w\':\n        keys.w = true;\n        break;\n      case \'a\':\n        keys.a = true;\n        break;\n      case \'s\':\n        keys.s = true;\n        break;\n      case \'d\':\n        keys.d = true;\n        break;\n    }\n  }\n  function onKeyUp(event) {\n    // Обновляем состояние клавиш\n    switch (event.key.toLowerCase()) {\n      case \'w\':\n        keys.w = false;\n        break;\n      case \'a\':\n        keys.a = false;\n        break;\n      case \'s\':\n        keys.s = false;\n        break;\n      case \'d\':\n        keys.d = false;\n        break;\n    }\n  }\n  function onMouseMove(event) {\n    // Сохраняем глобальные координаты мыши\n    window.mouseX = event.clientX;\n    window.mouseY = event.clientY;\n\n    // Обновляем координаты мыши для Three.js\n    mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n    // Устанавливаем флаг активности мыши\n    isMouseActive = true;\n\n    // Вызываем функцию обновления направления\n    castRayAndUpdateDirection();\n  }\n  function onMouseEnter(event) {\n    // Мышь вошла в область канваса\n    isMouseActive = true;\n  }\n  function onMouseLeave(event) {\n    // Мышь покинула область канваса\n    isMouseActive = false;\n    // НЕ останавливаем движение - сфера продолжает стремиться к последней цели\n  }\n  function updateRayFromLastMouse() {\n    // Обновляем луч с текущими координатами мыши и новой позицией камеры\n    castRayAndUpdateDirection();\n  }\n  function castRayAndUpdateDirection() {\n    if (!cameraRef || !terrainMeshRef || !playerMeshRef) return;\n\n    // Обрабатываем направление всегда, когда есть валидные координаты мыши\n\n    // Устанавливаем луч от камеры через координаты мыши\n    raycaster.setFromCamera(mouse, cameraRef);\n\n    // Находим пересечения с террейном\n    var intersects = raycaster.intersectObjects([terrainMeshRef]);\n    if (intersects.length > 0) {\n      var targetPosition = intersects[0].point;\n      lastIntersectPoint.copy(targetPosition);\n\n      // Вычисляем направление в 3D пространстве (с учетом оси Y)\n      currentDirection.set(targetPosition.x - playerMeshRef.position.x, targetPosition.y - playerMeshRef.position.y,\n      // Учитываем высоту\n      targetPosition.z - playerMeshRef.position.z);\n\n      // Сохраняем длину до нормализации (расстояние от игрока до точки пересечения)\n      var distance = currentDirection.length();\n\n      // Нормализуем для получения направления\n      currentDirection.normalize();\n\n      // Экспортируем направление в глобальную переменную для глаз\n      window.gamepadDirection = currentDirection.clone();\n\n      // Запоминаем направление и расстояние\n      lastSentPosition.copy(currentDirection);\n\n      // Сохраняем исходное расстояние для использования в updateArrowHelper\n      lastSentPosition.userData = {\n        distance: distance\n      };\n\n      // Помечаем, что направление нужно обновить\n      directionNeedsUpdate = true;\n\n      // Проверяем, нужно ли отправлять данные на сервер\n      if (Date.now() - lastSendTime > SEND_INTERVAL) {\n        sendDirectionToServer(currentDirection, distance);\n        lastSendTime = Date.now();\n      }\n    }\n  }\n  function sendDirectionToServer(direction, distance) {\n    // Проверяем состояние соединения\n    var useServerPhysics = getConnectionState() === \'connected\';\n\n    // Получаем ID объекта игрока  \n    var playerObjectID = gamestatemanager.getPlayerObjectID();\n\n    // Логируем команды в диагностику\n    if (playerObjectID) {\n      diagnostics.logClientCommand(direction, distance, playerObjectID);\n\n      // Логируем в новую телеметрию (только в подробном режиме)\n      if (clientTelemetry.verboseMode) {\n        clientTelemetry.logClientCommand(direction, distance, force);\n      }\n    }\n\n    // Получаем конфигурацию физики\n    var physicsConfig = getPhysicsConfig();\n    if (!physicsConfig) {\n      console.error(\'[Gamepad] Конфигурация физики не инициализирована\');\n      return;\n    }\n    if (!playerObjectID) {\n      // Убираем спам - игрок просто еще не подключился\n      return;\n    }\n\n    // Вычисляем адаптивную мертвую зону\n    // Для радиусов сфер 2-20 единиц используем мертвую зону от 5 до 25 единиц\n    var estimatedRadius = Math.min(20, Math.max(2, distance / 10)); // Оценка радиуса по расстоянию\n    var adaptiveDeadzone = Math.min(MAX_DEADZONE, Math.max(MIN_DEADZONE, estimatedRadius * 1.5));\n\n    // Если расстояние меньше адаптивной мертвой зоны, не отправляем команду\n    if (distance < adaptiveDeadzone) {\n      return;\n    }\n\n    // Для мышиного управления ограничиваем силу импульса для более плавного управления\n    var enhancedDistance = Math.min(distance, 30);\n\n    // Вычисляем силу импульса\n    var force = {\n      x: direction.x * enhancedDistance,\n      y: direction.y * enhancedDistance,\n      z: direction.z * enhancedDistance\n    };\n\n    // Отправляем команду на сервер через новую сетевую систему\n    if (useServerPhysics) {\n      try {\n        sendCommand(\'MOUSE_VECTOR\', {\n          x: direction.x,\n          y: direction.y,\n          z: direction.z,\n          distance: enhancedDistance,\n          object_id: playerObjectID // Используем динамический player ID\n        });\n      } catch (error) {\n        console.error(\'[Gamepad] Ошибка отправки команды на сервер:\', error);\n      }\n    }\n\n    // Локальная физика обрабатывается отдельно в processLocalPhysics()\n  }\n}\n\n// Функция для включения/выключения отображения arrowHelper\nfunction setDebugMode(enabled) {\n  if (arrowHelper) {\n    arrowHelper.visible = enabled;\n  }\n}\n\n// Функция для получения текущего статуса отладочного режима\nfunction getDebugMode() {\n  return DEBUG_MODE;\n}\n\n// Обновляем позицию и направление arrowHelper\nfunction updateArrowHelper(playerMesh) {\n  if (arrowHelper) {\n    // Позиция стрелки с учетом смещения по высоте\n    var arrowPosition = new three_core/* Vector3 */.Pq0(playerMesh.position.x, playerMesh.position.y + ARROW_HEIGHT_OFFSET,\n    // Поднимаем стрелку над игроком\n    playerMesh.position.z);\n\n    // Обновляем позицию стрелки\n    arrowHelper.position.copy(arrowPosition);\n\n    // Устанавливаем направление стрелки (теперь с учетом оси Y)\n    arrowHelper.setDirection(lastSentPosition);\n\n    // Используем сохраненное расстояние до точки пересечения\n    var distance = lastSentPosition.userData ? lastSentPosition.userData.distance : MIN_ARROW_LENGTH;\n\n    // Ограничиваем длину стрелки, чтобы она не была слишком большой или маленькой\n    var arrowLength = Math.min(MAX_ARROW_LENGTH, Math.max(MIN_ARROW_LENGTH, distance));\n\n    // Устанавливаем длину стрелки пропорционально расстоянию\n    arrowHelper.setLength(arrowLength);\n  }\n}\n\n// Экспортируем функции для использования в других модулях\n\n\n// Экспортируем функции для получения данных о луче мыши\nfunction getCurrentDirection() {\n  return currentDirection.clone();\n}\nfunction getLastIntersectPoint() {\n  return lastIntersectPoint.clone();\n}\nfunction isMouseActiveInCanvas() {\n  return isMouseActive;\n}\n;// ./src/gamestatemanager.js\nfunction gamestatemanager_typeof(o) { "@babel/helpers - typeof"; return gamestatemanager_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, gamestatemanager_typeof(o); }\nfunction gamestatemanager_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction gamestatemanager_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, gamestatemanager_toPropertyKey(o.key), o); } }\nfunction gamestatemanager_createClass(e, r, t) { return r && gamestatemanager_defineProperties(e.prototype, r), t && gamestatemanager_defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction gamestatemanager_toPropertyKey(t) { var i = gamestatemanager_toPrimitive(t, "string"); return "symbol" == gamestatemanager_typeof(i) ? i : i + ""; }\nfunction gamestatemanager_toPrimitive(t, r) { if ("object" != gamestatemanager_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != gamestatemanager_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && ("object" == gamestatemanager_typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\n// gamestatemanager.js\n\n\n\n\n\nvar GameStateManager = /*#__PURE__*/function (_EventEmitter) {\n  function GameStateManager() {\n    var _this;\n    gamestatemanager_classCallCheck(this, GameStateManager);\n    _this = _callSuper(this, GameStateManager);\n    _this.terrainMeshCreated = false;\n    _this.playerMeshCreated = false;\n    _this.terrainMesh = null;\n    _this.playerMesh = null;\n    _this.scene = scene_scene;\n    _this.playerID = null; // Динамический ID игрока, получаемый от сервера\n    _this.playerObjectID = null; // ID объекта игрока в мире\n    _this.isPlayerIDReceived = false; // Флаг получения ID от сервера\n    return _this;\n  }\n  _inherits(GameStateManager, _EventEmitter);\n  return gamestatemanager_createClass(GameStateManager, [{\n    key: "setTerrainMesh",\n    value: function setTerrainMesh(mesh) {\n      console.log("[GameStateManager] Установлен terrain mesh");\n      this.terrainMesh = mesh;\n      this.terrainMeshCreated = true;\n      this.checkGameState();\n    }\n  }, {\n    key: "setPlayerMesh",\n    value: function setPlayerMesh(mesh) {\n      console.log("[GameStateManager] Установлен player mesh");\n      this.playerMesh = mesh;\n      this.playerMeshCreated = true;\n      this.checkGameState();\n    }\n  }, {\n    key: "checkGameState",\n    value: function checkGameState() {\n      console.log("[GameStateManager] \\u041F\\u0440\\u043E\\u0432\\u0435\\u0440\\u043A\\u0430 \\u0441\\u043E\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u044F: terrain=".concat(this.terrainMeshCreated, ", player=").concat(this.playerMeshCreated));\n      if (this.terrainMeshCreated && this.playerMeshCreated) {\n        console.log("[GameStateManager] Инициализация gamepad...");\n        initGamepad(camera, this.terrainMesh, this.playerMesh, this.scene);\n        this.emit(\'gameInitialized\');\n        console.warn("[Game State Manager] game initialized!!!");\n      } else {\n        console.log("[GameStateManager] Ожидание создания объектов...");\n      }\n    }\n\n    // Устанавливает player ID, полученный от сервера\n  }, {\n    key: "setPlayerID",\n    value: function setPlayerID(playerID, objectID) {\n      this.playerID = playerID;\n      this.playerObjectID = objectID;\n      this.isPlayerIDReceived = true;\n      console.log("[GameStateManager] \\u0423\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D player ID: ".concat(playerID, ", object ID: ").concat(objectID));\n    }\n\n    // Возвращает ID объекта игрока для отправки команд\n  }, {\n    key: "getPlayerObjectID",\n    value: function getPlayerObjectID() {\n      return this.playerObjectID;\n    }\n\n    // Возвращает player ID\n  }, {\n    key: "getPlayerID",\n    value: function getPlayerID() {\n      return this.playerID;\n    }\n\n    // Проверяет, получен ли player ID от сервера\n  }, {\n    key: "isPlayerReady",\n    value: function isPlayerReady() {\n      return this.isPlayerIDReceived && this.playerObjectID !== null;\n    }\n\n    // Сбрасывает состояние при отключении\n  }, {\n    key: "reset",\n    value: function reset() {\n      this.playerMesh = null;\n      this.playerID = null;\n      this.playerObjectID = null;\n      this.isPlayerIDReceived = false;\n      console.log(\'[GameStateManager] Состояние сброшено\');\n    }\n\n    // Инициализация со сценой\n  }, {\n    key: "init",\n    value: function init(scene) {\n      this.scene = scene;\n    }\n  }]);\n}(events.EventEmitter); // Создаем singleton экземпляр\nvar gamestatemanager_gameStateManager = new GameStateManager();\nfunction initGameStateManager(scene) {\n  gamestatemanager_gameStateManager.init(scene);\n}\n\n// Экспортируем singleton по умолчанию\n/* harmony default export */ const gamestatemanager = (gamestatemanager_gameStateManager);\n\n;// ./src/physics.js\nfunction physics_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ physics_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == physics_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(physics_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction physics_slicedToArray(r, e) { return physics_arrayWithHoles(r) || physics_iterableToArrayLimit(r, e) || physics_unsupportedIterableToArray(r, e) || physics_nonIterableRest(); }\nfunction physics_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction physics_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction physics_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction physics_createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = physics_unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }\nfunction physics_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return physics_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? physics_arrayLikeToArray(r, a) : void 0; } }\nfunction physics_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction physics_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction physics_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { physics_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { physics_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction physics_typeof(o) { "@babel/helpers - typeof"; return physics_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, physics_typeof(o); }\nfunction physics_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction physics_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? physics_ownKeys(Object(t), !0).forEach(function (r) { physics_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : physics_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction physics_defineProperty(e, r, t) { return (r = physics_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction physics_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction physics_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, physics_toPropertyKey(o.key), o); } }\nfunction physics_createClass(e, r, t) { return r && physics_defineProperties(e.prototype, r), t && physics_defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction physics_toPropertyKey(t) { var i = physics_toPrimitive(t, "string"); return "symbol" == physics_typeof(i) ? i : i + ""; }\nfunction physics_toPrimitive(t, r) { if ("object" != physics_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != physics_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\n// physics.js - Новая система физики с предсказанием и временными метками\n\n\n\n\n\n// Константы для новой системы физики\nvar PHYSICS_CONFIG = {\n  // Временные настройки\n  TIME: {\n    PREDICTION_WINDOW: 200,\n    // Окно предсказания в мс\n    MAX_EXTRAPOLATION: 500,\n    // Максимальное время экстраполяции в мс\n    SERVER_UPDATE_INTERVAL: 50,\n    // Ожидаемый интервал обновлений сервера в мс\n    TIMESTAMP_TOLERANCE: 1000 // Допустимое расхождение временных меток в мс\n  },\n  // Настройки коррекции\n  CORRECTION: {\n    POSITION_THRESHOLD: 4.0,\n    // Минимальное расстояние для коррекции\n    VELOCITY_THRESHOLD: 5.0,\n    // Минимальная разница скорости для коррекции\n    HARD_CORRECTION_THRESHOLD: 40.0,\n    // Порог для жесткой коррекции\n    TELEPORT_THRESHOLD: 120.0,\n    // Порог для телепортации (значительно увеличен)\n    SMOOTH_FACTOR: 0.3,\n    // Фактор плавности коррекции (0-1)\n    HARD_CORRECTION_FACTOR: 0.6,\n    // Фактор жесткой коррекции\n    MAX_CORRECTION_SPEED: 60.0 // Максимальная скорость коррекции\n  },\n  // Настройки визуальной коррекции mesh\'а\n  VISUAL: {\n    ATTRACTION_STRENGTH: 8.0,\n    // Сила притягивания mesh\'а к физическому телу\n    MAX_VISUAL_DISTANCE: 20.0,\n    // Максимальное расстояние между mesh и телом\n    DAMPING_FACTOR: 0.85,\n    // Затухание движения mesh\'а\n    MIN_MOVEMENT_THRESHOLD: 0.1 // Минимальный порог движения\n  },\n  // Адаптивные настройки под сетевые условия\n  NETWORK: {\n    GOOD_PING_THRESHOLD: 50,\n    // Хороший пинг в мс\n    BAD_PING_THRESHOLD: 200,\n    // Плохой пинг в мс\n    JITTER_THRESHOLD: 30,\n    // Порог джиттера в мс\n    PACKET_LOSS_THRESHOLD: 0.05 // Порог потери пакетов (5%)\n  }\n};\n\n// Глобальные переменные\nvar physicsWorld = null;\nvar serverTimeOffset = 0;\nvar networkStats = {\n  ping: 0,\n  jitter: 0,\n  packetLoss: 0,\n  lastUpdateTime: 0,\n  updateCount: 0,\n  missedUpdates: 0\n};\n\n// Буферы для каждого объекта\nvar objectBuffers = new Map(); // id -> ObjectBuffer\n\n// Класс для хранения данных объекта\nvar ObjectBuffer = /*#__PURE__*/function () {\n  function ObjectBuffer(objectId) {\n    physics_classCallCheck(this, ObjectBuffer);\n    this.id = objectId;\n    this.serverUpdates = []; // Массив серверных обновлений с временными метками\n    this.predictedState = null; // Предсказанное состояние\n    this.visualState = null; // Визуальное состояние mesh\'а\n    this.lastCorrectionTime = 0; // Время последней коррекции\n    this.correctionVelocity = {\n      x: 0,\n      y: 0,\n      z: 0\n    }; // Скорость коррекции mesh\'а\n    this.maxBufferSize = 10; // Максимальный размер буфера\n  }\n\n  // Добавить серверное обновление\n  return physics_createClass(ObjectBuffer, [{\n    key: "addServerUpdate",\n    value: function addServerUpdate(position, velocity, timestamp, serverTime) {\n      var update = {\n        position: physics_objectSpread({}, position),\n        velocity: velocity ? physics_objectSpread({}, velocity) : {\n          x: 0,\n          y: 0,\n          z: 0\n        },\n        timestamp: timestamp,\n        serverTime: serverTime,\n        receivedAt: Date.now()\n      };\n      this.serverUpdates.push(update);\n\n      // Сортируем по времени сервера\n      this.serverUpdates.sort(function (a, b) {\n        return a.serverTime - b.serverTime;\n      });\n\n      // Ограничиваем размер буфера\n      if (this.serverUpdates.length > this.maxBufferSize) {\n        this.serverUpdates.shift();\n      }\n    }\n\n    // Получить интерполированное состояние на определенное время\n  }, {\n    key: "getInterpolatedState",\n    value: function getInterpolatedState(targetTime) {\n      if (this.serverUpdates.length === 0) return null;\n      if (this.serverUpdates.length === 1) return this.serverUpdates[0];\n\n      // Найти два ближайших обновления\n      var before = null,\n        after = null;\n      for (var i = 0; i < this.serverUpdates.length - 1; i++) {\n        if (this.serverUpdates[i].serverTime <= targetTime && this.serverUpdates[i + 1].serverTime >= targetTime) {\n          before = this.serverUpdates[i];\n          after = this.serverUpdates[i + 1];\n          break;\n        }\n      }\n\n      // Если не нашли подходящий интервал, используем экстраполяцию\n      if (!before || !after) {\n        var latest = this.serverUpdates[this.serverUpdates.length - 1];\n        var deltaTime = (targetTime - latest.serverTime) / 1000.0;\n\n        // Ограничиваем экстраполяцию\n        if (Math.abs(deltaTime) > PHYSICS_CONFIG.TIME.MAX_EXTRAPOLATION / 1000.0) {\n          return latest;\n        }\n        return this.extrapolateState(latest, deltaTime);\n      }\n\n      // Интерполяция между двумя точками\n      var timeDiff = after.serverTime - before.serverTime;\n      if (timeDiff === 0) return before;\n      var t = (targetTime - before.serverTime) / timeDiff;\n      return this.interpolateStates(before, after, t);\n    }\n\n    // Экстраполяция состояния\n  }, {\n    key: "extrapolateState",\n    value: function extrapolateState(state, deltaTime) {\n      return {\n        position: {\n          x: state.position.x + state.velocity.x * deltaTime,\n          y: state.position.y + state.velocity.y * deltaTime,\n          z: state.position.z + state.velocity.z * deltaTime\n        },\n        velocity: physics_objectSpread({}, state.velocity),\n        timestamp: state.timestamp + deltaTime * 1000,\n        serverTime: state.serverTime + deltaTime * 1000\n      };\n    }\n\n    // Интерполяция между двумя состояниями\n  }, {\n    key: "interpolateStates",\n    value: function interpolateStates(state1, state2, t) {\n      t = Math.max(0, Math.min(1, t)); // Ограничиваем t от 0 до 1\n\n      return {\n        position: {\n          x: state1.position.x + (state2.position.x - state1.position.x) * t,\n          y: state1.position.y + (state2.position.y - state1.position.y) * t,\n          z: state1.position.z + (state2.position.z - state1.position.z) * t\n        },\n        velocity: {\n          x: state1.velocity.x + (state2.velocity.x - state1.velocity.x) * t,\n          y: state1.velocity.y + (state2.velocity.y - state1.velocity.y) * t,\n          z: state1.velocity.z + (state2.velocity.z - state1.velocity.z) * t\n        },\n        timestamp: state1.timestamp + (state2.timestamp - state1.timestamp) * t,\n        serverTime: state1.serverTime + (state2.serverTime - state1.serverTime) * t\n      };\n    }\n\n    // Очистить старые обновления\n  }, {\n    key: "cleanOldUpdates",\n    value: function cleanOldUpdates(currentTime) {\n      var cutoffTime = currentTime - PHYSICS_CONFIG.TIME.PREDICTION_WINDOW * 2;\n      this.serverUpdates = this.serverUpdates.filter(function (update) {\n        return update.serverTime > cutoffTime;\n      });\n    }\n  }]);\n}(); // Инициализация новой системы физики\nfunction initAmmo() {\n  return _initAmmo.apply(this, arguments);\n}\n\n// Получить текущее серверное время с учетом смещения\nfunction _initAmmo() {\n  _initAmmo = physics_asyncToGenerator(/*#__PURE__*/physics_regeneratorRuntime().mark(function _callee() {\n    var collisionConfiguration, dispatcher, overlappingPairCache, solver;\n    return physics_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (window.Ammo) {\n            _context.next = 3;\n            break;\n          }\n          console.error("[Physics] Ammo.js не инициализирован");\n          return _context.abrupt("return", false);\n        case 3:\n          // Создаем физический мир\n          collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();\n          dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration);\n          overlappingPairCache = new Ammo.btDbvtBroadphase();\n          solver = new Ammo.btSequentialImpulseConstraintSolver();\n          physicsWorld = new Ammo.btDiscreteDynamicsWorld(dispatcher, overlappingPairCache, solver, collisionConfiguration);\n\n          // Устанавливаем гравитацию\n          physicsWorld.setGravity(new Ammo.btVector3(0, -9.81, 0));\n          return _context.abrupt("return", true);\n        case 10:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _initAmmo.apply(this, arguments);\n}\nfunction getEstimatedServerTime() {\n  return Date.now() + serverTimeOffset;\n}\n\n// Обновить смещение серверного времени\nfunction updateServerTimeOffset(serverTime) {\n  var clientTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Date.now();\n  var newOffset = serverTime - clientTime;\n\n  // Плавно обновляем смещение чтобы избежать резких скачков\n  if (serverTimeOffset === 0) {\n    serverTimeOffset = newOffset;\n  } else {\n    serverTimeOffset = serverTimeOffset * 0.9 + newOffset * 0.1;\n  }\n\n  // Убираем спам логов смещения времени\n}\n\n// Обработка обновления объекта с сервера\nfunction receiveObjectUpdate(data) {\n  var _data$position, _data$position2, _data$position3;\n  if (!data || !data.id) {\n    console.warn("[Physics] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat((data === null || data === void 0 ? void 0 : data.id) || \'undefined\', " - \\u043D\\u0435\\u043A\\u043E\\u0440\\u0440\\u0435\\u043A\\u0442\\u043D\\u044B\\u0435 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435"));\n    return;\n  }\n  var obj = objects_objects[data.id];\n  if (!obj) {\n    console.warn("[Physics] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, " \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D \\u0432 \\u043A\\u043E\\u043B\\u043B\\u0435\\u043A\\u0446\\u0438\\u0438"));\n    return;\n  }\n\n  // Получаем или создаем буфер для объекта\n  var buffer = objectBuffers.get(data.id);\n  if (!buffer) {\n    buffer = new ObjectBuffer(data.id);\n    objectBuffers.set(data.id, buffer);\n  }\n\n  // Данные о позиции в едином формате: position: { x, y, z }\n  var position = {\n    x: ((_data$position = data.position) === null || _data$position === void 0 ? void 0 : _data$position.x) || 0,\n    y: ((_data$position2 = data.position) === null || _data$position2 === void 0 ? void 0 : _data$position2.y) || 0,\n    z: ((_data$position3 = data.position) === null || _data$position3 === void 0 ? void 0 : _data$position3.z) || 0\n  };\n\n  // Фильтруем некорректные данные - если все координаты нулевые, игнорируем\n  var hasGarbageData = position.x === 0 && position.y === 0 && position.z === 0;\n  if (hasGarbageData) {\n    // Логируем мусорные данные в телеметрию\n    clientTelemetry.logServerUpdate(data.id, position, velocity, true);\n    // Игнорируем мусорные данные с нулевыми позициями\n    return;\n  }\n\n  // Адаптируем данные о скорости\n  var velocity = data.velocity || {\n    x: 0,\n    y: 0,\n    z: 0\n  };\n  var serverTime = data.server_time || getEstimatedServerTime();\n  var timestamp = data.timestamp || Date.now();\n  buffer.addServerUpdate(position, velocity, timestamp, serverTime);\n\n  // Логируем серверное обновление в диагностику\n  diagnostics.logServerUpdate(data.id, position, velocity, serverTime);\n\n  // Логируем валидное серверное обновление в телеметрию (только если включен подробный режим)\n  if (clientTelemetry.verboseMode) {\n    clientTelemetry.logServerUpdate(data.id, position, velocity, false);\n  }\n\n  // Обновляем статистику сети\n  updateNetworkStats();\n\n  // Применяем обновление в зависимости от типа физики\n  switch (obj.physicsBy) {\n    case \'both\':\n      handleBothPhysicsUpdate(obj, buffer);\n      break;\n    case \'bullet\':\n      handleBulletPhysicsUpdate(obj, buffer);\n      break;\n    case \'ammo\':\n      handleAmmoPhysicsUpdate(obj, buffer);\n      break;\n    default:\n      console.warn("[Physics] \\u041D\\u0435\\u0438\\u0437\\u0432\\u0435\\u0441\\u0442\\u043D\\u044B\\u0439 \\u0442\\u0438\\u043F \\u0444\\u0438\\u0437\\u0438\\u043A\\u0438: ".concat(obj.physicsBy));\n  }\n}\n\n// Обработка гибридной физики (both)\nfunction handleBothPhysicsUpdate(obj, buffer) {\n  if (!obj.body) return;\n  var currentTime = getEstimatedServerTime();\n  var renderTime = currentTime + PHYSICS_CONFIG.TIME.PREDICTION_WINDOW;\n\n  // Получаем предсказанное состояние на момент отрисовки\n  var predictedState = buffer.getInterpolatedState(renderTime);\n  if (!predictedState) return;\n\n  // Получаем текущее положение физического тела\n  var transform = obj.body.getWorldTransform();\n  var currentPos = transform.getOrigin();\n\n  // Вычисляем расстояние между предсказанной и текущей позицией\n  var distance = Math.sqrt(Math.pow(predictedState.position.x - currentPos.x(), 2) + Math.pow(predictedState.position.y - currentPos.y(), 2) + Math.pow(predictedState.position.z - currentPos.z(), 2));\n\n  // Трехуровневая система коррекции\n  if (distance > PHYSICS_CONFIG.CORRECTION.TELEPORT_THRESHOLD) {\n    // Уровень 3: Телепортация при очень больших расхождениях\n    diagnostics.logTeleport(buffer.id, {\n      x: currentPos.x(),\n      y: currentPos.y(),\n      z: currentPos.z()\n    }, predictedState.position, \'distance_threshold\');\n\n    // Логируем телепортацию в телеметрию (всегда - это критическая ошибка)\n    clientTelemetry.logCorrection(buffer.id, {\n      x: currentPos.x(),\n      y: currentPos.y(),\n      z: currentPos.z()\n    }, predictedState.position, \'teleport\', distance);\n    teleportPhysicsBody(obj.body, predictedState.position, predictedState.velocity);\n  } else if (distance > PHYSICS_CONFIG.CORRECTION.HARD_CORRECTION_THRESHOLD) {\n    // Уровень 2: Жесткая коррекция при средних расхождениях\n    diagnostics.logCorrection(buffer.id, {\n      x: currentPos.x(),\n      y: currentPos.y(),\n      z: currentPos.z()\n    }, predictedState.position, distance, \'hard\');\n\n    // Логируем жесткую коррекцию в телеметрию (всегда - важная ошибка)\n    clientTelemetry.logCorrection(buffer.id, {\n      x: currentPos.x(),\n      y: currentPos.y(),\n      z: currentPos.z()\n    }, predictedState.position, \'hard\', distance);\n    applyHardCorrection(obj.body, predictedState, distance);\n  } else if (distance > PHYSICS_CONFIG.CORRECTION.POSITION_THRESHOLD) {\n    // Уровень 1: Плавная коррекция при малых расхождениях\n    diagnostics.logCorrection(buffer.id, {\n      x: currentPos.x(),\n      y: currentPos.y(),\n      z: currentPos.z()\n    }, predictedState.position, distance, \'smooth\');\n\n    // Логируем плавную коррекцию в телеметрию (только в подробном режиме)\n    if (clientTelemetry.verboseMode) {\n      clientTelemetry.logCorrection(buffer.id, {\n        x: currentPos.x(),\n        y: currentPos.y(),\n        z: currentPos.z()\n      }, predictedState.position, \'smooth\', distance);\n    }\n    applyPhysicsCorrection(obj.body, predictedState, distance);\n  }\n\n  // Сохраняем предсказанное состояние для визуальной коррекции\n  buffer.predictedState = predictedState;\n}\n\n// Обработка серверной физики (bullet)\nfunction handleBulletPhysicsUpdate(obj, buffer) {\n  // Для bullet-объектов просто обновляем mesh напрямую\n  var latestUpdate = buffer.serverUpdates[buffer.serverUpdates.length - 1];\n  if (!latestUpdate) return;\n  if (obj.mesh) {\n    obj.mesh.position.set(latestUpdate.position.x, latestUpdate.position.y, latestUpdate.position.z);\n  }\n}\n\n// Обработка клиентской физики (ammo)\nfunction handleAmmoPhysicsUpdate(obj, buffer) {\n  // Для ammo-объектов серверные обновления игнорируем\n  // Физика полностью управляется клиентом\n}\n\n// Телепортация физического тела\nfunction teleportPhysicsBody(body, position, velocity) {\n  var transform = body.getWorldTransform();\n  transform.getOrigin().setValue(position.x, position.y, position.z);\n  body.setWorldTransform(transform);\n  if (velocity) {\n    var btVelocity = new Ammo.btVector3(velocity.x, velocity.y, velocity.z);\n    body.setLinearVelocity(btVelocity);\n    Ammo.destroy(btVelocity);\n  }\n\n  // Активируем тело после телепортации\n  body.activate(true);\n}\n\n// Применение жесткой коррекции к физическому телу\nfunction applyHardCorrection(body, targetState, distance) {\n  var transform = body.getWorldTransform();\n  var currentPos = transform.getOrigin();\n\n  // Для жесткой коррекции перемещаем объект напрямую с корректировкой скорости\n  var correctionFactor = PHYSICS_CONFIG.CORRECTION.HARD_CORRECTION_FACTOR;\n  var newPos = {\n    x: currentPos.x() + (targetState.position.x - currentPos.x()) * correctionFactor,\n    y: currentPos.y() + (targetState.position.y - currentPos.y()) * correctionFactor,\n    z: currentPos.z() + (targetState.position.z - currentPos.z()) * correctionFactor\n  };\n\n  // Устанавливаем новую позицию\n  transform.getOrigin().setValue(newPos.x, newPos.y, newPos.z);\n  body.setWorldTransform(transform);\n\n  // Корректируем скорость в сторону целевой\n  var currentVel = body.getLinearVelocity();\n  var targetVel = new Ammo.btVector3(currentVel.x() + (targetState.velocity.x - currentVel.x()) * correctionFactor, currentVel.y() + (targetState.velocity.y - currentVel.y()) * correctionFactor, currentVel.z() + (targetState.velocity.z - currentVel.z()) * correctionFactor);\n  body.setLinearVelocity(targetVel);\n  body.activate(true);\n  Ammo.destroy(targetVel);\n}\n\n// Применение плавной коррекции к физическому телу\nfunction applyPhysicsCorrection(body, targetState, distance) {\n  var transform = body.getWorldTransform();\n  var currentPos = transform.getOrigin();\n\n  // Вычисляем направление коррекции\n  var correctionDir = {\n    x: targetState.position.x - currentPos.x(),\n    y: targetState.position.y - currentPos.y(),\n    z: targetState.position.z - currentPos.z()\n  };\n\n  // Нормализуем направление\n  var length = Math.sqrt(Math.pow(correctionDir.x, 2) + Math.pow(correctionDir.y, 2) + Math.pow(correctionDir.z, 2));\n  if (length === 0) return;\n  correctionDir.x /= length;\n  correctionDir.y /= length;\n  correctionDir.z /= length;\n\n  // Вычисляем силу коррекции (адаптивно в зависимости от расстояния)\n  var correctionStrength = Math.min(distance * PHYSICS_CONFIG.CORRECTION.SMOOTH_FACTOR, PHYSICS_CONFIG.CORRECTION.MAX_CORRECTION_SPEED);\n\n  // Применяем коррекцию как импульс\n  var impulse = new Ammo.btVector3(correctionDir.x * correctionStrength, correctionDir.y * correctionStrength, correctionDir.z * correctionStrength);\n  body.applyCentralImpulse(impulse);\n  body.activate(true);\n  Ammo.destroy(impulse);\n}\n\n// Обновление визуального состояния mesh\'ей\nfunction updateVisualStates(deltaTime) {\n  var _iterator = physics_createForOfIteratorHelper(objectBuffers),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = physics_slicedToArray(_step.value, 2),\n        objectId = _step$value[0],\n        buffer = _step$value[1];\n      var obj = objects_objects[objectId];\n      if (!obj || !obj.mesh || obj.physicsBy !== \'both\') continue;\n      updateMeshVisualCorrection(obj, buffer, deltaTime);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\n// Обновление визуальной коррекции mesh\'а\nfunction updateMeshVisualCorrection(obj, buffer, deltaTime) {\n  if (!obj.body || !buffer.predictedState) return;\n\n  // Получаем текущее положение физического тела\n  var transform = obj.body.getWorldTransform();\n  var bodyPos = transform.getOrigin();\n  var targetPos = {\n    x: bodyPos.x(),\n    y: bodyPos.y(),\n    z: bodyPos.z()\n  };\n\n  // Получаем текущее положение mesh\'а\n  var meshPos = obj.mesh.position;\n\n  // Вычисляем расстояние между mesh\'ем и физическим телом\n  var distance = Math.sqrt(Math.pow(targetPos.x - meshPos.x, 2) + Math.pow(targetPos.y - meshPos.y, 2) + Math.pow(targetPos.z - meshPos.z, 2));\n\n  // Если расстояние слишком большое - телепортируем mesh\n  if (distance > PHYSICS_CONFIG.VISUAL.MAX_VISUAL_DISTANCE) {\n    obj.mesh.position.set(targetPos.x, targetPos.y, targetPos.z);\n    buffer.correctionVelocity = {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n    return;\n  }\n\n  // Если расстояние меньше порога - не двигаем\n  if (distance < PHYSICS_CONFIG.VISUAL.MIN_MOVEMENT_THRESHOLD) {\n    return;\n  }\n\n  // Вычисляем силу притягивания (пропорциональна расстоянию)\n  var attractionForce = distance * PHYSICS_CONFIG.VISUAL.ATTRACTION_STRENGTH;\n\n  // Вычисляем направление движения\n  var direction = {\n    x: (targetPos.x - meshPos.x) / distance,\n    y: (targetPos.y - meshPos.y) / distance,\n    z: (targetPos.z - meshPos.z) / distance\n  };\n\n  // Обновляем скорость коррекции\n  buffer.correctionVelocity.x += direction.x * attractionForce * deltaTime;\n  buffer.correctionVelocity.y += direction.y * attractionForce * deltaTime;\n  buffer.correctionVelocity.z += direction.z * attractionForce * deltaTime;\n\n  // Применяем затухание\n  buffer.correctionVelocity.x *= PHYSICS_CONFIG.VISUAL.DAMPING_FACTOR;\n  buffer.correctionVelocity.y *= PHYSICS_CONFIG.VISUAL.DAMPING_FACTOR;\n  buffer.correctionVelocity.z *= PHYSICS_CONFIG.VISUAL.DAMPING_FACTOR;\n\n  // Обновляем положение mesh\'а\n  obj.mesh.position.x += buffer.correctionVelocity.x * deltaTime;\n  obj.mesh.position.y += buffer.correctionVelocity.y * deltaTime;\n  obj.mesh.position.z += buffer.correctionVelocity.z * deltaTime;\n}\n\n// Обновление статистики сети\nfunction updateNetworkStats() {\n  var now = Date.now();\n  networkStats.updateCount++;\n  if (networkStats.lastUpdateTime > 0) {\n    var interval = now - networkStats.lastUpdateTime;\n\n    // Обновляем джиттер\n    var expectedInterval = PHYSICS_CONFIG.TIME.SERVER_UPDATE_INTERVAL;\n    var jitter = Math.abs(interval - expectedInterval);\n    networkStats.jitter = networkStats.jitter * 0.9 + jitter * 0.1;\n\n    // Считаем пропущенные обновления\n    if (interval > expectedInterval * 1.5) {\n      networkStats.missedUpdates++;\n    }\n  }\n  networkStats.lastUpdateTime = now;\n\n  // Вычисляем потерю пакетов\n  if (networkStats.updateCount > 10) {\n    networkStats.packetLoss = networkStats.missedUpdates / networkStats.updateCount;\n  }\n}\n\n// Адаптация параметров под сетевые условия\nfunction adaptToNetworkConditions() {\n  var ping = networkStats.ping;\n  var jitter = networkStats.jitter;\n  var packetLoss = networkStats.packetLoss;\n\n  // Адаптируем окно предсказания\n  if (ping > PHYSICS_CONFIG.NETWORK.BAD_PING_THRESHOLD) {\n    PHYSICS_CONFIG.TIME.PREDICTION_WINDOW = Math.min(500, ping * 1.5);\n  } else if (ping < PHYSICS_CONFIG.NETWORK.GOOD_PING_THRESHOLD) {\n    PHYSICS_CONFIG.TIME.PREDICTION_WINDOW = Math.max(100, ping * 2);\n  }\n\n  // Адаптируем силу коррекции\n  if (jitter > PHYSICS_CONFIG.NETWORK.JITTER_THRESHOLD) {\n    PHYSICS_CONFIG.CORRECTION.SMOOTH_FACTOR = Math.max(0.05, 0.15 - jitter / 1000);\n  }\n\n  // Адаптируем визуальную коррекцию\n  if (packetLoss > PHYSICS_CONFIG.NETWORK.PACKET_LOSS_THRESHOLD) {\n    PHYSICS_CONFIG.VISUAL.ATTRACTION_STRENGTH = Math.min(15.0, 8.0 + packetLoss * 100);\n  }\n}\n\n// Основной цикл обновления физики\nfunction stepPhysics(deltaTime) {\n  if (!physicsWorld) return;\n\n  // Обновляем физический мир для ammo-объектов\n  physicsWorld.stepSimulation(deltaTime, 10);\n\n  // Обновляем позиции объектов из физических тел для ammo-объектов\n  updatePhysicsObjects(false);\n\n  // Обновляем визуальные состояния\n  updateVisualStates(deltaTime);\n\n  // Очищаем старые данные из буферов\n  var currentTime = getEstimatedServerTime();\n  var _iterator2 = physics_createForOfIteratorHelper(objectBuffers.values()),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var buffer = _step2.value;\n      buffer.cleanOldUpdates(currentTime);\n    }\n\n    // Периодически адаптируемся к сетевым условиям\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  if (Date.now() % 1000 < deltaTime * 1000) {\n    // Примерно раз в секунду\n    adaptToNetworkConditions();\n  }\n}\n\n// Обновление позиций объектов из физических тел\nfunction updatePhysicsObjects(useServerPhysics) {\n  for (var _i = 0, _Object$entries = Object.entries(objects_objects); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = physics_slicedToArray(_Object$entries[_i], 2),\n      id = _Object$entries$_i[0],\n      obj = _Object$entries$_i[1];\n    if (obj.body && obj.mesh && obj.physicsBy === \'ammo\') {\n      // Для ammo-объектов обновляем mesh из физического тела\n      var transform = obj.body.getWorldTransform();\n      var origin = transform.getOrigin();\n      var rotation = transform.getRotation();\n      obj.mesh.position.set(origin.x(), origin.y(), origin.z());\n      obj.mesh.quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w());\n\n      // Логируем состояние объекта в телеметрию (только для игроков)\n      if (obj.type === \'player\' && Math.random() < 0.01) {\n        // 1% сэмплинг чтобы не засорять логи\n        var velocity = obj.body.getLinearVelocity();\n        clientTelemetry.logObjectState(id, \'player\', \'ammo\', {\n          x: origin.x(),\n          y: origin.y(),\n          z: origin.z()\n        }, {\n          x: velocity.x(),\n          y: velocity.y(),\n          z: velocity.z()\n        }, obj.mass || 1.0, obj.radius || 1.0, \'client\');\n      }\n    }\n    // Для both и bullet объектов позиции обновляются в системе физики\n  }\n}\n\n// Получить физический мир\nfunction physics_getPhysicsWorld() {\n  return physicsWorld;\n}\n\n// Обновить пинг\nfunction updatePing(pingValue) {\n  networkStats.ping = pingValue;\n}\n\n// Получить статистику сети\nfunction getNetworkStats() {\n  return physics_objectSpread({}, networkStats);\n}\n\n// Получить конфигурацию физики\nfunction getPhysicsConfig() {\n  return physics_objectSpread({}, PHYSICS_CONFIG);\n}\n\n// Применение импульса к сфере\nfunction applyImpulseToSphere(id, force) {\n  var obj = objects_objects[id];\n  if (!obj || !obj.body) {\n    console.warn("[Physics] \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u043D\\u0430\\u0439\\u0442\\u0438 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442 \\u0438\\u043B\\u0438 \\u0442\\u0435\\u043B\\u043E \\u0434\\u043B\\u044F \\u0438\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441\\u0430: ".concat(id));\n    return;\n  }\n\n  // Применяем импульс как есть (сила уже рассчитана в gamepad)\n  var impulse = new Ammo.btVector3(force.x || 0, force.y || 0, force.z || 0);\n  obj.body.applyCentralImpulse(impulse);\n  obj.body.activate(true);\n  Ammo.destroy(impulse);\n}\n\n// Очистка ресурсов\nfunction cleanup() {\n  if (physicsWorld) {\n    // Очищаем все тела из мира\n    var numObjects = physicsWorld.getNumCollisionObjects();\n    for (var i = numObjects - 1; i >= 0; i--) {\n      var obj = physicsWorld.getCollisionObjectArray().at(i);\n      physicsWorld.removeCollisionObject(obj);\n    }\n\n    // Уничтожаем мир\n    Ammo.destroy(physicsWorld);\n    physicsWorld = null;\n  }\n\n  // Очищаем буферы\n  objectBuffers.clear();\n  console.log("[Physics] Ресурсы очищены");\n}\n;// ./src/objects.js\n// objects.js\n\n\n\n\n\nvar terrainCreated = new events.EventEmitter();\nvar playerCreated = new events.EventEmitter();\nvar objects_objects = {}; // Словарь объектов: id -> { mesh, body, serverPos, ... }\nvar terrainMesh; // Экспортируем terrainMesh\nvar playerMesh; // Экспортируем playerMesh\n\nfunction createMeshAndBodyForObject(data) {\n  if (!data || !data.object_type) {\n    console.error("Invalid data received for object creation:", data);\n    return null;\n  }\n  var type = data.object_type;\n  var mesh = null,\n    body = null;\n  try {\n    // Создаем меш в любом случае\n    switch (type) {\n      case "terrain":\n        mesh = createTerrainMesh(data);\n        body = createPhysicsBodyForTerrain(data);\n        break;\n      case "sphere":\n        mesh = createSphereMesh(data);\n        body = createPhysicsBodyForSphere(data);\n        break;\n      case "tree":\n        mesh = createTreeMesh(data);\n        break;\n      case "box":\n        mesh = createBoxMesh(data);\n        body = createPhysicsBodyForBox(data);\n        break;\n      default:\n        console.warn("Unknown object type: ".concat(type));\n        return null;\n    }\n\n    // Проверяем, что mesh был успешно создан\n    if (!mesh) {\n      console.error("Failed to create mesh for object type: ".concat(type));\n      return null;\n    }\n    scene_scene.add(mesh);\n\n    // Сохраняем в объекте исходные данные, включая массу\n    var result = {\n      mesh: mesh,\n      body: body,\n      object_type: type,\n      mass: data.mass,\n      // Сохраняем массу из данных сервера\n      radius: data.radius,\n      // Сохраняем радиус из данных сервера\n      physicsBy: data.physics_by\n    };\n    console.log("[Objects] \\u0421\\u043E\\u0437\\u0434\\u0430\\u043D \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442: ".concat(data.id, " (").concat(data.object_type, ")"));\n    return result;\n  } catch (error) {\n    console.error("\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D\\u0438\\u0438 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 \\u0442\\u0438\\u043F\\u0430 ".concat(type, ":"), error);\n    // Если mesh был создан, но произошла ошибка, удаляем его из сцены\n    if (mesh) {\n      scene_scene.remove(mesh);\n    }\n    return null;\n  }\n}\nfunction createPhysicsBodyForTerrain(data) {\n  var physicsWorld = physics_getPhysicsWorld();\n  if (!physicsWorld) {\n    console.error("[Objects] Физический мир не инициализирован");\n    return null;\n  }\n  if (typeof Ammo === \'undefined\') {\n    console.error(\'Ammo.js не инициализирован\');\n    return null;\n  }\n  var w = data.heightmap_w;\n  var h = data.heightmap_h;\n  var scaleX = data.scale_x;\n  var scaleZ = data.scale_z;\n\n  // Создаем буфер в памяти Ammo для данных высот\n  var ammoHeightData = Ammo._malloc(4 * w * h);\n\n  // Копируем данные высот в память Ammo\n  var p = 0;\n  var p2 = 0;\n  for (var j = 0; j < h; j++) {\n    for (var i = 0; i < w; i++) {\n      Ammo.HEAPF32[ammoHeightData + p2 >> 2] = data.height_data[p];\n      p++;\n      p2 += 4;\n    }\n  }\n\n  // Создаем форму террейна\n  var shape = new Ammo.btHeightfieldTerrainShape(w, h, ammoHeightData, 1,\n  // heightScale\n  data.min_height, data.max_height, 1,\n  // up axis = 1 для Y\n  Ammo.PHY_FLOAT, false // flipQuadEdges\n  );\n\n  // Устанавливаем масштабирование\n  shape.setLocalScaling(new Ammo.btVector3(scaleX, data.scale_y, scaleZ));\n\n  // Устанавливаем margin для террейна (0.5 вместо 2.0, так как террейн меньше)\n  shape.setMargin(0.5);\n  console.log("[Terrain] Установлен margin террейна:", 0.5);\n\n  // Создаем трансформацию\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n  var mass = 0; // Статическое тело\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Добавляем тело в физический мир\n  var TERRAIN_GROUP = 1;\n  physicsWorld.addRigidBody(body, TERRAIN_GROUP, -1); // Террейн сталкивается со всеми\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n  console.log("[Terrain] Физическое тело создано:", {\n    размеры: {\n      w: w,\n      h: h\n    },\n    масштаб: {\n      x: data.scaleX,\n      y: data.scale_y,\n      z: data.scaleZ\n    },\n    позиция: {\n      x: data.x || 0,\n      y: (data.min_height + data.max_height) / 2,\n      z: data.z || 0\n    },\n    минВысота: data.min_height,\n    максВысота: data.max_height\n  });\n  return body;\n}\nfunction createTerrainMesh(data) {\n  var w = data.heightmap_w || 64;\n  var h = data.heightmap_h || 64;\n  var geo = new three_core/* PlaneGeometry */.bdM(w * data.scale_x, h * data.scale_z, w - 1, h - 1);\n  geo.rotateX(-Math.PI / 2);\n  if (data.height_data) {\n    var verts = geo.attributes.position.array;\n    for (var i = 0; i < verts.length; i += 3) {\n      var ix = i / 3 % w;\n      var iz = Math.floor(i / 3 / w);\n      verts[i + 1] = data.height_data[iz * w + ix] * data.scale_y;\n    }\n    geo.computeVertexNormals();\n  }\n  terrainMesh = new three_core/* Mesh */.eaF(\n  // Присваиваем mesh переменной terrainMesh\n  geo, new three_core/* MeshPhongMaterial */.tXL({\n    color: parseColor(data.color || "#0000ff"),\n    wireframe: false,\n    flatShading: true\n  }));\n\n  // Включаем тени для террейна\n  terrainMesh.receiveShadow = true;\n  gamestatemanager.setTerrainMesh(terrainMesh);\n  return terrainMesh;\n}\nfunction createSphereMesh(data) {\n  try {\n    var geo = new three_core/* SphereGeometry */.Gu$(data.radius || 1, 32, 32);\n    var mesh = new three_core/* Mesh */.eaF(geo, new three_core/* MeshPhongMaterial */.tXL({\n      color: parseColor(data.color || "#888888"),\n      shininess: 30\n    }));\n\n    // Включаем тени для сфер\n    mesh.castShadow = true;\n    mesh.receiveShadow = true;\n\n    // Проверяем, является ли этот объект игроком текущего клиента\n    var playerObjectID = gamestatemanager.getPlayerObjectID();\n    if (playerObjectID && data.id === playerObjectID) {\n      playerMesh = mesh;\n      gamestatemanager.setPlayerMesh(playerMesh);\n      console.log("[Objects] \\u0423\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D playerMesh \\u0434\\u043B\\u044F \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(data.id));\n    } else {\n      // ВРЕМЕННОЕ РЕШЕНИЕ: если player ID еще не получен и это sphere с "player" в имени, устанавливаем как player\n      if (!playerObjectID && data.id.includes(\'player\')) {\n        console.log("[Objects] \\u0412\\u0420\\u0415\\u041C\\u0415\\u041D\\u041D\\u041E \\u0443\\u0441\\u0442\\u0430\\u043D\\u0430\\u0432\\u043B\\u0438\\u0432\\u0430\\u0435\\u043C ".concat(data.id, " \\u043A\\u0430\\u043A player mesh (player ID \\u043D\\u0435 \\u043F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D)"));\n        playerMesh = mesh;\n        gamestatemanager.setPlayerMesh(playerMesh);\n        gamestatemanager.setPlayerID(\'temp_player\', data.id);\n      } else {\n        console.log("[Objects] \\u0421\\u043E\\u0437\\u0434\\u0430\\u043D \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, ", player ID: ").concat(playerObjectID || \'не получен\'));\n      }\n    }\n    return mesh;\n  } catch (error) {\n    console.error("Ошибка при создании меша сферы:", error);\n    return null;\n  }\n}\nfunction createBoxMesh(data) {\n  var geo = new three_core/* BoxGeometry */.iNn(1, 1, 1);\n  return new three_core/* Mesh */.eaF(geo, new three_core/* MeshLambertMaterial */.G_z({\n    color: parseColor(data.color || "#888888")\n  }));\n}\nfunction createPhysicsBodyForSphere(data) {\n  var physicsWorld = physics_getPhysicsWorld();\n  if (!physicsWorld) {\n    console.error("[Objects] Физический мир не инициализирован");\n    return null;\n  }\n  try {\n    if (typeof Ammo === \'undefined\') {\n      console.error(\'Ammo.js не инициализирован\');\n      return null;\n    }\n    if (!physicsWorld) {\n      console.error(\'Физический мир не инициализирован\');\n      return null;\n    }\n\n    // Безопасная проверка window.Ammo\n    if (typeof window.Ammo === \'undefined\') {\n      console.error(\'window.Ammo не инициализирован\');\n      return null;\n    }\n    var radius = data.radius;\n    var mass = data.mass;\n\n    // Создаем все Ammo объекты через window.Ammo\n    var shape = new window.Ammo.btSphereShape(radius);\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(data.x || 0, data.y || 0, data.z || 0));\n    var localInertia = new window.Ammo.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    var motionState = new window.Ammo.btDefaultMotionState(transform);\n    var rbInfo = new window.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    var body = new window.Ammo.btRigidBody(rbInfo);\n\n    // Проверяем, что тело имеет необходимые методы\n    if (!body || typeof body.getMotionState !== \'function\') {\n      console.error(\'Ошибка: созданное физическое тело недействительно\');\n      window.Ammo.destroy(rbInfo);\n      window.Ammo.destroy(localInertia);\n      return null;\n    }\n\n    // Устанавливаем дополнительные свойства\n    body.setFriction(1.0); // Максимальное трение для контроля\n    body.setRollingFriction(0.3); // Увеличиваем сопротивление качению\n    body.setRestitution(0.0); // Полностью убираем отскок  \n    body.setDamping(0.2, 0.3); // Добавляем затухание для остановки\n\n    // Отключаем деактивацию\n    body.setActivationState(4); // DISABLE_DEACTIVATION\n\n    // Для небольших сфер включаем CCD (continuous collision detection),\n    // чтобы предотвратить проваливание сквозь поверхности при высокой скорости\n    body.setCcdMotionThreshold(radius * 0.7);\n    body.setCcdSweptSphereRadius(radius * 0.6);\n\n    // Добавляем тело в физический мир\n    var SPHERE_GROUP = 2;\n    physicsWorld.addRigidBody(body, SPHERE_GROUP, -1); // Сферы сталкиваются со всеми\n\n    console.log("[Objects] \\u0424\\u0438\\u0437\\u0438\\u0447\\u0435\\u0441\\u043A\\u043E\\u0435 \\u0442\\u0435\\u043B\\u043E \\u0441\\u0444\\u0435\\u0440\\u044B ".concat(data.id, " \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D\\u043E: radius=").concat(radius, ", mass=").concat(mass));\n\n    // Очистка памяти\n    window.Ammo.destroy(rbInfo);\n    window.Ammo.destroy(localInertia);\n    return body;\n  } catch (error) {\n    console.error(\'Ошибка при создании физического тела:\', error);\n    return null;\n  }\n}\nfunction createPhysicsBodyForBox(data) {\n  var physicsWorld = physics_getPhysicsWorld();\n  if (!physicsWorld) {\n    console.error("[Objects] Физический мир не инициализирован");\n    return null;\n  }\n  try {\n    if (typeof Ammo === \'undefined\') {\n      console.error(\'Ammo.js не инициализирован\');\n      return null;\n    }\n    if (!physicsWorld) {\n      console.error(\'Физический мир не инициализирован\');\n      return null;\n    }\n    var width = data.width || 1;\n    var height = data.height || 1;\n    var depth = data.depth || 1;\n    var mass = data.mass || 1;\n\n    // Создаем все Ammo объекты через window.Ammo\n    var shape = new window.Ammo.btBoxShape(new window.Ammo.btVector3(width / 2, height / 2, depth / 2));\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(data.x || 0, data.y || 0, data.z || 0));\n    var localInertia = new window.Ammo.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    var motionState = new window.Ammo.btDefaultMotionState(transform);\n    var rbInfo = new window.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    var body = new window.Ammo.btRigidBody(rbInfo);\n\n    // Настраиваем физические свойства\n    body.setFriction(0.5);\n    body.setRollingFriction(0.1);\n    body.setRestitution(0.2); // Немного уменьшаем упругость для стабильности\n    body.setDamping(0.01, 0.01); // Небольшое линейное и угловое затухание\n\n    // Включаем CCD для предотвращения проваливания сквозь террейн\n    var maxDimension = Math.max(width, height, depth);\n    body.setCcdMotionThreshold(maxDimension * 0.8); // Увеличиваем порог для активации CCD\n    body.setCcdSweptSphereRadius(maxDimension * 0.7); // Радиус сферы для CCD\n\n    // Отключаем деактивацию\n    body.setActivationState(4); // DISABLE_DEACTIVATION\n\n    // Добавляем тело в физический мир\n    var BOX_GROUP = 3;\n    physicsWorld.addRigidBody(body, BOX_GROUP, -1); // Коробки сталкиваются со всеми\n\n    console.log("[Box] Физическое тело создано:", {\n      dimensions: {\n        width: width,\n        height: height,\n        depth: depth\n      },\n      mass: mass,\n      position: {\n        x: data.x || 0,\n        y: data.y || 0,\n        z: data.z || 0\n      },\n      ccd: {\n        motionThreshold: maxDimension * 0.8,\n        sweptSphereRadius: maxDimension * 0.7\n      },\n      friction: 0.5,\n      restitution: 0.2\n    });\n\n    // Очистка памяти\n    window.Ammo.destroy(rbInfo);\n    window.Ammo.destroy(localInertia);\n    return body;\n  } catch (error) {\n    console.error(\'Ошибка при создании физического тела:\', error);\n    return null;\n  }\n}\nfunction parseColor(colorStr) {\n  if (!colorStr) return 0x888888;\n  if (colorStr.startsWith("#")) {\n    return parseInt(colorStr.slice(1), 16);\n  }\n  return 0x888888;\n}\nfunction createTestSphere() {\n  // Создаем визуальную сферу\n  var radius = 1;\n  var geometry = new THREE.SphereGeometry(radius, 32, 32);\n  var material = new THREE.MeshPhongMaterial({\n    color: 0xff00ff,\n    shininess: 30\n  });\n  var mesh = new THREE.Mesh(geometry, material);\n\n  // Включаем тени для тестовой сферы\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n\n  // Позиционируем сферу высоко над террейном\n  var startY = 58; // Высота над террейном\n  mesh.position.set(0, startY, 0);\n  scene.add(mesh);\n\n  // Создаем физическое тело\n  var shape = new Ammo.btSphereShape(radius);\n  var mass = 5; // Увеличиваем массу с 3 до 5\n\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n  transform.setOrigin(new Ammo.btVector3(0, startY, 0));\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  shape.calculateLocalInertia(mass, localInertia);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Важные настройки для физического тела\n  body.setActivationState(4); // DISABLE_DEACTIVATION\n  body.setFriction(1.0); // Максимальное трение для контроля\n  body.setRollingFriction(0.3); // Увеличиваем сопротивление качению\n  body.setRestitution(0.0); // Полностью убираем отскок  \n  body.setDamping(0.2, 0.3); // Добавляем затухание для остановки\n\n  // Включаем CCD для предотвращения проваливания сквозь объекты\n  body.setCcdMotionThreshold(radius * 0.6);\n  body.setCcdSweptSphereRadius(radius * 0.5);\n\n  // Добавляем тело в физический мир\n  var SPHERE_GROUP = 2;\n  var physicsWorld = getPhysicsWorld();\n  physicsWorld.addRigidBody(body, SPHERE_GROUP, -1); // Тестовая сфера сталкивается со всеми\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n\n  // Добавляем объект в наш список объектов\n  var testSphereObj = {\n    mesh: mesh,\n    body: body,\n    object_type: "test_sphere",\n    physicsBy: "ammo" // Изменено с "both" на "ammo", чтобы управлялось только локальной физикой\n  };\n  objects_objects["test_sphere"] = testSphereObj;\n  return testSphereObj;\n}\n;// ./src/camera.js\n// camera.js\n\n\n\n\n\n// Объявляем камеру\nvar camera;\n\n// Настройки камеры - оставляем оригинальные значения\nvar CAMERA_HEIGHT = 100;\nvar CAMERA_DISTANCE = 100;\nvar SMOOTH_FACTOR = 0.05;\nvar ROTATION_SMOOTH_FACTOR = 0.03;\nvar DEAD_ZONE_ANGLE = 0.3;\nvar MIN_Y_ANGLE = -0.5;\nvar MAX_Y_ANGLE = 0.5;\n\n// Дополнительные настройки для адаптивного доворота\nvar MIN_ADAPTIVE_FACTOR = 0.01; // Минимальный фактор доворота\nvar MAX_ADAPTIVE_FACTOR = 0.12; // Максимальный фактор для быстрых поворотов\nvar QUADRATIC_FACTOR = 0.9; // Коэффициент квадратичной зависимости (0-1)\n\n// Внутренняя переменная для хранения текущего значения коэффициента\nvar currentQuadraticFactor = QUADRATIC_FACTOR;\n\n// Сохраняем последнюю известную позицию и направление игрока\nvar lastKnownPosition = new three_core/* Vector3 */.Pq0(0, 0, 0);\nvar lastCameraPosition = new three_core/* Vector3 */.Pq0(0, CAMERA_HEIGHT, CAMERA_DISTANCE);\nvar lastCameraDirection = new three_core/* Vector3 */.Pq0(0, 0, -1); // Начальное направление камеры\nvar targetCameraDirection = new three_core/* Vector3 */.Pq0(0, 0, -1);\nvar cameraTarget = new three_core/* Vector3 */.Pq0(); // Промежуточная точка для сглаживания\nvar lastArrowDirection = new three_core/* Vector3 */.Pq0(0, 0, 1); // Последнее направление стрелки\nvar lastMeasuredAngle = 0; // Последний измеренный угол для логирования\nvar lastMeasuredDistance = 0; // Последнее измеренное расстояние для логирования\nvar turningActive = false; // Флаг активного поворота для логирования\n\n// Добавим новую переменную для сглаживания точки, на которую смотрит камера\nvar smoothLookAtTarget = new three_core/* Vector3 */.Pq0();\nfunction initCamera() {\n  // Создаем камеру\n  camera = new three_core/* PerspectiveCamera */.ubm(60, window.innerWidth / window.innerHeight, 0.2, 2000);\n\n  // Устанавливаем начальную позицию\n  camera.position.set(0, CAMERA_HEIGHT, CAMERA_DISTANCE);\n  camera.lookAt(0, 0, 0);\n\n  // Добавляем обработчик изменения размера окна\n  window.addEventListener(\'resize\', camera_onWindowResize);\n\n  // Инициализируем значение currentQuadraticFactor\n  currentQuadraticFactor = QUADRATIC_FACTOR;\n  console.log("[Camera] Камера инициализирована");\n  return camera;\n}\nfunction camera_onWindowResize() {\n  if (!camera) return;\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n}\n\n// Функция для вычисления угла между двумя направлениями в 3D\nfunction angleBetweenDirections(dir1, dir2) {\n  // Нормализуем векторы для корректного вычисления угла\n  var v1 = dir1.clone().normalize();\n  var v2 = dir2.clone().normalize();\n\n  // Вычисляем угол между векторами\n  return Math.acos(Math.min(1, Math.max(-1, v1.dot(v2))));\n}\n\n// Функция для вычисления адаптивного фактора доворота с квадратичной зависимостью\nfunction calculateAdaptiveRotationFactor(angle, distance) {\n  // Нормализуем расстояние (предполагаем, что максимальное значимое расстояние - 100)\n  var normalizedDistance = Math.min(distance, 100) / 100;\n\n  // Вычисляем относительную скорость поворота с учетом угла\n  var angleRatio = angle / DEAD_ZONE_ANGLE;\n\n  // Применяем квадратичную зависимость от расстояния с настраиваемым коэффициентом\n  // Когда currentQuadraticFactor = 0, зависимость линейная\n  // Когда currentQuadraticFactor = 1, зависимость полностью квадратичная\n  var distanceFactor = normalizedDistance * (1 - currentQuadraticFactor) + Math.pow(normalizedDistance, 2) * currentQuadraticFactor;\n\n  // Комбинируем факторы угла и расстояния\n  var combinedFactor = angleRatio * distanceFactor;\n\n  // Интерполируем между минимальным и максимальным факторами доворота\n  var adaptiveFactor = MIN_ADAPTIVE_FACTOR + (MAX_ADAPTIVE_FACTOR - MIN_ADAPTIVE_FACTOR) * Math.min(1.0, combinedFactor);\n  return adaptiveFactor;\n}\nfunction updateCamera() {\n  if (!camera) return;\n\n  // Получаем ID объекта игрока от GameStateManager\n  var playerObjectID = gamestatemanager.getPlayerObjectID();\n  if (!playerObjectID) {\n    // Если player ID еще не получен, используем последнюю известную позицию\n    return;\n  }\n  var player = objects_objects[playerObjectID];\n  if (player && player.mesh) {\n    var currentPlayerPosition = player.mesh.position.clone();\n    var arrowDirection = getArrowDirection();\n\n    // Плавно обновляем точку, на которую смотрит камера\n    smoothLookAtTarget.lerp(currentPlayerPosition, SMOOTH_FACTOR);\n    if (arrowDirection.length() > 0) {\n      var angle = angleBetweenDirections(arrowDirection, lastArrowDirection);\n      if (angle > DEAD_ZONE_ANGLE) {\n        var yComponent = Math.max(MIN_Y_ANGLE, Math.min(MAX_Y_ANGLE, -arrowDirection.y));\n        targetCameraDirection.set(-arrowDirection.x, yComponent, -arrowDirection.z).normalize();\n        lastArrowDirection.copy(arrowDirection);\n        turningActive = true;\n      }\n    }\n    var adaptiveRotationFactor = calculateAdaptiveRotationFactor(lastMeasuredAngle, lastMeasuredDistance);\n    lastCameraDirection.lerp(targetCameraDirection, adaptiveRotationFactor);\n    lastCameraDirection.normalize();\n    var horizontalDistance = CAMERA_DISTANCE * Math.cos(lastCameraDirection.y);\n    var cameraOffset = new three_core/* Vector3 */.Pq0(lastCameraDirection.x * horizontalDistance, CAMERA_HEIGHT + lastCameraDirection.y * CAMERA_DISTANCE, lastCameraDirection.z * horizontalDistance);\n    var targetPosition = currentPlayerPosition.clone().add(cameraOffset);\n    cameraTarget.lerp(targetPosition, SMOOTH_FACTOR);\n    camera.position.copy(cameraTarget);\n\n    // Камера теперь смотрит на сглаженную позицию\n    camera.lookAt(smoothLookAtTarget);\n    lastKnownPosition.copy(currentPlayerPosition);\n  }\n}\n\n// Функция для изменения коэффициента квадратичной зависимости\nfunction setQuadraticFactor(value) {\n  // Ограничиваем значение от 0 до 1\n  var newValue = Math.max(0, Math.min(1, value));\n  console.log("[Camera] \\u0418\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u0435 \\u043A\\u043E\\u044D\\u0444\\u0444\\u0438\\u0446\\u0438\\u0435\\u043D\\u0442\\u0430 \\u043A\\u0432\\u0430\\u0434\\u0440\\u0430\\u0442\\u0438\\u0447\\u043D\\u043E\\u0439 \\u0437\\u0430\\u0432\\u0438\\u0441\\u0438\\u043C\\u043E\\u0441\\u0442\\u0438: ".concat(currentQuadraticFactor.toFixed(2), " -> ").concat(newValue.toFixed(2)));\n  currentQuadraticFactor = newValue;\n  return newValue;\n}\n\n// Функция для получения текущего коэффициента квадратичной зависимости\nfunction getQuadraticFactor() {\n  return currentQuadraticFactor;\n}\n\n// Debug-функция для вывода расширенной информации о камере\nfunction logCameraStatus() {\n  if (!camera) return;\n\n  // console.log(`[Camera] Position: (${camera.position.x.toFixed(2)}, ${camera.position.y.toFixed(2)}, ${camera.position.z.toFixed(2)})`);\n  // console.log(`[Camera] Direction: (${lastCameraDirection.x.toFixed(2)}, ${lastCameraDirection.y.toFixed(2)}, ${lastCameraDirection.z.toFixed(2)})`);\n  // console.log(`[Camera] Target Direction: (${targetCameraDirection.x.toFixed(2)}, ${targetCameraDirection.y.toFixed(2)}, ${targetCameraDirection.z.toFixed(2)})`);\n  // console.log(`[Camera] Arrow Direction: (${lastArrowDirection.x.toFixed(2)}, ${lastArrowDirection.y.toFixed(2)}, ${lastArrowDirection.z.toFixed(2)})`);\n  // console.log(`[Camera] Looking at: (${lastKnownPosition.x.toFixed(2)}, ${lastKnownPosition.y.toFixed(2)}, ${lastKnownPosition.z.toFixed(2)})`);\n  // console.log(`[Camera] Turning Active: ${turningActive}, Last Angle: ${lastMeasuredAngle.toFixed(3)} рад (${(lastMeasuredAngle * 180 / Math.PI).toFixed(1)}°)`);\n  // console.log(`[Camera] Last Distance: ${lastMeasuredDistance.toFixed(1)}, Quadratic Factor: ${currentQuadraticFactor.toFixed(2)}, Default: ${QUADRATIC_FACTOR.toFixed(2)}`);\n  // console.log(`[Camera] Adaptive Factor: ${calculateAdaptiveRotationFactor(lastMeasuredAngle, lastMeasuredDistance).toFixed(3)}`);\n\n  // Проверяем наличие игрока\n  var playerObjectID = gameStateManager.getPlayerObjectID();\n  if (playerObjectID) {\n    var player = objects[playerObjectID];\n    if (player && player.mesh) {\n      // console.log(`[Camera] Player found at: (${player.mesh.position.x.toFixed(2)}, ${player.mesh.position.y.toFixed(2)}, ${player.mesh.position.z.toFixed(2)})`);\n    } else {\n      // console.log(`[Camera] Player object with ID "${playerObjectID}" not found in objects!`);\n    }\n  } else {\n    // console.log(`[Camera] Player ID not yet received from server`);\n  }\n}\n;// ./src/telemetry_ui.js\nfunction telemetry_ui_typeof(o) { "@babel/helpers - typeof"; return telemetry_ui_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, telemetry_ui_typeof(o); }\nfunction telemetry_ui_slicedToArray(r, e) { return telemetry_ui_arrayWithHoles(r) || telemetry_ui_iterableToArrayLimit(r, e) || telemetry_ui_unsupportedIterableToArray(r, e) || telemetry_ui_nonIterableRest(); }\nfunction telemetry_ui_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction telemetry_ui_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction telemetry_ui_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction telemetry_ui_createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = telemetry_ui_unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }\nfunction telemetry_ui_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return telemetry_ui_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? telemetry_ui_arrayLikeToArray(r, a) : void 0; } }\nfunction telemetry_ui_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction telemetry_ui_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction telemetry_ui_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, telemetry_ui_toPropertyKey(o.key), o); } }\nfunction telemetry_ui_createClass(e, r, t) { return r && telemetry_ui_defineProperties(e.prototype, r), t && telemetry_ui_defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction telemetry_ui_toPropertyKey(t) { var i = telemetry_ui_toPrimitive(t, "string"); return "symbol" == telemetry_ui_typeof(i) ? i : i + ""; }\nfunction telemetry_ui_toPrimitive(t, r) { if ("object" != telemetry_ui_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != telemetry_ui_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\n// Визуальный интерфейс для телеметрии\nvar TelemetryUI = /*#__PURE__*/function () {\n  function TelemetryUI() {\n    telemetry_ui_classCallCheck(this, TelemetryUI);\n    this.panel = null;\n    this.logContainer = null;\n    this.isCollapsed = false;\n    this.maxLogEntries = 100;\n    this.logEntries = [];\n    this.filters = {\n      corrections: true,\n      updates: true,\n      commands: true,\n      garbage: true\n    };\n    this.viewMode = \'summary\'; // \'summary\' или \'detailed\'\n    this.detailedData = []; // Детальные данные телеметрии\n\n    this.isPaused = false;\n    this.createUI();\n    this.setupEventListeners();\n  }\n  return telemetry_ui_createClass(TelemetryUI, [{\n    key: "createUI",\n    value: function createUI() {\n      // Создаем основную панель\n      this.panel = document.createElement(\'div\');\n      this.panel.id = \'telemetry-panel\';\n      this.panel.innerHTML = "\\n            <div class=\\"telemetry-header\\">\\n                <div class=\\"telemetry-title\\">\\n                    <span class=\\"telemetry-icon\\">\\uD83D\\uDD2C</span>\\n                    <span>\\u0422\\u0435\\u043B\\u0435\\u043C\\u0435\\u0442\\u0440\\u0438\\u044F</span>\\n                    <span class=\\"telemetry-status\\" id=\\"telemetry-status\\">\\u041E\\u041A</span>\\n                </div>\\n                <div class=\\"telemetry-controls\\">\\n                    <button id=\\"telemetry-mode\\" title=\\"\\u041F\\u0435\\u0440\\u0435\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C \\u0440\\u0435\\u0436\\u0438\\u043C\\">\\uD83D\\uDCCA</button>\\n                    <button id=\\"telemetry-toggle\\" title=\\"\\u0421\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u044C/\\u0420\\u0430\\u0437\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u044C\\">\\u2212</button>\\n                    <button id=\\"telemetry-clear\\" title=\\"\\u041E\\u0447\\u0438\\u0441\\u0442\\u0438\\u0442\\u044C\\">\\uD83D\\uDDD1\\uFE0F</button>\\n                    <button id=\\"telemetry-export\\" title=\\"\\u042D\\u043A\\u0441\\u043F\\u043E\\u0440\\u0442\\">\\uD83D\\uDCBE</button>\\n                    <button id=\\"telemetry-close\\" title=\\"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\\">\\xD7</button>\\n                </div>\\n            </div>\\n            <div class=\\"telemetry-body\\" id=\\"telemetry-body\\">\\n                <div class=\\"telemetry-filters\\">\\n                    <label><input type=\\"checkbox\\" id=\\"filter-corrections\\" checked> \\u041A\\u043E\\u0440\\u0440\\u0435\\u043A\\u0446\\u0438\\u0438</label>\\n                    <label><input type=\\"checkbox\\" id=\\"filter-updates\\" checked> \\u041E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u044F</label>\\n                    <label><input type=\\"checkbox\\" id=\\"filter-commands\\" checked> \\u041A\\u043E\\u043C\\u0430\\u043D\\u0434\\u044B</label>\\n                    <label><input type=\\"checkbox\\" id=\\"filter-garbage\\" checked> \\u041C\\u0443\\u0441\\u043E\\u0440</label>\\n                </div>\\n                <div class=\\"telemetry-stats\\" id=\\"telemetry-stats\\">\\n                    <div class=\\"stat-item\\">\\n                        <span class=\\"stat-label\\">\\u041A\\u043E\\u0440\\u0440\\u0435\\u043A\\u0446\\u0438\\u0439:</span>\\n                        <span class=\\"stat-value\\" id=\\"stat-corrections\\">0</span>\\n                    </div>\\n                    <div class=\\"stat-item\\">\\n                        <span class=\\"stat-label\\">\\u041E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0439:</span>\\n                        <span class=\\"stat-value\\" id=\\"stat-updates\\">0</span>\\n                    </div>\\n                    <div class=\\"stat-item\\">\\n                        <span class=\\"stat-label\\">\\u041C\\u0443\\u0441\\u043E\\u0440\\u043D\\u044B\\u0445:</span>\\n                        <span class=\\"stat-value\\" id=\\"stat-garbage\\">0</span>\\n                    </div>\\n                </div>\\n                <div class=\\"telemetry-content\\">\\n                    <div class=\\"telemetry-log\\" id=\\"telemetry-log\\"></div>\\n                    <div class=\\"telemetry-detailed\\" id=\\"telemetry-detailed\\" style=\\"display: none;\\"></div>\\n                </div>\\n            </div>\\n        ";\n\n      // Добавляем стили\n      this.addStyles();\n\n      // Добавляем панель на страницу\n      document.body.appendChild(this.panel);\n      this.logContainer = document.getElementById(\'telemetry-log\');\n    }\n  }, {\n    key: "addStyles",\n    value: function addStyles() {\n      var style = document.createElement(\'style\');\n      style.textContent = "\\n            #telemetry-panel {\\n                position: fixed;\\n                top: 20px;\\n                right: 20px;\\n                width: 400px;\\n                max-height: 60vh;\\n                background: rgba(0, 0, 0, 0.9);\\n                border: 1px solid #444;\\n                border-radius: 8px;\\n                color: #fff;\\n                font-family: \'Courier New\', monospace;\\n                font-size: 12px;\\n                z-index: 10000;\\n                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);\\n            }\\n            \\n            .telemetry-header {\\n                display: flex;\\n                justify-content: space-between;\\n                align-items: center;\\n                background: #333;\\n                padding: 8px 12px;\\n                border-radius: 8px 8px 0 0;\\n                cursor: move;\\n            }\\n            \\n            .telemetry-title {\\n                display: flex;\\n                align-items: center;\\n                gap: 8px;\\n                font-weight: bold;\\n            }\\n            \\n            .telemetry-status {\\n                padding: 2px 6px;\\n                border-radius: 4px;\\n                font-size: 10px;\\n                background: #2d5a2d;\\n                color: #90ee90;\\n            }\\n            \\n            .telemetry-status.warning {\\n                background: #5a4d2d;\\n                color: #ffd700;\\n            }\\n            \\n            .telemetry-status.error {\\n                background: #5a2d2d;\\n                color: #ff6b6b;\\n            }\\n            \\n            .telemetry-controls {\\n                display: flex;\\n                gap: 4px;\\n            }\\n            \\n            .telemetry-controls button {\\n                background: #555;\\n                border: none;\\n                color: #fff;\\n                padding: 4px 8px;\\n                border-radius: 4px;\\n                cursor: pointer;\\n                font-size: 12px;\\n            }\\n            \\n            .telemetry-controls button:hover {\\n                background: #666;\\n            }\\n            \\n            .telemetry-body {\\n                padding: 12px;\\n                max-height: 50vh;\\n                overflow: hidden;\\n                display: flex;\\n                flex-direction: column;\\n                gap: 8px;\\n            }\\n            \\n            .telemetry-body.collapsed {\\n                display: none;\\n            }\\n            \\n            .telemetry-filters {\\n                display: flex;\\n                gap: 12px;\\n                flex-wrap: wrap;\\n                padding-bottom: 8px;\\n                border-bottom: 1px solid #444;\\n            }\\n            \\n            .telemetry-filters label {\\n                display: flex;\\n                align-items: center;\\n                gap: 4px;\\n                cursor: pointer;\\n                font-size: 11px;\\n            }\\n            \\n            .telemetry-filters input[type=\\"checkbox\\"] {\\n                margin: 0;\\n            }\\n            \\n            .telemetry-stats {\\n                display: flex;\\n                justify-content: space-between;\\n                padding: 6px 0;\\n                background: #1a1a1a;\\n                border-radius: 4px;\\n                padding: 8px;\\n            }\\n            \\n            .stat-item {\\n                text-align: center;\\n            }\\n            \\n            .stat-label {\\n                display: block;\\n                font-size: 10px;\\n                color: #999;\\n            }\\n            \\n            .stat-value {\\n                display: block;\\n                font-weight: bold;\\n                font-size: 14px;\\n                color: #fff;\\n            }\\n            \\n            .telemetry-content {\\n                flex: 1;\\n                overflow: hidden;\\n                display: flex;\\n                flex-direction: column;\\n            }\\n            \\n            .telemetry-log, .telemetry-detailed {\\n                flex: 1;\\n                overflow-y: auto;\\n                max-height: 300px;\\n                padding: 4px;\\n                background: #111;\\n                border-radius: 4px;\\n                border: 1px solid #333;\\n            }\\n            \\n            .log-entry {\\n                padding: 2px 4px;\\n                margin: 1px 0;\\n                border-radius: 2px;\\n                font-size: 11px;\\n                line-height: 1.3;\\n            }\\n            \\n            .log-entry.correction {\\n                background: rgba(255, 107, 107, 0.1);\\n                border-left: 3px solid #ff6b6b;\\n            }\\n            \\n            .log-entry.update {\\n                background: rgba(135, 206, 235, 0.1);\\n                border-left: 3px solid #87ceeb;\\n            }\\n            \\n            .log-entry.command {\\n                background: rgba(144, 238, 144, 0.1);\\n                border-left: 3px solid #90ee90;\\n            }\\n            \\n            .log-entry.garbage {\\n                background: rgba(255, 165, 0, 0.1);\\n                border-left: 3px solid #ffa500;\\n            }\\n            \\n            .log-entry.summary {\\n                background: rgba(147, 112, 219, 0.1);\\n                border-left: 3px solid #9370db;\\n                font-weight: bold;\\n            }\\n            \\n            .log-timestamp {\\n                color: #666;\\n                font-size: 10px;\\n            }\\n            \\n            .log-message {\\n                color: #fff;\\n            }\\n            \\n            .detailed-entry {\\n                margin: 4px 0;\\n                padding: 6px;\\n                background: #1a1a1a;\\n                border-radius: 4px;\\n                border-left: 3px solid #555;\\n                font-size: 10px;\\n                line-height: 1.4;\\n            }\\n            \\n            .detailed-entry.object-state {\\n                border-left-color: #4CAF50;\\n            }\\n            \\n            .detailed-entry.correction {\\n                border-left-color: #ff6b6b;\\n            }\\n            \\n            .detailed-entry.server-update {\\n                border-left-color: #87ceeb;\\n            }\\n            \\n            .detailed-entry.client-command {\\n                border-left-color: #90ee90;\\n            }\\n            \\n            .detailed-header {\\n                color: #ccc;\\n                font-weight: bold;\\n                margin-bottom: 2px;\\n            }\\n            \\n            .detailed-data {\\n                color: #aaa;\\n                margin-left: 8px;\\n            }\\n            \\n            .detailed-position {\\n                color: #ffeb3b;\\n            }\\n            \\n            .detailed-velocity {\\n                color: #2196f3;\\n            }\\n            \\n            .detailed-timestamp {\\n                color: #666;\\n                font-size: 9px;\\n            }\\n        ";\n      document.head.appendChild(style);\n    }\n  }, {\n    key: "setupEventListeners",\n    value: function setupEventListeners() {\n      var _this = this;\n      // Кнопка переключения режима\n      document.getElementById(\'telemetry-mode\').addEventListener(\'click\', function () {\n        _this.toggleViewMode();\n      });\n\n      // Кнопка сворачивания/разворачивания\n      document.getElementById(\'telemetry-toggle\').addEventListener(\'click\', function () {\n        _this.toggleCollapse();\n      });\n\n      // Кнопка очистки\n      document.getElementById(\'telemetry-clear\').addEventListener(\'click\', function () {\n        _this.clearLog();\n      });\n\n      // Кнопка экспорта\n      document.getElementById(\'telemetry-export\').addEventListener(\'click\', function () {\n        _this.exportData();\n      });\n\n      // Кнопка закрытия\n      document.getElementById(\'telemetry-close\').addEventListener(\'click\', function () {\n        _this.hide();\n      });\n\n      // Фильтры\n      document.getElementById(\'filter-corrections\').addEventListener(\'change\', function (e) {\n        _this.filters.corrections = e.target.checked;\n        _this.applyFilters();\n      });\n      document.getElementById(\'filter-updates\').addEventListener(\'change\', function (e) {\n        _this.filters.updates = e.target.checked;\n        _this.applyFilters();\n      });\n      document.getElementById(\'filter-commands\').addEventListener(\'change\', function (e) {\n        _this.filters.commands = e.target.checked;\n        _this.applyFilters();\n      });\n      document.getElementById(\'filter-garbage\').addEventListener(\'change\', function (e) {\n        _this.filters.garbage = e.target.checked;\n        _this.applyFilters();\n      });\n\n      // Делаем панель перетаскиваемой\n      this.makeDraggable();\n    }\n  }, {\n    key: "makeDraggable",\n    value: function makeDraggable() {\n      var _this2 = this;\n      var header = this.panel.querySelector(\'.telemetry-header\');\n      var isDragging = false;\n      var currentX, currentY, initialX, initialY;\n      header.addEventListener(\'mousedown\', function (e) {\n        isDragging = true;\n        initialX = e.clientX - _this2.panel.offsetLeft;\n        initialY = e.clientY - _this2.panel.offsetTop;\n      });\n      document.addEventListener(\'mousemove\', function (e) {\n        if (isDragging) {\n          e.preventDefault();\n          currentX = e.clientX - initialX;\n          currentY = e.clientY - initialY;\n          _this2.panel.style.left = currentX + \'px\';\n          _this2.panel.style.top = currentY + \'px\';\n          _this2.panel.style.right = \'auto\';\n        }\n      });\n      document.addEventListener(\'mouseup\', function () {\n        isDragging = false;\n      });\n    }\n  }, {\n    key: "toggleViewMode",\n    value: function toggleViewMode() {\n      var logContainer = document.getElementById(\'telemetry-log\');\n      var detailedContainer = document.getElementById(\'telemetry-detailed\');\n      var modeButton = document.getElementById(\'telemetry-mode\');\n      this.viewMode = this.viewMode === \'summary\' ? \'detailed\' : \'summary\';\n      if (this.viewMode === \'detailed\') {\n        logContainer.style.display = \'none\';\n        detailedContainer.style.display = \'block\';\n        modeButton.textContent = \'📈\';\n        modeButton.title = \'Сводный режим\';\n        this.renderDetailedView();\n      } else {\n        logContainer.style.display = \'block\';\n        detailedContainer.style.display = \'none\';\n        modeButton.textContent = \'📊\';\n        modeButton.title = \'Детальный режим\';\n      }\n    }\n  }, {\n    key: "toggleCollapse",\n    value: function toggleCollapse() {\n      var body = document.getElementById(\'telemetry-body\');\n      var button = document.getElementById(\'telemetry-toggle\');\n      this.isCollapsed = !this.isCollapsed;\n      if (this.isCollapsed) {\n        body.classList.add(\'collapsed\');\n        button.textContent = \'+\';\n      } else {\n        body.classList.remove(\'collapsed\');\n        button.textContent = \'−\';\n      }\n    }\n  }, {\n    key: "togglePause",\n    value: function togglePause() {\n      this.isPaused = !this.isPaused;\n      var pauseBtn = this.panel.querySelector(\'.telemetry-controls button:nth-child(2)\');\n      if (this.isPaused) {\n        pauseBtn.innerHTML = \'▶️\';\n        pauseBtn.title = \'Возобновить обновление телеметрии\';\n        this.addLogEntry(\'system\', \'Телеметрия приостановлена\');\n      } else {\n        pauseBtn.innerHTML = \'⏸️\';\n        pauseBtn.title = \'Приостановить обновление телеметрии\';\n        this.addLogEntry(\'system\', \'Телеметрия возобновлена\');\n      }\n    }\n  }, {\n    key: "addLogEntry",\n    value: function addLogEntry(type, message) {\n      var timestamp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Date();\n      if (this.isPaused) return;\n      var entry = {\n        type: type,\n        message: message,\n        timestamp: timestamp,\n        visible: this.filters[type] !== false\n      };\n      this.logEntries.push(entry);\n\n      // Ограничиваем количество записей\n      if (this.logEntries.length > this.maxLogEntries) {\n        this.logEntries.shift();\n      }\n      this.renderLogEntry(entry);\n      this.updateStats();\n      this.scrollToBottom();\n    }\n  }, {\n    key: "renderLogEntry",\n    value: function renderLogEntry(entry) {\n      if (!entry.visible) return;\n      var logElement = document.createElement(\'div\');\n      logElement.className = "log-entry ".concat(entry.type);\n      var timeStr = entry.timestamp.toLocaleTimeString(\'ru-RU\', {\n        hour12: false,\n        hour: \'2-digit\',\n        minute: \'2-digit\',\n        second: \'2-digit\',\n        fractionalSecondDigits: 3\n      });\n      logElement.innerHTML = "\\n            <span class=\\"log-timestamp\\">[".concat(timeStr, "]</span>\\n            <span class=\\"log-message\\">").concat(entry.message, "</span>\\n        ");\n      this.logContainer.appendChild(logElement);\n\n      // Удаляем старые записи из DOM\n      while (this.logContainer.children.length > this.maxLogEntries) {\n        this.logContainer.removeChild(this.logContainer.firstChild);\n      }\n    }\n  }, {\n    key: "updateStats",\n    value: function updateStats() {\n      var recentTime = Date.now() - 10000; // Последние 10 секунд\n      var recentEntries = this.logEntries.filter(function (e) {\n        return e.timestamp.getTime() > recentTime;\n      });\n      var corrections = recentEntries.filter(function (e) {\n        return e.type === \'correction\';\n      }).length;\n      var updates = recentEntries.filter(function (e) {\n        return e.type === \'update\';\n      }).length;\n      var garbage = recentEntries.filter(function (e) {\n        return e.type === \'garbage\';\n      }).length;\n      document.getElementById(\'stat-corrections\').textContent = corrections;\n      document.getElementById(\'stat-updates\').textContent = updates;\n      document.getElementById(\'stat-garbage\').textContent = garbage;\n\n      // Обновляем статус\n      var statusElement = document.getElementById(\'telemetry-status\');\n      if (corrections > 10 || garbage > 5) {\n        statusElement.textContent = \'ПРОБЛЕМЫ\';\n        statusElement.className = \'telemetry-status error\';\n      } else if (corrections > 3 || garbage > 0) {\n        statusElement.textContent = \'ПРЕДУПРЕЖДЕНИЕ\';\n        statusElement.className = \'telemetry-status warning\';\n      } else {\n        statusElement.textContent = \'ОК\';\n        statusElement.className = \'telemetry-status\';\n      }\n    }\n  }, {\n    key: "applyFilters",\n    value: function applyFilters() {\n      var _this3 = this;\n      this.logContainer.innerHTML = \'\';\n      this.logEntries.forEach(function (entry) {\n        entry.visible = _this3.filters[entry.type] !== false;\n        if (entry.visible) {\n          _this3.renderLogEntry(entry);\n        }\n      });\n      this.scrollToBottom();\n    }\n  }, {\n    key: "scrollToBottom",\n    value: function scrollToBottom() {\n      this.logContainer.scrollTop = this.logContainer.scrollHeight;\n    }\n  }, {\n    key: "clearLog",\n    value: function clearLog() {\n      this.logEntries = [];\n      this.logContainer.innerHTML = \'\';\n      this.updateStats();\n      this.addLogEntry(\'summary\', \'Лог очищен\', new Date());\n    }\n  }, {\n    key: "exportData",\n    value: function exportData() {\n      var data = {\n        timestamp: new Date().toISOString(),\n        entries: this.logEntries.map(function (entry) {\n          return {\n            type: entry.type,\n            message: entry.message,\n            timestamp: entry.timestamp.toISOString()\n          };\n        })\n      };\n      var blob = new Blob([JSON.stringify(data, null, 2)], {\n        type: \'application/json\'\n      });\n      var url = URL.createObjectURL(blob);\n      var a = document.createElement(\'a\');\n      a.href = url;\n      a.download = "telemetry_".concat(Date.now(), ".json");\n      a.click();\n      URL.revokeObjectURL(url);\n      this.addLogEntry(\'summary\', "\\u0414\\u0430\\u043D\\u043D\\u044B\\u0435 \\u044D\\u043A\\u0441\\u043F\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u044B (".concat(this.logEntries.length, " \\u0437\\u0430\\u043F\\u0438\\u0441\\u0435\\u0439)"), new Date());\n    }\n  }, {\n    key: "show",\n    value: function show() {\n      this.panel.style.display = \'block\';\n    }\n  }, {\n    key: "hide",\n    value: function hide() {\n      this.panel.style.display = \'none\';\n    }\n  }, {\n    key: "renderDetailedView",\n    value: function renderDetailedView() {\n      var _this4 = this;\n      var container = document.getElementById(\'telemetry-detailed\');\n      if (!container) return;\n      container.innerHTML = \'\';\n\n      // Показываем последние 50 детальных записей\n      var recentData = this.detailedData.slice(-50);\n      recentData.forEach(function (entry) {\n        var element = _this4.createDetailedEntry(entry);\n        container.appendChild(element);\n      });\n\n      // Прокручиваем вниз\n      container.scrollTop = container.scrollHeight;\n    }\n  }, {\n    key: "createDetailedEntry",\n    value: function createDetailedEntry(entry) {\n      var element = document.createElement(\'div\');\n      element.className = "detailed-entry ".concat(entry.type);\n      var timeStr = new Date(entry.timestamp).toLocaleTimeString(\'ru-RU\', {\n        hour12: false,\n        hour: \'2-digit\',\n        minute: \'2-digit\',\n        second: \'2-digit\',\n        fractionalSecondDigits: 3\n      });\n      var content = "<div class=\\"detailed-timestamp\\">[".concat(timeStr, "]</div>");\n      switch (entry.type) {\n        case \'object-state\':\n          content += this.formatObjectState(entry);\n          break;\n        case \'correction\':\n          content += this.formatCorrection(entry);\n          break;\n        case \'server-update\':\n          content += this.formatServerUpdate(entry);\n          break;\n        case \'client-command\':\n          content += this.formatClientCommand(entry);\n          break;\n        default:\n          content += "<div class=\\"detailed-header\\">".concat(entry.type, "</div>");\n          content += "<div class=\\"detailed-data\\">".concat(JSON.stringify(entry.data), "</div>");\n      }\n      element.innerHTML = content;\n      return element;\n    }\n  }, {\n    key: "formatObjectState",\n    value: function formatObjectState(entry) {\n      var data = entry.data;\n      return "\\n            <div class=\\"detailed-header\\">\\u0421\\u043E\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(data.objectId, "</div>\\n            <div class=\\"detailed-data\\">\\n                <div>\\u0422\\u0438\\u043F: ").concat(data.objectType, " (").concat(data.physicsType, ")</div>\\n                <div class=\\"detailed-position\\">\\u041F\\u043E\\u0437\\u0438\\u0446\\u0438\\u044F: x=").concat(data.position.x.toFixed(3), ", y=").concat(data.position.y.toFixed(3), ", z=").concat(data.position.z.toFixed(3), "</div>\\n                <div class=\\"detailed-velocity\\">\\u0421\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C: x=").concat(data.velocity.x.toFixed(3), ", y=").concat(data.velocity.y.toFixed(3), ", z=").concat(data.velocity.z.toFixed(3), " (").concat(data.speed.toFixed(3), " u/s)</div>\\n                <div>\\u041C\\u0430\\u0441\\u0441\\u0430: ").concat(data.mass, ", \\u0420\\u0430\\u0434\\u0438\\u0443\\u0441: ").concat(data.radius, "</div>\\n                ").concat(data.appliedImpulse ? "<div>\\u0418\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441: x=".concat(data.appliedImpulse.x.toFixed(3), ", y=").concat(data.appliedImpulse.y.toFixed(3), ", z=").concat(data.appliedImpulse.z.toFixed(3), "</div>") : \'\', "\\n            </div>\\n        ");\n    }\n  }, {\n    key: "formatCorrection",\n    value: function formatCorrection(entry) {\n      var data = entry.data;\n      return "\\n            <div class=\\"detailed-header\\">\\u041A\\u043E\\u0440\\u0440\\u0435\\u043A\\u0446\\u0438\\u044F ".concat(data.correctionType, ": \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442 ").concat(data.objectId, "</div>\\n            <div class=\\"detailed-data\\">\\n                <div class=\\"detailed-position\\">\\u041E\\u0442: x=").concat(data.fromPos.x.toFixed(3), ", y=").concat(data.fromPos.y.toFixed(3), ", z=").concat(data.fromPos.z.toFixed(3), "</div>\\n                <div class=\\"detailed-position\\">\\u0414\\u043E: x=").concat(data.toPos.x.toFixed(3), ", y=").concat(data.toPos.y.toFixed(3), ", z=").concat(data.toPos.z.toFixed(3), "</div>\\n                <div>\\u0420\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435: ").concat(data.distance.toFixed(3), " \\u0435\\u0434\\u0438\\u043D\\u0438\\u0446</div>\\n            </div>\\n        ");\n    }\n  }, {\n    key: "formatServerUpdate",\n    value: function formatServerUpdate(entry) {\n      var data = entry.data;\n      return "\\n            <div class=\\"detailed-header\\">\\u041E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430: \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.objectId, "</div>\\n            <div class=\\"detailed-data\\">\\n                ").concat(data.isGarbage ? \'<div style="color: #ffa500;">⚠️ МУСОРНЫЕ ДАННЫЕ</div>\' : \'\', "\\n                <div class=\\"detailed-position\\">\\u041F\\u043E\\u0437\\u0438\\u0446\\u0438\\u044F: x=").concat(data.position.x.toFixed(3), ", y=").concat(data.position.y.toFixed(3), ", z=").concat(data.position.z.toFixed(3), "</div>\\n                <div class=\\"detailed-velocity\\">\\u0421\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C: x=").concat(data.velocity.x.toFixed(3), ", y=").concat(data.velocity.y.toFixed(3), ", z=").concat(data.velocity.z.toFixed(3), "</div>\\n            </div>\\n        ");\n    }\n  }, {\n    key: "formatClientCommand",\n    value: function formatClientCommand(entry) {\n      var data = entry.data;\n      return "\\n            <div class=\\"detailed-header\\">\\u041A\\u043E\\u043C\\u0430\\u043D\\u0434\\u0430 \\u043A\\u043B\\u0438\\u0435\\u043D\\u0442\\u0430</div>\\n            <div class=\\"detailed-data\\">\\n                <div>\\u041D\\u0430\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435: x=".concat(data.direction.x.toFixed(3), ", y=").concat(data.direction.y.toFixed(3), ", z=").concat(data.direction.z.toFixed(3), "</div>\\n                <div>\\u0420\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435: ").concat(data.distance.toFixed(3), "</div>\\n                ").concat(data.force ? "<div>\\u0421\\u0438\\u043B\\u0430: x=".concat(data.force.x.toFixed(3), ", y=").concat(data.force.y.toFixed(3), ", z=").concat(data.force.z.toFixed(3), "</div>") : \'\', "\\n            </div>\\n        ");\n    }\n  }, {\n    key: "addDetailedEntry",\n    value: function addDetailedEntry(type, data) {\n      var timestamp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Date();\n      if (this.isPaused) return;\n      var entry = {\n        type: type,\n        data: data,\n        timestamp: timestamp.getTime ? timestamp.getTime() : timestamp\n      };\n      this.detailedData.push(entry);\n\n      // Ограничиваем размер буфера\n      if (this.detailedData.length > 200) {\n        this.detailedData.shift();\n      }\n\n      // Обновляем детальный вид если он активен\n      if (this.viewMode === \'detailed\') {\n        this.renderDetailedView();\n      }\n    }\n\n    // Методы для интеграции с телеметрией\n  }, {\n    key: "logCorrection",\n    value: function logCorrection(objectId, fromPos, toPos, type, distance) {\n      if (this.isPaused) return;\n      var message = "\\u041A\\u043E\\u0440\\u0440\\u0435\\u043A\\u0446\\u0438\\u044F ".concat(type, ": \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442 ").concat(objectId, ", \\u0440\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435 ").concat(distance.toFixed(2));\n      this.addLogEntry(\'correction\', message);\n\n      // Добавляем детальные данные\n      this.addDetailedEntry(\'correction\', {\n        objectId: objectId,\n        fromPos: fromPos,\n        toPos: toPos,\n        correctionType: type,\n        distance: distance\n      });\n    }\n  }, {\n    key: "logServerUpdate",\n    value: function logServerUpdate(objectId, position, velocity, isGarbage) {\n      if (this.isPaused) return;\n      if (isGarbage) {\n        var message = "\\u041C\\u0443\\u0441\\u043E\\u0440\\u043D\\u044B\\u0435 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435 \\u043E\\u0442 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430: \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(objectId);\n        this.addLogEntry(\'garbage\', message);\n      } else {\n        var _message = "\\u041E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430: \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(objectId);\n        this.addLogEntry(\'update\', _message);\n      }\n\n      // Добавляем детальные данные\n      this.addDetailedEntry(\'server-update\', {\n        objectId: objectId,\n        position: position,\n        velocity: velocity,\n        isGarbage: isGarbage\n      });\n    }\n  }, {\n    key: "logClientCommand",\n    value: function logClientCommand(direction, distance, force) {\n      if (this.isPaused) return;\n      var message = "\\u041A\\u043E\\u043C\\u0430\\u043D\\u0434\\u0430 \\u043A\\u043B\\u0438\\u0435\\u043D\\u0442\\u0430: \\u0440\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435 ".concat(distance.toFixed(2));\n      this.addLogEntry(\'command\', message);\n\n      // Добавляем детальные данные\n      this.addDetailedEntry(\'client-command\', {\n        direction: direction,\n        distance: distance,\n        force: force\n      });\n    }\n  }, {\n    key: "logSummary",\n    value: function logSummary(stats) {\n      if (this.isPaused) return;\n      var message = "\\u0421\\u0432\\u043E\\u0434\\u043A\\u0430: \\u043A\\u043E\\u0440\\u0440\\u0435\\u043A\\u0446\\u0438\\u0439 ".concat(stats.corrections || 0, ", \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0439 ").concat(stats.updates || 0, ", \\u043C\\u0443\\u0441\\u043E\\u0440\\u043D\\u044B\\u0445 ").concat(stats.garbage || 0);\n      this.addLogEntry(\'summary\', message);\n    }\n  }, {\n    key: "printRecentPlayerData",\n    value: function printRecentPlayerData() {\n      // Собираем последние данные по каждому игроку\n      var playerData = new Map();\n      for (var i = this.data.length - 1; i >= 0; i--) {\n        var entry = this.data[i];\n        if (entry.objectType === \'player\' && entry.position && !playerData.has(entry.objectId)) {\n          playerData.set(entry.objectId, entry);\n        }\n      }\n      var _iterator = telemetry_ui_createForOfIteratorHelper(playerData),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = telemetry_ui_slicedToArray(_step.value, 2),\n            playerId = _step$value[0],\n            data = _step$value[1];\n          // Конвертируем timestamp в читаемое время\n          var timestamp = new Date(data.timestamp);\n          var timeStr = timestamp.toLocaleTimeString(\'ru-RU\', {\n            hour12: false,\n            hour: \'2-digit\',\n            minute: \'2-digit\',\n            second: \'2-digit\',\n            fractionalSecondDigits: 3\n          });\n          console.log("\\uD83C\\uDFAE [ClientTelemetry] \\u0418\\u0433\\u0440\\u043E\\u043A ".concat(playerId, " [").concat(timeStr, "]:"));\n          console.log("   \\uD83D\\uDCCD \\u041F\\u043E\\u0437\\u0438\\u0446\\u0438\\u044F: (".concat(data.position.x.toFixed(2), ", ").concat(data.position.y.toFixed(2), ", ").concat(data.position.z.toFixed(2), ")"));\n          if (data.velocity) {\n            console.log("   \\uD83C\\uDFC3 \\u0421\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C: (".concat(data.velocity.x.toFixed(2), ", ").concat(data.velocity.y.toFixed(2), ", ").concat(data.velocity.z.toFixed(2), ") |").concat(data.speed.toFixed(2), "|"));\n          }\n          if (data.mass !== undefined) {\n            console.log("   \\u2696\\uFE0F  \\u041C\\u0430\\u0441\\u0441\\u0430: ".concat(data.mass.toFixed(2), " \\u043A\\u0433, \\u0420\\u0430\\u0434\\u0438\\u0443\\u0441: ").concat(data.radius.toFixed(2)));\n          }\n          console.log("   \\uD83D\\uDD27 \\u0424\\u0438\\u0437\\u0438\\u043A\\u0430: ".concat(data.physicsType, ", \\u0418\\u0441\\u0442\\u043E\\u0447\\u043D\\u0438\\u043A: ").concat(data.source));\n          console.log("   \\u23F0 \\u0412\\u0440\\u0435\\u043C\\u0435\\u043D\\u043D\\u0430\\u044F \\u043C\\u0435\\u0442\\u043A\\u0430: ".concat(data.timestamp));\n          if (data.appliedImpulse) {\n            console.log("   \\uD83D\\uDCA5 \\u0418\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441: (".concat(data.appliedImpulse.x.toFixed(2), ", ").concat(data.appliedImpulse.y.toFixed(2), ", ").concat(data.appliedImpulse.z.toFixed(2), ")"));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n}(); // Создаем глобальный экземпляр\nwindow.telemetryUI = new TelemetryUI();\n\n// Консольные команды\nwindow.showTelemetryUI = function () {\n  return window.telemetryUI.show();\n};\nwindow.hideTelemetryUI = function () {\n  return window.telemetryUI.hide();\n};\nwindow.clearTelemetryUI = function () {\n  return window.telemetryUI.clearLog();\n};\nwindow.telemetryDetailedMode = function () {\n  if (window.telemetryUI.viewMode === \'summary\') {\n    window.telemetryUI.toggleViewMode();\n  }\n};\nwindow.telemetrySummaryMode = function () {\n  if (window.telemetryUI.viewMode === \'detailed\') {\n    window.telemetryUI.toggleViewMode();\n  }\n};\nwindow.telemetryPause = function () {\n  if (!window.telemetryUI.isPaused) {\n    window.telemetryUI.togglePause();\n  }\n};\nwindow.telemetryResume = function () {\n  if (window.telemetryUI.isPaused) {\n    window.telemetryUI.togglePause();\n  }\n};\n\n;// ./src/index.js\nfunction src_typeof(o) { "@babel/helpers - typeof"; return src_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, src_typeof(o); }\nfunction src_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ src_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == src_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(src_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction src_slicedToArray(r, e) { return src_arrayWithHoles(r) || src_iterableToArrayLimit(r, e) || src_unsupportedIterableToArray(r, e) || src_nonIterableRest(); }\nfunction src_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction src_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return src_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? src_arrayLikeToArray(r, a) : void 0; } }\nfunction src_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction src_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction src_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction src_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction src_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// index.js - Главный файл для новой системы физики\n\n\n\n\n\n\n\n// Импортируем визуальную панель телеметрии\n\n\n// Конфигурация приложения\nvar APP_CONFIG = {\n  SERVER_URL: \'ws://localhost:8080/ws\',\n  TARGET_FPS: 60,\n  PHYSICS_TIMESTEP: 1 / 60,\n  DEBUG_MODE: true,\n  ENABLE_STATS: true\n};\n\n// Состояние приложения\nvar isRunning = false;\nvar src_lastFrameTime = 0;\nvar frameCount = 0;\nvar fpsCounter = 0;\nvar lastFpsUpdate = 0;\n\n// Рендерер\nvar src_renderer = null;\n\n// Камера\nvar src_camera = null;\n\n// UI элементы для отображения статистики\nvar statsContainer = null;\n\n// Инициализация приложения\nfunction initNewApp() {\n  return _initNewApp.apply(this, arguments);\n}\n\n// Инициализация рендерера\nfunction _initNewApp() {\n  _initNewApp = src_asyncToGenerator(/*#__PURE__*/src_regeneratorRuntime().mark(function _callee() {\n    var physicsInitialized, networkInitialized;\n    return src_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          console.log("[NewApp] Инициализация нового приложения...");\n          _context.prev = 1;\n          _context.next = 4;\n          return loadAmmo();\n        case 4:\n          // Инициализируем сцену\n          initScene();\n\n          // Инициализируем камеру\n          src_camera = initCamera();\n\n          // Используем рендерер из сцены\n          src_renderer = renderer;\n          console.log("[NewApp] Используется рендерер из сцены");\n\n          // Инициализируем новую систему физики\n          _context.next = 10;\n          return initAmmo();\n        case 10:\n          physicsInitialized = _context.sent;\n          if (physicsInitialized) {\n            _context.next = 13;\n            break;\n          }\n          throw new Error("Не удалось инициализировать физику");\n        case 13:\n          _context.next = 15;\n          return initNewNetwork(APP_CONFIG.SERVER_URL);\n        case 15:\n          networkInitialized = _context.sent;\n          if (networkInitialized) {\n            _context.next = 18;\n            break;\n          }\n          throw new Error("Не удалось инициализировать сеть");\n        case 18:\n          // Инициализируем gameStateManager с функциями сетевого модуля\n          initGameStateManager(scene_scene);\n          console.log("[NewApp] GameStateManager инициализирован");\n\n          // Создаем UI для статистики\n          createStatsUI();\n\n          // Настраиваем обработчики событий\n          setupEventHandlers();\n\n          // Запускаем основной цикл\n          startMainLoop();\n          console.log("[NewApp] Приложение успешно инициализировано");\n          return _context.abrupt("return", true);\n        case 27:\n          _context.prev = 27;\n          _context.t0 = _context["catch"](1);\n          console.error("[NewApp] Ошибка инициализации:", _context.t0);\n          return _context.abrupt("return", false);\n        case 31:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[1, 27]]);\n  }));\n  return _initNewApp.apply(this, arguments);\n}\nfunction initRenderer() {\n  return _initRenderer.apply(this, arguments);\n} // Обработчик изменения размера окна\nfunction _initRenderer() {\n  _initRenderer = src_asyncToGenerator(/*#__PURE__*/src_regeneratorRuntime().mark(function _callee2() {\n    var container;\n    return src_regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          src_renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: true,\n            powerPreference: "high-performance"\n          });\n          src_renderer.setSize(window.innerWidth, window.innerHeight);\n          src_renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n          src_renderer.shadowMap.enabled = true;\n          src_renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n          src_renderer.outputColorSpace = THREE.SRGBColorSpace;\n\n          // Добавляем canvas в DOM\n          container = document.getElementById(\'game-container\') || document.body;\n          container.appendChild(src_renderer.domElement);\n\n          // Обработчик изменения размера окна\n          window.addEventListener(\'resize\', src_onWindowResize);\n          console.log("[NewApp] Рендерер инициализирован");\n        case 10:\n        case "end":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _initRenderer.apply(this, arguments);\n}\nfunction src_onWindowResize() {\n  if (src_camera) {\n    src_camera.aspect = window.innerWidth / window.innerHeight;\n    src_camera.updateProjectionMatrix();\n  }\n  if (src_renderer) {\n    src_renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n}\n\n// Создание UI для статистики\nfunction createStatsUI() {\n  if (!APP_CONFIG.ENABLE_STATS) return;\n\n  // Создаем контейнер для статистики\n  statsContainer = document.createElement(\'div\');\n  statsContainer.id = \'stats-container\';\n  statsContainer.style.cssText = "\\n        position: fixed;\\n        top: 10px;\\n        left: 10px;\\n        background: rgba(0, 0, 0, 0.8);\\n        color: white;\\n        padding: 10px;\\n        border-radius: 5px;\\n        font-family: monospace;\\n        font-size: 12px;\\n        z-index: 1000;\\n        min-width: 250px;\\n    ";\n  document.body.appendChild(statsContainer);\n  console.log("[NewApp] UI статистики создан");\n}\n\n// Обновление UI статистики\nfunction updateStatsUI() {\n  if (!statsContainer || !APP_CONFIG.ENABLE_STATS) return;\n  var networkStats = getDetailedNetworkStats();\n  var physicsStats = getNetworkStats();\n  var physicsConfig = getPhysicsConfig();\n  var html = "\\n        <div><strong>\\uD83C\\uDF10 \\u0421\\u0435\\u0442\\u044C</strong></div>\\n        <div>\\u0421\\u043E\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435: ".concat(getConnectionState(), "</div>\\n        <div>\\u041F\\u0438\\u043D\\u0433: ").concat(networkStats.ping.toFixed(1), " \\u043C\\u0441</div>\\n        <div>\\u0414\\u0436\\u0438\\u0442\\u0442\\u0435\\u0440: ").concat(networkStats.jitter.toFixed(1), " \\u043C\\u0441</div>\\n        <div>\\u041A\\u0430\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E: ").concat(networkStats.quality, "</div>\\n        <div>\\u041F\\u043E\\u0442\\u0435\\u0440\\u044F \\u043F\\u0430\\u043A\\u0435\\u0442\\u043E\\u0432: ").concat((networkStats.packetLoss * 100).toFixed(2), "%</div>\\n        <div>\\u041F\\u0430\\u043A\\u0435\\u0442\\u043E\\u0432 \\u043F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u043E: ").concat(networkStats.packetsReceived, "</div>\\n        \\n        <div style=\\"margin-top: 10px;\\"><strong>\\u26A1 \\u0424\\u0438\\u0437\\u0438\\u043A\\u0430</strong></div>\\n        <div>FPS: ").concat(fpsCounter, "</div>\\n        <div>\\u041E\\u0431\\u044A\\u0435\\u043A\\u0442\\u043E\\u0432: ").concat(Object.keys(objects_objects).length, "</div>\\n        <div>\\u041E\\u043A\\u043D\\u043E \\u043F\\u0440\\u0435\\u0434\\u0441\\u043A\\u0430\\u0437\\u0430\\u043D\\u0438\\u044F: ").concat(physicsConfig.TIME.PREDICTION_WINDOW, " \\u043C\\u0441</div>\\n        <div>\\u041F\\u043E\\u0440\\u043E\\u0433 \\u0442\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0430\\u0446\\u0438\\u0438: ").concat(physicsConfig.CORRECTION.TELEPORT_THRESHOLD, "</div>\\n        \\n        <div style=\\"margin-top: 10px;\\"><strong>\\uD83C\\uDFAE \\u0423\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435</strong></div>\\n        <div>WASD - \\u0434\\u0432\\u0438\\u0436\\u0435\\u043D\\u0438\\u0435</div>\\n        <div>Space - \\u043F\\u0440\\u044B\\u0436\\u043E\\u043A</div>\\n        <div>R - \\u0441\\u0431\\u0440\\u043E\\u0441 \\u043F\\u043E\\u0437\\u0438\\u0446\\u0438\\u0438</div>\\n        <div>T - \\u043F\\u0435\\u0440\\u0435\\u043A\\u043B\\u044E\\u0447\\u0435\\u043D\\u0438\\u0435 \\u0440\\u0435\\u0436\\u0438\\u043C\\u0430</div>\\n    ");\n  statsContainer.innerHTML = html;\n}\n\n// Настройка обработчиков событий\nfunction setupEventHandlers() {\n  // Обработчики клавиатуры\n  document.addEventListener(\'keydown\', onKeyDown);\n  document.addEventListener(\'keyup\', onKeyUp);\n\n  // Обработчики мыши\n  document.addEventListener(\'mousedown\', onMouseDown);\n  document.addEventListener(\'mouseup\', onMouseUp);\n  document.addEventListener(\'mousemove\', onMouseMove);\n\n  // Обработчик закрытия страницы\n  window.addEventListener(\'beforeunload\', onBeforeUnload);\n  console.log("[NewApp] Обработчики событий настроены");\n}\n\n// Обработчик нажатия клавиш\nfunction onKeyDown(event) {\n  var key = event.code;\n  switch (key) {\n    case \'KeyW\':\n    case \'ArrowUp\':\n      sendMovementCommand(\'forward\', true);\n      break;\n    case \'KeyS\':\n    case \'ArrowDown\':\n      sendMovementCommand(\'backward\', true);\n      break;\n    case \'KeyA\':\n    case \'ArrowLeft\':\n      sendMovementCommand(\'left\', true);\n      break;\n    case \'KeyD\':\n    case \'ArrowRight\':\n      sendMovementCommand(\'right\', true);\n      break;\n    case \'Space\':\n      event.preventDefault();\n      sendMovementCommand(\'jump\', true);\n      break;\n    case \'KeyR\':\n      sendCommand(\'reset_position\');\n      break;\n    case \'KeyT\':\n      togglePhysicsMode();\n      break;\n    case \'KeyF\':\n      toggleFullscreen();\n      break;\n    case \'Escape\':\n      if (document.fullscreenElement) {\n        document.exitFullscreen();\n      }\n      break;\n  }\n}\n\n// Обработчик отпускания клавиш\nfunction onKeyUp(event) {\n  var key = event.code;\n  switch (key) {\n    case \'KeyW\':\n    case \'ArrowUp\':\n      sendMovementCommand(\'forward\', false);\n      break;\n    case \'KeyS\':\n    case \'ArrowDown\':\n      sendMovementCommand(\'backward\', false);\n      break;\n    case \'KeyA\':\n    case \'ArrowLeft\':\n      sendMovementCommand(\'left\', false);\n      break;\n    case \'KeyD\':\n    case \'ArrowRight\':\n      sendMovementCommand(\'right\', false);\n      break;\n    case \'Space\':\n      sendMovementCommand(\'jump\', false);\n      break;\n  }\n}\n\n// Отправка команды движения\nfunction sendMovementCommand(direction, isPressed) {\n  sendCommand(\'movement\', {\n    direction: direction,\n    pressed: isPressed,\n    timestamp: Date.now()\n  });\n}\n\n// Обработчик нажатия мыши\nfunction onMouseDown(event) {\n  if (event.button === 0) {\n    // Левая кнопка мыши\n    // Можно добавить логику для стрельбы или взаимодействия\n    console.log("[NewApp] Левая кнопка мыши нажата");\n  }\n}\n\n// Обработчик отпускания мыши\nfunction onMouseUp(event) {\n  if (event.button === 0) {\n    // Левая кнопка мыши\n    console.log("[NewApp] Левая кнопка мыши отпущена");\n  }\n}\n\n// Обработчик движения мыши\nfunction onMouseMove(event) {\n  // Можно добавить логику для поворота камеры\n}\n\n// Переключение режима физики\nfunction togglePhysicsMode() {\n  // Здесь можно добавить логику переключения между разными режимами физики\n  console.log("[NewApp] Переключение режима физики");\n}\n\n// Переключение полноэкранного режима\nfunction toggleFullscreen() {\n  if (!document.fullscreenElement) {\n    document.documentElement.requestFullscreen();\n  } else {\n    document.exitFullscreen();\n  }\n}\n\n// Обработчик закрытия страницы\nfunction onBeforeUnload() {\n  src_cleanup();\n}\n\n// Запуск основного цикла\nfunction startMainLoop() {\n  isRunning = true;\n  src_lastFrameTime = performance.now();\n  requestAnimationFrame(mainLoop);\n  console.log("[NewApp] Основной цикл запущен");\n}\n\n// Основной цикл приложения\nfunction mainLoop(currentTime) {\n  if (!isRunning) return;\n\n  // Вычисляем deltaTime\n  var deltaTime = Math.min((currentTime - src_lastFrameTime) / 1000, 1 / 30); // Ограничиваем максимальный deltaTime\n  src_lastFrameTime = currentTime;\n\n  // Обновляем счетчик FPS\n  frameCount++;\n  if (currentTime - lastFpsUpdate >= 1000) {\n    fpsCounter = frameCount;\n    frameCount = 0;\n    lastFpsUpdate = currentTime;\n  }\n\n  // Обновляем физику\n  stepPhysics(deltaTime);\n\n  // Обновляем позиции mesh\'ей из физических тел\n  updateMeshPositions();\n\n  // Обновляем камеру\n  updateCamera(deltaTime);\n\n  // Рендерим сцену\n  if (src_camera) {\n    src_renderer.render(scene_scene, src_camera);\n  }\n\n  // Обновляем UI статистики\n  if (frameCount % 30 === 0) {\n    // Обновляем UI каждые 30 кадров\n    updateStatsUI();\n  }\n\n  // Планируем следующий кадр\n  requestAnimationFrame(mainLoop);\n}\n\n// Обновление позиций mesh\'ей из физических тел\nfunction updateMeshPositions() {\n  for (var _i = 0, _Object$entries = Object.entries(objects_objects); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = src_slicedToArray(_Object$entries[_i], 2),\n      id = _Object$entries$_i[0],\n      obj = _Object$entries$_i[1];\n    if (obj.body && obj.mesh && obj.physicsBy === \'ammo\') {\n      // Для ammo-объектов обновляем mesh из физического тела\n      var transform = obj.body.getWorldTransform();\n      var origin = transform.getOrigin();\n      var rotation = transform.getRotation();\n      obj.mesh.position.set(origin.x(), origin.y(), origin.z());\n      obj.mesh.quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w());\n    }\n    // Для both и bullet объектов позиции обновляются в системе физики\n  }\n}\n\n// Остановка приложения\nfunction stopApp() {\n  isRunning = false;\n  src_cleanup();\n  console.log("[NewApp] Приложение остановлено");\n}\n\n// Очистка ресурсов\nfunction src_cleanup() {\n  // Закрываем сетевое соединение\n  closeConnection();\n\n  // Очищаем физику\n  cleanup();\n\n  // Удаляем UI\n  if (statsContainer) {\n    document.body.removeChild(statsContainer);\n    statsContainer = null;\n  }\n\n  // Очищаем рендерер\n  if (src_renderer) {\n    src_renderer.dispose();\n    src_renderer = null;\n  }\n  console.log("[NewApp] Ресурсы очищены");\n}\n\n// Создание тестового объекта\nfunction createTestObject() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \'sphere\';\n  var testData = {\n    id: \'test_\' + Date.now(),\n    object_type: type,\n    x: Math.random() * 20 - 10,\n    y: 10,\n    z: Math.random() * 20 - 10,\n    mass: 1.0,\n    radius: 1.0,\n    color: \'#ff0000\',\n    physics_by: \'both\'\n  };\n  var obj = createMeshAndBodyForObject(testData);\n  if (obj) {\n    objects_objects[testData.id] = obj;\n    console.log("[NewApp] Создан тестовый объект:", testData.id);\n  }\n  return testData.id;\n}\n\n// Применение импульса к объекту\nfunction applyTestImpulse(objectId) {\n  var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    x: 0,\n    y: 10,\n    z: 0\n  };\n  sendImpulse(objectId, direction, 5.0);\n}\n\n// Экспорт для отладки\nwindow.newApp = {\n  createTestObject: createTestObject,\n  applyTestImpulse: applyTestImpulse,\n  getNetworkStats: getDetailedNetworkStats,\n  getPhysicsStats: getNetworkStats,\n  stopApp: stopApp,\n  cleanup: src_cleanup\n};\n\n// Загрузка Ammo.js\nfunction loadAmmo() {\n  return _loadAmmo.apply(this, arguments);\n} // Автоматический запуск при загрузке страницы\nfunction _loadAmmo() {\n  _loadAmmo = src_asyncToGenerator(/*#__PURE__*/src_regeneratorRuntime().mark(function _callee3() {\n    return src_regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log("[NewApp] Загрузка Ammo.js...");\n          return _context3.abrupt("return", new Promise(function (resolve, reject) {\n            if (window.Ammo) {\n              console.log("[NewApp] Ammo.js уже загружен");\n              resolve();\n              return;\n            }\n            var script = document.createElement(\'script\');\n            script.src = \'./ammo/ammo.wasm.js\';\n            script.onload = function () {\n              console.log("[NewApp] Ammo.js загружен успешно");\n              // Ammo.js требует инициализации\n              Ammo().then(function () {\n                console.log("[NewApp] Ammo.js инициализирован");\n                resolve();\n              })["catch"](reject);\n            };\n            script.onerror = function () {\n              console.error("[NewApp] Ошибка загрузки Ammo.js");\n              reject(new Error(\'Не удалось загрузить Ammo.js\'));\n            };\n            document.head.appendChild(script);\n          }));\n        case 2:\n        case "end":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _loadAmmo.apply(this, arguments);\n}\ndocument.addEventListener(\'DOMContentLoaded\', function () {\n  console.log("[NewApp] DOM загружен, инициализируем приложение...");\n  initNewApp();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q1Q7WUFDSjtZQUVBLElBQU1vZ0MsTUFBTSxHQUFHN2xDLFFBQVEsQ0FBQ2tYLGFBQWEsQ0FBQyxRQUFRLENBQUM7WUFDL0MydUIsTUFBTSxDQUFDQyxHQUFHLEdBQUcscUJBQXFCO1lBQ2xDRCxNQUFNLENBQUNFLE1BQU0sR0FBRyxZQUFNO2NBQ2xCOW1DLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLG1DQUFtQyxDQUFDO2NBQ2hEO2NBQ0E2VCxJQUFJLENBQUMsQ0FBQyxDQUFDcE4sSUFBSSxDQUFDLFlBQU07Z0JBQ2QxRyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxrQ0FBa0MsQ0FBQztnQkFDL0N1RyxPQUFPLENBQUMsQ0FBQztjQUNiLENBQUMsQ0FBQyxTQUFNLENBQUMyRyxNQUFNLENBQUM7WUFDcEIsQ0FBQztZQUNEeTVCLE1BQU0sQ0FBQzU0QixPQUFPLEdBQUcsWUFBTTtjQUNuQmhPLE9BQU8sQ0FBQzZNLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQztjQUNqRE0sTUFBTSxDQUFDLElBQUl2RyxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztZQUNyRCxDQUFDO1lBQ0Q3RixRQUFRLENBQUN5OUIsSUFBSSxDQUFDdjlCLFdBQVcsQ0FBQzJsQyxNQUFNLENBQUM7VUFDckMsQ0FBQyxDQUFDO1FBQUE7UUFBQTtVQUFBLE9BQUFELFNBQUEsQ0FBQXQ5QixJQUFBO01BQUE7SUFBQSxHQUFBbzlCLFFBQUE7RUFBQSxDQUNMO0VBQUEsT0FBQUQsU0FBQSxDQUFBejhCLEtBQUEsT0FBQUQsU0FBQTtBQUFBO0FBR0QvSSxRQUFRLENBQUNJLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLFlBQU07RUFDaERuQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxxREFBcUQsQ0FBQztFQUNsRTZqQyxVQUFVLENBQUMsQ0FBQztBQUNoQixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi9zcmMvc2NlbmUuanM/MjY0YyIsIndlYnBhY2s6Ly93ZWIvLi9zcmMvbmV0d29yay5qcz9iZDkyIiwid2VicGFjazovL3dlYi8uL3NyYy9leWVzLmpzPzkxOTAiLCJ3ZWJwYWNrOi8vd2ViLy4vc3JjL2RpYWdub3N0aWNzLmpzPzU3ZjUiLCJ3ZWJwYWNrOi8vd2ViLy4vc3JjL3RlbGVtZXRyeS5qcz81YjRmIiwid2VicGFjazovL3dlYi8uL3NyYy9nYW1lcGFkLmpzPzM3ODAiLCJ3ZWJwYWNrOi8vd2ViLy4vc3JjL2dhbWVzdGF0ZW1hbmFnZXIuanM/NWI0MiIsIndlYnBhY2s6Ly93ZWIvLi9zcmMvcGh5c2ljcy5qcz9jNDgzIiwid2VicGFjazovL3dlYi8uL3NyYy9vYmplY3RzLmpzP2M4ZWMiLCJ3ZWJwYWNrOi8vd2ViLy4vc3JjL2NhbWVyYS5qcz83YjYwIiwid2VicGFjazovL3dlYi8uL3NyYy90ZWxlbWV0cnlfdWkuanM/NWQwZCIsIndlYnBhY2s6Ly93ZWIvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzY2VuZS5qc1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG5leHBvcnQgbGV0IHNjZW5lLCByZW5kZXJlcjtcbmV4cG9ydCBsZXQgZGlyZWN0aW9uYWxMaWdodDsgLy8g0K3QutGB0L/QvtGA0YLQuNGA0YPQtdC8INGB0LLQtdGCINC00LvRjyDQtNC+0YHRgtGD0L/QvdC+0YHRgtC4INCyINC00YDRg9Cz0LjRhSDQvNC+0LTRg9C70Y/RhVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdFNjZW5lKCkge1xuICAgIGNvbnNvbGUubG9nKFwidHJ5IHRvIGluaXRTY2VuZVwiKVxuICAgIHNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG4gICAgc2NlbmUuYmFja2dyb3VuZCA9IG5ldyBUSFJFRS5Db2xvcigweDg4Y2NmZik7IFxuXG4gICAgcmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcih7IGFudGlhbGlhczogdHJ1ZSB9KTtcbiAgICByZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgIC8vINCS0LrQu9GO0YfQsNC10Lwg0L/QvtC00LTQtdGA0LbQutGDINGC0LXQvdC10LlcbiAgICByZW5kZXJlci5zaGFkb3dNYXAuZW5hYmxlZCA9IHRydWU7XG4gICAgcmVuZGVyZXIuc2hhZG93TWFwLnR5cGUgPSBUSFJFRS5QQ0ZTb2Z0U2hhZG93TWFwO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudCk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25XaW5kb3dSZXNpemUpO1xuXG4gICAgLy8g0J3QsNGB0YLRgNCw0LjQstCw0LXQvCDQvtGB0LLQtdGJ0LXQvdC40LVcbiAgICBjb25zdCBhbWJpZW50ID0gbmV3IFRIUkVFLkFtYmllbnRMaWdodCgweGZmZmZmZiwgMC44KTtcbiAgICBzY2VuZS5hZGQoYW1iaWVudCk7XG5cbiAgICAvLyDQntGB0L3QvtCy0L3QvtC5INC90LDQv9GA0LDQstC70LXQvdC90YvQuSDRgdCy0LXRgiDRgSDRgtC10L3Rj9C80LhcbiAgICBkaXJlY3Rpb25hbExpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHhmZmZmZmYsIDEpO1xuICAgIGRpcmVjdGlvbmFsTGlnaHQucG9zaXRpb24uc2V0KDUwLCAxMDAsIDUwKTtcbiAgICBkaXJlY3Rpb25hbExpZ2h0LmNhc3RTaGFkb3cgPSB0cnVlO1xuICAgIFxuICAgIC8vINCd0LDRgdGC0YDQsNC40LLQsNC10Lwg0L/QsNGA0LDQvNC10YLRgNGLINGC0LXQvdC10Lkg0LTQu9GPINC+0YXQstCw0YLQsCDQsdC+0LvRjNGI0L7QuSDQvtCx0LvQsNGB0YLQuFxuICAgIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS5uZWFyID0gMC4xO1xuICAgIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS5mYXIgPSA1MDA7IFxuICAgIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS5sZWZ0ID0gLTEwMDsgXG4gICAgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cuY2FtZXJhLnJpZ2h0ID0gMTAwO1xuICAgIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS50b3AgPSAxMDA7XG4gICAgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cuY2FtZXJhLmJvdHRvbSA9IC0xMDA7XG4gICAgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cubWFwU2l6ZS53aWR0aCA9IDUxMjsgLy8g0JHQvtC70YzRiNC10LUg0YDQsNC30YDQtdGI0LXQvdC40LUg0LTQu9GPINC70YPRh9GI0LXQs9C+INC60LDRh9C10YHRgtCy0LBcbiAgICBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5tYXBTaXplLmhlaWdodCA9IDUxMjtcbiAgICAvLyBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5iaWFzID0gLTAuMDAwMTsgLy8g0KPQvNC10L3RjNGI0LDQtdC8INCw0YDRgtC10YTQsNC60YLRiyDRgtC10L3QuFxuICAgIHNjZW5lLmFkZChkaXJlY3Rpb25hbExpZ2h0KTtcblxuICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDQstGB0L/QvtC80L7Qs9Cw0YLQtdC70YzQvdGL0Lkg0YHQstC10YIg0LTQu9GPINC/0L7QtNGB0LLQtdGC0LrQuCDRgtC10L3QtdC5XG4gICAgY29uc3QgZmlsbExpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHhmZmZmZmYsIDEpO1xuICAgIGZpbGxMaWdodC5wb3NpdGlvbi5zZXQoLTUwLCA1MCwgLTUwKTtcbiAgICBzY2VuZS5hZGQoZmlsbExpZ2h0KTtcbiAgICBcbiAgICAvLyDQnNC+0LbQvdC+INC00L7QsdCw0LLQuNGC0Ywg0L/QvtC80L7RidC90LjQuiDQtNC70Y8g0L7RgtC70LDQtNC60Lgg0YLQtdC90LXQuSAo0YDQsNGB0LrQvtC80LzQtdC90YLQuNGA0YPQudGC0LUg0L/RgNC4INC90LXQvtCx0YXQvtC00LjQvNC+0YHRgtC4KVxuICAgIC8vIGNvbnN0IGhlbHBlciA9IG5ldyBUSFJFRS5DYW1lcmFIZWxwZXIoZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cuY2FtZXJhKTtcbiAgICAvLyBzY2VuZS5hZGQoaGVscGVyKTtcbn1cblxuZnVuY3Rpb24gb25XaW5kb3dSZXNpemUoKSB7XG4gICAgLy8g0J7QsdGA0LDQsdC+0YLQutCwINC40LfQvNC10L3QtdC90LjRjyDRgNCw0LfQvNC10YDQsCDQvtC60L3QsCDRgtC+0LvRjNC60L4g0LTQu9GPINGA0LXQvdC00LXRgNC10YDQsFxuICAgIC8vICjQutCw0LzQtdGA0LAg0L7QsdGA0LDQsdCw0YLRi9Cy0LDQtdGC0YHRjyDQsiBjYW1lcmEuanMpXG4gICAgcmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbn1cblxuLy8g0JTQvtCx0LDQstC70Y/QtdC8INGE0YPQvdC60YbQuNGOINC00LvRjyDQvtCx0L3QvtCy0LvQtdC90LjRjyDQv9C+0LvQvtC20LXQvdC40Y8g0LjRgdGC0L7Rh9C90LjQutCwINGB0LLQtdGC0LAg0L7RgtC90L7RgdC40YLQtdC70YzQvdC+INC60LDQvNC10YDRiywg0LrQsNC6INGB0L7Qu9C90YbQtVxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVNoYWRvd0NhbWVyYShjYW1lcmEpIHtcbiAgICBpZiAoIWRpcmVjdGlvbmFsTGlnaHQgfHwgIWNhbWVyYSkgcmV0dXJuO1xuICAgIFxuICAgIC8vINCf0L7Qu9GD0YfQsNC10Lwg0L3QsNC/0YDQsNCy0LvQtdC90LjQtSDQstC30LPQu9GP0LTQsCDQutCw0LzQtdGA0YtcbiAgICBjb25zdCBjYW1lcmFEaXJlY3Rpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuICAgIGNhbWVyYS5nZXRXb3JsZERpcmVjdGlvbihjYW1lcmFEaXJlY3Rpb24pO1xuICAgIFxuICAgIC8vINCh0L7Qt9C00LDQtdC8INC/0L7Qt9C40YbQuNGOIFwi0YHQvtC70L3RhtCwXCIg0L7RgtC90L7RgdC40YLQtdC70YzQvdC+INC60LDQvNC10YDRi1xuICAgIC8vINCf0L7QtNC90LjQvNCw0LXQvCBcItGB0L7Qu9C90YbQtVwiINC90LAgMjAwINC10LTQuNC90LjRhiDQstCy0LXRgNGFINC+0YIg0L/QvtC30LjRhtC40Lgg0LrQsNC80LXRgNGLINC4INGB0LzQtdGJ0LDQtdC8INC90LXQvNC90L7Qs9C+INCyINGB0YLQvtGA0L7QvdGDINC4INC90LDQt9Cw0LRcbiAgICBjb25zdCBzdW5PZmZzZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygxMDAsIDIwMCwgLTUwKTtcbiAgICBjb25zdCBzdW5Qb3NpdGlvbiA9IGNhbWVyYS5wb3NpdGlvbi5jbG9uZSgpLmFkZChzdW5PZmZzZXQpO1xuICAgIFxuICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQv9C+0LfQuNGG0LjRjiDRgdCy0LXRgtCwXG4gICAgZGlyZWN0aW9uYWxMaWdodC5wb3NpdGlvbi5jb3B5KHN1blBvc2l0aW9uKTtcbiAgICBcbiAgICAvLyDQntC/0YDQtdC00LXQu9GP0LXQvCDRgtC+0YfQutGDLCDQutGD0LTQsCDQvdCw0L/RgNCw0LLQu9C10L0g0YHQstC10YIgLSDQv9C10YDQtdC0INC60LDQvNC10YDQvtC5INC90LAg0YDQsNGB0YHRgtC+0Y/QvdC40LggMTAwINC10LTQuNC90LjRhlxuICAgIGNvbnN0IHRhcmdldE9mZnNldCA9IGNhbWVyYURpcmVjdGlvbi5jbG9uZSgpLm11bHRpcGx5U2NhbGFyKDEwMCk7XG4gICAgY29uc3QgdGFyZ2V0UG9zaXRpb24gPSBjYW1lcmEucG9zaXRpb24uY2xvbmUoKS5hZGQodGFyZ2V0T2Zmc2V0KTtcbiAgICBkaXJlY3Rpb25hbExpZ2h0LnRhcmdldC5wb3NpdGlvbi5jb3B5KHRhcmdldFBvc2l0aW9uKTtcbiAgICBcbiAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0LzQsNGC0YDQuNGG0YMg0YLRgNCw0L3RgdGE0L7RgNC80LDRhtC40Lgg0YbQtdC70Lgg0YHQstC10YLQsFxuICAgIGRpcmVjdGlvbmFsTGlnaHQudGFyZ2V0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG4gICAgXG4gICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INC80LDRgtGA0LjRhtGDINC60LDQvNC10YDRiyDRgtC10L3QtdC5XG4gICAgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3cuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbn1cblxuZXhwb3J0IHsgb25XaW5kb3dSZXNpemUgfTsiLCIvLyBuZXR3b3JrX25ldy5qcyAtINCd0L7QstGL0Lkg0LzQvtC00YPQu9GMINGB0LXRgtC4INGBINC/0L7QtNC00LXRgNC20LrQvtC5INCy0YDQtdC80LXQvdC90YvRhSDQvNC10YLQvtC6XG5pbXBvcnQgeyBvYmplY3RzLCBjcmVhdGVNZXNoQW5kQm9keUZvck9iamVjdCB9IGZyb20gJy4vb2JqZWN0cyc7XG5pbXBvcnQgZ2FtZVN0YXRlTWFuYWdlciBmcm9tICcuL2dhbWVzdGF0ZW1hbmFnZXInO1xuaW1wb3J0IHsgXG4gICAgcmVjZWl2ZU9iamVjdFVwZGF0ZSBhcyBoYW5kbGVTZXJ2ZXJVcGRhdGUsIFxuICAgIHVwZGF0ZVNlcnZlclRpbWVPZmZzZXQsIFxuICAgIHVwZGF0ZVBpbmcsXG4gICAgZ2V0TmV0d29ya1N0YXRzLFxuICAgIGdldFBoeXNpY3NXb3JsZFxufSBmcm9tICcuL3BoeXNpY3MnO1xuXG4vLyDQmtC+0L3RhNC40LPRg9GA0LDRhtC40Y8g0YHQtdGC0LhcbmNvbnN0IE5FVFdPUktfQ09ORklHID0ge1xuICAgIFBJTkdfSU5URVJWQUw6IDEwMDAsICAgICAgICAgICAvLyDQmNC90YLQtdGA0LLQsNC7INC/0LjQvdCz0LAg0LIg0LzRgVxuICAgIFRJTUVfU1lOQ19JTlRFUlZBTDogNTAwMCwgICAgICAvLyDQmNC90YLQtdGA0LLQsNC7INGB0LjQvdGF0YDQvtC90LjQt9Cw0YbQuNC4INCy0YDQtdC80LXQvdC4INCyINC80YFcbiAgICBNQVhfUElOR19TQU1QTEVTOiAyMCwgICAgICAgICAgLy8g0JzQsNC60YHQuNC80LDQu9GM0L3QvtC1INC60L7Qu9C40YfQtdGB0YLQstC+INC+0LHRgNCw0LfRhtC+0LIg0L/QuNC90LPQsFxuICAgIE1BWF9USU1FX09GRlNFVF9TQU1QTEVTOiAxMCwgICAvLyDQnNCw0LrRgdC40LzQsNC70YzQvdC+0LUg0LrQvtC70LjRh9C10YHRgtCy0L4g0L7QsdGA0LDQt9GG0L7QsiDRgdC80LXRidC10L3QuNGPINCy0YDQtdC80LXQvdC4XG4gICAgUkVDT05ORUNUX0RFTEFZOiAyMDAwLCAgICAgICAgIC8vINCX0LDQtNC10YDQttC60LAg0L/QtdGA0LXQv9C+0LTQutC70Y7Rh9C10L3QuNGPINCyINC80YFcbiAgICBNQVhfUkVDT05ORUNUX0FUVEVNUFRTOiA1LCAgICAgLy8g0JzQsNC60YHQuNC80LDQu9GM0L3QvtC1INC60L7Qu9C40YfQtdGB0YLQstC+INC/0L7Qv9GL0YLQvtC6INC/0LXRgNC10L/QvtC00LrQu9GO0YfQtdC90LjRj1xufTtcblxuLy8g0KHQvtGB0YLQvtGP0L3QuNC1INGB0L7QtdC00LjQvdC10L3QuNGPXG5sZXQgd3MgPSBudWxsO1xubGV0IGNvbm5lY3Rpb25TdGF0ZSA9ICdkaXNjb25uZWN0ZWQnOyAvLyBkaXNjb25uZWN0ZWQsIGNvbm5lY3RpbmcsIGNvbm5lY3RlZFxubGV0IHJlY29ubmVjdEF0dGVtcHRzID0gMDtcbmxldCBsYXN0UGluZ1RpbWUgPSAwO1xubGV0IHBpbmdIaXN0b3J5ID0gW107XG5sZXQgdGltZU9mZnNldEhpc3RvcnkgPSBbXTtcblxuLy8g0KHRgtCw0YLQuNGB0YLQuNC60LBcbmxldCBuZXR3b3JrTWV0cmljcyA9IHtcbiAgICBwYWNrZXRzUmVjZWl2ZWQ6IDAsXG4gICAgcGFja2V0c0xvc3Q6IDAsXG4gICAgdG90YWxMYXRlbmN5OiAwLFxuICAgIGF2ZXJhZ2VMYXRlbmN5OiAwLFxuICAgIGppdHRlcjogMCxcbiAgICBsYXN0UGFja2V0VGltZTogMCxcbiAgICBjb25uZWN0aW9uUXVhbGl0eTogJ3Vua25vd24nIC8vIGV4Y2VsbGVudCwgZ29vZCwgZmFpciwgcG9vclxufTtcblxuLy8g0JHRg9GE0LXRgCDQtNC70Y8g0L7QsdGA0LDQsdC+0YLQutC4INC/0LDQutC10YLQvtCyXG5jb25zdCBwYWNrZXRCdWZmZXIgPSBbXTtcbmxldCBsYXN0UHJvY2Vzc2VkUGFja2V0SWQgPSAwO1xuXG4vLyDQk9C70L7QsdCw0LvRjNC90LDRjyDQutC+0L3RhNC40LPRg9GA0LDRhtC40Y8g0YTQuNC30LjQutC4XG5sZXQgZ2xvYmFsUGh5c2ljc0NvbmZpZyA9IG51bGw7XG5cbi8vINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0LXRgtC10LLQvtCz0L4g0YHQvtC10LTQuNC90LXQvdC40Y9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0TmV3TmV0d29yayhzZXJ2ZXJVcmwpIHtcbiAgICBjb25zb2xlLmxvZyhcIltOZXdOZXR3b3JrXSDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDQvdC+0LLQvtCz0L4g0YHQtdGC0LXQstC+0LPQviDQvNC+0LTRg9C70Y8uLi5cIik7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgY29ubmVjdFRvU2VydmVyKHNlcnZlclVybCk7XG4gICAgICAgIHN0YXJ0UGVyaW9kaWNUYXNrcygpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW05ld05ldHdvcmtdINCe0YjQuNCx0LrQsCDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQuDpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG4vLyDQn9C+0LTQutC70Y7Rh9C10L3QuNC1INC6INGB0LXRgNCy0LXRgNGDXG5hc3luYyBmdW5jdGlvbiBjb25uZWN0VG9TZXJ2ZXIoc2VydmVyVXJsKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29ubmVjdGlvblN0YXRlID0gJ2Nvbm5lY3RpbmcnO1xuICAgICAgICBcbiAgICAgICAgd3MgPSBuZXcgV2ViU29ja2V0KHNlcnZlclVybCk7XG4gICAgICAgIFxuICAgICAgICB3cy5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltOZXdOZXR3b3JrXSDQodC+0LXQtNC40L3QtdC90LjQtSDRg9GB0YLQsNC90L7QstC70LXQvdC+XCIpO1xuICAgICAgICAgICAgY29ubmVjdGlvblN0YXRlID0gJ2Nvbm5lY3RlZCc7XG4gICAgICAgICAgICByZWNvbm5lY3RBdHRlbXB0cyA9IDA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCh0YDQsNC30YMg0L7RgtC/0YDQsNCy0LvRj9C10Lwg0L/QuNC90LMg0LTQu9GPINGB0LjQvdGF0YDQvtC90LjQt9Cw0YbQuNC4INCy0YDQtdC80LXQvdC4XG4gICAgICAgICAgICBzZW5kUGluZygpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB3cy5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGhhbmRsZU1lc3NhZ2UoZXZlbnQuZGF0YSk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB3cy5vbmNsb3NlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltOZXdOZXR3b3JrXSDQodC+0LXQtNC40L3QtdC90LjQtSDQt9Cw0LrRgNGL0YLQvjpcIiwgZXZlbnQuY29kZSwgZXZlbnQucmVhc29uKTtcbiAgICAgICAgICAgIGNvbm5lY3Rpb25TdGF0ZSA9ICdkaXNjb25uZWN0ZWQnO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQkNCy0YLQvtC80LDRgtC40YfQtdGB0LrQvtC1INC/0LXRgNC10L/QvtC00LrQu9GO0YfQtdC90LjQtVxuICAgICAgICAgICAgaWYgKHJlY29ubmVjdEF0dGVtcHRzIDwgTkVUV09SS19DT05GSUcuTUFYX1JFQ09OTkVDVF9BVFRFTVBUUykge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZWNvbm5lY3RBdHRlbXB0cysrO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW05ld05ldHdvcmtdINCf0L7Qv9GL0YLQutCwINC/0LXRgNC10L/QvtC00LrQu9GO0YfQtdC90LjRjyAke3JlY29ubmVjdEF0dGVtcHRzfS8ke05FVFdPUktfQ09ORklHLk1BWF9SRUNPTk5FQ1RfQVRURU1QVFN9YCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3RUb1NlcnZlcihzZXJ2ZXJVcmwpO1xuICAgICAgICAgICAgICAgIH0sIE5FVFdPUktfQ09ORklHLlJFQ09OTkVDVF9ERUxBWSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB3cy5vbmVycm9yID0gKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW05ld05ldHdvcmtdINCe0YjQuNCx0LrQsCBXZWJTb2NrZXQ6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAvLyDQotCw0LnQvNCw0YPRgiDQv9C+0LTQutC70Y7Rh9C10L3QuNGPXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb25TdGF0ZSA9PT0gJ2Nvbm5lY3RpbmcnKSB7XG4gICAgICAgICAgICAgICAgd3MuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCfQotCw0LnQvNCw0YPRgiDQv9C+0LTQutC70Y7Rh9C10L3QuNGPJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDAwMCk7XG4gICAgfSk7XG59XG5cbi8vINCe0LHRgNCw0LHQvtGC0LrQsCDQstGF0L7QtNGP0YnQuNGFINGB0L7QvtCx0YnQtdC90LjQuVxuZnVuY3Rpb24gaGFuZGxlTWVzc2FnZShkYXRhKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgIFxuICAgICAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0YHRgtCw0YLQuNGB0YLQuNC60YNcbiAgICAgICAgbmV0d29ya01ldHJpY3MucGFja2V0c1JlY2VpdmVkKys7XG4gICAgICAgIG5ldHdvcmtNZXRyaWNzLmxhc3RQYWNrZXRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgXG4gICAgICAgIHN3aXRjaCAobWVzc2FnZS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdwaW5nJzpcbiAgICAgICAgICAgICAgICBoYW5kbGVQaW5nKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSAncG9uZyc6XG4gICAgICAgICAgICAgICAgaGFuZGxlUG9uZyhtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGNhc2UgJ3VwZGF0ZSc6XG4gICAgICAgICAgICAgICAgaGFuZGxlT2JqZWN0VXBkYXRlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSAnYmF0Y2hfdXBkYXRlJzpcbiAgICAgICAgICAgICAgICBoYW5kbGVCYXRjaFVwZGF0ZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGNhc2UgJ3RpbWVfc3luYyc6XG4gICAgICAgICAgICAgICAgaGFuZGxlVGltZVN5bmMobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlICdjcmVhdGUnOlxuICAgICAgICAgICAgICAgIGhhbmRsZU9iamVjdENyZWF0ZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGNhc2UgJ2Zvb2Rfc3Bhd25lZCc6XG4gICAgICAgICAgICAgICAgaGFuZGxlRm9vZFNwYXduZWQobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlICdwaHlzaWNzX2NvbmZpZyc6XG4gICAgICAgICAgICAgICAgaGFuZGxlUGh5c2ljc0NvbmZpZyhtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGNhc2UgJ2luZm8nOlxuICAgICAgICAgICAgICAgIGhhbmRsZUluZm8obWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlICdwbGF5ZXJfaWQnOlxuICAgICAgICAgICAgICAgIGhhbmRsZVBsYXllcklkKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSAnY21kX2Fjayc6XG4gICAgICAgICAgICAgICAgaGFuZGxlQ29tbWFuZEFjayhtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiW05ld05ldHdvcmtdINCd0LXQuNC30LLQtdGB0YLQvdGL0Lkg0YLQuNC/INGB0L7QvtCx0YnQtdC90LjRjzpcIiwgbWVzc2FnZS50eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW05ld05ldHdvcmtdINCe0YjQuNCx0LrQsCDQvtCx0YDQsNCx0L7RgtC60Lgg0YHQvtC+0LHRidC10L3QuNGPOlwiLCBlcnJvcik7XG4gICAgfVxufVxuXG4vLyDQntCx0YDQsNCx0L7RgtC60LAg0L/QuNC90LPQsCDQvtGCINGB0LXRgNCy0LXRgNCwXG5mdW5jdGlvbiBoYW5kbGVQaW5nKG1lc3NhZ2UpIHtcbiAgICAvLyDQntGC0LLQtdGH0LDQtdC8IHBvbmcn0L7QvFxuICAgIGNvbnN0IHBvbmdNZXNzYWdlID0ge1xuICAgICAgICB0eXBlOiAncG9uZycsXG4gICAgICAgIGNsaWVudF90aW1lOiBtZXNzYWdlLmNsaWVudF90aW1lIHx8IERhdGUubm93KCksXG4gICAgICAgIHNlcnZlcl90aW1lOiBtZXNzYWdlLnNlcnZlcl90aW1lIHx8IERhdGUubm93KClcbiAgICB9O1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAgIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkocG9uZ01lc3NhZ2UpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW05ld05ldHdvcmtdINCe0YjQuNCx0LrQsCDQvtGC0L/RgNCw0LLQutC4IHBvbmc6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbi8vINCe0LHRgNCw0LHQvtGC0LrQsCDQvtGC0LLQtdGC0LAg0L3QsCDQv9C40L3Qs1xuZnVuY3Rpb24gaGFuZGxlUG9uZyhtZXNzYWdlKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBsYXRlbmN5ID0gbm93IC0gbWVzc2FnZS5jbGllbnRfdGltZTtcbiAgICBcbiAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0LjRgdGC0L7RgNC40Y4g0L/QuNC90LPQsFxuICAgIHBpbmdIaXN0b3J5LnB1c2gobGF0ZW5jeSk7XG4gICAgaWYgKHBpbmdIaXN0b3J5Lmxlbmd0aCA+IE5FVFdPUktfQ09ORklHLk1BWF9QSU5HX1NBTVBMRVMpIHtcbiAgICAgICAgcGluZ0hpc3Rvcnkuc2hpZnQoKTtcbiAgICB9XG4gICAgXG4gICAgLy8g0JLRi9GH0LjRgdC70Y/QtdC8INGB0YDQtdC00L3QuNC5INC/0LjQvdCzINC4INC00LbQuNGC0YLQtdGAXG4gICAgY29uc3QgYXZlcmFnZVBpbmcgPSBwaW5nSGlzdG9yeS5yZWR1Y2UoKHN1bSwgcGluZykgPT4gc3VtICsgcGluZywgMCkgLyBwaW5nSGlzdG9yeS5sZW5ndGg7XG4gICAgXG4gICAgaWYgKHBpbmdIaXN0b3J5Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgY29uc3Qgaml0dGVyID0gcGluZ0hpc3RvcnkucmVkdWNlKChzdW0sIHBpbmcsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHJldHVybiBzdW07XG4gICAgICAgICAgICByZXR1cm4gc3VtICsgTWF0aC5hYnMocGluZyAtIHBpbmdIaXN0b3J5W2luZGV4IC0gMV0pO1xuICAgICAgICB9LCAwKSAvIChwaW5nSGlzdG9yeS5sZW5ndGggLSAxKTtcbiAgICAgICAgXG4gICAgICAgIG5ldHdvcmtNZXRyaWNzLmppdHRlciA9IGppdHRlcjtcbiAgICB9XG4gICAgXG4gICAgbmV0d29ya01ldHJpY3MuYXZlcmFnZUxhdGVuY3kgPSBhdmVyYWdlUGluZztcbiAgICBuZXR3b3JrTWV0cmljcy50b3RhbExhdGVuY3kgKz0gbGF0ZW5jeTtcbiAgICBcbiAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0L/QuNC90LMg0LIg0YHQuNGB0YLQtdC80LUg0YTQuNC30LjQutC4XG4gICAgdXBkYXRlUGluZyhhdmVyYWdlUGluZyk7XG4gICAgXG4gICAgLy8g0KHQuNC90YXRgNC+0L3QuNC30LjRgNGD0LXQvCDQstGA0LXQvNGPXG4gICAgaWYgKG1lc3NhZ2Uuc2VydmVyX3RpbWUpIHtcbiAgICAgICAgdXBkYXRlU2VydmVyVGltZU9mZnNldChtZXNzYWdlLnNlcnZlcl90aW1lLCBtZXNzYWdlLmNsaWVudF90aW1lKTtcbiAgICB9XG4gICAgXG4gICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INC60LDRh9C10YHRgtCy0L4g0YHQvtC10LTQuNC90LXQvdC40Y9cbiAgICB1cGRhdGVDb25uZWN0aW9uUXVhbGl0eSgpO1xuICAgIFxuICAgIC8vINCb0L7Qs9C40YDRg9C10Lwg0L/QuNC90LMg0YLQvtC70YzQutC+INC40LfRgNC10LTQutCwXG4gICAgaWYgKE1hdGgucmFuZG9tKCkgPCAwLjEpIHsgLy8gMTAlINC+0YIg0L/QuNC90LPQvtCyXG4gICAgICAgIGNvbnNvbGUubG9nKGBbTmV3TmV0d29ya10g0J/QuNC90LM6ICR7bGF0ZW5jeX3QvNGBLCDQodGA0LXQtNC90LjQuTogJHthdmVyYWdlUGluZy50b0ZpeGVkKDEpfdC80YEsINCU0LbQuNGC0YLQtdGAOiAke25ldHdvcmtNZXRyaWNzLmppdHRlci50b0ZpeGVkKDEpfdC80YFgKTtcbiAgICB9XG59XG5cbi8vINCe0LHRgNCw0LHQvtGC0LrQsCDQvtCx0L3QvtCy0LvQtdC90LjRjyDQvtCx0YrQtdC60YLQsFxuZnVuY3Rpb24gaGFuZGxlT2JqZWN0VXBkYXRlKG1lc3NhZ2UpIHtcbiAgICBpZiAoIW1lc3NhZ2UuaWQpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiW05ld05ldHdvcmtdINCe0LHQvdC+0LLQu9C10L3QuNC1INC+0LHRitC10LrRgtCwINCx0LXQtyBJRFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0LLRgNC10LzQtdC90L3Rg9GOINC80LXRgtC60YMg0L/QvtC70YPRh9C10L3QuNGPXG4gICAgbWVzc2FnZS5yZWNlaXZlZF9hdCA9IERhdGUubm93KCk7XG4gICAgXG4gICAgLy8g0J/QtdGA0LXQtNCw0LXQvCDQsiDRgdC40YHRgtC10LzRgyDRhNC40LfQuNC60LhcbiAgICBoYW5kbGVTZXJ2ZXJVcGRhdGUobWVzc2FnZSk7XG59XG5cbi8vINCe0LHRgNCw0LHQvtGC0LrQsCDQv9Cw0LrQtdGC0L3QvtCz0L4g0L7QsdC90L7QstC70LXQvdC40Y9cbmZ1bmN0aW9uIGhhbmRsZUJhdGNoVXBkYXRlKG1lc3NhZ2UpIHtcbiAgICBpZiAoIW1lc3NhZ2UudXBkYXRlcyB8fCB0eXBlb2YgbWVzc2FnZS51cGRhdGVzICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJbTmV3TmV0d29ya10g0J3QtdC60L7RgNGA0LXQutGC0L3QvtC1INC/0LDQutC10YLQvdC+0LUg0L7QsdC90L7QstC70LXQvdC40LVcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgcmVjZWl2ZWRBdCA9IERhdGUubm93KCk7XG4gICAgY29uc3Qgc2VydmVyVGltZSA9IG1lc3NhZ2UudGltZTsgLy8g0KHQtdGA0LLQtdGAINC+0YLQv9GA0LDQstC70Y/QtdGCICd0aW1lJywg0LAg0L3QtSAnc2VydmVyX3RpbWUnXG4gICAgXG4gICAgLy8g0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdC8INC60LDQttC00YvQuSDQvtCx0YrQtdC60YIg0LIg0L/QsNC60LXRgtC1XG4gICAgY29uc3Qgb2JqZWN0SWRzID0gT2JqZWN0LmtleXMobWVzc2FnZS51cGRhdGVzKTtcbiAgICBmb3IgKGNvbnN0IG9iamVjdElkIG9mIG9iamVjdElkcykge1xuICAgICAgICBjb25zdCBvYmplY3REYXRhID0gbWVzc2FnZS51cGRhdGVzW29iamVjdElkXTtcbiAgICAgICAgaWYgKG9iamVjdERhdGEgJiYgb2JqZWN0RGF0YS5pZCkge1xuICAgICAgICAgICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8INGC0LjQvyDRgdC+0L7QsdGJ0LXQvdC40Y9cbiAgICAgICAgICAgIGlmIChvYmplY3REYXRhLnR5cGUgIT09ICd1cGRhdGUnKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBbTmV3TmV0d29ya10g0J3QtdC40LfQstC10YHRgtC90YvQuSDRgtC40L8g0YHQvtC+0LHRidC10L3QuNGPINCyINC/0LDQutC10YLQvdC+0Lwg0L7QsdC90L7QstC70LXQvdC40Lg6ICR7b2JqZWN0RGF0YS50eXBlfWApO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQn9GA0L7QstC10YDRj9C10LwsINGB0YPRidC10YHRgtCy0YPQtdGCINC70Lgg0L7QsdGK0LXQutGCINCyINC60L7Qu9C70LXQutGG0LjQuFxuICAgICAgICAgICAgaWYgKCFvYmplY3RzW29iamVjdERhdGEuaWRdKSB7XG4gICAgICAgICAgICAgICAgLy8g0KHQvtC30LTQsNC10Lwg0L7QsdGK0LXQutGCINCx0LXQtyDQu9C40YjQvdC40YUg0LvQvtCz0L7QslxuICAgICAgICAgICAgICAgIC8vINCf0YvRgtCw0LXQvNGB0Y8g0YHQvtC30LTQsNGC0Ywg0L7QsdGK0LXQutGCINC90LAg0L7RgdC90L7QstC1INC00LDQvdC90YvRhSDQvtCx0L3QvtCy0LvQtdC90LjRj1xuICAgICAgICAgICAgICAgIC8vINCU0LvRjyDRjdGC0L7Qs9C+INC90YPQttC90L4g0L7Qv9GA0LXQtNC10LvQuNGC0Ywg0YLQuNC/INC+0LHRitC10LrRgtCwXG4gICAgICAgICAgICAgICAgbGV0IG9iamVjdFR5cGUgPSAnc3BoZXJlJzsgLy8g0J/QviDRg9C80L7Qu9GH0LDQvdC40Y5cbiAgICAgICAgICAgICAgICBpZiAob2JqZWN0RGF0YS5pZC5pbmNsdWRlcygndGVycmFpbicpKSBvYmplY3RUeXBlID0gJ3RlcnJhaW4nO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9iamVjdERhdGEuaWQuaW5jbHVkZXMoJ3BsYXllcicpKSBvYmplY3RUeXBlID0gJ3NwaGVyZSc7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgY3JlYXRlRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IG9iamVjdERhdGEuaWQsXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdF90eXBlOiBvYmplY3RUeXBlLFxuICAgICAgICAgICAgICAgICAgICB4OiBvYmplY3REYXRhLnBvc2l0aW9uPy54IHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIHk6IG9iamVjdERhdGEucG9zaXRpb24/LnkgfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgejogb2JqZWN0RGF0YS5wb3NpdGlvbj8ueiB8fCAwLFxuICAgICAgICAgICAgICAgICAgICBwaHlzaWNzX2J5OiAnYm90aCcsIC8vINCf0L4g0YPQvNC+0LvRh9Cw0L3QuNGOXG4gICAgICAgICAgICAgICAgICAgIG1hc3M6IDEuMCxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAxLjBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGhhbmRsZU9iamVjdENyZWF0ZShjcmVhdGVEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgb2JqZWN0RGF0YS5yZWNlaXZlZF9hdCA9IHJlY2VpdmVkQXQ7XG4gICAgICAgICAgICBvYmplY3REYXRhLnNlcnZlcl90aW1lID0gc2VydmVyVGltZTtcbiAgICAgICAgICAgIGhhbmRsZVNlcnZlclVwZGF0ZShvYmplY3REYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyDQm9C+0LPQuNGA0YPQtdC8INC/0LDQutC10YLQvdGL0LUg0L7QsdC90L7QstC70LXQvdC40Y8g0YDQtdC20LVcbiAgICBpZiAob2JqZWN0SWRzLmxlbmd0aCA+IDAgJiYgTWF0aC5yYW5kb20oKSA8IDAuMSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgW05ld05ldHdvcmtdINCe0LHRgNCw0LHQvtGC0LDQvdC+INC/0LDQutC10YLQvdGL0YUg0L7QsdC90L7QstC70LXQvdC40Lk6ICR7b2JqZWN0SWRzLmxlbmd0aH1gKTtcbiAgICB9XG59XG5cbi8vINCe0LHRgNCw0LHQvtGC0LrQsCDRgdC40L3RhdGA0L7QvdC40LfQsNGG0LjQuCDQstGA0LXQvNC10L3QuFxuZnVuY3Rpb24gaGFuZGxlVGltZVN5bmMobWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlLnNlcnZlcl90aW1lICYmIG1lc3NhZ2UuY2xpZW50X3RpbWUpIHtcbiAgICAgICAgdXBkYXRlU2VydmVyVGltZU9mZnNldChtZXNzYWdlLnNlcnZlcl90aW1lLCBtZXNzYWdlLmNsaWVudF90aW1lKTtcbiAgICB9XG59XG5cbi8vINCe0LHRgNCw0LHQvtGC0LrQsCDRgdC+0LfQtNCw0L3QuNGPINC+0LHRitC10LrRgtCwXG5mdW5jdGlvbiBoYW5kbGVPYmplY3RDcmVhdGUobWVzc2FnZSkge1xuICAgIGNvbnNvbGUubG9nKGBbTmV3TmV0d29ya10g0KHQvtC30LTQsNC90LjQtSDQvtCx0YrQtdC60YLQsDogJHttZXNzYWdlLmlkfWApO1xuICAgIFxuICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCwg0YfRgtC+INC+0LHRitC10LrRgiDQtdGJ0LUg0L3QtSDRgdGD0YnQtdGB0YLQstGD0LXRglxuICAgIGlmIChvYmplY3RzW21lc3NhZ2UuaWRdKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIltOZXdOZXR3b3JrXSDQntCx0YrQtdC60YIg0YPQttC1INGB0YPRidC10YHRgtCy0YPQtdGCOlwiLCBtZXNzYWdlLmlkKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICAvLyDQodC+0LfQtNCw0LXQvCDQvtCx0YrQtdC60YJcbiAgICBjb25zdCBvYmogPSBjcmVhdGVNZXNoQW5kQm9keUZvck9iamVjdChtZXNzYWdlKTtcbiAgICBpZiAob2JqKSB7XG4gICAgICAgIC8vINCS0JDQltCd0J46INCg0LXQs9C40YHRgtGA0LjRgNGD0LXQvCDQvtCx0YrQtdC60YIg0LIg0LrQvtC70LvQtdC60YbQuNC4XG4gICAgICAgIG9iamVjdHNbbWVzc2FnZS5pZF0gPSBvYmo7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbTmV3TmV0d29ya10g0J7QsdGK0LXQutGCINC30LDRgNC10LPQuNGB0YLRgNC40YDQvtCy0LDQvTogJHttZXNzYWdlLmlkfWApO1xuICAgICAgICBcbiAgICAgICAgLy8g0JTQvtC/0L7Qu9C90LjRgtC10LvRjNC90LDRjyDQu9C+0LPQuNC60LAg0LTQu9GPINGB0L/QtdGG0LjQsNC70YzQvdGL0YUg0YLQuNC/0L7QsiDQvtCx0YrQtdC60YLQvtCyICjQsdC10Lcg0LvQuNGI0L3QuNGFINC70L7Qs9C+0LIpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIltOZXdOZXR3b3JrXSDQndC1INGD0LTQsNC70L7RgdGMINGB0L7Qt9C00LDRgtGMINC+0LHRitC10LrRgjpcIiwgbWVzc2FnZS5pZCk7XG4gICAgfVxufVxuXG4vLyDQntCx0YDQsNCx0L7RgtC60LAg0L/QvtGP0LLQu9C10L3QuNGPINC10LTRi1xuZnVuY3Rpb24gaGFuZGxlRm9vZFNwYXduZWQobWVzc2FnZSkge1xuICAgIC8vINCf0L7Rj9Cy0LvQtdC90LjQtSDQtdC00YsgKNCx0LXQtyDQu9C+0LPQvtCyKVxufVxuXG4vLyDQntCx0YDQsNCx0L7RgtC60LAg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNC4INGE0LjQt9C40LrQuFxuZnVuY3Rpb24gaGFuZGxlUGh5c2ljc0NvbmZpZyhtZXNzYWdlKSB7XG4gICAgY29uc29sZS5sb2coXCJbTmV3TmV0d29ya10g0J/QvtC70YPRh9C10L3QsCDQutC+0L3RhNC40LPRg9GA0LDRhtC40Y8g0YTQuNC30LjQutC4OlwiLCBtZXNzYWdlKTtcbiAgICBcbiAgICBpZiAoIW1lc3NhZ2UuY29uZmlnICYmICFtZXNzYWdlLndvcmxkICYmICFtZXNzYWdlLnBsYXllciAmJiAhbWVzc2FnZS5jb250cm9sKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIltOZXdOZXR3b3JrXSDQmtC+0L3RhNC40LPRg9GA0LDRhtC40Y8g0YTQuNC30LjQutC4INC/0YPRgdGC0LAg0LjQu9C4INC40LzQtdC10YIg0L3QtdCy0LXRgNC90YvQuSDRhNC+0YDQvNCw0YJcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgLy8g0JjQt9Cy0LvQtdC60LDQtdC8INC60L7QvdGE0LjQs9GD0YDQsNGG0LjRjiDQsiDQt9Cw0LLQuNGB0LjQvNC+0YHRgtC4INC+0YIg0YTQvtGA0LzQsNGC0LAg0YHQvtC+0LHRidC10L3QuNGPXG4gICAgY29uc3QgY29uZmlnID0gbWVzc2FnZS5jb25maWcgfHwgbWVzc2FnZTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgICAvLyDQn9GA0LjQvNC10L3Rj9C10Lwg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNGOINC6INGE0LjQt9C40YfQtdGB0LrQvtC80YMg0LzQuNGA0YMgQW1tby5qc1xuICAgICAgICBhcHBseUFtbW9QaHlzaWNzQ29uZmlnKGNvbmZpZyk7XG4gICAgICAgIFxuICAgICAgICAvLyDQodC+0YXRgNCw0L3Rj9C10Lwg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNGOINCz0LvQvtCx0LDQu9GM0L3QviDQtNC70Y8g0L3QvtCy0YvRhSDQvtCx0YrQtdC60YLQvtCyXG4gICAgICAgIGdsb2JhbFBoeXNpY3NDb25maWcgPSBjb25maWc7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhcIltOZXdOZXR3b3JrXSDQmtC+0L3RhNC40LPRg9GA0LDRhtC40Y8g0YTQuNC30LjQutC4INGD0YHQv9C10YjQvdC+INC/0YDQuNC80LXQvdC10L3QsFwiKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW05ld05ldHdvcmtdINCe0YjQuNCx0LrQsCDQv9GA0LjQvNC10L3QtdC90LjRjyDQutC+0L3RhNC40LPRg9GA0LDRhtC40Lgg0YTQuNC30LjQutC4OlwiLCBlcnJvcik7XG4gICAgfVxufVxuXG4vLyDQntCx0YDQsNCx0L7RgtC60LAg0LjQvdGE0L7RgNC80LDRhtC40L7QvdC90YvRhSDRgdC+0L7QsdGJ0LXQvdC40LlcbmZ1bmN0aW9uIGhhbmRsZUluZm8obWVzc2FnZSkge1xuICAgIC8vINCY0L3RhNC+0YDQvNCw0YbQuNC+0L3QvdGL0LUg0YHQvtC+0LHRidC10L3QuNGPINC+0LHRi9GH0L3QviDRgdC+0LTQtdGA0LbQsNGCINC+0LHRidGD0Y4g0LjQvdGE0L7RgNC80LDRhtC40Y4g0L4g0YHQtdGA0LLQtdGA0LVcbiAgICAvLyDQm9C+0LPQuNGA0YPQtdC8INGC0L7Qu9GM0LrQviDQstCw0LbQvdGL0LUg0LjQvdGE0L4t0YHQvtC+0LHRidC10L3QuNGPXG4gICAgaWYgKG1lc3NhZ2UubGV2ZWwgPT09ICdpbXBvcnRhbnQnIHx8IG1lc3NhZ2UuaW1wb3J0YW50KSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbyhcIltOZXdOZXR3b3JrXSDQmNC90YTQvtGA0LzQsNGG0LjRjyDQvtGCINGB0LXRgNCy0LXRgNCwOlwiLCBtZXNzYWdlLnRleHQgfHwgbWVzc2FnZS5tZXNzYWdlIHx8IFwiXCIpO1xuICAgIH1cbn1cblxuLy8g0J7QsdGA0LDQsdC+0YLQutCwINGD0YHRgtCw0L3QvtCy0LrQuCBJRCDQuNCz0YDQvtC60LBcbmZ1bmN0aW9uIGhhbmRsZVBsYXllcklkKG1lc3NhZ2UpIHtcbiAgICBjb25zdCBwbGF5ZXJJZCA9IG1lc3NhZ2UucGxheWVyX2lkIHx8IG1lc3NhZ2UuaWQ7XG4gICAgaWYgKHBsYXllcklkKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbTmV3TmV0d29ya10g0J/QvtC70YPRh9C10L0gSUQg0LjQs9GA0L7QutCwOiAke3BsYXllcklkfWApO1xuICAgICAgICBcbiAgICAgICAgLy8g0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10LwgSUQg0LjQs9GA0L7QutCwINCyIEdhbWVTdGF0ZU1hbmFnZXJcbiAgICAgICAgLy8gcGxheWVyX2lkINGB0L7QvtCx0YnQtdC90LjQtSDQvNC+0LbQtdGCINGB0L7QtNC10YDQttCw0YLRjCDQutCw0LogcGxheWVyIElELCDRgtCw0Log0Lggb2JqZWN0IElEXG4gICAgICAgIC8vINCV0YHQu9C4INGN0YLQviDQv9GA0L7RgdGC0L4gSUQsINC40YHQv9C+0LvRjNC30YPQtdC8INC10LPQviDQutCw0Log0L7QsdGK0LXQutGCIElEXG4gICAgICAgIGdhbWVTdGF0ZU1hbmFnZXIuc2V0UGxheWVySUQocGxheWVySWQsIHBsYXllcklkKTtcbiAgICAgICAgY29uc29sZS5sb2coYFtOZXdOZXR3b3JrXSBJRCDQuNCz0YDQvtC60LAg0YPRgdGC0LDQvdC+0LLQu9C10L0g0LIgR2FtZVN0YXRlTWFuYWdlcjogJHtwbGF5ZXJJZH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJbTmV3TmV0d29ya10g0J/QvtC70YPRh9C10L3QviDRgdC+0L7QsdGJ0LXQvdC40LUgcGxheWVyX2lkINCx0LXQtyBJRCDQuNCz0YDQvtC60LBcIik7XG4gICAgfVxufVxuXG4vLyDQntCx0YDQsNCx0L7RgtC60LAg0L/QvtC00YLQstC10YDQttC00LXQvdC40Y8g0LrQvtC80LDQvdC0XG5mdW5jdGlvbiBoYW5kbGVDb21tYW5kQWNrKG1lc3NhZ2UpIHtcbiAgICAvLyDQodC10YDQstC10YAg0L/QvtC00YLQstC10YDQttC00LDQtdGCINC/0L7Qu9GD0YfQtdC90LjQtSDQuCDQvtCx0YDQsNCx0L7RgtC60YMg0LrQvtC80LDQvdC00YtcbiAgICAvLyDQnNC+0LbQtdC8INC70L7Qs9C40YDQvtCy0LDRgtGMINGC0L7Qu9GM0LrQviDQvtGI0LjQsdC60Lgg0LjQu9C4INCy0LDQttC90YvQtSDRgdC+0LHRi9GC0LjRj1xuICAgIGlmIChtZXNzYWdlLnN0YXR1cyA9PT0gJ2Vycm9yJykge1xuICAgICAgICBjb25zb2xlLndhcm4oYFtOZXdOZXR3b3JrXSDQntGI0LjQsdC60LAg0LLRi9C/0L7Qu9C90LXQvdC40Y8g0LrQvtC80LDQvdC00Ys6ICR7bWVzc2FnZS5lcnJvciB8fCAn0L3QtdC40LfQstC10YHRgtC90LDRjyDQvtGI0LjQsdC60LAnfWApO1xuICAgIH0gZWxzZSBpZiAobWVzc2FnZS5zdGF0dXMgPT09ICdzdWNjZXNzJyAmJiBNYXRoLnJhbmRvbSgpIDwgMC4xKSB7XG4gICAgICAgIC8vINCb0L7Qs9C40YDRg9C10Lwg0YPRgdC/0LXRiNC90YvQtSDQv9C+0LTRgtCy0LXRgNC20LTQtdC90LjRjyDRgtC+0LvRjNC60L4g0LIgMTAlINGB0LvRg9GH0LDQtdCyXG4gICAgICAgIGNvbnNvbGUubG9nKGBbTmV3TmV0d29ya10g0JrQvtC80LDQvdC00LAg0LLRi9C/0L7Qu9C90LXQvdCwOiAke21lc3NhZ2UuY21kIHx8ICfQvdC10LjQt9Cy0LXRgdGC0L3QsNGPJ31gKTtcbiAgICB9XG4gICAgXG4gICAgLy8g0JfQtNC10YHRjCDQvNC+0LbQvdC+INC00L7QsdCw0LLQuNGC0Ywg0L7QsdGA0LDQsdC+0YLQutGDINGB0L/QtdGG0LjRhNC40YfQvdGL0YUg0L/QvtC00YLQstC10YDQttC00LXQvdC40LlcbiAgICAvLyDQndCw0L/RgNC40LzQtdGALCDQvtCx0L3QvtCy0LvQtdC90LjQtSDRgdC+0YHRgtC+0Y/QvdC40Y8gVUkg0LjQu9C4INC80LXRgtGA0LjQulxufVxuXG4vLyDQntGC0L/RgNCw0LLQutCwINC/0LjQvdCz0LBcbmZ1bmN0aW9uIHNlbmRQaW5nKCkge1xuICAgIGlmIChjb25uZWN0aW9uU3RhdGUgIT09ICdjb25uZWN0ZWQnKSByZXR1cm47XG4gICAgXG4gICAgY29uc3QgcGluZ01lc3NhZ2UgPSB7XG4gICAgICAgIHR5cGU6ICdwaW5nJyxcbiAgICAgICAgY2xpZW50X3RpbWU6IERhdGUubm93KClcbiAgICB9O1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAgIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkocGluZ01lc3NhZ2UpKTtcbiAgICAgICAgbGFzdFBpbmdUaW1lID0gRGF0ZS5ub3coKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW05ld05ldHdvcmtdINCe0YjQuNCx0LrQsCDQvtGC0L/RgNCw0LLQutC4INC/0LjQvdCz0LA6XCIsIGVycm9yKTtcbiAgICB9XG59XG5cbi8vINCe0YLQv9GA0LDQstC60LAg0LrQvtC80LDQvdC00YtcbmV4cG9ydCBmdW5jdGlvbiBzZW5kQ29tbWFuZChjb21tYW5kLCBkYXRhID0ge30pIHtcbiAgICBpZiAoY29ubmVjdGlvblN0YXRlICE9PSAnY29ubmVjdGVkJykge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJbTmV3TmV0d29ya10g0J/QvtC/0YvRgtC60LAg0L7RgtC/0YDQsNCy0LrQuCDQutC+0LzQsNC90LTRiyDQv9GA0Lgg0L7RgtGB0YPRgtGB0YLQstC40Lgg0YHQvtC10LTQuNC90LXQvdC40Y9cIik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgICAgdHlwZTogJ2NtZCcsXG4gICAgICAgIGNtZDogY29tbWFuZCxcbiAgICAgICAgY2xpZW50X3RpbWU6IERhdGUubm93KCksXG4gICAgICAgIGRhdGE6IGRhdGFcbiAgICB9O1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAgIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW05ld05ldHdvcmtdINCe0YjQuNCx0LrQsCDQvtGC0L/RgNCw0LLQutC4INC60L7QvNCw0L3QtNGLOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbi8vINCe0YLQv9GA0LDQstC60LAg0LjQvNC/0YPQu9GM0YHQsCDQvtCx0YrQtdC60YLRg1xuZXhwb3J0IGZ1bmN0aW9uIHNlbmRJbXB1bHNlKG9iamVjdElkLCBkaXJlY3Rpb24sIGZvcmNlID0gMS4wKSB7XG4gICAgcmV0dXJuIHNlbmRDb21tYW5kKCdpbXB1bHNlJywge1xuICAgICAgICBvYmplY3RfaWQ6IG9iamVjdElkLFxuICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvbixcbiAgICAgICAgZm9yY2U6IGZvcmNlLFxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICB9KTtcbn1cblxuLy8g0JfQsNC/0YPRgdC6INC/0LXRgNC40L7QtNC40YfQtdGB0LrQuNGFINC30LDQtNCw0YdcbmZ1bmN0aW9uIHN0YXJ0UGVyaW9kaWNUYXNrcygpIHtcbiAgICAvLyDQn9C10YDQuNC+0LTQuNGH0LXRgdC60LjQuSDQv9C40L3Qs1xuICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgaWYgKGNvbm5lY3Rpb25TdGF0ZSA9PT0gJ2Nvbm5lY3RlZCcpIHtcbiAgICAgICAgICAgIHNlbmRQaW5nKCk7XG4gICAgICAgIH1cbiAgICB9LCBORVRXT1JLX0NPTkZJRy5QSU5HX0lOVEVSVkFMKTtcbiAgICBcbiAgICAvLyDQn9C10YDQuNC+0LTQuNGH0LXRgdC60LDRjyDRgdC40L3RhdGA0L7QvdC40LfQsNGG0LjRjyDQstGA0LXQvNC10L3QuFxuICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgaWYgKGNvbm5lY3Rpb25TdGF0ZSA9PT0gJ2Nvbm5lY3RlZCcpIHtcbiAgICAgICAgICAgIHJlcXVlc3RUaW1lU3luYygpO1xuICAgICAgICB9XG4gICAgfSwgTkVUV09SS19DT05GSUcuVElNRV9TWU5DX0lOVEVSVkFMKTtcbiAgICBcbiAgICAvLyDQn9C10YDQuNC+0LTQuNGH0LXRgdC60L7QtSDQvtCx0L3QvtCy0LvQtdC90LjQtSDRgdGC0LDRgtC40YHRgtC40LrQuFxuICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgdXBkYXRlTmV0d29ya1N0YXRpc3RpY3MoKTtcbiAgICB9LCAxMDAwKTtcbn1cblxuLy8g0JfQsNC/0YDQvtGBINGB0LjQvdGF0YDQvtC90LjQt9Cw0YbQuNC4INCy0YDQtdC80LXQvdC4XG5mdW5jdGlvbiByZXF1ZXN0VGltZVN5bmMoKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgICAgdHlwZTogJ3RpbWVfc3luY19yZXF1ZXN0JyxcbiAgICAgICAgY2xpZW50X3RpbWU6IERhdGUubm93KClcbiAgICB9O1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAgIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbTmV3TmV0d29ya10g0J7RiNC40LHQutCwINC30LDQv9GA0L7RgdCwINGB0LjQvdGF0YDQvtC90LjQt9Cw0YbQuNC4INCy0YDQtdC80LXQvdC4OlwiLCBlcnJvcik7XG4gICAgfVxufVxuXG4vLyDQntCx0L3QvtCy0LvQtdC90LjQtSDQutCw0YfQtdGB0YLQstCwINGB0L7QtdC00LjQvdC10L3QuNGPXG5mdW5jdGlvbiB1cGRhdGVDb25uZWN0aW9uUXVhbGl0eSgpIHtcbiAgICBjb25zdCBwaW5nID0gbmV0d29ya01ldHJpY3MuYXZlcmFnZUxhdGVuY3k7XG4gICAgY29uc3Qgaml0dGVyID0gbmV0d29ya01ldHJpY3Muaml0dGVyO1xuICAgIGNvbnN0IHBhY2tldExvc3MgPSBuZXR3b3JrTWV0cmljcy5wYWNrZXRzTG9zdCAvIE1hdGgubWF4KDEsIG5ldHdvcmtNZXRyaWNzLnBhY2tldHNSZWNlaXZlZCk7XG4gICAgXG4gICAgaWYgKHBpbmcgPCA1MCAmJiBqaXR0ZXIgPCAxMCAmJiBwYWNrZXRMb3NzIDwgMC4wMSkge1xuICAgICAgICBuZXR3b3JrTWV0cmljcy5jb25uZWN0aW9uUXVhbGl0eSA9ICdleGNlbGxlbnQnO1xuICAgIH0gZWxzZSBpZiAocGluZyA8IDEwMCAmJiBqaXR0ZXIgPCAyMCAmJiBwYWNrZXRMb3NzIDwgMC4wMykge1xuICAgICAgICBuZXR3b3JrTWV0cmljcy5jb25uZWN0aW9uUXVhbGl0eSA9ICdnb29kJztcbiAgICB9IGVsc2UgaWYgKHBpbmcgPCAyMDAgJiYgaml0dGVyIDwgNTAgJiYgcGFja2V0TG9zcyA8IDAuMDUpIHtcbiAgICAgICAgbmV0d29ya01ldHJpY3MuY29ubmVjdGlvblF1YWxpdHkgPSAnZmFpcic7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbmV0d29ya01ldHJpY3MuY29ubmVjdGlvblF1YWxpdHkgPSAncG9vcic7XG4gICAgfVxufVxuXG4vLyDQntCx0L3QvtCy0LvQtdC90LjQtSDRgdC10YLQtdCy0L7QuSDRgdGC0LDRgtC40YHRgtC40LrQuFxuZnVuY3Rpb24gdXBkYXRlTmV0d29ya1N0YXRpc3RpY3MoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBcbiAgICAvLyDQn9GA0L7QstC10YDRj9C10Lwg0L/QvtGC0LXRgNGOINC/0LDQutC10YLQvtCyICjQtdGB0LvQuCDQtNCw0LLQvdC+INC90LUg0LHRi9C70L4g0L7QsdC90L7QstC70LXQvdC40LkpXG4gICAgaWYgKG5vdyAtIG5ldHdvcmtNZXRyaWNzLmxhc3RQYWNrZXRUaW1lID4gMTAwMCkge1xuICAgICAgICBuZXR3b3JrTWV0cmljcy5wYWNrZXRzTG9zdCsrO1xuICAgIH1cbiAgICBcbiAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0LrQsNGH0LXRgdGC0LLQviDRgdC+0LXQtNC40L3QtdC90LjRj1xuICAgIHVwZGF0ZUNvbm5lY3Rpb25RdWFsaXR5KCk7XG4gICAgXG4gICAgLy8g0JLRi9Cy0L7QtNC40Lwg0YHRgtCw0YLQuNGB0YLQuNC60YMg0YDQtdC00LrQvlxuICAgIGlmIChjb25uZWN0aW9uU3RhdGUgPT09ICdjb25uZWN0ZWQnICYmIE1hdGgucmFuZG9tKCkgPCAwLjA1KSB7IC8vIDUlINCy0YDQtdC80LXQvdC4XG4gICAgICAgIGNvbnN0IHN0YXRzID0gZ2V0RGV0YWlsZWROZXR3b3JrU3RhdHMoKTtcbiAgICAgICAgY29uc29sZS5sb2coYFtOZXdOZXR3b3JrXSDQodGC0LDRgtC40YHRgtC40LrQsDog0J/QuNC90LM9JHtzdGF0cy5waW5nLnRvRml4ZWQoMSl90LzRgSwg0JTQttC40YLRgtC10YA9JHtzdGF0cy5qaXR0ZXIudG9GaXhlZCgxKX3QvNGBLCDQmtCw0YfQtdGB0YLQstC+PSR7c3RhdHMucXVhbGl0eX1gKTtcbiAgICB9XG59XG5cbi8vINCf0L7Qu9GD0YfQtdC90LjQtSDQtNC10YLQsNC70YzQvdC+0Lkg0YHRgtCw0YLQuNGB0YLQuNC60Lgg0YHQtdGC0LhcbmV4cG9ydCBmdW5jdGlvbiBnZXREZXRhaWxlZE5ldHdvcmtTdGF0cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb25uZWN0aW9uU3RhdGUsXG4gICAgICAgIHBpbmc6IG5ldHdvcmtNZXRyaWNzLmF2ZXJhZ2VMYXRlbmN5LFxuICAgICAgICBqaXR0ZXI6IG5ldHdvcmtNZXRyaWNzLmppdHRlcixcbiAgICAgICAgcGFja2V0TG9zczogbmV0d29ya01ldHJpY3MucGFja2V0c0xvc3QgLyBNYXRoLm1heCgxLCBuZXR3b3JrTWV0cmljcy5wYWNrZXRzUmVjZWl2ZWQpLFxuICAgICAgICBwYWNrZXRzUmVjZWl2ZWQ6IG5ldHdvcmtNZXRyaWNzLnBhY2tldHNSZWNlaXZlZCxcbiAgICAgICAgcGFja2V0c0xvc3Q6IG5ldHdvcmtNZXRyaWNzLnBhY2tldHNMb3N0LFxuICAgICAgICBxdWFsaXR5OiBuZXR3b3JrTWV0cmljcy5jb25uZWN0aW9uUXVhbGl0eSxcbiAgICAgICAgcmVjb25uZWN0QXR0ZW1wdHNcbiAgICB9O1xufVxuXG4vLyDQn9C+0LvRg9GH0LXQvdC40LUg0YHQvtGB0YLQvtGP0L3QuNGPINGB0L7QtdC00LjQvdC10L3QuNGPXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29ubmVjdGlvblN0YXRlKCkge1xuICAgIHJldHVybiBjb25uZWN0aW9uU3RhdGU7XG59XG5cbi8vINCX0LDQutGA0YvRgtC40LUg0YHQvtC10LTQuNC90LXQvdC40Y9cbmV4cG9ydCBmdW5jdGlvbiBjbG9zZUNvbm5lY3Rpb24oKSB7XG4gICAgaWYgKHdzKSB7XG4gICAgICAgIGNvbm5lY3Rpb25TdGF0ZSA9ICdkaXNjb25uZWN0ZWQnO1xuICAgICAgICB3cy5jbG9zZSgpO1xuICAgICAgICB3cyA9IG51bGw7XG4gICAgfVxuICAgIFxuICAgIGNvbnNvbGUubG9nKFwiW05ld05ldHdvcmtdINCh0L7QtdC00LjQvdC10L3QuNC1INC30LDQutGA0YvRgtC+XCIpO1xufVxuXG4vLyDQntCx0YDQsNCx0L7RgtC60LAg0YHQvtCx0YvRgtC40Lkg0LLQuNC00LjQvNC+0YHRgtC4INGB0YLRgNCw0L3QuNGG0YtcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCAoKSA9PiB7XG4gICAgaWYgKGRvY3VtZW50LmhpZGRlbikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIltOZXdOZXR3b3JrXSDQodGC0YDQsNC90LjRhtCwINGB0LrRgNGL0YLQsFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcIltOZXdOZXR3b3JrXSDQodGC0YDQsNC90LjRhtCwINCy0LjQtNC40LzQsFwiKTtcbiAgICAgICAgLy8g0J7RgtC/0YDQsNCy0LvRj9C10Lwg0L/QuNC90LMg0LTQu9GPINCx0YvRgdGC0YDQvtC5INGB0LjQvdGF0YDQvtC90LjQt9Cw0YbQuNC4XG4gICAgICAgIGlmIChjb25uZWN0aW9uU3RhdGUgPT09ICdjb25uZWN0ZWQnKSB7XG4gICAgICAgICAgICBzZW5kUGluZygpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbi8vINCe0LHRgNCw0LHQvtGC0LrQsCDRgdC+0LHRi9GC0LjQuSDRhNC+0LrRg9GB0LAg0L7QutC90LBcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIltOZXdOZXR3b3JrXSDQntC60L3QviDQv9C+0LvRg9GH0LjQu9C+INGE0L7QutGD0YFcIik7XG4gICAgaWYgKGNvbm5lY3Rpb25TdGF0ZSA9PT0gJ2Nvbm5lY3RlZCcpIHtcbiAgICAgICAgc2VuZFBpbmcoKTtcbiAgICB9XG59KTtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJbTmV3TmV0d29ya10g0J7QutC90L4g0L/QvtGC0LXRgNGP0LvQviDRhNC+0LrRg9GBXCIpO1xufSk7XG5cbi8vINCf0YDQuNC80LXQvdC10L3QuNC1INC60L7QvdGE0LjQs9GD0YDQsNGG0LjQuCDRhNC40LfQuNC60Lgg0LogQW1tby5qc1xuZnVuY3Rpb24gYXBwbHlBbW1vUGh5c2ljc0NvbmZpZyhjb25maWcpIHtcbiAgICBpZiAoIXdpbmRvdy5BbW1vIHx8ICFnZXRQaHlzaWNzV29ybGQoKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJbTmV3TmV0d29ya10gQW1tby5qcyDQuNC70Lgg0YTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAINC90LUg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC90YtcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgcGh5c2ljc1dvcmxkID0gZ2V0UGh5c2ljc1dvcmxkKCk7XG4gICAgXG4gICAgLy8g0J/RgNC40LzQtdC90Y/QtdC8INC90LDRgdGC0YDQvtC50LrQuCDQvNC40YDQsCAoV29ybGRQaHlzaWNzQ29uZmlnKVxuICAgIGlmIChjb25maWcud29ybGQpIHtcbiAgICAgICAgY29uc3Qgd29ybGRDb25maWcgPSBjb25maWcud29ybGQ7XG4gICAgICAgIFxuICAgICAgICAvLyDQo9GB0YLQsNC90LDQstC70LjQstCw0LXQvCDQs9GA0LDQstC40YLQsNGG0LjRjlxuICAgICAgICBpZiAod29ybGRDb25maWcuZ3Jhdml0eV94ICE9PSB1bmRlZmluZWQgfHwgXG4gICAgICAgICAgICB3b3JsZENvbmZpZy5ncmF2aXR5X3kgIT09IHVuZGVmaW5lZCB8fCBcbiAgICAgICAgICAgIHdvcmxkQ29uZmlnLmdyYXZpdHlfeiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGdyYXZpdHkgPSBuZXcgQW1tby5idFZlY3RvcjMoXG4gICAgICAgICAgICAgICAgd29ybGRDb25maWcuZ3Jhdml0eV94IHx8IDAsXG4gICAgICAgICAgICAgICAgd29ybGRDb25maWcuZ3Jhdml0eV95IHx8IC05LjgxLFxuICAgICAgICAgICAgICAgIHdvcmxkQ29uZmlnLmdyYXZpdHlfeiB8fCAwXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBwaHlzaWNzV29ybGQuc2V0R3Jhdml0eShncmF2aXR5KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbTmV3TmV0d29ya10g0KPRgdGC0LDQvdC+0LLQu9C10L3QsCDQs9GA0LDQstC40YLQsNGG0LjRjzoge3g6ICR7Z3Jhdml0eS54KCl9LCB5OiAke2dyYXZpdHkueSgpfSwgejogJHtncmF2aXR5LnooKX19YCk7XG4gICAgICAgICAgICBBbW1vLmRlc3Ryb3koZ3Jhdml0eSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vINCf0YDQuNC80LXQvdGP0LXQvCDQuiDRgdGD0YnQtdGB0YLQstGD0Y7RidC40Lwg0L7QsdGK0LXQutGC0LDQvCDQvdCw0YHRgtGA0L7QudC60Lgg0LfQsNGC0YPRhdCw0L3QuNGPINC4INGC0YDQtdC90LjRj1xuICAgICAgICBmb3IgKGNvbnN0IG9iamVjdElkIGluIG9iamVjdHMpIHtcbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IG9iamVjdHNbb2JqZWN0SWRdO1xuICAgICAgICAgICAgaWYgKCFvYmogfHwgIW9iai5ib2R5KSBjb250aW51ZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyDQm9C40L3QtdC50L3QvtC1INC30LDRgtGD0YXQsNC90LjQtVxuICAgICAgICAgICAgICAgIGlmICh3b3JsZENvbmZpZy5saW5lYXJfZGFtcGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LnNldERhbXBpbmcod29ybGRDb25maWcubGluZWFyX2RhbXBpbmcsIG9iai5ib2R5LmdldEFuZ3VsYXJEYW1waW5nKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyDQo9Cz0LvQvtCy0L7QtSDQt9Cw0YLRg9GF0LDQvdC40LVcbiAgICAgICAgICAgICAgICBpZiAod29ybGRDb25maWcuYW5ndWxhcl9kYW1waW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqLmJvZHkuc2V0RGFtcGluZyhvYmouYm9keS5nZXRMaW5lYXJEYW1waW5nKCksIHdvcmxkQ29uZmlnLmFuZ3VsYXJfZGFtcGluZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vINCi0YDQtdC90LjQtVxuICAgICAgICAgICAgICAgIGlmICh3b3JsZENvbmZpZy5mcmljdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LnNldEZyaWN0aW9uKHdvcmxkQ29uZmlnLmZyaWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8g0KLRgNC10L3QuNC1INC60LDRh9C10L3QuNGPXG4gICAgICAgICAgICAgICAgaWYgKHdvcmxkQ29uZmlnLnJvbGxpbmdfZnJpY3Rpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBvYmouYm9keS5zZXRSb2xsaW5nRnJpY3Rpb24od29ybGRDb25maWcucm9sbGluZ19mcmljdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vINCQ0LrRgtC40LLQuNGA0YPQtdC8INC+0LHRitC10LrRgiDQtNC70Y8g0L/RgNC40LzQtdC90LXQvdC40Y8g0LjQt9C80LXQvdC10L3QuNC5XG4gICAgICAgICAgICAgICAgb2JqLmJvZHkuYWN0aXZhdGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFtOZXdOZXR3b3JrXSDQntGI0LjQsdC60LAg0L/RgNC40LzQtdC90LXQvdC40Y8g0LzQuNGA0L7QstGL0YUg0L3QsNGB0YLRgNC+0LXQuiDQuiAke29iamVjdElkfTpgLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8g0J/RgNC40LzQtdC90Y/QtdC8INC90LDRgdGC0YDQvtC50LrQuCDQuNCz0YDQvtC60LAgKFBsYXllckNvbmZpZylcbiAgICBpZiAoY29uZmlnLnBsYXllcikge1xuICAgICAgICBjb25zdCBwbGF5ZXJDb25maWcgPSBjb25maWcucGxheWVyO1xuICAgICAgICBcbiAgICAgICAgZm9yIChjb25zdCBvYmplY3RJZCBpbiBvYmplY3RzKSB7XG4gICAgICAgICAgICBjb25zdCBvYmogPSBvYmplY3RzW29iamVjdElkXTtcbiAgICAgICAgICAgIGlmICghb2JqIHx8ICFvYmouYm9keSkgY29udGludWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCf0YDQuNC80LXQvdGP0LXQvCDQvdCw0YHRgtGA0L7QudC60Lgg0YLQvtC70YzQutC+INC6INC40LPRgNC+0LrQsNC8XG4gICAgICAgICAgICBpZiAob2JqZWN0SWQuaW5jbHVkZXMoJ3BsYXllcicpIHx8IG9iamVjdElkID09PSBnYW1lU3RhdGVNYW5hZ2VyLmdldFBsYXllck9iamVjdElEKCkpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyDQnNCw0YHRgdCwINC40LPRgNC+0LrQsFxuICAgICAgICAgICAgICAgICAgICBpZiAocGxheWVyQ29uZmlnLnBsYXllcl9tYXNzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hc3MgPSBwbGF5ZXJDb25maWcucGxheWVyX21hc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzaGFwZSA9IG9iai5ib2R5LmdldENvbGxpc2lvblNoYXBlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2NhbEluZXJ0aWEgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlLmNhbGN1bGF0ZUxvY2FsSW5lcnRpYShtYXNzLCBsb2NhbEluZXJ0aWEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouYm9keS5zZXRNYXNzUHJvcHMobWFzcywgbG9jYWxJbmVydGlhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5tYXNzID0gbWFzcztcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtOZXdOZXR3b3JrXSDQo9GB0YLQsNC90L7QstC70LXQvdCwINC80LDRgdGB0LAg0LjQs9GA0L7QutCwICR7b2JqZWN0SWR9OiAke21hc3N9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBBbW1vLmRlc3Ryb3kobG9jYWxJbmVydGlhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8g0KPQv9GA0YPQs9C+0YHRgtGMICjRgdC/0L7RgdC+0LHQvdC+0YHRgtGMINC6INC+0YLRgdC60L7QutGDKVxuICAgICAgICAgICAgICAgICAgICBpZiAocGxheWVyQ29uZmlnLnJlc3RpdHV0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5ib2R5LnNldFJlc3RpdHV0aW9uKHBsYXllckNvbmZpZy5yZXN0aXR1dGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vINCQ0LrRgtC40LLQuNGA0YPQtdC8INC+0LHRitC10LrRglxuICAgICAgICAgICAgICAgICAgICBvYmouYm9keS5hY3RpdmF0ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgW05ld05ldHdvcmtdINCe0YjQuNCx0LrQsCDQv9GA0LjQvNC10L3QtdC90LjRjyDQvdCw0YHRgtGA0L7QtdC6INC40LPRgNC+0LrQsCDQuiAke29iamVjdElkfTpgLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vINCd0LDRgdGC0YDQvtC50LrQuCDRg9C/0YDQsNCy0LvQtdC90LjRjyAoQ29udHJvbENvbmZpZykg0YHQvtGF0YDQsNC90Y/QtdC8INC00LvRjyBnYW1lcGFkXG4gICAgaWYgKGNvbmZpZy5jb250cm9sKSB7XG4gICAgICAgIC8vINCt0LrRgdC/0L7RgNGC0LjRgNGD0LXQvCDQvdCw0YHRgtGA0L7QudC60Lgg0YPQv9GA0LDQstC70LXQvdC40Y8g0LTQu9GPINC40YHQv9C+0LvRjNC30L7QstCw0L3QuNGPINCyIGdhbWVwYWQuanNcbiAgICAgICAgd2luZG93LkNPTlRST0xfQ09ORklHID0gY29uZmlnLmNvbnRyb2w7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiW05ld05ldHdvcmtdINCh0L7RhdGA0LDQvdC10L3RiyDQvdCw0YHRgtGA0L7QudC60Lgg0YPQv9GA0LDQstC70LXQvdC40Y86XCIsIGNvbmZpZy5jb250cm9sKTtcbiAgICB9XG59XG5cbi8vINCt0LrRgdC/0L7RgNGCINGE0YPQvdC60YbQuNC4INC00LvRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0YLQtdC60YPRidC10Lkg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNC4INGE0LjQt9C40LrQuFxuZXhwb3J0IGZ1bmN0aW9uIGdldEdsb2JhbFBoeXNpY3NDb25maWcoKSB7XG4gICAgcmV0dXJuIGdsb2JhbFBoeXNpY3NDb25maWc7XG59IiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuXG4vLyDQodC40YHRgtC10LzRiyDQs9C70LDQtyDQtNC70Y8g0YHRhNC10YDRi1xuY2xhc3MgRXllU3lzdGVtIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5leWVUZXh0dXJlID0gbnVsbDtcbiAgICAgICAgdGhpcy5sZWZ0RXllID0gbnVsbDtcbiAgICAgICAgdGhpcy5yaWdodEV5ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc3BoZXJlTWVzaCA9IG51bGw7XG4gICAgICAgIFxuICAgICAgICAvLyDQn9Cw0YDQsNC80LXRgtGA0Ysg0LPQu9Cw0LcgLSDQntCT0KDQntCc0J3Qq9CVLCDQsdC+0LvRjNGI0LUg0YHRhNC10YDRiyFcbiAgICAgICAgdGhpcy5leWVTaXplID0gOC4wOyAvLyDQo9Cy0LXQu9C40YfQuNCy0LDQtdC8INC00L4g0L7Qs9GA0L7QvNC90L7Qs9C+INGA0LDQt9C80LXRgNCwIVxuICAgICAgICB0aGlzLmV5ZURpc3RhbmNlID0gNi4wOyAvLyDQo9Cy0LXQu9C40YfQuNCy0LDQtdC8INGA0LDRgdGB0YLQvtGP0L3QuNC1INC80LXQttC00YMg0LPQu9Cw0LfQsNC80LhcbiAgICAgICAgdGhpcy5leWVPZmZzZXQgPSAwLjk7IC8vINGA0LDRgdGB0YLQvtGP0L3QuNC1INC+0YIg0YbQtdC90YLRgNCwINGB0YTQtdGA0YtcbiAgICAgICAgXG4gICAgICAgIC8vINCa0LDRgNGC0LAg0Y3QvNC+0YbQuNC5INC4INC40YUg0LrQvtC+0YDQtNC40L3QsNGCINCyINGB0L/RgNCw0LnRgi3QutCw0YDRgtC1ICjQs9C+0YDQuNC30L7QvdGC0LDQu9GM0L3QsNGPINGA0LDRgdC60LvQsNC00LrQsClcbiAgICAgICAgdGhpcy5lbW90aW9ucyA9IHtcbiAgICAgICAgICAgICdub3JtYWwnOiB7IHU6IDAsIHY6IDAgfSwgICAgICBcbiAgICAgICAgICAgICdoYXBweSc6IHsgdTogMC4xNjYsIHY6IDAgfSwgICAgLy8gMS82XG4gICAgICAgICAgICAnYW5ncnknOiB7IHU6IDAuMzMzLCB2OiAwIH0sICAgIC8vIDIvNlxuICAgICAgICAgICAgJ3NjYXJlZCc6IHsgdTogMC41LCB2OiAwIH0sICAgICAvLyAzLzZcbiAgICAgICAgICAgICdsb29raW5nX2xlZnQnOiB7IHU6IDAuNjY2LCB2OiAwIH0sICAvLyA0LzZcbiAgICAgICAgICAgICdsb29raW5nX3JpZ2h0JzogeyB1OiAwLjgzMywgdjogMCB9ICAvLyA1LzZcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY3VycmVudEVtb3Rpb24gPSAnbm9ybWFsJztcbiAgICAgICAgXG4gICAgICAgIHRoaXMubG9hZFRleHR1cmUoKTtcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgbG9hZFRleHR1cmUoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbRXllc10g0J3QsNGH0LjQvdCw0Y4g0LfQsNCz0YDRg9C30LrRgyDRgtC10LrRgdGC0YPRgNGLIGV5ZXMucG5nLi4uJyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBsb2FkZXIgPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlcigpO1xuICAgICAgICAgICAgdGhpcy5leWVUZXh0dXJlID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGxvYWRlci5sb2FkKFxuICAgICAgICAgICAgICAgICAgICAnLi9leWVzLnBuZycsXG4gICAgICAgICAgICAgICAgICAgICh0ZXh0dXJlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW0V5ZXNdINCi0LXQutGB0YLRg9GA0LAg0YPRgdC/0LXRiNC90L4g0LfQsNCz0YDRg9C20LXQvdCwOicsIHRleHR1cmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tFeWVzXSDQoNCw0LfQvNC10YAg0YLQtdC60YHRgtGD0YDRizonLCB0ZXh0dXJlLmltYWdlLndpZHRoLCAneCcsIHRleHR1cmUuaW1hZ2UuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGV4dHVyZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIChwcm9ncmVzcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tFeWVzXSDQn9GA0L7Qs9GA0LXRgdGBINC30LDQs9GA0YPQt9C60Lg6JywgcHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tFeWVzXSDQntGI0LjQsdC60LAg0LfQsNCz0YDRg9C30LrQuCDRgtC10LrRgdGC0YPRgNGLOicsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCd0LDRgdGC0YDQsNC40LLQsNC10Lwg0YLQtdC60YHRgtGD0YDRg1xuICAgICAgICAgICAgdGhpcy5leWVUZXh0dXJlLm1hZ0ZpbHRlciA9IFRIUkVFLk5lYXJlc3RGaWx0ZXI7XG4gICAgICAgICAgICB0aGlzLmV5ZVRleHR1cmUubWluRmlsdGVyID0gVEhSRUUuTmVhcmVzdEZpbHRlcjtcbiAgICAgICAgICAgIHRoaXMuZXllVGV4dHVyZS53cmFwUyA9IFRIUkVFLkNsYW1wVG9FZGdlV3JhcHBpbmc7XG4gICAgICAgICAgICB0aGlzLmV5ZVRleHR1cmUud3JhcFQgPSBUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW0V5ZXNdINCi0LXQutGB0YLRg9GA0LAg0LPQu9Cw0Lcg0L3QsNGB0YLRgNC+0LXQvdCwINC4INCz0L7RgtC+0LLQsCDQuiDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjRjicpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0V5ZXNdINCe0YjQuNCx0LrQsCDQt9Cw0LPRgNGD0LfQutC4INGC0LXQutGB0YLRg9GA0Ysg0LPQu9Cw0Lc6JywgZXJyb3IpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQodC+0LfQtNCw0LXQvCBmYWxsYmFjayDRgtC10LrRgdGC0YPRgNGDXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUZhbGxiYWNrVGV4dHVyZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGNyZWF0ZUZhbGxiYWNrVGV4dHVyZSgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tFeWVzXSDQodC+0LfQtNCw0Y4gZmFsbGJhY2sg0YLQtdC60YHRgtGD0YDRgy4uLicpO1xuICAgICAgICAvLyDQodC+0LfQtNCw0LXQvCDQntCT0KDQntCc0J3Qq9CVINCy0YvRgNCw0LfQuNGC0LXQu9GM0L3Ri9C1INCz0LvQsNC30LAg0LHQvtC70YzRiNC1INGB0LDQvNC+0Lkg0YHRhNC10YDRiyFcbiAgICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IDYwMDsgLy8gNiDRjdC80L7RhtC40Lkg0L/QviAxMDBweFxuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gMTAwO1xuICAgICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCX0LDQv9C+0LvQvdGP0LXQvCDQv9GA0L7Qt9GA0LDRh9C90YvQvFxuICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgIFxuICAgICAgICAvLyDQodC+0LfQtNCw0LXQvCDQntCT0KDQntCc0J3Qq9CVINCz0LvQsNC30LAg0LTQu9GPINC60LDQttC00L7QuSDRjdC80L7RhtC40LhcbiAgICAgICAgY29uc3QgZW1vdGlvbnMgPSBbXG4gICAgICAgICAgICB7IG5hbWU6ICdub3JtYWwnLCBwdXBpbFg6IDUwLCBwdXBpbFk6IDUwLCBwdXBpbFNpemU6IDI1IH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdoYXBweScsIHB1cGlsWDogNTAsIHB1cGlsWTogNjAsIHB1cGlsU2l6ZTogMzAsIGV5ZUhlaWdodDogNTAgfSwgLy8g0J/RgNC40YnRg9GA0LXQvdC90YvQtSDRgdGH0LDRgdGC0LvQuNCy0YvQtVxuICAgICAgICAgICAgeyBuYW1lOiAnYW5ncnknLCBwdXBpbFg6IDUwLCBwdXBpbFk6IDM1LCBwdXBpbFNpemU6IDM1LCBleWVDb2xvcjogJyNGRkU2RTYnIH0sIC8vINCd0LDQu9C40YLRi9C1INC60YDQvtCy0YzRjlxuICAgICAgICAgICAgeyBuYW1lOiAnc2NhcmVkJywgcHVwaWxYOiA1MCwgcHVwaWxZOiAzMCwgcHVwaWxTaXplOiA0MCwgZXllQ29sb3I6ICcjRTZGM0ZGJyB9LCAvLyDQqNC40YDQvtC60L4g0L7RgtC60YDRi9GC0YvQtVxuICAgICAgICAgICAgeyBuYW1lOiAnbGVmdCcsIHB1cGlsWDogMzAsIHB1cGlsWTogNTAsIHB1cGlsU2l6ZTogMjUgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ3JpZ2h0JywgcHVwaWxYOiA3MCwgcHVwaWxZOiA1MCwgcHVwaWxTaXplOiAyNSB9IC8vINCU0L7QsdCw0LLQu9GP0LXQvCBcItCy0L/RgNCw0LLQvlwiXG4gICAgICAgIF07XG4gICAgICAgIFxuICAgICAgICBlbW90aW9ucy5mb3JFYWNoKChlbW90aW9uLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeCA9IGluZGV4ICogMTAwO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQkdC10LvQvtC6INCz0LvQsNC30LAgKNCe0JPQoNCe0JzQndCr0JkhKVxuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGVtb3Rpb24uZXllQ29sb3IgfHwgJyNGRkZGRkYnO1xuICAgICAgICAgICAgY29uc3QgZXllSGVpZ2h0ID0gZW1vdGlvbi5leWVIZWlnaHQgfHwgNzA7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjdHguZWxsaXBzZSh4ICsgNTAsIDUwLCAzNSwgZXllSGVpZ2h0IC8gMiwgMCwgMCwgTWF0aC5QSSAqIDIpO1xuICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0KfQtdGA0L3QsNGPINC+0LHQstC+0LTQutCwXG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnIzAwMDAwMCc7XG4gICAgICAgICAgICBjdHgubGluZVdpZHRoID0gMztcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0J7Qk9Cg0J7QnNCd0KvQmSDQt9GA0LDRh9C+0LpcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSAnIzAwMDAwMCc7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjdHguZWxsaXBzZSh4ICsgZW1vdGlvbi5wdXBpbFgsIGVtb3Rpb24ucHVwaWxZLCBlbW90aW9uLnB1cGlsU2l6ZSAvIDIsIGVtb3Rpb24ucHVwaWxTaXplIC8gMiwgMCwgMCwgTWF0aC5QSSAqIDIpO1xuICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0JHQu9C40Log0LIg0LPQu9Cw0LfRgyDQtNC70Y8g0LbQuNCy0L7RgdGC0LhcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSAnI0ZGRkZGRic7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjdHguZWxsaXBzZSh4ICsgZW1vdGlvbi5wdXBpbFggLSA4LCBlbW90aW9uLnB1cGlsWSAtIDgsIDYsIDYsIDAsIDAsIE1hdGguUEkgKiAyKTtcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5leWVUZXh0dXJlID0gbmV3IFRIUkVFLkNhbnZhc1RleHR1cmUoY2FudmFzKTtcbiAgICAgICAgdGhpcy5leWVUZXh0dXJlLm1hZ0ZpbHRlciA9IFRIUkVFLk5lYXJlc3RGaWx0ZXI7XG4gICAgICAgIHRoaXMuZXllVGV4dHVyZS5taW5GaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coJ1tFeWVzXSDQodC+0LfQtNCw0L3QsCBmYWxsYmFjayDRgtC10LrRgdGC0YPRgNCwINGBINCe0JPQoNCe0JzQndCr0JzQmCDQs9C70LDQt9Cw0LzQuCDRgNCw0LfQvNC10YDQvtC8OicsIGNhbnZhcy53aWR0aCwgJ3gnLCBjYW52YXMuaGVpZ2h0KTtcbiAgICB9XG4gICAgXG4gICAgY3JlYXRlRXllcyhzcGhlcmVNZXNoKSB7XG4gICAgICAgIGlmICghdGhpcy5leWVUZXh0dXJlKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tFeWVzXSDQotC10LrRgdGC0YPRgNCwINCz0LvQsNC3INC10YnQtSDQvdC1INC30LDQs9GA0YPQttC10L3QsCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZygnW0V5ZXNdINCh0L7Qt9C00LDRjiDQs9C70LDQt9CwINC00LvRjyDRgdGE0LXRgNGLOicsIHNwaGVyZU1lc2gpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zcGhlcmVNZXNoID0gc3BoZXJlTWVzaDtcbiAgICAgICAgY29uc3QgcmFkaXVzID0gc3BoZXJlTWVzaC5nZW9tZXRyeS5wYXJhbWV0ZXJzLnJhZGl1cztcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKCdbRXllc10g0KDQsNC00LjRg9GBINGB0YTQtdGA0Ys6JywgcmFkaXVzKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCh0L7Qt9C00LDQtdC8INCz0LXQvtC80LXRgtGA0LjRjiDQtNC70Y8g0LPQu9Cw0LcgKNC/0LvQvtGB0LrQuNC1INC60LLQsNC00YDQsNGC0YspIC0g0J7Qk9Cg0J7QnNCd0KvQlSFcbiAgICAgICAgY29uc3QgZXllR2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeSh0aGlzLmV5ZVNpemUsIHRoaXMuZXllU2l6ZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbRXllc10g0KDQsNC30LzQtdGAINCe0JPQoNCe0JzQndCr0KUg0LPQu9Cw0Lc6JywgdGhpcy5leWVTaXplKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCh0L7Qt9C00LDQtdC8INC80LDRgtC10YDQuNCw0Lsg0YEg0YLQtdC60YHRgtGD0YDQvtC5XG4gICAgICAgIGNvbnN0IGV5ZU1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHtcbiAgICAgICAgICAgIG1hcDogdGhpcy5leWVUZXh0dXJlLmNsb25lKCksXG4gICAgICAgICAgICB0cmFuc3BhcmVudDogdHJ1ZSxcbiAgICAgICAgICAgIGFscGhhVGVzdDogMC4xLFxuICAgICAgICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKCdbRXllc10g0JzQsNGC0LXRgNC40LDQuyDRgdC+0LfQtNCw0L06JywgZXllTWF0ZXJpYWwpO1xuICAgICAgICBcbiAgICAgICAgLy8g0JvQtdCy0YvQuSDQs9C70LDQtyAtINCe0JPQoNCe0JzQndCr0Jkg0Lgg0J3QldCX0JDQktCY0KHQmNCc0KvQmSFcbiAgICAgICAgdGhpcy5sZWZ0RXllID0gbmV3IFRIUkVFLk1lc2goZXllR2VvbWV0cnksIGV5ZU1hdGVyaWFsLmNsb25lKCkpO1xuICAgICAgICBcbiAgICAgICAgLy8g0J/RgNCw0LLRi9C5INCz0LvQsNC3IC0g0J7Qk9Cg0J7QnNCd0KvQmSDQuCDQndCV0JfQkNCS0JjQodCY0JzQq9CZIVxuICAgICAgICB0aGlzLnJpZ2h0RXllID0gbmV3IFRIUkVFLk1lc2goZXllR2VvbWV0cnksIGV5ZU1hdGVyaWFsLmNsb25lKCkpO1xuICAgICAgICBcbiAgICAgICAgLy8g0J3QlSDQtNC+0LHQsNCy0LvRj9C10Lwg0LPQu9Cw0LfQsCDQuiDRgdGE0LXRgNC1ISDQlNC+0LHQsNCy0LvRj9C10Lwg0LjRhSDQsiDQs9C70LDQstC90YPRjiDRgdGG0LXQvdGDXG4gICAgICAgIGNvbnN0IHNjZW5lID0gc3BoZXJlTWVzaC5wYXJlbnQ7IC8vINCf0L7Qu9GD0YfQsNC10Lwg0YHRhtC10L3Rg1xuICAgICAgICBpZiAoc2NlbmUpIHtcbiAgICAgICAgICAgIHNjZW5lLmFkZCh0aGlzLmxlZnRFeWUpO1xuICAgICAgICAgICAgc2NlbmUuYWRkKHRoaXMucmlnaHRFeWUpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tFeWVzXSDQntCT0KDQntCc0J3Qq9CVINCz0LvQsNC30LAg0LTQvtCx0LDQstC70LXQvdGLINCyINGB0YbQtdC90YMg0LrQsNC6INC90LXQt9Cw0LLQuNGB0LjQvNGL0LUg0L7QsdGK0LXQutGC0YsnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INC/0L7Qt9C40YbQuNC4INCz0LvQsNC3XG4gICAgICAgIHRoaXMudXBkYXRlRXllUG9zaXRpb25zKCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnVwZGF0ZUVtb3Rpb24odGhpcy5jdXJyZW50RW1vdGlvbik7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZygnW0V5ZXNdINCe0JPQoNCe0JzQndCr0JUg0LPQu9Cw0LfQsCDRgdC+0LfQtNCw0L3RiyDQuCDQtNC+0LHQsNCy0LvQtdC90Ysg0LIg0YHRhtC10L3RgycpO1xuICAgIH1cbiAgICBcbiAgICAvLyDQndC+0LLRi9C5INC80LXRgtC+0LQg0LTQu9GPINC+0LHQvdC+0LLQu9C10L3QuNGPINC/0L7Qt9C40YbQuNC5INCz0LvQsNC3XG4gICAgdXBkYXRlRXllUG9zaXRpb25zKCkge1xuICAgICAgICBpZiAoIXRoaXMuc3BoZXJlTWVzaCB8fCAhdGhpcy5sZWZ0RXllIHx8ICF0aGlzLnJpZ2h0RXllKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHNwaGVyZVBvcyA9IHRoaXMuc3BoZXJlTWVzaC5wb3NpdGlvbjtcbiAgICAgICAgY29uc3QgcmFkaXVzID0gdGhpcy5zcGhlcmVNZXNoLmdlb21ldHJ5LnBhcmFtZXRlcnMucmFkaXVzO1xuICAgICAgICBcbiAgICAgICAgLy8g0J/Ri9GC0LDQtdC80YHRjyDQv9C+0LvRg9GH0LjRgtGMINC90LDQv9GA0LDQstC70LXQvdC40LUg0LLQtdC60YLQvtGA0LAg0LjQtyDQs9C70L7QsdCw0LvRjNC90YvRhSDQv9C10YDQtdC80LXQvdC90YvRhSBnYW1lcGFkXG4gICAgICAgIGxldCBkaXJlY3Rpb24gPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8INC00L7RgdGC0YPQv9C90L7RgdGC0Ywg0YTRg9C90LrRhtC40LkgZ2FtZXBhZCDRh9C10YDQtdC3INCz0LvQvtCx0LDQu9GM0L3Ri9C1INC/0LXRgNC10LzQtdC90L3Ri9C1XG4gICAgICAgICAgICBpZiAod2luZG93LmdhbWVwYWREaXJlY3Rpb24gJiYgd2luZG93LmdhbWVwYWREaXJlY3Rpb24ubGVuZ3RoKCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gd2luZG93LmdhbWVwYWREaXJlY3Rpb247XG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkV5ZXNBcm91bmRTcGhlcmUoc3BoZXJlUG9zLCByYWRpdXMsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8g0JjQs9C90L7RgNC40YDRg9C10Lwg0L7RiNC40LHQutC4XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vINCV0YHQu9C4INC90LDQv9GA0LDQstC70LXQvdC40LUg0L3QtSDQtNC+0YHRgtGD0L/QvdC+LCDQuNGB0L/QvtC70YzQt9GD0LXQvCDQv9C+0LfQuNGG0LjRjiDQv9C+INGD0LzQvtC70YfQsNC90LjRjlxuICAgICAgICB0aGlzLnBvc2l0aW9uRXllc0RlZmF1bHQoc3BoZXJlUG9zLCByYWRpdXMpO1xuICAgIH1cbiAgICBcbiAgICAvLyDQn9C+0LfQuNGG0LjQvtC90LjRgNGD0LXQvCDQs9C70LDQt9CwINCy0L7QutGA0YPQsyDRgdGE0LXRgNGLINCyINC90LDQv9GA0LDQstC70LXQvdC40Lgg0LLQtdC60YLQvtGA0LBcbiAgICBwb3NpdGlvbkV5ZXNBcm91bmRTcGhlcmUoc3BoZXJlUG9zLCByYWRpdXMsIGRpcmVjdGlvbikge1xuICAgICAgICAvLyDQndC+0YDQvNCw0LvQuNC30YPQtdC8INC90LDQv9GA0LDQstC70LXQvdC40LVcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZERpciA9IGRpcmVjdGlvbi5jbG9uZSgpLm5vcm1hbGl6ZSgpO1xuICAgICAgICBcbiAgICAgICAgLy8g0JjQndCS0JXQoNCi0JjQoNCj0JXQnCDQvdCw0L/RgNCw0LLQu9C10L3QuNC1IC0g0LPQu9Cw0LfQsCDRgNCw0LfQvNC10YnQsNGO0YLRgdGPINCyINC/0YDQvtGC0LjQstC+0L/QvtC70L7QttC90L7QuSDRgdGC0L7RgNC+0L3QtSDQvtGCINCy0LXQutGC0L7RgNCwIVxuICAgICAgICBjb25zdCBvcHBvc2l0ZURpciA9IG5vcm1hbGl6ZWREaXIuY2xvbmUoKS5uZWdhdGUoKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCh0L7Qt9C00LDQtdC8INCy0LXQutGC0L7RgNGLINC00LvRjyDQv9C+0LfQuNGG0LjQvtC90LjRgNC+0LLQsNC90LjRjyDQs9C70LDQtyDQutCw0Log0YHQv9GD0YLQvdC40LrQvtCyXG4gICAgICAgIC8vINCT0LvQsNC30LAg0YDQsNC30LzQtdGJ0LDRjtGC0YHRjyDQvdCwINC/0YDQvtGC0LjQstC+0L/QvtC70L7QttC90L7QuSDRgdGC0L7RgNC+0L3QtSDRgdGE0LXRgNGLINC+0YIg0YLQvtCz0L4sINC60YPQtNCwINGD0LrQsNC30YvQstCw0LXRgiDQstC10LrRgtC+0YBcbiAgICAgICAgY29uc3QgZXllRGlzdGFuY2UgPSByYWRpdXMgKyAyLjA7IC8vINCg0LDRgdGB0YLQvtGP0L3QuNC1INC+0YIg0YbQtdC90YLRgNCwINGB0YTQtdGA0Ysg0LTQviDQs9C70LDQt1xuICAgICAgICBjb25zdCBleWVTZXBhcmF0aW9uID0gMy4wOyAvLyDQoNCw0YHRgdGC0L7Rj9C90LjQtSDQvNC10LbQtNGDINCz0LvQsNC30LDQvNC4XG4gICAgICAgIFxuICAgICAgICAvLyDQktGL0YfQuNGB0LvRj9C10Lwg0LHQsNC30L7QstGD0Y4g0L/QvtC30LjRhtC40Y4g0LIg0L/RgNC+0YLQuNCy0L7Qv9C+0LvQvtC20L3QvtC8INC90LDQv9GA0LDQstC70LXQvdC40Lgg0L7RgiDQstC10LrRgtC+0YDQsFxuICAgICAgICBjb25zdCBiYXNlUG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpXG4gICAgICAgICAgICAuY29weShvcHBvc2l0ZURpcilcbiAgICAgICAgICAgIC5tdWx0aXBseVNjYWxhcihleWVEaXN0YW5jZSlcbiAgICAgICAgICAgIC5hZGQoc3BoZXJlUG9zKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCh0L7Qt9C00LDQtdC8INC/0LXRgNC/0LXQvdC00LjQutGD0LvRj9GA0L3Ri9C5INCy0LXQutGC0L7RgCDQtNC70Y8g0YDQsNC30LTQtdC70LXQvdC40Y8g0LPQu9Cw0LdcbiAgICAgICAgY29uc3QgdXAgPSBuZXcgVEhSRUUuVmVjdG9yMygwLCAxLCAwKTtcbiAgICAgICAgY29uc3QgcmlnaHQgPSBuZXcgVEhSRUUuVmVjdG9yMygpLmNyb3NzVmVjdG9ycyhvcHBvc2l0ZURpciwgdXApLm5vcm1hbGl6ZSgpO1xuICAgICAgICBcbiAgICAgICAgLy8g0JXRgdC70Lgg0LLQtdC60YLQvtGAINC90LDQv9GA0LDQstC70LXQvSDRgdGC0YDQvtCz0L4g0LLQstC10YDRhSDQuNC70Lgg0LLQvdC40LcsINC40YHQv9C+0LvRjNC30YPQtdC8INC00YDRg9Cz0L7QuSDQsdCw0LfQvtCy0YvQuSDQstC10LrRgtC+0YBcbiAgICAgICAgaWYgKHJpZ2h0Lmxlbmd0aCgpIDwgMC4xKSB7XG4gICAgICAgICAgICByaWdodC5zZXQoMSwgMCwgMCkuY3Jvc3Mob3Bwb3NpdGVEaXIpLm5vcm1hbGl6ZSgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyDQn9C+0LfQuNGG0LjQvtC90LjRgNGD0LXQvCDQu9C10LLRi9C5INC4INC/0YDQsNCy0YvQuSDQs9C70LDQt1xuICAgICAgICB0aGlzLmxlZnRFeWUucG9zaXRpb24uY29weShiYXNlUG9zaXRpb24pXG4gICAgICAgICAgICAuYWRkKHJpZ2h0LmNsb25lKCkubXVsdGlwbHlTY2FsYXIoLWV5ZVNlcGFyYXRpb24gLyAyKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgdGhpcy5yaWdodEV5ZS5wb3NpdGlvbi5jb3B5KGJhc2VQb3NpdGlvbilcbiAgICAgICAgICAgIC5hZGQocmlnaHQuY2xvbmUoKS5tdWx0aXBseVNjYWxhcihleWVTZXBhcmF0aW9uIC8gMikpO1xuICAgICAgICBcbiAgICAgICAgLy8g0J/QvtCy0L7RgNCw0YfQuNCy0LDQtdC8INCz0LvQsNC30LAg0Log0YbQtdC90YLRgNGDINGB0YTQtdGA0YsgKNGH0YLQvtCx0Ysg0L7QvdC4IFwi0YHQvNC+0YLRgNC10LvQuFwiINC90LAg0L3QtdGRKVxuICAgICAgICB0aGlzLmxlZnRFeWUubG9va0F0KHNwaGVyZVBvcyk7XG4gICAgICAgIHRoaXMucmlnaHRFeWUubG9va0F0KHNwaGVyZVBvcyk7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZygnW0V5ZXNdINCe0JPQoNCe0JzQndCr0JUg0LPQu9Cw0LfQsC3RgdC/0YPRgtC90LjQutC4INGD0LHQtdCz0LDRjtGCINC+0YIg0LrRg9GA0YHQvtGA0LA6Jyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCcgINCd0LDQv9GA0LDQstC70LXQvdC40LUg0LLQtdC60YLQvtGA0LA6Jywgbm9ybWFsaXplZERpcik7XG4gICAgICAgIGNvbnNvbGUubG9nKCcgINCf0YDQvtGC0LjQstC+0L/QvtC70L7QttC90L7QtSDQvdCw0L/RgNCw0LLQu9C10L3QuNC1OicsIG9wcG9zaXRlRGlyKTtcbiAgICAgICAgY29uc29sZS5sb2coJyAg0JvQtdCy0YvQuSDQs9C70LDQtzonLCB0aGlzLmxlZnRFeWUucG9zaXRpb24pO1xuICAgICAgICBjb25zb2xlLmxvZygnICDQn9GA0LDQstGL0Lkg0LPQu9Cw0Lc6JywgdGhpcy5yaWdodEV5ZS5wb3NpdGlvbik7XG4gICAgfVxuICAgIFxuICAgIC8vINCf0L7Qt9C40YbQuNGPINC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOICjRgdC/0LXRgNC10LTQuCDRgdGE0LXRgNGLKVxuICAgIHBvc2l0aW9uRXllc0RlZmF1bHQoc3BoZXJlUG9zLCByYWRpdXMpIHtcbiAgICAgICAgY29uc3QgZXllRGlzdGFuY2UgPSByYWRpdXMgKyAyLjA7XG4gICAgICAgIFxuICAgICAgICAvLyDQoNCw0LfQvNC10YnQsNC10Lwg0LPQu9Cw0LfQsCDRgdC/0LXRgNC10LTQuCDQv9C+INGD0LzQvtC70YfQsNC90LjRjlxuICAgICAgICB0aGlzLmxlZnRFeWUucG9zaXRpb24uc2V0KFxuICAgICAgICAgICAgc3BoZXJlUG9zLnggLSAzLjAsIFxuICAgICAgICAgICAgc3BoZXJlUG9zLnkgKyAxLjAsIFxuICAgICAgICAgICAgc3BoZXJlUG9zLnogKyBleWVEaXN0YW5jZVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5yaWdodEV5ZS5wb3NpdGlvbi5zZXQoXG4gICAgICAgICAgICBzcGhlcmVQb3MueCArIDMuMCwgXG4gICAgICAgICAgICBzcGhlcmVQb3MueSArIDEuMCwgXG4gICAgICAgICAgICBzcGhlcmVQb3MueiArIGV5ZURpc3RhbmNlXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICAvLyDQn9C+0LLQvtGA0LDRh9C40LLQsNC10Lwg0Log0YbQtdC90YLRgNGDINGB0YTQtdGA0YtcbiAgICAgICAgdGhpcy5sZWZ0RXllLmxvb2tBdChzcGhlcmVQb3MpO1xuICAgICAgICB0aGlzLnJpZ2h0RXllLmxvb2tBdChzcGhlcmVQb3MpO1xuICAgIH1cbiAgICBcbiAgICB1cGRhdGVFbW90aW9uKGVtb3Rpb24pIHtcbiAgICAgICAgaWYgKCF0aGlzLmVtb3Rpb25zW2Vtb3Rpb25dKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFtFeWVzXSDQndC10LjQt9Cy0LXRgdGC0L3QsNGPINGN0LzQvtGG0LjRjzogJHtlbW90aW9ufWApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLmN1cnJlbnRFbW90aW9uID0gZW1vdGlvbjtcbiAgICAgICAgXG4gICAgICAgIGlmICghdGhpcy5sZWZ0RXllIHx8ICF0aGlzLnJpZ2h0RXllKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGNvb3JkcyA9IHRoaXMuZW1vdGlvbnNbZW1vdGlvbl07XG4gICAgICAgIFxuICAgICAgICAvLyDQntCx0L3QvtCy0LvRj9C10LwgVVYg0LrQvtC+0YDQtNC40L3QsNGC0Ysg0LTQu9GPINC+0YLQvtCx0YDQsNC20LXQvdC40Y8g0L3Rg9C20L3QvtC5INGH0LDRgdGC0Lgg0YHQv9GA0LDQudGCLdC60LDRgNGC0YtcbiAgICAgICAgLy8g0JPQvtGA0LjQt9C+0L3RgtCw0LvRjNC90LDRjyDRgNCw0YHQutC70LDQtNC60LAgNiDRjdC80L7RhtC40Lkg0LIg0YDRj9C0XG4gICAgICAgIGNvbnN0IHV2T2Zmc2V0WCA9IGNvb3Jkcy51O1xuICAgICAgICBjb25zdCB1dk9mZnNldFkgPSBjb29yZHMudjtcbiAgICAgICAgY29uc3QgdXZTY2FsZVggPSAwLjE2NjsgLy8gMS82INC00LvRjyA2INGN0LzQvtGG0LjQuSDQsiDRgNGP0LRcbiAgICAgICAgY29uc3QgdXZTY2FsZVkgPSAxLjA7IC8vINCy0YHRjyDQstGL0YHQvtGC0LBcbiAgICAgICAgXG4gICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCBVViDQtNC70Y8g0LvQtdCy0L7Qs9C+INCz0LvQsNC30LBcbiAgICAgICAgaWYgKHRoaXMubGVmdEV5ZS5tYXRlcmlhbC5tYXApIHtcbiAgICAgICAgICAgIHRoaXMubGVmdEV5ZS5tYXRlcmlhbC5tYXAub2Zmc2V0LnNldCh1dk9mZnNldFgsIHV2T2Zmc2V0WSk7XG4gICAgICAgICAgICB0aGlzLmxlZnRFeWUubWF0ZXJpYWwubWFwLnJlcGVhdC5zZXQodXZTY2FsZVgsIHV2U2NhbGVZKTtcbiAgICAgICAgICAgIHRoaXMubGVmdEV5ZS5tYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCBVViDQtNC70Y8g0L/RgNCw0LLQvtCz0L4g0LPQu9Cw0LfQsFxuICAgICAgICBpZiAodGhpcy5yaWdodEV5ZS5tYXRlcmlhbC5tYXApIHtcbiAgICAgICAgICAgIHRoaXMucmlnaHRFeWUubWF0ZXJpYWwubWFwLm9mZnNldC5zZXQodXZPZmZzZXRYLCB1dk9mZnNldFkpO1xuICAgICAgICAgICAgdGhpcy5yaWdodEV5ZS5tYXRlcmlhbC5tYXAucmVwZWF0LnNldCh1dlNjYWxlWCwgdXZTY2FsZVkpO1xuICAgICAgICAgICAgdGhpcy5yaWdodEV5ZS5tYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKGBbRXllc10g0K3QvNC+0YbQuNGPINC40LfQvNC10L3QtdC90LAg0L3QsDogJHtlbW90aW9ufWApO1xuICAgIH1cbiAgICBcbiAgICAvLyDQn9C+0LrQsNC30LDRgtGMINC90LDQv9GA0LDQstC70LXQvdC40LUg0LTQstC40LbQtdC90LjRj1xuICAgIHNob3dEaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgICAgIGlmIChkaXJlY3Rpb24ueCA+IDAuMSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbW90aW9uKCdsb29raW5nX3JpZ2h0Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uLnggPCAtMC4xKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVtb3Rpb24oJ2xvb2tpbmdfbGVmdCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbW90aW9uKCdub3JtYWwnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyDQn9C+0LrQsNC30LDRgtGMINCw0LPRgNC10YHRgdC40Y5cbiAgICBzaG93QWdncmVzc2lvbigpIHtcbiAgICAgICAgdGhpcy51cGRhdGVFbW90aW9uKCdhbmdyeScpO1xuICAgIH1cbiAgICBcbiAgICAvLyDQn9C+0LrQsNC30LDRgtGMINGB0YLRgNCw0YVcbiAgICBzaG93RmVhcigpIHtcbiAgICAgICAgdGhpcy51cGRhdGVFbW90aW9uKCdzY2FyZWQnKTtcbiAgICB9XG4gICAgXG4gICAgLy8g0J/QvtC60LDQt9Cw0YLRjCDRgNCw0LTQvtGB0YLRjFxuICAgIHNob3dIYXBwaW5lc3MoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlRW1vdGlvbignaGFwcHknKTtcbiAgICB9XG4gICAgXG4gICAgLy8g0JLQtdGA0L3Rg9GC0YzRgdGPINC6INC90L7RgNC80LDQu9GM0L3QvtC80YMg0YHQvtGB0YLQvtGP0L3QuNGOXG4gICAgc2hvd05vcm1hbCgpIHtcbiAgICAgICAgdGhpcy51cGRhdGVFbW90aW9uKCdub3JtYWwnKTtcbiAgICB9XG4gICAgXG4gICAgLy8g0KPQtNCw0LvQuNGC0Ywg0LPQu9Cw0LfQsFxuICAgIHJlbW92ZUV5ZXMoKSB7XG4gICAgICAgIGlmICh0aGlzLmxlZnRFeWUpIHtcbiAgICAgICAgICAgIC8vINCj0LTQsNC70Y/QtdC8INC40Lcg0YHRhtC10L3Riywg0LAg0L3QtSDQuNC3INGB0YTQtdGA0YtcbiAgICAgICAgICAgIGNvbnN0IHNjZW5lID0gdGhpcy5sZWZ0RXllLnBhcmVudDtcbiAgICAgICAgICAgIGlmIChzY2VuZSkge1xuICAgICAgICAgICAgICAgIHNjZW5lLnJlbW92ZSh0aGlzLmxlZnRFeWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5sZWZ0RXllLmdlb21ldHJ5LmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMubGVmdEV5ZS5tYXRlcmlhbC5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLmxlZnRFeWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5yaWdodEV5ZSkge1xuICAgICAgICAgICAgLy8g0KPQtNCw0LvRj9C10Lwg0LjQtyDRgdGG0LXQvdGLLCDQsCDQvdC1INC40Lcg0YHRhNC10YDRiyAgXG4gICAgICAgICAgICBjb25zdCBzY2VuZSA9IHRoaXMucmlnaHRFeWUucGFyZW50O1xuICAgICAgICAgICAgaWYgKHNjZW5lKSB7XG4gICAgICAgICAgICAgICAgc2NlbmUucmVtb3ZlKHRoaXMucmlnaHRFeWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yaWdodEV5ZS5nZW9tZXRyeS5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLnJpZ2h0RXllLm1hdGVyaWFsLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMucmlnaHRFeWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNwaGVyZU1lc2ggPSBudWxsO1xuICAgIH1cbn1cblxuLy8g0JPQu9C+0LHQsNC70YzQvdCw0Y8g0YHQuNGB0YLQtdC80LAg0LPQu9Cw0LdcbmxldCBnbG9iYWxFeWVTeXN0ZW0gPSBudWxsO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdEV5ZVN5c3RlbSgpIHtcbiAgICBpZiAoIWdsb2JhbEV5ZVN5c3RlbSkge1xuICAgICAgICBnbG9iYWxFeWVTeXN0ZW0gPSBuZXcgRXllU3lzdGVtKCk7XG4gICAgfVxuICAgIHJldHVybiBnbG9iYWxFeWVTeXN0ZW07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRFeWVzVG9TcGhlcmUoc3BoZXJlTWVzaCkge1xuICAgIGNvbnNvbGUubG9nKCdbRXllc10gYWRkRXllc1RvU3BoZXJlINCy0YvQt9Cy0LDQvdCwINC00LvRjzonLCBzcGhlcmVNZXNoKTtcbiAgICBcbiAgICBpZiAoIWdsb2JhbEV5ZVN5c3RlbSkge1xuICAgICAgICBjb25zb2xlLmxvZygnW0V5ZXNdINCY0L3QuNGG0LjQsNC70LjQt9C40YDRg9GOINCz0LvQvtCx0LDQu9GM0L3Rg9GOINGB0LjRgdGC0LXQvNGDINCz0LvQsNC3Jyk7XG4gICAgICAgIGdsb2JhbEV5ZVN5c3RlbSA9IGluaXRFeWVTeXN0ZW0oKTtcbiAgICB9XG4gICAgXG4gICAgLy8g0JbQtNC10Lwg0LfQsNCz0YDRg9C30LrQuCDRgtC10LrRgdGC0YPRgNGLXG4gICAgY29uc3QgY2hlY2tBbmRDcmVhdGUgPSAoKSA9PiB7XG4gICAgICAgIGlmIChnbG9iYWxFeWVTeXN0ZW0uZXllVGV4dHVyZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tFeWVzXSDQotC10LrRgdGC0YPRgNCwINCz0L7RgtC+0LLQsCwg0YHQvtC30LTQsNGOINCz0LvQsNC30LAnKTtcbiAgICAgICAgICAgIGdsb2JhbEV5ZVN5c3RlbS5jcmVhdGVFeWVzKHNwaGVyZU1lc2gpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tFeWVzXSDQntC20LjQtNCw0Y4g0LfQsNCz0YDRg9C30LrQuCDRgtC10LrRgdGC0YPRgNGLLi4uJyk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGNoZWNrQW5kQ3JlYXRlLCAxMDApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBcbiAgICBjaGVja0FuZENyZWF0ZSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlU3BoZXJlRW1vdGlvbihlbW90aW9uKSB7XG4gICAgaWYgKGdsb2JhbEV5ZVN5c3RlbSkge1xuICAgICAgICBnbG9iYWxFeWVTeXN0ZW0udXBkYXRlRW1vdGlvbihlbW90aW9uKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93RGlyZWN0aW9uT25TcGhlcmUoZGlyZWN0aW9uKSB7XG4gICAgaWYgKGdsb2JhbEV5ZVN5c3RlbSkge1xuICAgICAgICBnbG9iYWxFeWVTeXN0ZW0uc2hvd0RpcmVjdGlvbihkaXJlY3Rpb24pO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dBZ2dyZXNzaW9uT25TcGhlcmUoKSB7XG4gICAgaWYgKGdsb2JhbEV5ZVN5c3RlbSkge1xuICAgICAgICBnbG9iYWxFeWVTeXN0ZW0uc2hvd0FnZ3Jlc3Npb24oKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93RmVhck9uU3BoZXJlKCkge1xuICAgIGlmIChnbG9iYWxFeWVTeXN0ZW0pIHtcbiAgICAgICAgZ2xvYmFsRXllU3lzdGVtLnNob3dGZWFyKCk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvd0hhcHBpbmVzc09uU3BoZXJlKCkge1xuICAgIGlmIChnbG9iYWxFeWVTeXN0ZW0pIHtcbiAgICAgICAgZ2xvYmFsRXllU3lzdGVtLnNob3dIYXBwaW5lc3MoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93Tm9ybWFsT25TcGhlcmUoKSB7XG4gICAgaWYgKGdsb2JhbEV5ZVN5c3RlbSkge1xuICAgICAgICBnbG9iYWxFeWVTeXN0ZW0uc2hvd05vcm1hbCgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUV5ZVBvc2l0aW9ucygpIHtcbiAgICBpZiAoZ2xvYmFsRXllU3lzdGVtKSB7XG4gICAgICAgIGdsb2JhbEV5ZVN5c3RlbS51cGRhdGVFeWVQb3NpdGlvbnMoKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IGdsb2JhbEV5ZVN5c3RlbSB9OyAiLCIvLyDQodC40YHRgtC10LzQsCDQtNC40LDQs9C90L7RgdGC0LjQutC4INC00LLQuNC20LXQvdC40Y9cbmV4cG9ydCBjbGFzcyBNb3ZlbWVudERpYWdub3N0aWNzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubG9ncyA9IFtdO1xuICAgICAgICB0aGlzLm1heExvZ3MgPSA1MDsgLy8g0KXRgNCw0L3QuNC8INC/0L7RgdC70LXQtNC90LjQtSA1MCDQt9Cw0L/QuNGB0LXQuVxuICAgICAgICB0aGlzLnN0YXRzID0ge1xuICAgICAgICAgICAgY2xpZW50Q29tbWFuZHM6IDAsXG4gICAgICAgICAgICBzZXJ2ZXJVcGRhdGVzOiAwLFxuICAgICAgICAgICAgbG9jYWxJbXB1bHNlczogMCxcbiAgICAgICAgICAgIGNvcnJlY3Rpb25zOiAwLFxuICAgICAgICAgICAgdGVsZXBvcnRzOiAwXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubGFzdFByaW50VGltZSA9IDA7XG4gICAgICAgIHRoaXMucHJpbnRJbnRlcnZhbCA9IDIwMDA7IC8vINCf0LXRh9Cw0YLQsNC10Lwg0YHRgtCw0YLQuNGB0YLQuNC60YMg0LrQsNC20LTRi9C1IDIg0YHQtdC60YPQvdC00YtcbiAgICB9XG5cbiAgICBlbmFibGUoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbRGlhZ25vc3RpY3NdIPCflI0g0JTQuNCw0LPQvdC+0YHRgtC40LrQsCDQtNCy0LjQttC10L3QuNGPINCy0LrQu9GO0YfQtdC90LAnKTtcbiAgICB9XG5cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgY29uc29sZS5sb2coJ1tEaWFnbm9zdGljc10g0JTQuNCw0LPQvdC+0YHRgtC40LrQsCDQtNCy0LjQttC10L3QuNGPINCy0YvQutC70Y7Rh9C10L3QsCcpO1xuICAgIH1cblxuICAgIGxvZyhjYXRlZ29yeSwgZGF0YSkge1xuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0ge1xuICAgICAgICAgICAgdGltZXN0YW1wLFxuICAgICAgICAgICAgY2F0ZWdvcnksXG4gICAgICAgICAgICBkYXRhOiB7IC4uLmRhdGEgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMubG9ncy5wdXNoKGVudHJ5KTtcbiAgICAgICAgXG4gICAgICAgIC8vINCj0LTQsNC70Y/QtdC8INGB0YLQsNGA0YvQtSDQt9Cw0L/QuNGB0LhcbiAgICAgICAgaWYgKHRoaXMubG9ncy5sZW5ndGggPiB0aGlzLm1heExvZ3MpIHtcbiAgICAgICAgICAgIHRoaXMubG9ncy5zaGlmdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INGB0YLQsNGC0LjRgdGC0LjQutGDXG4gICAgICAgIHRoaXMuc3RhdHNbY2F0ZWdvcnldID0gKHRoaXMuc3RhdHNbY2F0ZWdvcnldIHx8IDApICsgMTtcblxuICAgICAgICAvLyDQn9C10YfQsNGC0LDQtdC8INGB0LLQvtC00LrRgyDQv9C10YDQuNC+0LTQuNGH0LXRgdC60LhcbiAgICAgICAgaWYgKHRpbWVzdGFtcCAtIHRoaXMubGFzdFByaW50VGltZSA+IHRoaXMucHJpbnRJbnRlcnZhbCkge1xuICAgICAgICAgICAgdGhpcy5wcmludFN1bW1hcnkoKTtcbiAgICAgICAgICAgIHRoaXMubGFzdFByaW50VGltZSA9IHRpbWVzdGFtcDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vINCe0YLQv9GA0LDQstC60LAg0LrQvtC80LDQvdC00Ysg0L3QsCDRgdC10YDQstC10YBcbiAgICBsb2dDbGllbnRDb21tYW5kKGRpcmVjdGlvbiwgZGlzdGFuY2UsIHBsYXllck9iamVjdElEKSB7XG4gICAgICAgIHRoaXMubG9nKCdjbGllbnRDb21tYW5kcycsIHtcbiAgICAgICAgICAgIGRpcmVjdGlvbjoge1xuICAgICAgICAgICAgICAgIHg6IGRpcmVjdGlvbi54LnRvRml4ZWQoMyksXG4gICAgICAgICAgICAgICAgeTogZGlyZWN0aW9uLnkudG9GaXhlZCgzKSxcbiAgICAgICAgICAgICAgICB6OiBkaXJlY3Rpb24uei50b0ZpeGVkKDMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlLnRvRml4ZWQoMiksXG4gICAgICAgICAgICBwbGF5ZXJPYmplY3RJRCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyDQn9C+0LvRg9GH0LXQvdC40LUg0L7QsdC90L7QstC70LXQvdC40Y8g0YEg0YHQtdGA0LLQtdGA0LBcbiAgICBsb2dTZXJ2ZXJVcGRhdGUob2JqZWN0SWQsIHBvc2l0aW9uLCB2ZWxvY2l0eSwgdGltZXN0YW1wKSB7XG4gICAgICAgIHRoaXMubG9nKCdzZXJ2ZXJVcGRhdGVzJywge1xuICAgICAgICAgICAgb2JqZWN0SWQsXG4gICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgIHg6IHBvc2l0aW9uLngudG9GaXhlZCgzKSxcbiAgICAgICAgICAgICAgICB5OiBwb3NpdGlvbi55LnRvRml4ZWQoMyksXG4gICAgICAgICAgICAgICAgejogcG9zaXRpb24uei50b0ZpeGVkKDMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVsb2NpdHk6IHZlbG9jaXR5ID8ge1xuICAgICAgICAgICAgICAgIHg6IHZlbG9jaXR5LngudG9GaXhlZCgzKSxcbiAgICAgICAgICAgICAgICB5OiB2ZWxvY2l0eS55LnRvRml4ZWQoMyksXG4gICAgICAgICAgICAgICAgejogdmVsb2NpdHkuei50b0ZpeGVkKDMpLFxuICAgICAgICAgICAgICAgIG1hZ25pdHVkZTogTWF0aC5zcXJ0KHZlbG9jaXR5LngqKjIgKyB2ZWxvY2l0eS55KioyICsgdmVsb2NpdHkueioqMikudG9GaXhlZCgzKVxuICAgICAgICAgICAgfSA6IG51bGwsXG4gICAgICAgICAgICBzZXJ2ZXJUaW1lc3RhbXA6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgIGNsaWVudFRpbWU6IERhdGUubm93KClcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8g0JvQvtC60LDQu9GM0L3Ri9C5INC40LzQv9GD0LvRjNGBXG4gICAgbG9nTG9jYWxJbXB1bHNlKHBsYXllck9iamVjdElELCBmb3JjZSwgZGlzdGFuY2UpIHtcbiAgICAgICAgdGhpcy5sb2coJ2xvY2FsSW1wdWxzZXMnLCB7XG4gICAgICAgICAgICBwbGF5ZXJPYmplY3RJRCxcbiAgICAgICAgICAgIGZvcmNlOiB7XG4gICAgICAgICAgICAgICAgeDogZm9yY2UueC50b0ZpeGVkKDQpLFxuICAgICAgICAgICAgICAgIHk6IGZvcmNlLnkudG9GaXhlZCg0KSxcbiAgICAgICAgICAgICAgICB6OiBmb3JjZS56LnRvRml4ZWQoNCksXG4gICAgICAgICAgICAgICAgbWFnbml0dWRlOiBNYXRoLnNxcnQoZm9yY2UueCoqMiArIGZvcmNlLnkqKjIgKyBmb3JjZS56KioyKS50b0ZpeGVkKDQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlLnRvRml4ZWQoMiksXG4gICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8g0JrQvtGA0YDQtdC60YbQuNGPINC/0L7Qt9C40YbQuNC4XG4gICAgbG9nQ29ycmVjdGlvbihvYmplY3RJZCwgY3VycmVudFBvcywgdGFyZ2V0UG9zLCBkaXN0YW5jZSwgdHlwZSkge1xuICAgICAgICB0aGlzLmxvZygnY29ycmVjdGlvbnMnLCB7XG4gICAgICAgICAgICBvYmplY3RJZCxcbiAgICAgICAgICAgIGN1cnJlbnRQb3M6IHtcbiAgICAgICAgICAgICAgICB4OiBjdXJyZW50UG9zLngudG9GaXhlZCgzKSxcbiAgICAgICAgICAgICAgICB5OiBjdXJyZW50UG9zLnkudG9GaXhlZCgzKSxcbiAgICAgICAgICAgICAgICB6OiBjdXJyZW50UG9zLnoudG9GaXhlZCgzKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRhcmdldFBvczoge1xuICAgICAgICAgICAgICAgIHg6IHRhcmdldFBvcy54LnRvRml4ZWQoMyksXG4gICAgICAgICAgICAgICAgeTogdGFyZ2V0UG9zLnkudG9GaXhlZCgzKSxcbiAgICAgICAgICAgICAgICB6OiB0YXJnZXRQb3Muei50b0ZpeGVkKDMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlLnRvRml4ZWQoMyksXG4gICAgICAgICAgICB0eXBlLCAvLyAnc21vb3RoJywgJ2hhcmQnLCAndGVsZXBvcnQnXG4gICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8g0KLQtdC70LXQv9C+0YDRgtCw0YbQuNGPXG4gICAgbG9nVGVsZXBvcnQob2JqZWN0SWQsIGZyb21Qb3MsIHRvUG9zLCByZWFzb24pIHtcbiAgICAgICAgdGhpcy5sb2coJ3RlbGVwb3J0cycsIHtcbiAgICAgICAgICAgIG9iamVjdElkLFxuICAgICAgICAgICAgZnJvbVBvczoge1xuICAgICAgICAgICAgICAgIHg6IGZyb21Qb3MueC50b0ZpeGVkKDMpLFxuICAgICAgICAgICAgICAgIHk6IGZyb21Qb3MueS50b0ZpeGVkKDMpLFxuICAgICAgICAgICAgICAgIHo6IGZyb21Qb3Muei50b0ZpeGVkKDMpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9Qb3M6IHtcbiAgICAgICAgICAgICAgICB4OiB0b1Bvcy54LnRvRml4ZWQoMyksXG4gICAgICAgICAgICAgICAgeTogdG9Qb3MueS50b0ZpeGVkKDMpLFxuICAgICAgICAgICAgICAgIHo6IHRvUG9zLnoudG9GaXhlZCgzKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRpc3RhbmNlOiBNYXRoLnNxcnQoXG4gICAgICAgICAgICAgICAgKHRvUG9zLnggLSBmcm9tUG9zLngpKioyICsgXG4gICAgICAgICAgICAgICAgKHRvUG9zLnkgLSBmcm9tUG9zLnkpKioyICsgXG4gICAgICAgICAgICAgICAgKHRvUG9zLnogLSBmcm9tUG9zLnopKioyXG4gICAgICAgICAgICApLnRvRml4ZWQoMyksXG4gICAgICAgICAgICByZWFzb24sXG4gICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpbnRTdW1tYXJ5KCkge1xuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5OKIFtEaWFnbm9zdGljc10g0KHQstC+0LTQutCwINC30LAg0L/QvtGB0LvQtdC00L3QuNC1IDIg0YHQtdC60YPQvdC00Ys6Jyk7XG4gICAgICAgIGNvbnNvbGUubG9nKGAgICDwn5OkINCa0L7QvNCw0L3QtCDQutC70LjQtdC90YLQsDogJHt0aGlzLnN0YXRzLmNsaWVudENvbW1hbmRzIHx8IDB9YCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGAgICDwn5OlINCe0LHQvdC+0LLQu9C10L3QuNC5INGB0LXRgNCy0LXRgNCwOiAke3RoaXMuc3RhdHMuc2VydmVyVXBkYXRlcyB8fCAwfWApO1xuICAgICAgICBjb25zb2xlLmxvZyhgICAg4pqhINCb0L7QutCw0LvRjNC90YvRhSDQuNC80L/Rg9C70YzRgdC+0LI6ICR7dGhpcy5zdGF0cy5sb2NhbEltcHVsc2VzIHx8IDB9YCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGAgICDwn5SnINCa0L7RgNGA0LXQutGG0LjQuTogJHt0aGlzLnN0YXRzLmNvcnJlY3Rpb25zIHx8IDB9YCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGAgICDwn46vINCi0LXQu9C10L/QvtGA0YLQsNGG0LjQuTogJHt0aGlzLnN0YXRzLnRlbGVwb3J0cyB8fCAwfWApO1xuXG4gICAgICAgIC8vINCf0L7QtNGA0L7QsdC90LDRjyDQuNC90YTQvtGA0LzQsNGG0LjRjyDQviDQv9C+0YHQu9C10LTQvdC40YUg0YHQvtCx0YvRgtC40Y/RhVxuICAgICAgICB0aGlzLnByaW50RGV0YWlsZWRJbmZvKCk7XG5cbiAgICAgICAgLy8g0KHQsdGA0LDRgdGL0LLQsNC10Lwg0YHRgtCw0YLQuNGB0YLQuNC60YNcbiAgICAgICAgdGhpcy5zdGF0cyA9IHtcbiAgICAgICAgICAgIGNsaWVudENvbW1hbmRzOiAwLFxuICAgICAgICAgICAgc2VydmVyVXBkYXRlczogMCxcbiAgICAgICAgICAgIGxvY2FsSW1wdWxzZXM6IDAsXG4gICAgICAgICAgICBjb3JyZWN0aW9uczogMCxcbiAgICAgICAgICAgIHRlbGVwb3J0czogMFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaW50RGV0YWlsZWRJbmZvKCkge1xuICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICBjb25zdCByZWNlbnRUaW1lID0gbm93IC0gdGhpcy5wcmludEludGVydmFsO1xuXG4gICAgICAgIC8vINCf0L7RgdC70LXQtNC90LjQtSDQutC+0YDRgNC10LrRhtC40LggKNC10YHQu9C4INC10YHRgtGMKVxuICAgICAgICBjb25zdCByZWNlbnRDb3JyZWN0aW9ucyA9IHRoaXMubG9ncy5maWx0ZXIobG9nID0+IFxuICAgICAgICAgICAgbG9nLmNhdGVnb3J5ID09PSAnY29ycmVjdGlvbnMnICYmIGxvZy50aW1lc3RhbXAgPiByZWNlbnRUaW1lXG4gICAgICAgICk7XG4gICAgICAgIGlmIChyZWNlbnRDb3JyZWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygn8J+UpyBbRGlhZ25vc3RpY3NdINCf0L7RgdC70LXQtNC90LjQtSDQutC+0YDRgNC10LrRhtC40Lg6Jyk7XG4gICAgICAgICAgICByZWNlbnRDb3JyZWN0aW9ucy5zbGljZSgtMykuZm9yRWFjaChsb2cgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGQgPSBsb2cuZGF0YTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgICAgJHtkLnR5cGUudG9VcHBlckNhc2UoKX06INCe0LHRitC10LrRgiAke2Qub2JqZWN0SWR9LCDRgNCw0YHRgdGC0L7Rj9C90LjQtSAke2QuZGlzdGFuY2V9LCBcbiAgINC+0YIgKCR7ZC5jdXJyZW50UG9zLnh9LCAke2QuY3VycmVudFBvcy55fSwgJHtkLmN1cnJlbnRQb3Muen0pIFxuICAg0LogICgke2QudGFyZ2V0UG9zLnh9LCAke2QudGFyZ2V0UG9zLnl9LCAke2QudGFyZ2V0UG9zLnp9KWApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDQn9C+0YHQu9C10LTQvdC40LUg0LrQvtC80LDQvdC00Ysg0LrQu9C40LXQvdGC0LAgKNC+0LHRgNCw0LfRhtGLKVxuICAgICAgICBjb25zdCByZWNlbnRDb21tYW5kcyA9IHRoaXMubG9ncy5maWx0ZXIobG9nID0+IFxuICAgICAgICAgICAgbG9nLmNhdGVnb3J5ID09PSAnY2xpZW50Q29tbWFuZHMnICYmIGxvZy50aW1lc3RhbXAgPiByZWNlbnRUaW1lXG4gICAgICAgICk7XG4gICAgICAgIGlmIChyZWNlbnRDb21tYW5kcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBzYW1wbGUgPSByZWNlbnRDb21tYW5kc1tyZWNlbnRDb21tYW5kcy5sZW5ndGggLSAxXS5kYXRhO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYPCfk6QgW0RpYWdub3N0aWNzXSDQn9GA0LjQvNC10YAg0LrQvtC80LDQvdC00Ysg0LrQu9C40LXQvdGC0LA6INC90LDQv9GA0LDQstC70LXQvdC40LUgKCR7c2FtcGxlLmRpcmVjdGlvbi54fSwgJHtzYW1wbGUuZGlyZWN0aW9uLnl9LCAke3NhbXBsZS5kaXJlY3Rpb24uen0pLCDRgdC40LvQsCAke3NhbXBsZS5kaXN0YW5jZX1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vINCf0L7RgdC70LXQtNC90LjQtSDRgdC10YDQstC10YDQvdGL0LUg0L7QsdC90L7QstC70LXQvdC40Y8gKNC+0LHRgNCw0LfRhtGLKVxuICAgICAgICBjb25zdCByZWNlbnRVcGRhdGVzID0gdGhpcy5sb2dzLmZpbHRlcihsb2cgPT4gXG4gICAgICAgICAgICBsb2cuY2F0ZWdvcnkgPT09ICdzZXJ2ZXJVcGRhdGVzJyAmJiBsb2cudGltZXN0YW1wID4gcmVjZW50VGltZVxuICAgICAgICApO1xuICAgICAgICBpZiAocmVjZW50VXBkYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBzYW1wbGUgPSByZWNlbnRVcGRhdGVzW3JlY2VudFVwZGF0ZXMubGVuZ3RoIC0gMV0uZGF0YTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDwn5OlIFtEaWFnbm9zdGljc10g0J/RgNC40LzQtdGAINC+0LHQvdC+0LLQu9C10L3QuNGPINGB0LXRgNCy0LXRgNCwOiDQv9C+0LfQuNGG0LjRjyAoJHtzYW1wbGUucG9zaXRpb24ueH0sICR7c2FtcGxlLnBvc2l0aW9uLnl9LCAke3NhbXBsZS5wb3NpdGlvbi56fSksINGB0LrQvtGA0L7RgdGC0YwgJHtzYW1wbGUudmVsb2NpdHk/Lm1hZ25pdHVkZSB8fCAn0L0v0LQnfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g0JvQvtC60LDQu9GM0L3Ri9C1INC40LzQv9GD0LvRjNGB0YsgKNC10YHQu9C4INC10YHRgtGMKVxuICAgICAgICBjb25zdCByZWNlbnRJbXB1bHNlcyA9IHRoaXMubG9ncy5maWx0ZXIobG9nID0+IFxuICAgICAgICAgICAgbG9nLmNhdGVnb3J5ID09PSAnbG9jYWxJbXB1bHNlcycgJiYgbG9nLnRpbWVzdGFtcCA+IHJlY2VudFRpbWVcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHJlY2VudEltcHVsc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHNhbXBsZSA9IHJlY2VudEltcHVsc2VzW3JlY2VudEltcHVsc2VzLmxlbmd0aCAtIDFdLmRhdGE7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg4pqhIFtEaWFnbm9zdGljc10g0J/RgNC40LzQtdGAINC70L7QutCw0LvRjNC90L7Qs9C+INC40LzQv9GD0LvRjNGB0LA6INGB0LjQu9CwICR7c2FtcGxlLmZvcmNlLm1hZ25pdHVkZX0sINGA0LDRgdGB0YLQvtGP0L3QuNC1ICR7c2FtcGxlLmRpc3RhbmNlfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g0KLQtdC70LXQv9C+0YDRgtCw0YbQuNC4ICjQtdGB0LvQuCDQtdGB0YLRjClcbiAgICAgICAgY29uc3QgcmVjZW50VGVsZXBvcnRzID0gdGhpcy5sb2dzLmZpbHRlcihsb2cgPT4gXG4gICAgICAgICAgICBsb2cuY2F0ZWdvcnkgPT09ICd0ZWxlcG9ydHMnICYmIGxvZy50aW1lc3RhbXAgPiByZWNlbnRUaW1lXG4gICAgICAgICk7XG4gICAgICAgIGlmIChyZWNlbnRUZWxlcG9ydHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ/Cfjq8gW0RpYWdub3N0aWNzXSDQotC10LvQtdC/0L7RgNGC0LDRhtC40Lg6Jyk7XG4gICAgICAgICAgICByZWNlbnRUZWxlcG9ydHMuZm9yRWFjaChsb2cgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGQgPSBsb2cuZGF0YTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgICAg0J7QsdGK0LXQutGCICR7ZC5vYmplY3RJZH06INC/0YDRi9C20L7QuiDQvdCwICR7ZC5kaXN0YW5jZX0g0LXQtNC40L3QuNGGLCDQv9GA0LjRh9C40L3QsDogJHtkLnJlYXNvbn1gKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coJ+KUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgScpO1xuICAgIH1cblxuICAgIC8vINCf0L7Qu9GD0YfQuNGC0Ywg0L/QvtGB0LvQtdC00L3QuNC1INC30LDQv9C40YHQuCDQtNC70Y8g0L7RgtC70LDQtNC60LhcbiAgICBnZXRSZWNlbnRMb2dzKGNhdGVnb3J5ID0gbnVsbCwgY291bnQgPSAxMCkge1xuICAgICAgICBsZXQgZmlsdGVyZWQgPSB0aGlzLmxvZ3M7XG4gICAgICAgIGlmIChjYXRlZ29yeSkge1xuICAgICAgICAgICAgZmlsdGVyZWQgPSB0aGlzLmxvZ3MuZmlsdGVyKGxvZyA9PiBsb2cuY2F0ZWdvcnkgPT09IGNhdGVnb3J5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyZWQuc2xpY2UoLWNvdW50KTtcbiAgICB9XG5cbiAgICAvLyDQrdC60YHQv9C+0YDRgiDQu9C+0LPQvtCyINC00LvRjyDQsNC90LDQu9C40LfQsFxuICAgIGV4cG9ydExvZ3MoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsb2dzOiB0aGlzLmxvZ3MsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgICBzdGF0czogeyAuLi50aGlzLnN0YXRzIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG5cbi8vINCT0LvQvtCx0LDQu9GM0L3Ri9C5INGN0LrQt9C10LzQv9C70Y/RgCDQtNC40LDQs9C90L7RgdGC0LjQutC4XG5leHBvcnQgY29uc3QgZGlhZ25vc3RpY3MgPSBuZXcgTW92ZW1lbnREaWFnbm9zdGljcygpO1xuXG4vLyDQktC60LvRjtGH0LDQtdC8INC00LjQsNCz0L3QvtGB0YLQuNC60YMg0L/QviDRg9C80L7Qu9GH0LDQvdC40Y4g0LTQu9GPINGC0LXRgdGC0LjRgNC+0LLQsNC90LjRj1xuZGlhZ25vc3RpY3MuZW5hYmxlKCk7XG5cbi8vINCU0L7QsdCw0LLQu9GP0LXQvCDQsiB3aW5kb3cg0LTQu9GPINC00L7RgdGC0YPQv9CwINC40Lcg0LrQvtC90YHQvtC70LhcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHdpbmRvdy5kaWFnbm9zdGljcyA9IGRpYWdub3N0aWNzO1xuICAgIHdpbmRvdy5lbmFibGVEaWFnID0gKCkgPT4gZGlhZ25vc3RpY3MuZW5hYmxlKCk7XG4gICAgd2luZG93LmRpc2FibGVEaWFnID0gKCkgPT4gZGlhZ25vc3RpY3MuZGlzYWJsZSgpO1xuICAgIHdpbmRvdy5kaWFnTG9ncyA9IChjYXRlZ29yeSwgY291bnQpID0+IGRpYWdub3N0aWNzLmdldFJlY2VudExvZ3MoY2F0ZWdvcnksIGNvdW50KTtcbn0gIiwiLy8g0J/RgNC+0YTQtdGB0YHQuNC+0L3QsNC70YzQvdCw0Y8g0LrQu9C40LXQvdGC0YHQutCw0Y8g0YLQtdC70LXQvNC10YLRgNC40Y9cbmV4cG9ydCBjbGFzcyBDbGllbnRUZWxlbWV0cnkge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnZlcmJvc2VNb2RlID0gZmFsc2U7IC8vINCf0L7QtNGA0L7QsdC90YvQuSDRgNC10LbQuNC8INC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOINCy0YvQutC70Y7Rh9C10L1cbiAgICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgICAgIHRoaXMubWF4RW50cmllcyA9IDIwMDsgLy8g0KXRgNCw0L3QuNC8INC/0L7RgdC70LXQtNC90LjQtSAyMDAg0LfQsNC/0LjRgdC10LlcbiAgICAgICAgdGhpcy5jb3VudGVycyA9IHt9O1xuICAgICAgICB0aGlzLmxhc3RQcmludCA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMucHJpbnRJbnRlcnZhbCA9IDUwMDA7IC8vINCS0YvQstC+0LTQuNC8INGB0YLQsNGC0LjRgdGC0LjQutGDINC60LDQttC00YvQtSA1INGB0LXQutGD0L3QtCAo0LHRi9C70L4gMilcbiAgICAgICAgXG4gICAgICAgIC8vINCa0Y3RiCDQtNC70Y8g0L7RgtGB0LvQtdC20LjQstCw0L3QuNGPINC40LfQvNC10L3QtdC90LjQuVxuICAgICAgICB0aGlzLmxhc3RTdGF0ZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBjb25zb2xlLmxvZygn8J+UrCBbQ2xpZW50VGVsZW1ldHJ5XSDQmtC70LjQtdC90YLRgdC60LDRjyDRgtC10LvQtdC80LXRgtGA0LjRjyDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0L3QsCAo0YLQuNGF0LjQuSDRgNC10LbQuNC8KScpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygn8J+SoSDQmtC+0LzQsNC90LTRizogZW5hYmxlVmVyYm9zZVRlbGVtZXRyeSgpIC8gZGlzYWJsZVZlcmJvc2VUZWxlbWV0cnkoKScpO1xuICAgIH1cblxuICAgIC8vINCb0L7Qs9C40YDQvtCy0LDQvdC40LUg0YHQvtGB0YLQvtGP0L3QuNGPINC+0LHRitC10LrRgtCwXG4gICAgbG9nT2JqZWN0U3RhdGUob2JqZWN0SWQsIG9iamVjdFR5cGUsIHBoeXNpY3NUeXBlLCBwb3NpdGlvbiwgdmVsb2NpdHksIG1hc3MsIHJhZGl1cywgc291cmNlID0gJ2NsaWVudCcpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpIHJldHVybjtcblxuICAgICAgICBjb25zdCBzcGVlZCA9IHRoaXMuY2FsY3VsYXRlU3BlZWQodmVsb2NpdHkpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZW50cnkgPSB7XG4gICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgICBvYmplY3RJZCxcbiAgICAgICAgICAgIG9iamVjdFR5cGUsXG4gICAgICAgICAgICBwaHlzaWNzVHlwZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7IC4uLnBvc2l0aW9uIH0sXG4gICAgICAgICAgICB2ZWxvY2l0eTogeyAuLi52ZWxvY2l0eSB9LFxuICAgICAgICAgICAgbWFzcyxcbiAgICAgICAgICAgIHJhZGl1cyxcbiAgICAgICAgICAgIHNwZWVkLFxuICAgICAgICAgICAgc291cmNlXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5kYXRhLnB1c2goZW50cnkpO1xuICAgICAgICBcbiAgICAgICAgLy8g0J7Qs9GA0LDQvdC40YfQuNCy0LDQtdC8INGA0LDQt9C80LXRgCDQsdGD0YTQtdGA0LBcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5sZW5ndGggPiB0aGlzLm1heEVudHJpZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5zaGlmdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INGB0YfQtdGC0YfQuNC60LhcbiAgICAgICAgY29uc3Qga2V5ID0gYCR7b2JqZWN0VHlwZX1fJHtwaHlzaWNzVHlwZX1gO1xuICAgICAgICB0aGlzLmNvdW50ZXJzW2tleV0gPSAodGhpcy5jb3VudGVyc1trZXldIHx8IDApICsgMTtcblxuICAgICAgICAvLyDQn9GA0L7QstC10YDRj9C10Lwg0L3Rg9C20L3QviDQu9C4INC/0LXRh9Cw0YLQsNGC0Ywg0YHQstC+0LTQutGDXG4gICAgICAgIHRoaXMuY2hlY2tQcmludFN1bW1hcnkoKTtcbiAgICB9XG5cbiAgICAvLyDQm9C+0LPQuNGA0L7QstCw0L3QuNC1INC/0YDQuNC80LXQvdC10L3QuNGPINC40LzQv9GD0LvRjNGB0LBcbiAgICBsb2dJbXB1bHNlKG9iamVjdElkLCBvYmplY3RUeXBlLCBwaHlzaWNzVHlwZSwgcG9zaXRpb24sIHZlbG9jaXR5LCBtYXNzLCByYWRpdXMsIGltcHVsc2UsIHNvdXJjZSA9ICdjbGllbnQnKSB7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKSByZXR1cm47XG5cbiAgICAgICAgY29uc3Qgc3BlZWQgPSB0aGlzLmNhbGN1bGF0ZVNwZWVkKHZlbG9jaXR5KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGVudHJ5ID0ge1xuICAgICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgb2JqZWN0SWQsXG4gICAgICAgICAgICBvYmplY3RUeXBlLFxuICAgICAgICAgICAgcGh5c2ljc1R5cGUsXG4gICAgICAgICAgICBwb3NpdGlvbjogeyAuLi5wb3NpdGlvbiB9LFxuICAgICAgICAgICAgdmVsb2NpdHk6IHsgLi4udmVsb2NpdHkgfSxcbiAgICAgICAgICAgIG1hc3MsXG4gICAgICAgICAgICByYWRpdXMsXG4gICAgICAgICAgICBzcGVlZCxcbiAgICAgICAgICAgIGFwcGxpZWRJbXB1bHNlOiB7IC4uLmltcHVsc2UgfSxcbiAgICAgICAgICAgIHNvdXJjZVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZGF0YS5wdXNoKGVudHJ5KTtcbiAgICAgICAgXG4gICAgICAgIC8vINCe0LPRgNCw0L3QuNGH0LjQstCw0LXQvCDRgNCw0LfQvNC10YAg0LHRg9GE0LXRgNCwXG4gICAgICAgIGlmICh0aGlzLmRhdGEubGVuZ3RoID4gdGhpcy5tYXhFbnRyaWVzKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuc2hpZnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDRgdGH0LXRgtGH0LjQutC4XG4gICAgICAgIHRoaXMuY291bnRlcnNbYGltcHVsc2VfJHtvYmplY3RUeXBlfWBdID0gKHRoaXMuY291bnRlcnNbYGltcHVsc2VfJHtvYmplY3RUeXBlfWBdIHx8IDApICsgMTtcblxuICAgICAgICAvLyDQn9GA0L7QstC10YDRj9C10Lwg0L3Rg9C20L3QviDQu9C4INC/0LXRh9Cw0YLQsNGC0Ywg0YHQstC+0LTQutGDXG4gICAgICAgIHRoaXMuY2hlY2tQcmludFN1bW1hcnkoKTtcbiAgICB9XG5cbiAgICAvLyDQm9C+0LPQuNGA0L7QstCw0L3QuNC1INC60L7RgNGA0LXQutGG0LjQuCDQv9C+0LfQuNGG0LjQuFxuICAgIGxvZ0NvcnJlY3Rpb24ob2JqZWN0SWQsIGN1cnJlbnRQb3MsIHRhcmdldFBvcywgY29ycmVjdGlvblR5cGUsIGRpc3RhbmNlKSB7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgZW50cnkgPSB7XG4gICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgICBvYmplY3RJZCxcbiAgICAgICAgICAgIG9iamVjdFR5cGU6ICdwbGF5ZXInLCAvLyDQmtC+0YDRgNC10LrRhtC40Lgg0L7QsdGL0YfQvdC+INC00LvRjyDQuNCz0YDQvtC60L7QslxuICAgICAgICAgICAgZXZlbnRUeXBlOiAnY29ycmVjdGlvbicsXG4gICAgICAgICAgICBjdXJyZW50UG9zOiB7IC4uLmN1cnJlbnRQb3MgfSxcbiAgICAgICAgICAgIHRhcmdldFBvczogeyAuLi50YXJnZXRQb3MgfSxcbiAgICAgICAgICAgIGNvcnJlY3Rpb25UeXBlLCAvLyAnc21vb3RoJywgJ2hhcmQnLCAndGVsZXBvcnQnXG4gICAgICAgICAgICBkaXN0YW5jZSxcbiAgICAgICAgICAgIHNvdXJjZTogJ2NsaWVudCdcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmRhdGEucHVzaChlbnRyeSk7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5kYXRhLmxlbmd0aCA+IHRoaXMubWF4RW50cmllcykge1xuICAgICAgICAgICAgdGhpcy5kYXRhLnNoaWZ0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvdW50ZXJzW2Bjb3JyZWN0aW9uXyR7Y29ycmVjdGlvblR5cGV9YF0gPSAodGhpcy5jb3VudGVyc1tgY29ycmVjdGlvbl8ke2NvcnJlY3Rpb25UeXBlfWBdIHx8IDApICsgMTtcbiAgICAgICAgdGhpcy5jaGVja1ByaW50U3VtbWFyeSgpO1xuICAgIH1cblxuICAgIC8vINCb0L7Qs9C40YDQvtCy0LDQvdC40LUg0LrQvtC80LDQvdC00Ysg0LrQu9C40LXQvdGC0LBcbiAgICBsb2dDbGllbnRDb21tYW5kKGRpcmVjdGlvbiwgZGlzdGFuY2UsIGZvcmNlKSB7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgZW50cnkgPSB7XG4gICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgICBldmVudFR5cGU6ICdjbGllbnRfY29tbWFuZCcsXG4gICAgICAgICAgICBkaXJlY3Rpb246IHsgLi4uZGlyZWN0aW9uIH0sXG4gICAgICAgICAgICBkaXN0YW5jZSxcbiAgICAgICAgICAgIGZvcmNlOiBmb3JjZSA/IHsgLi4uZm9yY2UgfSA6IG51bGwsXG4gICAgICAgICAgICBzb3VyY2U6ICdjbGllbnQnXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5kYXRhLnB1c2goZW50cnkpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5sZW5ndGggPiB0aGlzLm1heEVudHJpZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5zaGlmdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb3VudGVyc1snY2xpZW50X2NvbW1hbmRzJ10gPSAodGhpcy5jb3VudGVyc1snY2xpZW50X2NvbW1hbmRzJ10gfHwgMCkgKyAxO1xuICAgICAgICB0aGlzLmNoZWNrUHJpbnRTdW1tYXJ5KCk7XG4gICAgfVxuXG4gICAgLy8g0JvQvtCz0LjRgNC+0LLQsNC90LjQtSDQvtCx0L3QvtCy0LvQtdC90LjRjyDRgSDRgdC10YDQstC10YDQsFxuICAgIGxvZ1NlcnZlclVwZGF0ZShvYmplY3RJZCwgcG9zaXRpb24sIHZlbG9jaXR5LCBoYXNHYXJiYWdlRGF0YSA9IGZhbHNlKSB7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgZW50cnkgPSB7XG4gICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgICBvYmplY3RJZCxcbiAgICAgICAgICAgIGV2ZW50VHlwZTogJ3NlcnZlcl91cGRhdGUnLFxuICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uID8geyAuLi5wb3NpdGlvbiB9IDogbnVsbCxcbiAgICAgICAgICAgIHZlbG9jaXR5OiB2ZWxvY2l0eSA/IHsgLi4udmVsb2NpdHkgfSA6IG51bGwsXG4gICAgICAgICAgICBoYXNHYXJiYWdlRGF0YSxcbiAgICAgICAgICAgIHNvdXJjZTogJ3NlcnZlcidcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmRhdGEucHVzaChlbnRyeSk7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5kYXRhLmxlbmd0aCA+IHRoaXMubWF4RW50cmllcykge1xuICAgICAgICAgICAgdGhpcy5kYXRhLnNoaWZ0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBrZXkgPSBoYXNHYXJiYWdlRGF0YSA/ICdzZXJ2ZXJfdXBkYXRlc19nYXJiYWdlJyA6ICdzZXJ2ZXJfdXBkYXRlc192YWxpZCc7XG4gICAgICAgIHRoaXMuY291bnRlcnNba2V5XSA9ICh0aGlzLmNvdW50ZXJzW2tleV0gfHwgMCkgKyAxO1xuICAgICAgICB0aGlzLmNoZWNrUHJpbnRTdW1tYXJ5KCk7XG4gICAgfVxuXG4gICAgLy8g0J/RgNC+0LLQtdGA0LrQsCDQvdGD0LbQvdC+INC70Lgg0L/QtdGH0LDRgtCw0YLRjCDRgdCy0L7QtNC60YNcbiAgICBjaGVja1ByaW50U3VtbWFyeSgpIHtcbiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgaWYgKG5vdyAtIHRoaXMubGFzdFByaW50ID49IHRoaXMucHJpbnRJbnRlcnZhbCkge1xuICAgICAgICAgICAgdGhpcy5wcmludFN1bW1hcnkoKTtcbiAgICAgICAgICAgIHRoaXMubGFzdFByaW50ID0gbm93O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8g0J/QtdGH0LDRgtGMINGB0LLQvtC00LrQuCDRgtC10LvQtdC80LXRgtGA0LjQuFxuICAgIHByaW50U3VtbWFyeSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpIHJldHVybjtcblxuICAgICAgICBpZiAodGhpcy52ZXJib3NlTW9kZSkge1xuICAgICAgICAgICAgLy8g0J/QvtC00YDQvtCx0L3Ri9C5INGA0LXQttC40LxcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCfwn5SsIFtDbGllbnRUZWxlbWV0cnldID09PT09INCa0JvQmNCV0J3QotCh0JrQkNCvINCi0JXQm9CV0JzQldCi0KDQmNCvID09PT09Jyk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhg8J+TiiBbQ2xpZW50VGVsZW1ldHJ5XSDQktGB0LXQs9C+INC30LDQv9C40YHQtdC5OiAke3RoaXMuZGF0YS5sZW5ndGh9YCk7XG5cbiAgICAgICAgICAgIC8vINCh0YLQsNGC0LjRgdGC0LjQutCwINC/0L4g0YHRh9C10YLRh9C40LrQsNC8XG4gICAgICAgICAgICAvLyBmb3IgKGNvbnN0IFtrZXksIGNvdW50XSBvZiBPYmplY3QuZW50cmllcyh0aGlzLmNvdW50ZXJzKSkge1xuICAgICAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKGDwn5OIIFtDbGllbnRUZWxlbWV0cnldICR7a2V5fTogJHtjb3VudH1gKTtcbiAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgLy8g0J/QvtGB0LvQtdC00L3QuNC1INC00LDQvdC90YvQtSDQv9C+INC40LPRgNC+0LrQsNC8XG4gICAgICAgICAgICB0aGlzLnByaW50UmVjZW50UGxheWVyRGF0YSgpO1xuXG4gICAgICAgICAgICAvLyDQkNC90LDQu9C40Lcg0L/RgNC+0LHQu9C10LxcbiAgICAgICAgICAgIHRoaXMuYW5hbHl6ZUlzc3VlcygpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygn8J+UrCBbQ2xpZW50VGVsZW1ldHJ5XSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8g0JrRgNCw0YLQutC40Lkg0YDQtdC20LjQvCAtINGC0L7Qu9GM0LrQviDQv9GA0L7QsdC70LXQvNGLXG4gICAgICAgICAgICB0aGlzLnByaW50Q29tcGFjdFN1bW1hcnkoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vINCh0LHRgNC+0YEg0YHRh9C10YLRh9C40LrQvtCyXG4gICAgICAgIHRoaXMuY291bnRlcnMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyDQmtGA0LDRgtC60LDRjyDRgdCy0L7QtNC60LAgKNGC0L7Qu9GM0LrQviDQv9GA0L7QsdC70LXQvNGLKVxuICAgIHByaW50Q29tcGFjdFN1bW1hcnkoKSB7XG4gICAgICAgIGNvbnN0IHJlY2VudFRpbWUgPSBEYXRlLm5vdygpIC0gdGhpcy5wcmludEludGVydmFsO1xuICAgICAgICBjb25zdCByZWNlbnREYXRhID0gdGhpcy5kYXRhLmZpbHRlcihlbnRyeSA9PiBlbnRyeS50aW1lc3RhbXAgPiByZWNlbnRUaW1lKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCh0YfQuNGC0LDQtdC8INGC0L7Qu9GM0LrQviDQvtGB0L3QvtCy0L3Ri9C1INC80LXRgtGA0LjQutC4XG4gICAgICAgIGNvbnN0IGNvcnJlY3Rpb25zID0gcmVjZW50RGF0YS5maWx0ZXIoZW50cnkgPT4gZW50cnkuZXZlbnRUeXBlID09PSAnY29ycmVjdGlvbicpLmxlbmd0aDtcbiAgICAgICAgY29uc3QgZ2FyYmFnZVVwZGF0ZXMgPSByZWNlbnREYXRhLmZpbHRlcihlbnRyeSA9PiBcbiAgICAgICAgICAgIGVudHJ5LmV2ZW50VHlwZSA9PT0gJ3NlcnZlcl91cGRhdGUnICYmIGVudHJ5Lmhhc0dhcmJhZ2VEYXRhXG4gICAgICAgICkubGVuZ3RoO1xuICAgICAgICBcbiAgICAgICAgLy8g0J/QvtC60LDQt9GL0LLQsNC10Lwg0YLQvtC70YzQutC+INC10YHQu9C4INC10YHRgtGMINC/0YDQvtCx0LvQtdC80YtcbiAgICAgICAgaWYgKGNvcnJlY3Rpb25zID4gMTAgfHwgZ2FyYmFnZVVwZGF0ZXMgPiAwKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oYPCflKwgW0NsaWVudFRlbGVtZXRyeV0g0J/RgNC+0LHQu9C10LzRizog0LrQvtGA0YDQtdC60YbQuNC5ICR7Y29ycmVjdGlvbnN9LCDQvNGD0YHQvtGA0L3Ri9GFINC00LDQvdC90YvRhSAke2dhcmJhZ2VVcGRhdGVzfWApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQkNC90LDQu9C40Lcg0YLQvtC70YzQutC+INGB0LXRgNGM0LXQt9C90YvRhSDQv9GA0L7QsdC70LXQvFxuICAgICAgICAgICAgdGhpcy5hbmFseXplSXNzdWVzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyDQn9GA0L7RgdGC0L4g0YLQuNGF0LjQuSDQuNC90LTQuNC60LDRgtC+0YAg0YfRgtC+INGC0LXQu9C10LzQtdGC0YDQuNGPINGA0LDQsdC+0YLQsNC10YJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGDwn5SsIFtDbGllbnRUZWxlbWV0cnldINCe0JogKNC30LDQv9C40YHQtdC5OiAke3RoaXMuZGF0YS5sZW5ndGh9KWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8g0J/QtdGH0LDRgtGMINC00LDQvdC90YvRhSDQviDQv9C+0YHQu9C10LTQvdC40YUg0YHQvtGB0YLQvtGP0L3QuNGP0YUg0LjQs9GA0L7QutC+0LJcbiAgICBwcmludFJlY2VudFBsYXllckRhdGEoKSB7XG4gICAgICAgIC8vINCh0L7QsdC40YDQsNC10Lwg0L/QvtGB0LvQtdC00L3QuNC1INC00LDQvdC90YvQtSDQv9C+INC60LDQttC00L7QvNGDINC40LPRgNC+0LrRg1xuICAgICAgICBjb25zdCBwbGF5ZXJEYXRhID0gbmV3IE1hcCgpO1xuICAgICAgICBcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuZGF0YS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLmRhdGFbaV07XG4gICAgICAgICAgICBpZiAoZW50cnkub2JqZWN0VHlwZSA9PT0gJ3BsYXllcicgJiYgZW50cnkucG9zaXRpb24gJiYgIXBsYXllckRhdGEuaGFzKGVudHJ5Lm9iamVjdElkKSkge1xuICAgICAgICAgICAgICAgIHBsYXllckRhdGEuc2V0KGVudHJ5Lm9iamVjdElkLCBlbnRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IFtwbGF5ZXJJZCwgZGF0YV0gb2YgcGxheWVyRGF0YSkge1xuICAgICAgICAgICAgLy8g0JrQvtC90LLQtdGA0YLQuNGA0YPQtdC8IHRpbWVzdGFtcCDQsiDRh9C40YLQsNC10LzQvtC1INCy0YDQtdC80Y9cbiAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKGRhdGEudGltZXN0YW1wKTtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVTdHIgPSB0aW1lc3RhbXAudG9Mb2NhbGVUaW1lU3RyaW5nKCdydS1SVScsIHsgXG4gICAgICAgICAgICAgICAgaG91cjEyOiBmYWxzZSwgXG4gICAgICAgICAgICAgICAgaG91cjogJzItZGlnaXQnLCBcbiAgICAgICAgICAgICAgICBtaW51dGU6ICcyLWRpZ2l0JywgXG4gICAgICAgICAgICAgICAgc2Vjb25kOiAnMi1kaWdpdCcsXG4gICAgICAgICAgICAgICAgZnJhY3Rpb25hbFNlY29uZERpZ2l0czogMyBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhg8J+OriBbQ2xpZW50VGVsZW1ldHJ5XSDQmNCz0YDQvtC6ICR7cGxheWVySWR9IFske3RpbWVTdHJ9XTpgKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGAgICDwn5ONINCf0L7Qt9C40YbQuNGPOiAoJHtkYXRhLnBvc2l0aW9uLngudG9GaXhlZCgyKX0sICR7ZGF0YS5wb3NpdGlvbi55LnRvRml4ZWQoMil9LCAke2RhdGEucG9zaXRpb24uei50b0ZpeGVkKDIpfSlgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGRhdGEudmVsb2NpdHkpIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgICAg8J+PgyDQodC60L7RgNC+0YHRgtGMOiAoJHtkYXRhLnZlbG9jaXR5LngudG9GaXhlZCgyKX0sICR7ZGF0YS52ZWxvY2l0eS55LnRvRml4ZWQoMil9LCAke2RhdGEudmVsb2NpdHkuei50b0ZpeGVkKDIpfSkgfCR7ZGF0YS5zcGVlZC50b0ZpeGVkKDIpfXxgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGRhdGEubWFzcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYCAgIOKalu+4jyAg0JzQsNGB0YHQsDogJHtkYXRhLm1hc3MudG9GaXhlZCgyKX0g0LrQsywg0KDQsNC00LjRg9GBOiAke2RhdGEucmFkaXVzLnRvRml4ZWQoMil9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGAgICDwn5SnINCk0LjQt9C40LrQsDogJHtkYXRhLnBoeXNpY3NUeXBlfSwg0JjRgdGC0L7Rh9C90LjQujogJHtkYXRhLnNvdXJjZX1gKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGAgICDij7Ag0JLRgNC10LzQtdC90L3QsNGPINC80LXRgtC60LA6ICR7ZGF0YS50aW1lc3RhbXB9YCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChkYXRhLmFwcGxpZWRJbXB1bHNlKSB7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYCAgIPCfkqUg0JjQvNC/0YPQu9GM0YE6ICgke2RhdGEuYXBwbGllZEltcHVsc2UueC50b0ZpeGVkKDIpfSwgJHtkYXRhLmFwcGxpZWRJbXB1bHNlLnkudG9GaXhlZCgyKX0sICR7ZGF0YS5hcHBsaWVkSW1wdWxzZS56LnRvRml4ZWQoMil9KWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8g0JDQvdCw0LvQuNC3INC/0YDQvtCx0LvQtdC8XG4gICAgYW5hbHl6ZUlzc3VlcygpIHtcbiAgICAgICAgY29uc3QgcmVjZW50VGltZSA9IERhdGUubm93KCkgLSB0aGlzLnByaW50SW50ZXJ2YWw7XG4gICAgICAgIGNvbnN0IHJlY2VudERhdGEgPSB0aGlzLmRhdGEuZmlsdGVyKGVudHJ5ID0+IGVudHJ5LnRpbWVzdGFtcCA+IHJlY2VudFRpbWUpO1xuXG4gICAgICAgIC8vINCQ0L3QsNC70LjQtyDQvNGD0YHQvtGA0L3Ri9GFINC00LDQvdC90YvRhSDRgSDRgdC10YDQstC10YDQsFxuICAgICAgICBjb25zdCBnYXJiYWdlVXBkYXRlcyA9IHJlY2VudERhdGEuZmlsdGVyKGVudHJ5ID0+IFxuICAgICAgICAgICAgZW50cnkuZXZlbnRUeXBlID09PSAnc2VydmVyX3VwZGF0ZScgJiYgZW50cnkuaGFzR2FyYmFnZURhdGFcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChnYXJiYWdlVXBkYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oYOKaoO+4jyAgW0NsaWVudFRlbGVtZXRyeV0g0J7QsdC90LDRgNGD0LbQtdC90L4gJHtnYXJiYWdlVXBkYXRlcy5sZW5ndGh9INC80YPRgdC+0YDQvdGL0YUg0L7QsdC90L7QstC70LXQvdC40Lkg0YEg0YHQtdGA0LLQtdGA0LBgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vINCQ0L3QsNC70LjQtyDQutC+0YDRgNC10LrRhtC40LlcbiAgICAgICAgY29uc3QgY29ycmVjdGlvbnMgPSByZWNlbnREYXRhLmZpbHRlcihlbnRyeSA9PiBlbnRyeS5ldmVudFR5cGUgPT09ICdjb3JyZWN0aW9uJyk7XG4gICAgICAgIGlmIChjb3JyZWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBhdmdEaXN0YW5jZSA9IGNvcnJlY3Rpb25zLnJlZHVjZSgoc3VtLCBjKSA9PiBzdW0gKyBjLmRpc3RhbmNlLCAwKSAvIGNvcnJlY3Rpb25zLmxlbmd0aDtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUud2Fybihg8J+UpyBbQ2xpZW50VGVsZW1ldHJ5XSAke2NvcnJlY3Rpb25zLmxlbmd0aH0g0LrQvtGA0YDQtdC60YbQuNC5LCDRgdGA0LXQtNC90Y/RjyDQtNC40YHRgtCw0L3RhtC40Y86ICR7YXZnRGlzdGFuY2UudG9GaXhlZCgyKX1gKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0J/QvtC60LDQt9GL0LLQsNC10Lwg0YHQsNC80YvQtSDQsdC+0LvRjNGI0LjQtSDQutC+0YDRgNC10LrRhtC40LhcbiAgICAgICAgICAgIGNvbnN0IGJpZ0NvcnJlY3Rpb25zID0gY29ycmVjdGlvbnMuZmlsdGVyKGMgPT4gYy5kaXN0YW5jZSA+IDUuMCk7XG4gICAgICAgICAgICBpZiAoYmlnQ29ycmVjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUud2Fybihg8J+aqCBbQ2xpZW50VGVsZW1ldHJ5XSAke2JpZ0NvcnJlY3Rpb25zLmxlbmd0aH0g0LHQvtC70YzRiNC40YUg0LrQvtGA0YDQtdC60YbQuNC5ICg+NS4wINC10LTQuNC90LjRhilgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vINCQ0L3QsNC70LjQtyDRgdC60L7RgNC+0YHRgtC4INC+0LHQvdC+0LLQu9C10L3QuNC5XG4gICAgICAgIGNvbnN0IHNlcnZlclVwZGF0ZXMgPSByZWNlbnREYXRhLmZpbHRlcihlbnRyeSA9PiBlbnRyeS5ldmVudFR5cGUgPT09ICdzZXJ2ZXJfdXBkYXRlJyk7XG4gICAgICAgIGNvbnN0IGNsaWVudENvbW1hbmRzID0gcmVjZW50RGF0YS5maWx0ZXIoZW50cnkgPT4gZW50cnkuZXZlbnRUeXBlID09PSAnY2xpZW50X2NvbW1hbmQnKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChzZXJ2ZXJVcGRhdGVzLmxlbmd0aCA+IDEwMCkge1xuICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKGDwn5OIIFtDbGllbnRUZWxlbWV0cnldINCS0YvRgdC+0LrQsNGPINGH0LDRgdGC0L7RgtCwINGB0LXRgNCy0LXRgNC90YvRhSDQvtCx0L3QvtCy0LvQtdC90LjQuTogJHtzZXJ2ZXJVcGRhdGVzLmxlbmd0aH0vMtGB0LXQumApO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoY2xpZW50Q29tbWFuZHMubGVuZ3RoID4gNTApIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUud2Fybihg8J+TiCBbQ2xpZW50VGVsZW1ldHJ5XSDQktGL0YHQvtC60LDRjyDRh9Cw0YHRgtC+0YLQsCDQutC70LjQtdC90YLRgdC60LjRhSDQutC+0LzQsNC90LQ6ICR7Y2xpZW50Q29tbWFuZHMubGVuZ3RofS8y0YHQtdC6YCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDQkNC90LDQu9C40Lcg0LLRgNC10LzQtdC90L3Ri9GFINGA0LDRgdGF0L7QttC00LXQvdC40LlcbiAgICAgICAgdGhpcy5hbmFseXplVGltZURpc2NyZXBhbmNpZXMocmVjZW50RGF0YSk7XG4gICAgfVxuXG4gICAgLy8g0JDQvdCw0LvQuNC3INCy0YDQtdC80LXQvdC90YvRhSDRgNCw0YHRhdC+0LbQtNC10L3QuNC5INC80LXQttC00YMg0LrQu9C40LXQvdGC0L7QvCDQuCDRgdC10YDQstC10YDQvtC8XG4gICAgYW5hbHl6ZVRpbWVEaXNjcmVwYW5jaWVzKHJlY2VudERhdGEpIHtcbiAgICAgICAgY29uc3QgY2xpZW50U3RhdGVzID0gcmVjZW50RGF0YS5maWx0ZXIoZW50cnkgPT4gXG4gICAgICAgICAgICBlbnRyeS5vYmplY3RUeXBlID09PSAncGxheWVyJyAmJiBlbnRyeS5zb3VyY2UgPT09ICdjbGllbnQnXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHNlcnZlclN0YXRlcyA9IHJlY2VudERhdGEuZmlsdGVyKGVudHJ5ID0+IFxuICAgICAgICAgICAgZW50cnkub2JqZWN0VHlwZSA9PT0gJ3BsYXllcicgJiYgZW50cnkuc291cmNlID09PSAnc2VydmVyJ1xuICAgICAgICApO1xuXG4gICAgICAgIGlmIChjbGllbnRTdGF0ZXMubGVuZ3RoID4gMCAmJiBzZXJ2ZXJTdGF0ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8g0KHRgNCw0LLQvdC40LLQsNC10Lwg0LLRgNC10LzQtdC90LAg0L/QvtGB0LvQtdC00L3QuNGFINGB0L7RgdGC0L7Rj9C90LjQuVxuICAgICAgICAgICAgY29uc3QgbGF0ZXN0Q2xpZW50ID0gY2xpZW50U3RhdGVzW2NsaWVudFN0YXRlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGNvbnN0IGxhdGVzdFNlcnZlciA9IHNlcnZlclN0YXRlc1tzZXJ2ZXJTdGF0ZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHRpbWVEaWZmID0gTWF0aC5hYnMobGF0ZXN0Q2xpZW50LnRpbWVzdGFtcCAtIGxhdGVzdFNlcnZlci50aW1lc3RhbXApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodGltZURpZmYgPiAxMDAwKSB7IC8vINCR0L7Qu9GM0YjQtSAxINGB0LXQutGD0L3QtNGLINGA0LDRgdGF0L7QttC00LXQvdC40LVcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oYOKPsCBbQ2xpZW50VGVsZW1ldHJ5XSDQkdC+0LvRjNGI0L7QtSDQstGA0LXQvNC10L3QvdC+0LUg0YDQsNGB0YXQvtC20LTQtdC90LjQtTogJHt0aW1lRGlmZn3QvNGBYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vINCQ0L3QsNC70LjQtyDRgNCw0YHRhdC+0LbQtNC10L3QuNC5INC/0L7Qt9C40YbQuNC5XG4gICAgICAgICAgICBpZiAobGF0ZXN0Q2xpZW50LnBvc2l0aW9uICYmIGxhdGVzdFNlcnZlci5wb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc0RpZmYgPSBNYXRoLnNxcnQoXG4gICAgICAgICAgICAgICAgICAgIE1hdGgucG93KGxhdGVzdENsaWVudC5wb3NpdGlvbi54IC0gbGF0ZXN0U2VydmVyLnBvc2l0aW9uLngsIDIpICtcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5wb3cobGF0ZXN0Q2xpZW50LnBvc2l0aW9uLnkgLSBsYXRlc3RTZXJ2ZXIucG9zaXRpb24ueSwgMikgK1xuICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdyhsYXRlc3RDbGllbnQucG9zaXRpb24ueiAtIGxhdGVzdFNlcnZlci5wb3NpdGlvbi56LCAyKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHBvc0RpZmYgPiAyLjApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKGDwn5ONIFtDbGllbnRUZWxlbWV0cnldINCg0LDRgdGF0L7QttC00LXQvdC40LUg0L/QvtC30LjRhtC40Lkg0LrQu9C40LXQvdGCLdGB0LXRgNCy0LXRgDogJHtwb3NEaWZmLnRvRml4ZWQoMil9INC10LTQuNC90LjRhmApO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgICAg0JrQu9C40LXQvdGCOiAoJHtsYXRlc3RDbGllbnQucG9zaXRpb24ueC50b0ZpeGVkKDIpfSwgJHtsYXRlc3RDbGllbnQucG9zaXRpb24ueS50b0ZpeGVkKDIpfSwgJHtsYXRlc3RDbGllbnQucG9zaXRpb24uei50b0ZpeGVkKDIpfSlgKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYCAgINCh0LXRgNCy0LXRgDogKCR7bGF0ZXN0U2VydmVyLnBvc2l0aW9uLngudG9GaXhlZCgyKX0sICR7bGF0ZXN0U2VydmVyLnBvc2l0aW9uLnkudG9GaXhlZCgyKX0sICR7bGF0ZXN0U2VydmVyLnBvc2l0aW9uLnoudG9GaXhlZCgyKX0pYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8g0JLRi9GH0LjRgdC70LXQvdC40LUg0LzQvtC00YPQu9GPINGB0LrQvtGA0L7RgdGC0LhcbiAgICBjYWxjdWxhdGVTcGVlZCh2ZWxvY2l0eSkge1xuICAgICAgICBpZiAoIXZlbG9jaXR5KSByZXR1cm4gMDtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCh2ZWxvY2l0eS54ICogdmVsb2NpdHkueCArIHZlbG9jaXR5LnkgKiB2ZWxvY2l0eS55ICsgdmVsb2NpdHkueiAqIHZlbG9jaXR5LnopO1xuICAgIH1cblxuICAgIC8vINCS0LrQu9GO0YfQtdC90LjQtS/QstGL0LrQu9GO0YfQtdC90LjQtSDRgtC10LvQtdC80LXRgtGA0LjQuFxuICAgIHNldEVuYWJsZWQoZW5hYmxlZCkge1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSBlbmFibGVkO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhg8J+UrCBbQ2xpZW50VGVsZW1ldHJ5XSDQotC10LvQtdC80LXRgtGA0LjRjyAke2VuYWJsZWQgPyAn0LLQutC70Y7Rh9C10L3QsCcgOiAn0LLRi9C60LvRjtGH0LXQvdCwJ31gKTtcbiAgICB9XG5cbiAgICAvLyDQktC60LvRjtGH0LXQvdC40LUv0LLRi9C60LvRjtGH0LXQvdC40LUg0L/QvtC00YDQvtCx0L3QvtCz0L4g0YDQtdC20LjQvNCwXG4gICAgc2V0VmVyYm9zZU1vZGUodmVyYm9zZSkge1xuICAgICAgICB0aGlzLnZlcmJvc2VNb2RlID0gdmVyYm9zZTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coYPCflKwgW0NsaWVudFRlbGVtZXRyeV0gJHt2ZXJib3NlID8gJ9Cf0L7QtNGA0L7QsdC90YvQuScgOiAn0KLQuNGF0LjQuSd9INGA0LXQttC40Lwg0LLQutC70Y7Rh9C10L1gKTtcbiAgICB9XG5cbiAgICAvLyDQntGH0LjRgdGC0LrQsCDQtNCw0L3QvdGL0YVcbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgICAgIHRoaXMuY291bnRlcnMgPSB7fTtcbiAgICAgICAgdGhpcy5sYXN0U3RhdGVzLmNsZWFyKCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCfwn5SsIFtDbGllbnRUZWxlbWV0cnldINCU0LDQvdC90YvQtSDRgtC10LvQtdC80LXRgtGA0LjQuCDQvtGH0LjRidC10L3RiycpO1xuICAgIH1cblxuICAgIC8vINCt0LrRgdC/0L7RgNGCINC00LDQvdC90YvRhSDQsiBKU09OXG4gICAgZXhwb3J0SlNPTigpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YSwgbnVsbCwgMik7XG4gICAgfVxuXG4gICAgLy8g0K3QutGB0L/QvtGA0YIg0LTQsNC90L3Ri9GFINCyINGE0L7RgNC80LDRgtC1INGB0L7QstC80LXRgdGC0LjQvNC+0Lwg0YEg0YHQtdGA0LLQtdGA0L3QvtC5INGC0LXQu9C10LzQtdGC0YDQuNC10LlcbiAgICBleHBvcnRGb3JDb21wYXJpc29uKCkge1xuICAgICAgICBjb25zdCBjb21wYXRpYmxlRGF0YSA9IHRoaXMuZGF0YS5tYXAoZW50cnkgPT4gKHtcbiAgICAgICAgICAgIHRpbWVzdGFtcDogZW50cnkudGltZXN0YW1wLFxuICAgICAgICAgICAgb2JqZWN0X2lkOiBlbnRyeS5vYmplY3RJZCxcbiAgICAgICAgICAgIG9iamVjdF90eXBlOiBlbnRyeS5vYmplY3RUeXBlLFxuICAgICAgICAgICAgcGh5c2ljc190eXBlOiBlbnRyeS5waHlzaWNzVHlwZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiBlbnRyeS5wb3NpdGlvbixcbiAgICAgICAgICAgIHZlbG9jaXR5OiBlbnRyeS52ZWxvY2l0eSxcbiAgICAgICAgICAgIG1hc3M6IGVudHJ5Lm1hc3MsXG4gICAgICAgICAgICByYWRpdXM6IGVudHJ5LnJhZGl1cyxcbiAgICAgICAgICAgIHNwZWVkOiBlbnRyeS5zcGVlZCxcbiAgICAgICAgICAgIGFwcGxpZWRfaW1wdWxzZTogZW50cnkuYXBwbGllZEltcHVsc2UsXG4gICAgICAgICAgICBzb3VyY2U6IGVudHJ5LnNvdXJjZSxcbiAgICAgICAgICAgIGV2ZW50X3R5cGU6IGVudHJ5LmV2ZW50VHlwZSxcbiAgICAgICAgICAgIGNvcnJlY3Rpb25fdHlwZTogZW50cnkuY29ycmVjdGlvblR5cGUsXG4gICAgICAgICAgICBkaXN0YW5jZTogZW50cnkuZGlzdGFuY2VcbiAgICAgICAgfSkpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGNvbXBhdGlibGVEYXRhLCBudWxsLCAyKTtcbiAgICB9XG5cbiAgICAvLyDQn9C+0LvRg9GH0LXQvdC40LUg0YHRgtCw0YLQuNGB0YLQuNC60LhcbiAgICBnZXRTdGF0cygpIHtcbiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgY29uc3QgbGFzdDVzZWMgPSB0aGlzLmRhdGEuZmlsdGVyKGVudHJ5ID0+IG5vdyAtIGVudHJ5LnRpbWVzdGFtcCA8IDUwMDApO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvdGFsRW50cmllczogdGhpcy5kYXRhLmxlbmd0aCxcbiAgICAgICAgICAgIGVudHJpZXNMYXN0NXNlYzogbGFzdDVzZWMubGVuZ3RoLFxuICAgICAgICAgICAgY291bnRlcnM6IHsgLi4udGhpcy5jb3VudGVycyB9LFxuICAgICAgICAgICAgZW5hYmxlZDogdGhpcy5lbmFibGVkXG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vLyDQk9C70L7QsdCw0LvRjNC90YvQuSDRjdC60LfQtdC80L/Qu9GP0YAg0YLQtdC70LXQvNC10YLRgNC40LhcbmV4cG9ydCBjb25zdCBjbGllbnRUZWxlbWV0cnkgPSBuZXcgQ2xpZW50VGVsZW1ldHJ5KCk7XG5cbi8vINCY0L3RgtC10LPRgNCw0YbQuNGPINGBINCy0LjQt9GD0LDQu9GM0L3Ri9C8INC40L3RgtC10YDRhNC10LnRgdC+0LxcbmxldCB0ZWxlbWV0cnlVSSA9IG51bGw7XG5cbi8vINCU0L7QsdCw0LLQu9GP0LXQvCDQuNC90YLQtdCz0YDQsNGG0LjRjiDRgSBVSSwg0LXRgdC70Lgg0L7QvSDQtNC+0YHRgtGD0L/QtdC9XG5mdW5jdGlvbiBpbnRlZ3JhdGVXaXRoVUkoKSB7XG4gICAgaWYgKHdpbmRvdy50ZWxlbWV0cnlVSSAmJiAhdGVsZW1ldHJ5VUkpIHtcbiAgICAgICAgdGVsZW1ldHJ5VUkgPSB3aW5kb3cudGVsZW1ldHJ5VUk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCfwn5al77iPIFtDbGllbnRUZWxlbWV0cnldINCY0L3RgtC10LPRgNCw0YbQuNGPINGBINCy0LjQt9GD0LDQu9GM0L3Ri9C8INC40L3RgtC10YDRhNC10LnRgdC+0Lwg0LLQutC70Y7Rh9C10L3QsCcpO1xuICAgIH1cbn1cblxuLy8g0J/QtdGA0LXQvtC/0YDQtdC00LXQu9GP0LXQvCDQvNC10YLQvtC00Ysg0LvQvtCz0LjRgNC+0LLQsNC90LjRjyDQtNC70Y8g0LjQvdGC0LXQs9GA0LDRhtC40Lgg0YEgVUlcbmNvbnN0IG9yaWdpbmFsTG9nQ29ycmVjdGlvbiA9IGNsaWVudFRlbGVtZXRyeS5sb2dDb3JyZWN0aW9uLmJpbmQoY2xpZW50VGVsZW1ldHJ5KTtcbmNsaWVudFRlbGVtZXRyeS5sb2dDb3JyZWN0aW9uID0gZnVuY3Rpb24ob2JqZWN0SWQsIGN1cnJlbnRQb3MsIHRhcmdldFBvcywgY29ycmVjdGlvblR5cGUsIGRpc3RhbmNlKSB7XG4gICAgb3JpZ2luYWxMb2dDb3JyZWN0aW9uKG9iamVjdElkLCBjdXJyZW50UG9zLCB0YXJnZXRQb3MsIGNvcnJlY3Rpb25UeXBlLCBkaXN0YW5jZSk7XG4gICAgXG4gICAgaWYgKHRlbGVtZXRyeVVJKSB7XG4gICAgICAgIHRlbGVtZXRyeVVJLmxvZ0NvcnJlY3Rpb24ob2JqZWN0SWQsIGN1cnJlbnRQb3MsIHRhcmdldFBvcywgY29ycmVjdGlvblR5cGUsIGRpc3RhbmNlKTtcbiAgICB9XG59O1xuXG5jb25zdCBvcmlnaW5hbExvZ1NlcnZlclVwZGF0ZSA9IGNsaWVudFRlbGVtZXRyeS5sb2dTZXJ2ZXJVcGRhdGUuYmluZChjbGllbnRUZWxlbWV0cnkpO1xuY2xpZW50VGVsZW1ldHJ5LmxvZ1NlcnZlclVwZGF0ZSA9IGZ1bmN0aW9uKG9iamVjdElkLCBwb3NpdGlvbiwgdmVsb2NpdHksIGhhc0dhcmJhZ2VEYXRhID0gZmFsc2UpIHtcbiAgICBvcmlnaW5hbExvZ1NlcnZlclVwZGF0ZShvYmplY3RJZCwgcG9zaXRpb24sIHZlbG9jaXR5LCBoYXNHYXJiYWdlRGF0YSk7XG4gICAgXG4gICAgaWYgKHRlbGVtZXRyeVVJKSB7XG4gICAgICAgIHRlbGVtZXRyeVVJLmxvZ1NlcnZlclVwZGF0ZShvYmplY3RJZCwgcG9zaXRpb24sIHZlbG9jaXR5LCBoYXNHYXJiYWdlRGF0YSk7XG4gICAgfVxufTtcblxuY29uc3Qgb3JpZ2luYWxMb2dDbGllbnRDb21tYW5kID0gY2xpZW50VGVsZW1ldHJ5LmxvZ0NsaWVudENvbW1hbmQuYmluZChjbGllbnRUZWxlbWV0cnkpO1xuY2xpZW50VGVsZW1ldHJ5LmxvZ0NsaWVudENvbW1hbmQgPSBmdW5jdGlvbihkaXJlY3Rpb24sIGRpc3RhbmNlLCBmb3JjZSkge1xuICAgIG9yaWdpbmFsTG9nQ2xpZW50Q29tbWFuZChkaXJlY3Rpb24sIGRpc3RhbmNlLCBmb3JjZSk7XG4gICAgXG4gICAgaWYgKHRlbGVtZXRyeVVJKSB7XG4gICAgICAgIHRlbGVtZXRyeVVJLmxvZ0NsaWVudENvbW1hbmQoZGlyZWN0aW9uLCBkaXN0YW5jZSwgZm9yY2UpO1xuICAgIH1cbn07XG5cbmNvbnN0IG9yaWdpbmFsTG9nT2JqZWN0U3RhdGUgPSBjbGllbnRUZWxlbWV0cnkubG9nT2JqZWN0U3RhdGUuYmluZChjbGllbnRUZWxlbWV0cnkpO1xuY2xpZW50VGVsZW1ldHJ5LmxvZ09iamVjdFN0YXRlID0gZnVuY3Rpb24ob2JqZWN0SWQsIG9iamVjdFR5cGUsIHBoeXNpY3NUeXBlLCBwb3NpdGlvbiwgdmVsb2NpdHksIG1hc3MsIHJhZGl1cywgc291cmNlID0gJ2NsaWVudCcpIHtcbiAgICBvcmlnaW5hbExvZ09iamVjdFN0YXRlKG9iamVjdElkLCBvYmplY3RUeXBlLCBwaHlzaWNzVHlwZSwgcG9zaXRpb24sIHZlbG9jaXR5LCBtYXNzLCByYWRpdXMsIHNvdXJjZSk7XG4gICAgXG4gICAgaWYgKHRlbGVtZXRyeVVJKSB7XG4gICAgICAgIGNvbnN0IHNwZWVkID0gdGhpcy5jYWxjdWxhdGVTcGVlZCh2ZWxvY2l0eSk7XG4gICAgICAgIHRlbGVtZXRyeVVJLmFkZERldGFpbGVkRW50cnkoJ29iamVjdC1zdGF0ZScsIHtcbiAgICAgICAgICAgIG9iamVjdElkLFxuICAgICAgICAgICAgb2JqZWN0VHlwZSxcbiAgICAgICAgICAgIHBoeXNpY3NUeXBlLFxuICAgICAgICAgICAgcG9zaXRpb24sXG4gICAgICAgICAgICB2ZWxvY2l0eSxcbiAgICAgICAgICAgIG1hc3MsXG4gICAgICAgICAgICByYWRpdXMsXG4gICAgICAgICAgICBzcGVlZCxcbiAgICAgICAgICAgIHNvdXJjZVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5jb25zdCBvcmlnaW5hbExvZ0ltcHVsc2UgPSBjbGllbnRUZWxlbWV0cnkubG9nSW1wdWxzZS5iaW5kKGNsaWVudFRlbGVtZXRyeSk7XG5jbGllbnRUZWxlbWV0cnkubG9nSW1wdWxzZSA9IGZ1bmN0aW9uKG9iamVjdElkLCBvYmplY3RUeXBlLCBwaHlzaWNzVHlwZSwgcG9zaXRpb24sIHZlbG9jaXR5LCBtYXNzLCByYWRpdXMsIGltcHVsc2UsIHNvdXJjZSA9ICdjbGllbnQnKSB7XG4gICAgb3JpZ2luYWxMb2dJbXB1bHNlKG9iamVjdElkLCBvYmplY3RUeXBlLCBwaHlzaWNzVHlwZSwgcG9zaXRpb24sIHZlbG9jaXR5LCBtYXNzLCByYWRpdXMsIGltcHVsc2UsIHNvdXJjZSk7XG4gICAgXG4gICAgaWYgKHRlbGVtZXRyeVVJKSB7XG4gICAgICAgIHRlbGVtZXRyeVVJLmFkZERldGFpbGVkRW50cnkoJ29iamVjdC1zdGF0ZScsIHtcbiAgICAgICAgICAgIG9iamVjdElkLFxuICAgICAgICAgICAgb2JqZWN0VHlwZSxcbiAgICAgICAgICAgIHBoeXNpY3NUeXBlLFxuICAgICAgICAgICAgcG9zaXRpb24sXG4gICAgICAgICAgICB2ZWxvY2l0eSxcbiAgICAgICAgICAgIG1hc3MsXG4gICAgICAgICAgICByYWRpdXMsXG4gICAgICAgICAgICBzcGVlZDogdGhpcy5jYWxjdWxhdGVTcGVlZCh2ZWxvY2l0eSksXG4gICAgICAgICAgICBhcHBsaWVkSW1wdWxzZTogaW1wdWxzZSxcbiAgICAgICAgICAgIHNvdXJjZVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5jb25zdCBvcmlnaW5hbFByaW50U3VtbWFyeSA9IGNsaWVudFRlbGVtZXRyeS5wcmludFN1bW1hcnkuYmluZChjbGllbnRUZWxlbWV0cnkpO1xuY2xpZW50VGVsZW1ldHJ5LnByaW50U3VtbWFyeSA9IGZ1bmN0aW9uKCkge1xuICAgIG9yaWdpbmFsUHJpbnRTdW1tYXJ5KCk7XG4gICAgXG4gICAgaWYgKHRlbGVtZXRyeVVJKSB7XG4gICAgICAgIGNvbnN0IHN0YXRzID0gY2xpZW50VGVsZW1ldHJ5LmdldFN0YXRzKCk7XG4gICAgICAgIHRlbGVtZXRyeVVJLmxvZ1N1bW1hcnkoc3RhdHMpO1xuICAgIH1cbn07XG5cbi8vINCf0YvRgtCw0LXQvNGB0Y8g0LjQvdGC0LXQs9GA0LjRgNC+0LLQsNGC0YzRgdGPINGBIFVJINC/0YDQuCDQt9Cw0LPRgNGD0LfQutC1INC4INGH0LXRgNC10Lcg0YLQsNC50LzQtdGAXG5zZXRUaW1lb3V0KGludGVncmF0ZVdpdGhVSSwgMTAwKTtcbnNldEludGVydmFsKCgpID0+IHtcbiAgICBpZiAoIXRlbGVtZXRyeVVJKSBpbnRlZ3JhdGVXaXRoVUkoKTtcbn0sIDEwMDApO1xuXG4vLyDQmtC+0L3RgdC+0LvRjNC90YvQtSDQutC+0LzQsNC90LTRiyDQtNC70Y8g0YPQtNC+0LHRgdGC0LLQsFxud2luZG93LmVuYWJsZUNsaWVudFRlbGVtZXRyeSA9ICgpID0+IGNsaWVudFRlbGVtZXRyeS5zZXRFbmFibGVkKHRydWUpO1xud2luZG93LmRpc2FibGVDbGllbnRUZWxlbWV0cnkgPSAoKSA9PiBjbGllbnRUZWxlbWV0cnkuc2V0RW5hYmxlZChmYWxzZSk7XG53aW5kb3cuZW5hYmxlVmVyYm9zZVRlbGVtZXRyeSA9ICgpID0+IGNsaWVudFRlbGVtZXRyeS5zZXRWZXJib3NlTW9kZSh0cnVlKTtcbndpbmRvdy5kaXNhYmxlVmVyYm9zZVRlbGVtZXRyeSA9ICgpID0+IGNsaWVudFRlbGVtZXRyeS5zZXRWZXJib3NlTW9kZShmYWxzZSk7XG53aW5kb3cuY2xlYXJDbGllbnRUZWxlbWV0cnkgPSAoKSA9PiBjbGllbnRUZWxlbWV0cnkuY2xlYXIoKTtcbndpbmRvdy5leHBvcnRDbGllbnRUZWxlbWV0cnkgPSAoKSA9PiB7XG4gICAgLy8gY29uc29sZS5sb2coY2xpZW50VGVsZW1ldHJ5LmV4cG9ydEpTT04oKSk7XG4gICAgcmV0dXJuIGNsaWVudFRlbGVtZXRyeS5leHBvcnRKU09OKCk7XG59O1xud2luZG93LmNsaWVudFRlbGVtZXRyeVN0YXRzID0gKCkgPT4ge1xuICAgIC8vIGNvbnNvbGUubG9nKGNsaWVudFRlbGVtZXRyeS5nZXRTdGF0cygpKTtcbiAgICByZXR1cm4gY2xpZW50VGVsZW1ldHJ5LmdldFN0YXRzKCk7XG59O1xud2luZG93LmV4cG9ydENsaWVudFRlbGVtZXRyeUZvckNvbXBhcmlzb24gPSAoKSA9PiB7XG4gICAgLy8gY29uc29sZS5sb2coY2xpZW50VGVsZW1ldHJ5LmV4cG9ydEZvckNvbXBhcmlzb24oKSk7XG4gICAgcmV0dXJuIGNsaWVudFRlbGVtZXRyeS5leHBvcnRGb3JDb21wYXJpc29uKCk7XG59OyAiLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBnZXRDb25uZWN0aW9uU3RhdGUsIHNlbmRDb21tYW5kIH0gZnJvbSAnLi9uZXR3b3JrJztcbmltcG9ydCB7IGdldFBoeXNpY3NDb25maWcgfSBmcm9tICcuL3BoeXNpY3MnO1xuaW1wb3J0IHsgYXBwbHlJbXB1bHNlVG9TcGhlcmUgfSBmcm9tICcuL3BoeXNpY3MnO1xuaW1wb3J0IGdhbWVTdGF0ZU1hbmFnZXIgZnJvbSAnLi9nYW1lc3RhdGVtYW5hZ2VyLmpzJztcbmltcG9ydCB7IHNob3dEaXJlY3Rpb25PblNwaGVyZSwgc2hvd05vcm1hbE9uU3BoZXJlIH0gZnJvbSAnLi9leWVzLmpzJzsgLy8g0JjQvNC/0L7RgNGC0LjRgNGD0LXQvCDRgdC40YHRgtC10LzRgyDQs9C70LDQt1xuaW1wb3J0IHsgZGlhZ25vc3RpY3MgfSBmcm9tICcuL2RpYWdub3N0aWNzJztcbmltcG9ydCB7IGNsaWVudFRlbGVtZXRyeSB9IGZyb20gJy4vdGVsZW1ldHJ5JztcblxuLy8g0JrQvtC90YHRgtCw0L3RgtGLINC00LvRjyDQvdCw0YHRgtGA0L7QudC60Lgg0L/QvtCy0LXQtNC10L3QuNGPXG5jb25zdCBERUJVR19NT0RFID0gdHJ1ZTsgLy8g0JLQutC70Y7Rh9Cw0LXRgi/QstGL0LrQu9GO0YfQsNC10YIg0L7RgtC70LDQtNC+0YfQvdGL0LUg0Y3Qu9C10LzQtdC90YLRiyAoYXJyb3dIZWxwZXIpXG5jb25zdCBNSU5fQVJST1dfTEVOR1RIID0gMTA7XG5jb25zdCBNQVhfQVJST1dfTEVOR1RIID0gMTUwO1xuY29uc3QgU0VORF9JTlRFUlZBTCA9IDUwOyAvLyDQodC40L3RhdGA0L7QvdC40LfQuNGA0YPQtdC8INGBINGB0LXRgNCy0LXRgNC90YvQvCDQuNC90YLQtdGA0LLQsNC70L7QvFxuY29uc3QgQVJST1dfSEVJR0hUX09GRlNFVCA9IDI7IC8vINCh0LzQtdGJ0LXQvdC40LUg0YHRgtGA0LXQu9C60Lgg0L/QviDQstGL0YHQvtGC0LUg0L3QsNC0INC40LPRgNC+0LrQvtC8XG5jb25zdCBSQVlfVVBEQVRFX0lOVEVSVkFMID0gNTA7IC8vINCh0LjQvdGF0YDQvtC90LjQt9C40YDRg9C10Lwg0YEg0YHQtdGA0LLQtdGA0L3Ri9C8INC40L3RgtC10YDQstCw0LvQvtC8XG5jb25zdCBLRVlfRk9SQ0UgPSAxLjA7IC8vINCc0Y/Qs9C60LDRjyDRgdC40LvQsCDQuNC80L/Rg9C70YzRgdCwINC00LvRjyDQutC70LDQstC40LDRgtGD0YDQvdC+0LPQviDRg9C/0YDQsNCy0LvQtdC90LjRj1xuY29uc3QgTUlOX0RFQURaT05FID0gMTAuMDsgLy8g0JzQuNC90LjQvNCw0LvRjNC90LDRjyDQvNC10YDRgtCy0LDRjyDQt9C+0L3QsFxuY29uc3QgTUFYX0RFQURaT05FID0gMzAuMDsgLy8g0JzQsNC60YHQuNC80LDQu9GM0L3QsNGPINC80LXRgNGC0LLQsNGPINC30L7QvdCwXG5cbmxldCBhcnJvd0hlbHBlcjtcbmxldCBsYXN0U2VudFBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbmxldCBsYXN0U2VuZFRpbWUgPSAwO1xubGV0IHJheWNhc3RlciA9IG5ldyBUSFJFRS5SYXljYXN0ZXIoKTtcbmxldCBtb3VzZSA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5sZXQgY2FtZXJhTGFzdFBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbmxldCBsYXN0UmF5VXBkYXRlVGltZSA9IDA7XG5sZXQgbGFzdEludGVyc2VjdFBvaW50ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbmxldCBpc01vdXNlQWN0aXZlID0gdHJ1ZTsgLy8g0KTQu9Cw0LMg0LDQutGC0LjQstC90L7RgdGC0Lgg0LzRi9GI0Lgg0L3QsNC0INC40LPRgNC+0LLQvtC5INC+0LHQu9Cw0YHRgtGM0Y4gKNCy0YDQtdC80LXQvdC90L4gdHJ1ZSDQtNC70Y8g0L7RgtC70LDQtNC60LgpXG5cbi8vINCk0LvQsNCz0Lgg0LTQu9GPINC60LvQsNCy0LjQsNGC0YPRgNC90L7Qs9C+INGD0L/RgNCw0LLQu9C10L3QuNGPXG5sZXQga2V5cyA9IHtcbiAgICB3OiBmYWxzZSxcbiAgICBhOiBmYWxzZSxcbiAgICBzOiBmYWxzZSxcbiAgICBkOiBmYWxzZVxufTtcblxuLy8g0J/QtdGA0LXQvNC10L3QvdGL0LUg0LTQu9GPINGF0YDQsNC90LXQvdC40Y8g0L3QsNC/0YDQsNCy0LvQtdC90LjRj1xubGV0IGN1cnJlbnREaXJlY3Rpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xubGV0IGRpcmVjdGlvbk5lZWRzVXBkYXRlID0gZmFsc2U7XG5sZXQgdGVycmFpbk1lc2hSZWYgPSBudWxsO1xubGV0IHBsYXllck1lc2hSZWYgPSBudWxsO1xubGV0IGNhbWVyYVJlZiA9IG51bGw7XG5cbi8vINCU0L7QsdCw0LLQu9GP0LXQvCDQv9C10YDQtdC80LXQvdC90YvQtSDQtNC70Y8g0LTQtdCx0LDRg9C90YHQsCDQuCDQstGA0LXQvNC10L3QuFxubGV0IGxhc3RMb2NhbEltcHVsc2VUaW1lID0gMDtcbmxldCBsYXN0RnJhbWVUaW1lID0gRGF0ZS5ub3coKTtcbmNvbnN0IExPQ0FMX0lNUFVMU0VfSU5URVJWQUwgPSA1MDsgLy8g0KHQuNC90YXRgNC+0L3QuNC30LjRgNGD0LXQvCDRgSDRgdC10YDQstC10YDQvdGL0Lwg0LjQvdGC0LXRgNCy0LDQu9C+0LxcbmNvbnN0IE1JTl9ESVNUQU5DRV9UT19UQVJHRVQgPSA4OyAvLyDQnNC40L3QuNC80LDQu9GM0L3QvtC1INGA0LDRgdGB0YLQvtGP0L3QuNC1INC00L4g0YbQtdC70Lgg0LTQu9GPINC+0YHRgtCw0L3QvtCy0LrQuFxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXJyb3dEaXJlY3Rpb24oKSB7XG4gICAgcmV0dXJuIGxhc3RTZW50UG9zaXRpb24uY2xvbmUoKTtcbn1cblxuZnVuY3Rpb24gaW5pdEdhbWVwYWQoY2FtZXJhLCB0ZXJyYWluTWVzaCwgcGxheWVyTWVzaCwgc2NlbmUpIHtcbiAgICAvLyDQo9Cx0LjRgNCw0LXQvCDRgdC/0LDQvCDQv9GA0Lgg0LjQvdC40YbQuNCw0LvQuNC30LDRhtC40LhcbiAgICBcbiAgICAvLyDQodC+0YXRgNCw0L3Rj9C10Lwg0YHRgdGL0LvQutC4INC90LAg0L7QsdGK0LXQutGC0Ysg0LTQu9GPINC40YHQv9C+0LvRjNC30L7QstCw0L3QuNGPINCyINC00YDRg9Cz0LjRhSDRhNGD0L3QutGG0LjRj9GFXG4gICAgdGVycmFpbk1lc2hSZWYgPSB0ZXJyYWluTWVzaDtcbiAgICBwbGF5ZXJNZXNoUmVmID0gcGxheWVyTWVzaDtcbiAgICBjYW1lcmFSZWYgPSBjYW1lcmE7XG4gICAgY2FtZXJhTGFzdFBvc2l0aW9uLmNvcHkoY2FtZXJhLnBvc2l0aW9uKTtcbiAgICBcbiAgICAvLyDQodC+0LfQtNCw0LXQvCDQuCDQtNC+0LHQsNCy0LvRj9C10LwgYXJyb3dIZWxwZXIg0LIg0YHRhtC10L3Rg1xuICAgIGFycm93SGVscGVyID0gbmV3IFRIUkVFLkFycm93SGVscGVyKFxuICAgICAgICBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAxKSwgLy8g0J3QsNGH0LDQu9GM0L3QvtC1INC90LDQv9GA0LDQstC70LXQvdC40LVcbiAgICAgICAgcGxheWVyTWVzaC5wb3NpdGlvbiwgICAgICAgIC8vINCd0LDRh9Cw0LvRjNC90LDRjyDQv9C+0LfQuNGG0LjRj1xuICAgICAgICBNSU5fQVJST1dfTEVOR1RILCAgICAgICAgICAvLyDQlNC70LjQvdCwINGB0YLRgNC10LvQutC4ICjQvdCw0YfQsNC70YzQvdCw0Y8pXG4gICAgICAgIDB4ZmZmZjAwICAgICAgICAgICAgICAgICAgICAvLyDQptCy0LXRgiDRgdGC0YDQtdC70LrQuFxuICAgICk7XG4gICAgXG4gICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8IGFycm93SGVscGVyINCyINGB0YbQtdC90YMg0YLQvtC70YzQutC+INC10YHQu9C4IERFQlVHX01PREUg0LLQutC70Y7Rh9C10L1cbiAgICBpZiAoREVCVUdfTU9ERSkge1xuICAgICAgICBzY2VuZS5hZGQoYXJyb3dIZWxwZXIpO1xuICAgIH1cblxuICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDQvtCx0YDQsNCx0L7RgtGH0LjQutC4INGB0L7QsdGL0YLQuNC5INC80YvRiNC4INC4INC60LvQsNCy0LjQsNGC0YPRgNGLXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uS2V5RG93bik7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgb25LZXlVcCk7XG4gICAgXG4gICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC+0LHRgNCw0LHQvtGC0YfQuNC60Lgg0LTQu9GPINC+0YLRgdC70LXQttC40LLQsNC90LjRjyDQutC+0LPQtNCwINC80YvRiNGMINC/0L7QutC40LTQsNC10YIg0LrQsNC90LLQsNGBXG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignY2FudmFzJyk7XG4gICAgaWYgKGNhbnZhcykge1xuICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIG9uTW91c2VFbnRlcik7XG4gICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgb25Nb3VzZUxlYXZlKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCwg0L3QsNGF0L7QtNC40YLRgdGPINC70Lgg0LzRi9GI0Ywg0YPQttC1INCyINC60LDQvdCy0LDRgdC1INC/0YDQuCDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQuFxuICAgICAgICBjb25zdCByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCBtb3VzZVggPSB3aW5kb3cubW91c2VYIHx8IHdpbmRvdy5pbm5lcldpZHRoIC8gMjtcbiAgICAgICAgY29uc3QgbW91c2VZID0gd2luZG93Lm1vdXNlWSB8fCB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyO1xuICAgICAgICBcbiAgICAgICAgaWYgKG1vdXNlWCA+PSByZWN0LmxlZnQgJiYgbW91c2VYIDw9IHJlY3QucmlnaHQgJiYgXG4gICAgICAgICAgICBtb3VzZVkgPj0gcmVjdC50b3AgJiYgbW91c2VZIDw9IHJlY3QuYm90dG9tKSB7XG4gICAgICAgICAgICBpc01vdXNlQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyDQmNC90LjRhtC40LDQu9C40LfQuNGA0YPQtdC8INC90LDRh9Cw0LvRjNC90L7QtSDQvdCw0L/RgNCw0LLQu9C10L3QuNC1ICjRhtC10L3RgtGAINGN0LrRgNCw0L3QsClcbiAgICBtb3VzZS54ID0gMDtcbiAgICBtb3VzZS55ID0gMDtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgLy8g0JTQsNC10Lwg0LLRgNC10LzRjyDQtNC70Y8g0LjQvdC40YbQuNCw0LvQuNC30LDRhtC40Lgg0LLRgdC10YUg0L7QsdGK0LXQutGC0L7QslxuICAgICAgICBpZiAoY2FtZXJhUmVmICYmIHRlcnJhaW5NZXNoUmVmICYmIHBsYXllck1lc2hSZWYpIHtcbiAgICAgICAgICAgIGNhc3RSYXlBbmRVcGRhdGVEaXJlY3Rpb24oKTtcbiAgICAgICAgfVxuICAgIH0sIDEwMCk7XG4gICAgXG4gICAgLy8g0JfQsNC/0YPRgdC60LDQtdC8INCw0L3QuNC80LDRhtC40Y4g0LTQu9GPINC+0LHQvdC+0LLQu9C10L3QuNGPINGB0YLRgNC10LvQutC4INC4INC+0LHRgNCw0LHQvtGC0LrQuCDQutC70LDQstC40LDRgtGD0YDQvdC+0LPQviDQstCy0L7QtNCwXG4gICAgYW5pbWF0ZSgpO1xuXG4gICAgZnVuY3Rpb24gYW5pbWF0ZSgpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xuICAgICAgICBcbiAgICAgICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INGB0YLRgNC10LvQutGDINC10YHQu9C4INC90YPQttC90L4g0Lgg0LXRgdC70Lgg0L7QvdCwINCy0LjQtNC40LzQsFxuICAgICAgICBpZiAoZGlyZWN0aW9uTmVlZHNVcGRhdGUgJiYgREVCVUdfTU9ERSkge1xuICAgICAgICAgICAgdXBkYXRlQXJyb3dIZWxwZXIocGxheWVyTWVzaCk7XG4gICAgICAgICAgICBkaXJlY3Rpb25OZWVkc1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyDQn9GA0L7QstC10YDRj9C10LwsINC00LLQuNCz0LDQu9Cw0YHRjCDQu9C4INC60LDQvNC10YDQsCDQuCDQvdGD0LbQvdC+INC70Lgg0L7QsdC90L7QstC40YLRjCDQu9GD0YdcbiAgICAgICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgaWYgKGlzTW91c2VBY3RpdmUgJiYgY2FtZXJhUmVmICYmIG5vdyAtIGxhc3RSYXlVcGRhdGVUaW1lID4gUkFZX1VQREFURV9JTlRFUlZBTCkge1xuICAgICAgICAgICAgLy8g0JXRgdC70Lgg0LrQsNC80LXRgNCwINC00LLQuNC20LXRgtGB0Y8g0Lgg0LzRi9GI0Ywg0LDQutGC0LjQstC90LAg0L3QsNC0INC40LPRgNC+0LLQvtC5INC+0LHQu9Cw0YHRgtGM0Y5cbiAgICAgICAgICAgIGlmICghY2FtZXJhUmVmLnBvc2l0aW9uLmVxdWFscyhjYW1lcmFMYXN0UG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INC70YPRhyDRgSDQv9C+0YHQu9C10LTQvdC40YUg0LrQvtC+0YDQtNC40L3QsNGCINC80YvRiNC4XG4gICAgICAgICAgICAgICAgdXBkYXRlUmF5RnJvbUxhc3RNb3VzZSgpO1xuICAgICAgICAgICAgICAgIGNhbWVyYUxhc3RQb3NpdGlvbi5jb3B5KGNhbWVyYVJlZi5wb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgbGFzdFJheVVwZGF0ZVRpbWUgPSBub3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vINCe0LHRgNCw0LHQsNGC0YvQstCw0LXQvCDQu9C+0LrQsNC70YzQvdGD0Y4g0YTQuNC30LjQutGDINC00LvRjyDQvNGL0YjQuNC90L7Qs9C+INGD0L/RgNCw0LLQu9C10L3QuNGPICjQutC70LDQstC40LDRgtGD0YDQvdC+0LUg0YPQv9GA0LDQstC70LXQvdC40LUg0L/QvtC60LAg0L3QtSDQuNGB0L/QvtC70YzQt9GD0LXRgtGB0Y8pXG4gICAgICAgIHByb2Nlc3NMb2NhbFBoeXNpY3MoKTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0tleWJvYXJkSW5wdXQoKSB7XG4gICAgICAgIGlmICghcGxheWVyTWVzaFJlZikgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgLy8g0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdC8INC70L7QutCw0LvRjNC90YPRjiDRhNC40LfQuNC60YMg0LTQsNC20LUg0LHQtdC3INGB0LXRgNCy0LXRgNCwXG4gICAgICAgIHByb2Nlc3NMb2NhbFBoeXNpY3MoKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCDRgdC+0YHRgtC+0Y/QvdC40LUg0YHQtdGC0LXQstC+0LPQviDRgdC+0LXQtNC40L3QtdC90LjRjyDRgtC+0LvRjNC60L4g0LTQu9GPINC+0YLQv9GA0LDQstC60Lgg0LrQvtC80LDQvdC0XG4gICAgICAgIGlmIChnZXRDb25uZWN0aW9uU3RhdGUoKSAhPT0gJ2Nvbm5lY3RlZCcpIHtcbiAgICAgICAgICAgIHJldHVybjsgLy8g0KPQsdC40YDQsNC10Lwg0L/RgNC10LTRg9C/0YDQtdC20LTQtdC90LjQtSAtINGN0YLQviDQvdC+0YDQvNCw0LvRjNC90L4g0LTQu9GPINC70L7QutCw0LvRjNC90L7QuSDRhNC40LfQuNC60LhcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8LCDQtdGB0LvQuCDRhdC+0YLRjyDQsdGLINC+0LTQvdCwINC60LvQsNCy0LjRiNCwINC90LDQttCw0YLQsFxuICAgICAgICBpZiAoa2V5cy53IHx8IGtleXMuYSB8fCBrZXlzLnMgfHwga2V5cy5kKSB7XG4gICAgICAgICAgICAvLyDQodC+0LfQtNCw0LXQvCDQstC10LrRgtC+0YAg0L3QsNC/0YDQsNCy0LvQtdC90LjRjyDQvdCwINC+0YHQvdC+0LLQtSDQvdCw0LbQsNGC0YvRhSDQutC70LDQstC40YhcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIDApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoa2V5cy53KSBkaXJlY3Rpb24ueiAtPSAxO1xuICAgICAgICAgICAgaWYgKGtleXMucykgZGlyZWN0aW9uLnogKz0gMTtcbiAgICAgICAgICAgIGlmIChrZXlzLmEpIGRpcmVjdGlvbi54IC09IDE7XG4gICAgICAgICAgICBpZiAoa2V5cy5kKSBkaXJlY3Rpb24ueCArPSAxO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQndC+0YDQvNCw0LvQuNC30YPQtdC8INC90LDQv9GA0LDQstC70LXQvdC40LUsINC10YHQu9C4INC+0L3QviDQvdC1INC90YPQu9C10LLQvtC1XG4gICAgICAgICAgICBpZiAoZGlyZWN0aW9uLmxlbmd0aCgpID4gMCkge1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbi5ub3JtYWxpemUoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyDQrdC60YHQv9C+0YDRgtC40YDRg9C10Lwg0L3QsNC/0YDQsNCy0LvQtdC90LjQtSDQsiDQs9C70L7QsdCw0LvRjNC90YPRjiDQv9C10YDQtdC80LXQvdC90YPRjiDQtNC70Y8g0LPQu9Cw0LdcbiAgICAgICAgICAgICAgICB3aW5kb3cuZ2FtZXBhZERpcmVjdGlvbiA9IGRpcmVjdGlvbi5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vINCe0YLQv9GA0LDQstC70Y/QtdC8INC90LDQv9GA0LDQstC70LXQvdC40LUg0L3QsCDRgdC10YDQstC10YBcbiAgICAgICAgICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIGxhc3RTZW5kVGltZSA+IFNFTkRfSU5URVJWQUwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8g0J/QvtC70YPRh9Cw0LXQvCDRgtC10LrRg9GJ0YPRjiDQutC+0L3RhNC40LPRg9GA0LDRhtC40Y4g0YTQuNC30LjQutC4XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBoeXNpY3NDb25maWcgPSBnZXRQaHlzaWNzQ29uZmlnKCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyDQmNGB0L/QvtC70YzQt9GD0LXQvCDQvNC90L7QttC40YLQtdC70Ywg0LjQvNC/0YPQu9GM0YHQsCDQuNC3INC60L7QvdGE0LjQs9GD0YDQsNGG0LjQuCwg0LXRgdC70Lgg0L7QvdCwINC00L7RgdGC0YPQv9C90LBcbiAgICAgICAgICAgICAgICAgICAgbGV0IGtleUZvcmNlID0gS0VZX0ZPUkNFO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGh5c2ljc0NvbmZpZyAmJiBwaHlzaWNzQ29uZmlnLmltcHVsc2VfbXVsdGlwbGllcikge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5Rm9yY2UgPSAocGh5c2ljc0NvbmZpZy5iYXNlX2ltcHVsc2UpOyAvLyDQo9Cy0LXQu9C40YfQuNCy0LDQtdC8INCyIDgg0YDQsNC3INCx0LDQt9C+0LLRi9C5INC40LzQv9GD0LvRjNGBXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlGb3JjZSA9IEtFWV9GT1JDRTsgLy8g0JjQu9C4INGD0LLQtdC70LjRh9C40LLQsNC10Lwg0LIgNCDRgNCw0LfQsCDQt9C90LDRh9C10L3QuNC1INC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vINCe0YLQv9GA0LDQstC70Y/QtdC8INC40LzQv9GD0LvRjNGBINC90LAg0YHQtdGA0LLQtdGAINC90LDQv9GA0Y/QvNGD0Y5cbiAgICAgICAgICAgICAgICAgICAgc2VuZERpcmVjdGlvblRvU2VydmVyKGRpcmVjdGlvbiwga2V5Rm9yY2UpO1xuICAgICAgICAgICAgICAgICAgICBsYXN0U2VuZFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8g0J/QvtC60LDQt9GL0LLQsNC10Lwg0L3QsNC/0YDQsNCy0LvQtdC90LjQtSDQtNCy0LjQttC10L3QuNGPINCz0LvQsNC30LDQvNC4XG4gICAgICAgICAgICAgICAgICAgIHNob3dEaXJlY3Rpb25PblNwaGVyZShkaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8g0J7QsdC90L7QstC70Y/QtdC8IGxhc3RTZW50UG9zaXRpb24g0LTQu9GPINC+0YLQvtCx0YDQsNC20LXQvdC40Y8g0YHRgtGA0LXQu9C60LhcbiAgICAgICAgICAgICAgICAgICAgbGFzdFNlbnRQb3NpdGlvbi5jb3B5KGRpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RTZW50UG9zaXRpb24udXNlckRhdGEgPSB7IGRpc3RhbmNlOiBrZXlGb3JjZSB9O1xuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb25OZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8g0JLQvtC30LLRgNCw0YnQsNC10Lwg0LPQu9Cw0LfQsCDQsiDQvdC+0YDQvNCw0LvRjNC90L7QtSDRgdC+0YHRgtC+0Y/QvdC40LUsINC60L7Qs9C00LAg0L3QtdGCINC00LLQuNC20LXQvdC40Y9cbiAgICAgICAgICAgIHNob3dOb3JtYWxPblNwaGVyZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vINCe0LHRgNCw0LHQvtGC0LrQsCDQu9C+0LrQsNC70YzQvdC+0Lkg0YTQuNC30LjQutC4ICjRgtC+0LvRjNC60L4g0LrQvtCz0LTQsCDRgdC10YDQstC10YAg0L7RgtC60LvRjtGH0LXQvSlcbiAgICBmdW5jdGlvbiBwcm9jZXNzTG9jYWxQaHlzaWNzKCkge1xuICAgICAgICAvLyDQn9GA0LjQvNC10L3Rj9C10Lwg0LvQvtC60LDQu9GM0L3Rg9GOINGE0LjQt9C40LrRgyDRgtC+0LvRjNC60L4g0LXRgdC70Lgg0YHQtdGA0LLQtdGAINC+0YLQutC70Y7Rh9C10L1cbiAgICAgICAgaWYgKGdldENvbm5lY3Rpb25TdGF0ZSgpID09PSAnY29ubmVjdGVkJykge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyDQodC10YDQstC10YAg0L/QvtC00LrQu9GO0YfQtdC9IC0g0LjRgdC/0L7Qu9GM0LfRg9C10Lwg0YHQtdGA0LLQtdGA0L3Rg9GOINGE0LjQt9C40LrRg1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBjdXJyZW50VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIGNvbnN0IGRlbHRhVGltZSA9IChjdXJyZW50VGltZSAtIGxhc3RGcmFtZVRpbWUpIC8gMTAwMC4wOyAvLyDQkiDRgdC10LrRg9C90LTQsNGFXG4gICAgICAgIGxhc3RGcmFtZVRpbWUgPSBjdXJyZW50VGltZTtcbiAgICAgICAgXG4gICAgICAgIC8vINCf0L7Qu9GD0YfQsNC10LwgSUQg0L7QsdGK0LXQutGC0LAg0LjQs9GA0L7QutCwXG4gICAgICAgIGNvbnN0IHBsYXllck9iamVjdElEID0gZ2FtZVN0YXRlTWFuYWdlci5nZXRQbGF5ZXJPYmplY3RJRCgpO1xuICAgICAgICBpZiAoIXBsYXllck9iamVjdElEIHx8ICFwbGF5ZXJNZXNoUmVmKSByZXR1cm47XG4gICAgICAgIFxuICAgICAgICAvLyDQn9GA0L7QstC10YDRj9C10Lwg0YDQsNGB0YHRgtC+0Y/QvdC40LUg0LTQviDRhtC10LvQuCAtINC10YHQu9C4INC80YvRiNGMINCx0LvQuNC30LrQviDQuiDRgdGE0LXRgNC1LCDQvtGB0YLQsNC90LDQstC70LjQstCw0LXQvCDQtNCy0LjQttC10L3QuNC1XG4gICAgICAgIGxldCBzaG91bGRNb3ZlID0gZmFsc2U7XG4gICAgICAgIGlmIChsYXN0SW50ZXJzZWN0UG9pbnQgJiYgbGFzdFNlbnRQb3NpdGlvbiAmJiBsYXN0U2VudFBvc2l0aW9uLnVzZXJEYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBkaXN0YW5jZVRvVGFyZ2V0ID0gcGxheWVyTWVzaFJlZi5wb3NpdGlvbi5kaXN0YW5jZVRvKGxhc3RJbnRlcnNlY3RQb2ludCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCU0LLQuNCz0LDQtdC80YHRjyDRgtC+0LvRjNC60L4g0LXRgdC70Lgg0YbQtdC70Ywg0LTQvtGB0YLQsNGC0L7Rh9C90L4g0LTQsNC70LXQutC+XG4gICAgICAgICAgICBpZiAoZGlzdGFuY2VUb1RhcmdldCA+IE1JTl9ESVNUQU5DRV9UT19UQVJHRVQpIHtcbiAgICAgICAgICAgICAgICBzaG91bGRNb3ZlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8g0JXRgdC70Lgg0L3Rg9C20L3QviDQtNCy0LjQs9Cw0YLRjNGB0Y8sINC/0YDQuNC80LXQvdGP0LXQvCDQvdC10L/RgNC10YDRi9Cy0L3Ri9C1INC40LzQv9GD0LvRjNGB0YtcbiAgICAgICAgaWYgKHNob3VsZE1vdmUgJiYgbGFzdFNlbnRQb3NpdGlvbiAmJiBsYXN0U2VudFBvc2l0aW9uLnVzZXJEYXRhICYmIGxhc3RTZW50UG9zaXRpb24udXNlckRhdGEuZGlzdGFuY2UgPiAwKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lU2luY2VMYXN0SW1wdWxzZSA9IGN1cnJlbnRUaW1lIC0gbGFzdExvY2FsSW1wdWxzZVRpbWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCf0YDQuNC80LXQvdGP0LXQvCDQuNC80L/Rg9C70YzRgdGLINGBINC40L3RgtC10YDQstCw0LvQvtC8INC60LDQuiDQvdCwINGB0LXRgNCy0LXRgNC1XG4gICAgICAgICAgICBpZiAodGltZVNpbmNlTGFzdEltcHVsc2UgPj0gTE9DQUxfSU1QVUxTRV9JTlRFUlZBTCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vINCY0YHQv9C+0LvRjNC30YPQtdC8INGB0LjQu9GDINC60LDQuiDQuNC80L/Rg9C70YzRgSAtINCd0JUg0YPQvNC90L7QttCw0LXQvCDQvdCwIGRlbHRhVGltZSFcbiAgICAgICAgICAgICAgICAgICAgLy8g0JjQvNC/0YPQu9GM0YEgLSDRjdGC0L4g0LzQs9C90L7QstC10L3QvdC+0LUg0LjQt9C80LXQvdC10L3QuNC1INGB0LrQvtGA0L7RgdGC0LgsINCwINC90LUg0YHQuNC70LAg0LLQviDQstGA0LXQvNC10L3QuFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBiYXNlRm9yY2UgPSBNYXRoLm1pbihsYXN0U2VudFBvc2l0aW9uLnVzZXJEYXRhLmRpc3RhbmNlICogMC41LCAyMCk7IC8vINCj0LLQtdC70LjRh9C10L3QvdCw0Y8g0YHQuNC70LBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vINCf0YDQuNC80LXQvdGP0LXQvCDQuNC80L/Rg9C70YzRgSDQvdCw0L/RgNGP0LzRg9GOINCx0LXQtyBkZWx0YVRpbWVcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9yY2UgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBsYXN0U2VudFBvc2l0aW9uLnggKiBiYXNlRm9yY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBsYXN0U2VudFBvc2l0aW9uLnkgKiBiYXNlRm9yY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB6OiBsYXN0U2VudFBvc2l0aW9uLnogKiBiYXNlRm9yY2VcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vINCb0L7Qs9C40YDRg9C10Lwg0LIg0LTQuNCw0LPQvdC+0YHRgtC40LrRgyDQstC80LXRgdGC0L4g0LrQvtC90YHQvtC70LhcbiAgICAgICAgICAgICAgICAgICAgZGlhZ25vc3RpY3MubG9nTG9jYWxJbXB1bHNlKHBsYXllck9iamVjdElELCBmb3JjZSwgbGFzdFNlbnRQb3NpdGlvbi51c2VyRGF0YS5kaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBhcHBseUltcHVsc2VUb1NwaGVyZShwbGF5ZXJPYmplY3RJRCwgZm9yY2UpO1xuICAgICAgICAgICAgICAgICAgICBsYXN0TG9jYWxJbXB1bHNlVGltZSA9IGN1cnJlbnRUaW1lO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tHYW1lcGFkXSDQntGI0LjQsdC60LAg0L/RgNC40LzQtdC90LXQvdC40Y8g0LvQvtC60LDQu9GM0L3QvtCz0L4g0LjQvNC/0YPQu9GM0YHQsDonLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIG9uS2V5RG93bihldmVudCkge1xuICAgICAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0YHQvtGB0YLQvtGP0L3QuNC1INC60LvQsNCy0LjRiFxuICAgICAgICBzd2l0Y2goZXZlbnQua2V5LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3cnOiBrZXlzLncgPSB0cnVlOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2EnOiBrZXlzLmEgPSB0cnVlOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3MnOiBrZXlzLnMgPSB0cnVlOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2QnOiBrZXlzLmQgPSB0cnVlOyBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBvbktleVVwKGV2ZW50KSB7XG4gICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDRgdC+0YHRgtC+0Y/QvdC40LUg0LrQu9Cw0LLQuNGIXG4gICAgICAgIHN3aXRjaChldmVudC5rZXkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgY2FzZSAndyc6IGtleXMudyA9IGZhbHNlOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2EnOiBrZXlzLmEgPSBmYWxzZTsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzJzoga2V5cy5zID0gZmFsc2U7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZCc6IGtleXMuZCA9IGZhbHNlOyBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgICAgIC8vINCh0L7RhdGA0LDQvdGP0LXQvCDQs9C70L7QsdCw0LvRjNC90YvQtSDQutC+0L7RgNC00LjQvdCw0YLRiyDQvNGL0YjQuFxuICAgICAgICB3aW5kb3cubW91c2VYID0gZXZlbnQuY2xpZW50WDtcbiAgICAgICAgd2luZG93Lm1vdXNlWSA9IGV2ZW50LmNsaWVudFk7XG4gICAgICAgIFxuICAgICAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0LrQvtC+0YDQtNC40L3QsNGC0Ysg0LzRi9GI0Lgg0LTQu9GPIFRocmVlLmpzXG4gICAgICAgIG1vdXNlLnggPSAoZXZlbnQuY2xpZW50WCAvIHdpbmRvdy5pbm5lcldpZHRoKSAqIDIgLSAxO1xuICAgICAgICBtb3VzZS55ID0gLShldmVudC5jbGllbnRZIC8gd2luZG93LmlubmVySGVpZ2h0KSAqIDIgKyAxO1xuICAgICAgICBcbiAgICAgICAgLy8g0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10Lwg0YTQu9Cw0LMg0LDQutGC0LjQstC90L7RgdGC0Lgg0LzRi9GI0LhcbiAgICAgICAgaXNNb3VzZUFjdGl2ZSA9IHRydWU7XG4gICAgICAgIFxuICAgICAgICAvLyDQktGL0LfRi9Cy0LDQtdC8INGE0YPQvdC60YbQuNGOINC+0LHQvdC+0LLQu9C10L3QuNGPINC90LDQv9GA0LDQstC70LXQvdC40Y9cbiAgICAgICAgY2FzdFJheUFuZFVwZGF0ZURpcmVjdGlvbigpO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBvbk1vdXNlRW50ZXIoZXZlbnQpIHtcbiAgICAgICAgLy8g0JzRi9GI0Ywg0LLQvtGI0LvQsCDQsiDQvtCx0LvQsNGB0YLRjCDQutCw0L3QstCw0YHQsFxuICAgICAgICBpc01vdXNlQWN0aXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gb25Nb3VzZUxlYXZlKGV2ZW50KSB7XG4gICAgICAgIC8vINCc0YvRiNGMINC/0L7QutC40L3Rg9C70LAg0L7QsdC70LDRgdGC0Ywg0LrQsNC90LLQsNGB0LBcbiAgICAgICAgaXNNb3VzZUFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAvLyDQndCVINC+0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdC8INC00LLQuNC20LXQvdC40LUgLSDRgdGE0LXRgNCwINC/0YDQvtC00L7Qu9C20LDQtdGCINGB0YLRgNC10LzQuNGC0YzRgdGPINC6INC/0L7RgdC70LXQtNC90LXQuSDRhtC10LvQuFxuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiB1cGRhdGVSYXlGcm9tTGFzdE1vdXNlKCkge1xuICAgICAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0LvRg9GHINGBINGC0LXQutGD0YnQuNC80Lgg0LrQvtC+0YDQtNC40L3QsNGC0LDQvNC4INC80YvRiNC4INC4INC90L7QstC+0Lkg0L/QvtC30LjRhtC40LXQuSDQutCw0LzQtdGA0YtcbiAgICAgICAgY2FzdFJheUFuZFVwZGF0ZURpcmVjdGlvbigpO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBjYXN0UmF5QW5kVXBkYXRlRGlyZWN0aW9uKCkge1xuICAgICAgICBpZiAoIWNhbWVyYVJlZiB8fCAhdGVycmFpbk1lc2hSZWYgfHwgIXBsYXllck1lc2hSZWYpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgIC8vINCe0LHRgNCw0LHQsNGC0YvQstCw0LXQvCDQvdCw0L/RgNCw0LLQu9C10L3QuNC1INCy0YHQtdCz0LTQsCwg0LrQvtCz0LTQsCDQtdGB0YLRjCDQstCw0LvQuNC00L3Ri9C1INC60L7QvtGA0LTQuNC90LDRgtGLINC80YvRiNC4XG4gICAgICAgIFxuICAgICAgICAvLyDQo9GB0YLQsNC90LDQstC70LjQstCw0LXQvCDQu9GD0Ycg0L7RgiDQutCw0LzQtdGA0Ysg0YfQtdGA0LXQtyDQutC+0L7RgNC00LjQvdCw0YLRiyDQvNGL0YjQuFxuICAgICAgICByYXljYXN0ZXIuc2V0RnJvbUNhbWVyYShtb3VzZSwgY2FtZXJhUmVmKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCd0LDRhdC+0LTQuNC8INC/0LXRgNC10YHQtdGH0LXQvdC40Y8g0YEg0YLQtdGA0YDQtdC50L3QvtC8XG4gICAgICAgIGNvbnN0IGludGVyc2VjdHMgPSByYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0cyhbdGVycmFpbk1lc2hSZWZdKTtcbiAgICBcbiAgICAgICAgaWYgKGludGVyc2VjdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0UG9zaXRpb24gPSBpbnRlcnNlY3RzWzBdLnBvaW50O1xuICAgICAgICAgICAgbGFzdEludGVyc2VjdFBvaW50LmNvcHkodGFyZ2V0UG9zaXRpb24pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDQktGL0YfQuNGB0LvRj9C10Lwg0L3QsNC/0YDQsNCy0LvQtdC90LjQtSDQsiAzRCDQv9GA0L7RgdGC0YDQsNC90YHRgtCy0LUgKNGBINGD0YfQtdGC0L7QvCDQvtGB0LggWSlcbiAgICAgICAgICAgIGN1cnJlbnREaXJlY3Rpb24uc2V0KFxuICAgICAgICAgICAgICAgIHRhcmdldFBvc2l0aW9uLnggLSBwbGF5ZXJNZXNoUmVmLnBvc2l0aW9uLngsXG4gICAgICAgICAgICAgICAgdGFyZ2V0UG9zaXRpb24ueSAtIHBsYXllck1lc2hSZWYucG9zaXRpb24ueSwgLy8g0KPRh9C40YLRi9Cy0LDQtdC8INCy0YvRgdC+0YLRg1xuICAgICAgICAgICAgICAgIHRhcmdldFBvc2l0aW9uLnogLSBwbGF5ZXJNZXNoUmVmLnBvc2l0aW9uLnpcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCh0L7RhdGA0LDQvdGP0LXQvCDQtNC70LjQvdGDINC00L4g0L3QvtGA0LzQsNC70LjQt9Cw0YbQuNC4ICjRgNCw0YHRgdGC0L7Rj9C90LjQtSDQvtGCINC40LPRgNC+0LrQsCDQtNC+INGC0L7Rh9C60Lgg0L/QtdGA0LXRgdC10YfQtdC90LjRjylcbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gY3VycmVudERpcmVjdGlvbi5sZW5ndGgoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0J3QvtGA0LzQsNC70LjQt9GD0LXQvCDQtNC70Y8g0L/QvtC70YPRh9C10L3QuNGPINC90LDQv9GA0LDQstC70LXQvdC40Y9cbiAgICAgICAgICAgIGN1cnJlbnREaXJlY3Rpb24ubm9ybWFsaXplKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCt0LrRgdC/0L7RgNGC0LjRgNGD0LXQvCDQvdCw0L/RgNCw0LLQu9C10L3QuNC1INCyINCz0LvQvtCx0LDQu9GM0L3Rg9GOINC/0LXRgNC10LzQtdC90L3Rg9GOINC00LvRjyDQs9C70LDQt1xuICAgICAgICAgICAgd2luZG93LmdhbWVwYWREaXJlY3Rpb24gPSBjdXJyZW50RGlyZWN0aW9uLmNsb25lKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCX0LDQv9C+0LzQuNC90LDQtdC8INC90LDQv9GA0LDQstC70LXQvdC40LUg0Lgg0YDQsNGB0YHRgtC+0Y/QvdC40LVcbiAgICAgICAgICAgIGxhc3RTZW50UG9zaXRpb24uY29weShjdXJyZW50RGlyZWN0aW9uKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0KHQvtGF0YDQsNC90Y/QtdC8INC40YHRhdC+0LTQvdC+0LUg0YDQsNGB0YHRgtC+0Y/QvdC40LUg0LTQu9GPINC40YHQv9C+0LvRjNC30L7QstCw0L3QuNGPINCyIHVwZGF0ZUFycm93SGVscGVyXG4gICAgICAgICAgICBsYXN0U2VudFBvc2l0aW9uLnVzZXJEYXRhID0geyBkaXN0YW5jZTogZGlzdGFuY2UgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0J/QvtC80LXRh9Cw0LXQvCwg0YfRgtC+INC90LDQv9GA0LDQstC70LXQvdC40LUg0L3Rg9C20L3QviDQvtCx0L3QvtCy0LjRgtGMXG4gICAgICAgICAgICBkaXJlY3Rpb25OZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8LCDQvdGD0LbQvdC+INC70Lgg0L7RgtC/0YDQsNCy0LvRj9GC0Ywg0LTQsNC90L3Ri9C1INC90LAg0YHQtdGA0LLQtdGAXG4gICAgICAgIGlmIChEYXRlLm5vdygpIC0gbGFzdFNlbmRUaW1lID4gU0VORF9JTlRFUlZBTCkge1xuXG4gICAgICAgICAgICBzZW5kRGlyZWN0aW9uVG9TZXJ2ZXIoY3VycmVudERpcmVjdGlvbiwgZGlzdGFuY2UpO1xuICAgICAgICAgICAgbGFzdFNlbmRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2VuZERpcmVjdGlvblRvU2VydmVyKGRpcmVjdGlvbiwgZGlzdGFuY2UpIHtcbiAgICAgICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8INGB0L7RgdGC0L7Rj9C90LjQtSDRgdC+0LXQtNC40L3QtdC90LjRj1xuICAgICAgICBsZXQgdXNlU2VydmVyUGh5c2ljcyA9IGdldENvbm5lY3Rpb25TdGF0ZSgpID09PSAnY29ubmVjdGVkJztcbiAgICAgICAgXG4gICAgICAgIC8vINCf0L7Qu9GD0YfQsNC10LwgSUQg0L7QsdGK0LXQutGC0LAg0LjQs9GA0L7QutCwICBcbiAgICAgICAgY29uc3QgcGxheWVyT2JqZWN0SUQgPSBnYW1lU3RhdGVNYW5hZ2VyLmdldFBsYXllck9iamVjdElEKCk7XG4gICAgICAgIFxuICAgICAgICAvLyDQm9C+0LPQuNGA0YPQtdC8INC60L7QvNCw0L3QtNGLINCyINC00LjQsNCz0L3QvtGB0YLQuNC60YNcbiAgICAgICAgaWYgKHBsYXllck9iamVjdElEKSB7XG4gICAgICAgICAgICBkaWFnbm9zdGljcy5sb2dDbGllbnRDb21tYW5kKGRpcmVjdGlvbiwgZGlzdGFuY2UsIHBsYXllck9iamVjdElEKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g0JvQvtCz0LjRgNGD0LXQvCDQsiDQvdC+0LLRg9GOINGC0LXQu9C10LzQtdGC0YDQuNGOICjRgtC+0LvRjNC60L4g0LIg0L/QvtC00YDQvtCx0L3QvtC8INGA0LXQttC40LzQtSlcbiAgICAgICAgICAgIGlmIChjbGllbnRUZWxlbWV0cnkudmVyYm9zZU1vZGUpIHtcbiAgICAgICAgICAgICAgICBjbGllbnRUZWxlbWV0cnkubG9nQ2xpZW50Q29tbWFuZChkaXJlY3Rpb24sIGRpc3RhbmNlLCBmb3JjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vINCf0L7Qu9GD0YfQsNC10Lwg0LrQvtC90YTQuNCz0YPRgNCw0YbQuNGOINGE0LjQt9C40LrQuFxuICAgICAgICBjb25zdCBwaHlzaWNzQ29uZmlnID0gZ2V0UGh5c2ljc0NvbmZpZygpO1xuICAgICAgICBpZiAoIXBoeXNpY3NDb25maWcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tHYW1lcGFkXSDQmtC+0L3RhNC40LPRg9GA0LDRhtC40Y8g0YTQuNC30LjQutC4INC90LUg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC90LAnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXBsYXllck9iamVjdElEKSB7XG4gICAgICAgICAgICAvLyDQo9Cx0LjRgNCw0LXQvCDRgdC/0LDQvCAtINC40LPRgNC+0Log0L/RgNC+0YHRgtC+INC10YnQtSDQvdC1INC/0L7QtNC60LvRjtGH0LjQu9GB0Y9cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vINCS0YvRh9C40YHQu9GP0LXQvCDQsNC00LDQv9GC0LjQstC90YPRjiDQvNC10YDRgtCy0YPRjiDQt9C+0L3Rg1xuICAgICAgICAvLyDQlNC70Y8g0YDQsNC00LjRg9GB0L7QsiDRgdGE0LXRgCAyLTIwINC10LTQuNC90LjRhiDQuNGB0L/QvtC70YzQt9GD0LXQvCDQvNC10YDRgtCy0YPRjiDQt9C+0L3RgyDQvtGCIDUg0LTQviAyNSDQtdC00LjQvdC40YZcbiAgICAgICAgY29uc3QgZXN0aW1hdGVkUmFkaXVzID0gTWF0aC5taW4oMjAsIE1hdGgubWF4KDIsIGRpc3RhbmNlIC8gMTApKTsgLy8g0J7RhtC10L3QutCwINGA0LDQtNC40YPRgdCwINC/0L4g0YDQsNGB0YHRgtC+0Y/QvdC40Y5cbiAgICAgICAgY29uc3QgYWRhcHRpdmVEZWFkem9uZSA9IE1hdGgubWluKE1BWF9ERUFEWk9ORSwgTWF0aC5tYXgoTUlOX0RFQURaT05FLCBlc3RpbWF0ZWRSYWRpdXMgKiAxLjUpKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCV0YHQu9C4INGA0LDRgdGB0YLQvtGP0L3QuNC1INC80LXQvdGM0YjQtSDQsNC00LDQv9GC0LjQstC90L7QuSDQvNC10YDRgtCy0L7QuSDQt9C+0L3Riywg0L3QtSDQvtGC0L/RgNCw0LLQu9GP0LXQvCDQutC+0LzQsNC90LTRg1xuICAgICAgICBpZiAoZGlzdGFuY2UgPCBhZGFwdGl2ZURlYWR6b25lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyDQlNC70Y8g0LzRi9GI0LjQvdC+0LPQviDRg9C/0YDQsNCy0LvQtdC90LjRjyDQvtCz0YDQsNC90LjRh9C40LLQsNC10Lwg0YHQuNC70YMg0LjQvNC/0YPQu9GM0YHQsCDQtNC70Y8g0LHQvtC70LXQtSDQv9C70LDQstC90L7Qs9C+INGD0L/RgNCw0LLQu9C10L3QuNGPXG4gICAgICAgIGNvbnN0IGVuaGFuY2VkRGlzdGFuY2UgPSBNYXRoLm1pbihkaXN0YW5jZSwgMzApO1xuICAgICAgICBcbiAgICAgICAgLy8g0JLRi9GH0LjRgdC70Y/QtdC8INGB0LjQu9GDINC40LzQv9GD0LvRjNGB0LBcbiAgICAgICAgY29uc3QgZm9yY2UgPSB7XG4gICAgICAgICAgICB4OiBkaXJlY3Rpb24ueCAqIGVuaGFuY2VkRGlzdGFuY2UsXG4gICAgICAgICAgICB5OiBkaXJlY3Rpb24ueSAqIGVuaGFuY2VkRGlzdGFuY2UsXG4gICAgICAgICAgICB6OiBkaXJlY3Rpb24ueiAqIGVuaGFuY2VkRGlzdGFuY2VcbiAgICAgICAgfTtcblxuICAgICAgICAvLyDQntGC0L/RgNCw0LLQu9GP0LXQvCDQutC+0LzQsNC90LTRgyDQvdCwINGB0LXRgNCy0LXRgCDRh9C10YDQtdC3INC90L7QstGD0Y4g0YHQtdGC0LXQstGD0Y4g0YHQuNGB0YLQtdC80YNcbiAgICAgICAgaWYgKHVzZVNlcnZlclBoeXNpY3MpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc2VuZENvbW1hbmQoJ01PVVNFX1ZFQ1RPUicsIHtcbiAgICAgICAgICAgICAgICAgICAgeDogZGlyZWN0aW9uLngsXG4gICAgICAgICAgICAgICAgICAgIHk6IGRpcmVjdGlvbi55LFxuICAgICAgICAgICAgICAgICAgICB6OiBkaXJlY3Rpb24ueixcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2U6IGVuaGFuY2VkRGlzdGFuY2UsXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdF9pZDogcGxheWVyT2JqZWN0SUQgLy8g0JjRgdC/0L7Qu9GM0LfRg9C10Lwg0LTQuNC90LDQvNC40YfQtdGB0LrQuNC5IHBsYXllciBJRFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbR2FtZXBhZF0g0J7RiNC40LHQutCwINC+0YLQv9GA0LDQstC60Lgg0LrQvtC80LDQvdC00Ysg0L3QsCDRgdC10YDQstC10YA6JywgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyDQm9C+0LrQsNC70YzQvdCw0Y8g0YTQuNC30LjQutCwINC+0LHRgNCw0LHQsNGC0YvQstCw0LXRgtGB0Y8g0L7RgtC00LXQu9GM0L3QviDQsiBwcm9jZXNzTG9jYWxQaHlzaWNzKClcbiAgICB9XG59XG5cbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDQstC60LvRjtGH0LXQvdC40Y8v0LLRi9C60LvRjtGH0LXQvdC40Y8g0L7RgtC+0LHRgNCw0LbQtdC90LjRjyBhcnJvd0hlbHBlclxuZXhwb3J0IGZ1bmN0aW9uIHNldERlYnVnTW9kZShlbmFibGVkKSB7XG4gICAgaWYgKGFycm93SGVscGVyKSB7XG4gICAgICAgIGFycm93SGVscGVyLnZpc2libGUgPSBlbmFibGVkO1xuICAgIH1cbn1cblxuLy8g0KTRg9C90LrRhtC40Y8g0LTQu9GPINC/0L7Qu9GD0YfQtdC90LjRjyDRgtC10LrRg9GJ0LXQs9C+INGB0YLQsNGC0YPRgdCwINC+0YLQu9Cw0LTQvtGH0L3QvtCz0L4g0YDQtdC20LjQvNCwXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVidWdNb2RlKCkge1xuICAgIHJldHVybiBERUJVR19NT0RFO1xufVxuXG4vLyDQntCx0L3QvtCy0LvRj9C10Lwg0L/QvtC30LjRhtC40Y4g0Lgg0L3QsNC/0YDQsNCy0LvQtdC90LjQtSBhcnJvd0hlbHBlclxuZnVuY3Rpb24gdXBkYXRlQXJyb3dIZWxwZXIocGxheWVyTWVzaCkge1xuICAgIGlmIChhcnJvd0hlbHBlcikge1xuICAgICAgICAvLyDQn9C+0LfQuNGG0LjRjyDRgdGC0YDQtdC70LrQuCDRgSDRg9GH0LXRgtC+0Lwg0YHQvNC10YnQtdC90LjRjyDQv9C+INCy0YvRgdC+0YLQtVxuICAgICAgICBjb25zdCBhcnJvd1Bvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoXG4gICAgICAgICAgICBwbGF5ZXJNZXNoLnBvc2l0aW9uLngsXG4gICAgICAgICAgICBwbGF5ZXJNZXNoLnBvc2l0aW9uLnkgKyBBUlJPV19IRUlHSFRfT0ZGU0VULCAvLyDQn9C+0LTQvdC40LzQsNC10Lwg0YHRgtGA0LXQu9C60YMg0L3QsNC0INC40LPRgNC+0LrQvtC8XG4gICAgICAgICAgICBwbGF5ZXJNZXNoLnBvc2l0aW9uLnpcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQv9C+0LfQuNGG0LjRjiDRgdGC0YDQtdC70LrQuFxuICAgICAgICBhcnJvd0hlbHBlci5wb3NpdGlvbi5jb3B5KGFycm93UG9zaXRpb24pO1xuICAgICAgICBcbiAgICAgICAgLy8g0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10Lwg0L3QsNC/0YDQsNCy0LvQtdC90LjQtSDRgdGC0YDQtdC70LrQuCAo0YLQtdC/0LXRgNGMINGBINGD0YfQtdGC0L7QvCDQvtGB0LggWSlcbiAgICAgICAgYXJyb3dIZWxwZXIuc2V0RGlyZWN0aW9uKGxhc3RTZW50UG9zaXRpb24pO1xuICAgICAgICBcbiAgICAgICAgLy8g0JjRgdC/0L7Qu9GM0LfRg9C10Lwg0YHQvtGF0YDQsNC90LXQvdC90L7QtSDRgNCw0YHRgdGC0L7Rj9C90LjQtSDQtNC+INGC0L7Rh9C60Lgg0L/QtdGA0LXRgdC10YfQtdC90LjRj1xuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IGxhc3RTZW50UG9zaXRpb24udXNlckRhdGEgPyBsYXN0U2VudFBvc2l0aW9uLnVzZXJEYXRhLmRpc3RhbmNlIDogTUlOX0FSUk9XX0xFTkdUSDtcbiAgICAgICAgXG4gICAgICAgIC8vINCe0LPRgNCw0L3QuNGH0LjQstCw0LXQvCDQtNC70LjQvdGDINGB0YLRgNC10LvQutC4LCDRh9GC0L7QsdGLINC+0L3QsCDQvdC1INCx0YvQu9CwINGB0LvQuNGI0LrQvtC8INCx0L7Qu9GM0YjQvtC5INC40LvQuCDQvNCw0LvQtdC90YzQutC+0LlcbiAgICAgICAgY29uc3QgYXJyb3dMZW5ndGggPSBNYXRoLm1pbihNQVhfQVJST1dfTEVOR1RILCBNYXRoLm1heChNSU5fQVJST1dfTEVOR1RILCBkaXN0YW5jZSkpO1xuICAgICAgICBcbiAgICAgICAgLy8g0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10Lwg0LTQu9C40L3RgyDRgdGC0YDQtdC70LrQuCDQv9GA0L7Qv9C+0YDRhtC40L7QvdCw0LvRjNC90L4g0YDQsNGB0YHRgtC+0Y/QvdC40Y5cbiAgICAgICAgYXJyb3dIZWxwZXIuc2V0TGVuZ3RoKGFycm93TGVuZ3RoKTtcbiAgICB9XG59XG5cbi8vINCt0LrRgdC/0L7RgNGC0LjRgNGD0LXQvCDRhNGD0L3QutGG0LjQuCDQtNC70Y8g0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40Y8g0LIg0LTRgNGD0LPQuNGFINC80L7QtNGD0LvRj9GFXG5leHBvcnQgeyBpbml0R2FtZXBhZCwgdXBkYXRlQXJyb3dIZWxwZXIgfTtcblxuLy8g0K3QutGB0L/QvtGA0YLQuNGA0YPQtdC8INGE0YPQvdC60YbQuNC4INC00LvRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0LTQsNC90L3Ri9GFINC+INC70YPRh9C1INC80YvRiNC4XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VycmVudERpcmVjdGlvbigpIHtcbiAgICByZXR1cm4gY3VycmVudERpcmVjdGlvbi5jbG9uZSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGFzdEludGVyc2VjdFBvaW50KCkge1xuICAgIHJldHVybiBsYXN0SW50ZXJzZWN0UG9pbnQuY2xvbmUoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTW91c2VBY3RpdmVJbkNhbnZhcygpIHtcbiAgICByZXR1cm4gaXNNb3VzZUFjdGl2ZTtcbn0iLCIvLyBnYW1lc3RhdGVtYW5hZ2VyLmpzXG5cbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgeyBpbml0R2FtZXBhZCB9IGZyb20gJy4vZ2FtZXBhZCc7XG5pbXBvcnQgeyBjYW1lcmEgfSBmcm9tICcuL2NhbWVyYSc7XG5pbXBvcnQge3NjZW5lfSBmcm9tICcuL3NjZW5lJztcblxuY2xhc3MgR2FtZVN0YXRlTWFuYWdlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudGVycmFpbk1lc2hDcmVhdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGxheWVyTWVzaENyZWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50ZXJyYWluTWVzaCA9IG51bGw7XG4gICAgICAgIHRoaXMucGxheWVyTWVzaCA9IG51bGw7XG4gICAgICAgIHRoaXMuc2NlbmUgPSBzY2VuZTtcbiAgICAgICAgdGhpcy5wbGF5ZXJJRCA9IG51bGw7ICAgICAgLy8g0JTQuNC90LDQvNC40YfQtdGB0LrQuNC5IElEINC40LPRgNC+0LrQsCwg0L/QvtC70YPRh9Cw0LXQvNGL0Lkg0L7RgiDRgdC10YDQstC10YDQsFxuICAgICAgICB0aGlzLnBsYXllck9iamVjdElEID0gbnVsbDsgLy8gSUQg0L7QsdGK0LXQutGC0LAg0LjQs9GA0L7QutCwINCyINC80LjRgNC1XG4gICAgICAgIHRoaXMuaXNQbGF5ZXJJRFJlY2VpdmVkID0gZmFsc2U7IC8vINCk0LvQsNCzINC/0L7Qu9GD0YfQtdC90LjRjyBJRCDQvtGCINGB0LXRgNCy0LXRgNCwXG4gICAgfVxuXG4gICAgc2V0VGVycmFpbk1lc2gobWVzaCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIltHYW1lU3RhdGVNYW5hZ2VyXSDQo9GB0YLQsNC90L7QstC70LXQvSB0ZXJyYWluIG1lc2hcIik7XG4gICAgICAgIHRoaXMudGVycmFpbk1lc2ggPSBtZXNoO1xuICAgICAgICB0aGlzLnRlcnJhaW5NZXNoQ3JlYXRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2hlY2tHYW1lU3RhdGUoKTtcbiAgICB9XG5cbiAgICBzZXRQbGF5ZXJNZXNoKG1lc2gpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJbR2FtZVN0YXRlTWFuYWdlcl0g0KPRgdGC0LDQvdC+0LLQu9C10L0gcGxheWVyIG1lc2hcIik7XG4gICAgICAgIHRoaXMucGxheWVyTWVzaCA9IG1lc2g7XG4gICAgICAgIHRoaXMucGxheWVyTWVzaENyZWF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmNoZWNrR2FtZVN0YXRlKCk7XG4gICAgfVxuXG4gICAgY2hlY2tHYW1lU3RhdGUoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbR2FtZVN0YXRlTWFuYWdlcl0g0J/RgNC+0LLQtdGA0LrQsCDRgdC+0YHRgtC+0Y/QvdC40Y86IHRlcnJhaW49JHt0aGlzLnRlcnJhaW5NZXNoQ3JlYXRlZH0sIHBsYXllcj0ke3RoaXMucGxheWVyTWVzaENyZWF0ZWR9YCk7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy50ZXJyYWluTWVzaENyZWF0ZWQgJiYgdGhpcy5wbGF5ZXJNZXNoQ3JlYXRlZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbR2FtZVN0YXRlTWFuYWdlcl0g0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8gZ2FtZXBhZC4uLlwiKTtcbiAgICAgICAgICAgIGluaXRHYW1lcGFkKGNhbWVyYSwgdGhpcy50ZXJyYWluTWVzaCwgdGhpcy5wbGF5ZXJNZXNoLCB0aGlzLnNjZW5lKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZ2FtZUluaXRpYWxpemVkJyk7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJbR2FtZSBTdGF0ZSBNYW5hZ2VyXSBnYW1lIGluaXRpYWxpemVkISEhXCIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIltHYW1lU3RhdGVNYW5hZ2VyXSDQntC20LjQtNCw0L3QuNC1INGB0L7Qt9C00LDQvdC40Y8g0L7QsdGK0LXQutGC0L7Qsi4uLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vINCj0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdGCIHBsYXllciBJRCwg0L/QvtC70YPRh9C10L3QvdGL0Lkg0L7RgiDRgdC10YDQstC10YDQsFxuICAgIHNldFBsYXllcklEKHBsYXllcklELCBvYmplY3RJRCkge1xuICAgICAgICB0aGlzLnBsYXllcklEID0gcGxheWVySUQ7XG4gICAgICAgIHRoaXMucGxheWVyT2JqZWN0SUQgPSBvYmplY3RJRDtcbiAgICAgICAgdGhpcy5pc1BsYXllcklEUmVjZWl2ZWQgPSB0cnVlO1xuICAgICAgICBjb25zb2xlLmxvZyhgW0dhbWVTdGF0ZU1hbmFnZXJdINCj0YHRgtCw0L3QvtCy0LvQtdC9IHBsYXllciBJRDogJHtwbGF5ZXJJRH0sIG9iamVjdCBJRDogJHtvYmplY3RJRH1gKTtcbiAgICB9XG5cbiAgICAvLyDQktC+0LfQstGA0LDRidCw0LXRgiBJRCDQvtCx0YrQtdC60YLQsCDQuNCz0YDQvtC60LAg0LTQu9GPINC+0YLQv9GA0LDQstC60Lgg0LrQvtC80LDQvdC0XG4gICAgZ2V0UGxheWVyT2JqZWN0SUQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBsYXllck9iamVjdElEO1xuICAgIH1cblxuICAgIC8vINCS0L7Qt9Cy0YDQsNGJ0LDQtdGCIHBsYXllciBJRFxuICAgIGdldFBsYXllcklEKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wbGF5ZXJJRDtcbiAgICB9XG5cbiAgICAvLyDQn9GA0L7QstC10YDRj9C10YIsINC/0L7Qu9GD0YfQtdC9INC70LggcGxheWVyIElEINC+0YIg0YHQtdGA0LLQtdGA0LBcbiAgICBpc1BsYXllclJlYWR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1BsYXllcklEUmVjZWl2ZWQgJiYgdGhpcy5wbGF5ZXJPYmplY3RJRCAhPT0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyDQodCx0YDQsNGB0YvQstCw0LXRgiDRgdC+0YHRgtC+0Y/QvdC40LUg0L/RgNC4INC+0YLQutC70Y7Rh9C10L3QuNC4XG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMucGxheWVyTWVzaCA9IG51bGw7XG4gICAgICAgIHRoaXMucGxheWVySUQgPSBudWxsO1xuICAgICAgICB0aGlzLnBsYXllck9iamVjdElEID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc1BsYXllcklEUmVjZWl2ZWQgPSBmYWxzZTtcbiAgICAgICAgY29uc29sZS5sb2coJ1tHYW1lU3RhdGVNYW5hZ2VyXSDQodC+0YHRgtC+0Y/QvdC40LUg0YHQsdGA0L7RiNC10L3QvicpO1xuICAgIH1cblxuICAgIC8vINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINGB0L4g0YHRhtC10L3QvtC5XG4gICAgaW5pdChzY2VuZSkge1xuICAgICAgICB0aGlzLnNjZW5lID0gc2NlbmU7XG4gICAgfVxufVxuXG4vLyDQodC+0LfQtNCw0LXQvCBzaW5nbGV0b24g0Y3QutC30LXQvNC/0LvRj9GAXG5jb25zdCBnYW1lU3RhdGVNYW5hZ2VyID0gbmV3IEdhbWVTdGF0ZU1hbmFnZXIoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRHYW1lU3RhdGVNYW5hZ2VyKHNjZW5lKXtcbiAgICBnYW1lU3RhdGVNYW5hZ2VyLmluaXQoc2NlbmUpO1xufVxuXG4vLyDQrdC60YHQv9C+0YDRgtC40YDRg9C10Lwgc2luZ2xldG9uINC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOXG5leHBvcnQgZGVmYXVsdCBnYW1lU3RhdGVNYW5hZ2VyO1xuZXhwb3J0IHsgZ2FtZVN0YXRlTWFuYWdlciB9OyIsIi8vIHBoeXNpY3MuanMgLSDQndC+0LLQsNGPINGB0LjRgdGC0LXQvNCwINGE0LjQt9C40LrQuCDRgSDQv9GA0LXQtNGB0LrQsNC30LDQvdC40LXQvCDQuCDQstGA0LXQvNC10L3QvdGL0LzQuCDQvNC10YLQutCw0LzQuFxuaW1wb3J0IHsgb2JqZWN0cyB9IGZyb20gJy4vb2JqZWN0cyc7XG5pbXBvcnQgZ2FtZVN0YXRlTWFuYWdlciBmcm9tICcuL2dhbWVzdGF0ZW1hbmFnZXIuanMnO1xuaW1wb3J0IHsgZGlhZ25vc3RpY3MgfSBmcm9tICcuL2RpYWdub3N0aWNzJztcbmltcG9ydCB7IGNsaWVudFRlbGVtZXRyeSB9IGZyb20gJy4vdGVsZW1ldHJ5JztcblxuLy8g0JrQvtC90YHRgtCw0L3RgtGLINC00LvRjyDQvdC+0LLQvtC5INGB0LjRgdGC0LXQvNGLINGE0LjQt9C40LrQuFxuY29uc3QgUEhZU0lDU19DT05GSUcgPSB7XG4gICAgLy8g0JLRgNC10LzQtdC90L3Ri9C1INC90LDRgdGC0YDQvtC50LrQuFxuICAgIFRJTUU6IHtcbiAgICAgICAgUFJFRElDVElPTl9XSU5ET1c6IDIwMCwgICAgICAvLyDQntC60L3QviDQv9GA0LXQtNGB0LrQsNC30LDQvdC40Y8g0LIg0LzRgVxuICAgICAgICBNQVhfRVhUUkFQT0xBVElPTjogNTAwLCAgICAgIC8vINCc0LDQutGB0LjQvNCw0LvRjNC90L7QtSDQstGA0LXQvNGPINGN0LrRgdGC0YDQsNC/0L7Qu9GP0YbQuNC4INCyINC80YFcbiAgICAgICAgU0VSVkVSX1VQREFURV9JTlRFUlZBTDogNTAsICAvLyDQntC20LjQtNCw0LXQvNGL0Lkg0LjQvdGC0LXRgNCy0LDQuyDQvtCx0L3QvtCy0LvQtdC90LjQuSDRgdC10YDQstC10YDQsCDQsiDQvNGBXG4gICAgICAgIFRJTUVTVEFNUF9UT0xFUkFOQ0U6IDEwMDAsICAgLy8g0JTQvtC/0YPRgdGC0LjQvNC+0LUg0YDQsNGB0YXQvtC20LTQtdC90LjQtSDQstGA0LXQvNC10L3QvdGL0YUg0LzQtdGC0L7QuiDQsiDQvNGBXG4gICAgfSxcbiAgICBcbiAgICAvLyDQndCw0YHRgtGA0L7QudC60Lgg0LrQvtGA0YDQtdC60YbQuNC4XG4gICAgQ09SUkVDVElPTjoge1xuICAgICAgICBQT1NJVElPTl9USFJFU0hPTEQ6IDQuMCwgICAgIC8vINCc0LjQvdC40LzQsNC70YzQvdC+0LUg0YDQsNGB0YHRgtC+0Y/QvdC40LUg0LTQu9GPINC60L7RgNGA0LXQutGG0LjQuFxuICAgICAgICBWRUxPQ0lUWV9USFJFU0hPTEQ6IDUuMCwgICAgIC8vINCc0LjQvdC40LzQsNC70YzQvdCw0Y8g0YDQsNC30L3QuNGG0LAg0YHQutC+0YDQvtGB0YLQuCDQtNC70Y8g0LrQvtGA0YDQtdC60YbQuNC4XG4gICAgICAgIEhBUkRfQ09SUkVDVElPTl9USFJFU0hPTEQ6IDQwLjAsIC8vINCf0L7RgNC+0LMg0LTQu9GPINC20LXRgdGC0LrQvtC5INC60L7RgNGA0LXQutGG0LjQuFxuICAgICAgICBURUxFUE9SVF9USFJFU0hPTEQ6IDEyMC4wLCAgIC8vINCf0L7RgNC+0LMg0LTQu9GPINGC0LXQu9C10L/QvtGA0YLQsNGG0LjQuCAo0LfQvdCw0YfQuNGC0LXQu9GM0L3QviDRg9Cy0LXQu9C40YfQtdC9KVxuICAgICAgICBTTU9PVEhfRkFDVE9SOiAwLjMsICAgICAgICAgIC8vINCk0LDQutGC0L7RgCDQv9C70LDQstC90L7RgdGC0Lgg0LrQvtGA0YDQtdC60YbQuNC4ICgwLTEpXG4gICAgICAgIEhBUkRfQ09SUkVDVElPTl9GQUNUT1I6IDAuNiwgLy8g0KTQsNC60YLQvtGAINC20LXRgdGC0LrQvtC5INC60L7RgNGA0LXQutGG0LjQuFxuICAgICAgICBNQVhfQ09SUkVDVElPTl9TUEVFRDogNjAuMCwgIC8vINCc0LDQutGB0LjQvNCw0LvRjNC90LDRjyDRgdC60L7RgNC+0YHRgtGMINC60L7RgNGA0LXQutGG0LjQuFxuICAgIH0sXG4gICAgXG4gICAgLy8g0J3QsNGB0YLRgNC+0LnQutC4INCy0LjQt9GD0LDQu9GM0L3QvtC5INC60L7RgNGA0LXQutGG0LjQuCBtZXNoJ9CwXG4gICAgVklTVUFMOiB7XG4gICAgICAgIEFUVFJBQ1RJT05fU1RSRU5HVEg6IDguMCwgICAgLy8g0KHQuNC70LAg0L/RgNC40YLRj9Cz0LjQstCw0L3QuNGPIG1lc2gn0LAg0Log0YTQuNC30LjRh9C10YHQutC+0LzRgyDRgtC10LvRg1xuICAgICAgICBNQVhfVklTVUFMX0RJU1RBTkNFOiAyMC4wLCAgIC8vINCc0LDQutGB0LjQvNCw0LvRjNC90L7QtSDRgNCw0YHRgdGC0L7Rj9C90LjQtSDQvNC10LbQtNGDIG1lc2gg0Lgg0YLQtdC70L7QvFxuICAgICAgICBEQU1QSU5HX0ZBQ1RPUjogMC44NSwgICAgICAgIC8vINCX0LDRgtGD0YXQsNC90LjQtSDQtNCy0LjQttC10L3QuNGPIG1lc2gn0LBcbiAgICAgICAgTUlOX01PVkVNRU5UX1RIUkVTSE9MRDogMC4xLCAvLyDQnNC40L3QuNC80LDQu9GM0L3Ri9C5INC/0L7RgNC+0LMg0LTQstC40LbQtdC90LjRj1xuICAgIH0sXG4gICAgXG4gICAgLy8g0JDQtNCw0L/RgtC40LLQvdGL0LUg0L3QsNGB0YLRgNC+0LnQutC4INC/0L7QtCDRgdC10YLQtdCy0YvQtSDRg9GB0LvQvtCy0LjRj1xuICAgIE5FVFdPUks6IHtcbiAgICAgICAgR09PRF9QSU5HX1RIUkVTSE9MRDogNTAsICAgICAvLyDQpdC+0YDQvtGI0LjQuSDQv9C40L3QsyDQsiDQvNGBXG4gICAgICAgIEJBRF9QSU5HX1RIUkVTSE9MRDogMjAwLCAgICAgLy8g0J/Qu9C+0YXQvtC5INC/0LjQvdCzINCyINC80YFcbiAgICAgICAgSklUVEVSX1RIUkVTSE9MRDogMzAsICAgICAgICAvLyDQn9C+0YDQvtCzINC00LbQuNGC0YLQtdGA0LAg0LIg0LzRgVxuICAgICAgICBQQUNLRVRfTE9TU19USFJFU0hPTEQ6IDAuMDUsIC8vINCf0L7RgNC+0LMg0L/QvtGC0LXRgNC4INC/0LDQutC10YLQvtCyICg1JSlcbiAgICB9XG59O1xuXG4vLyDQk9C70L7QsdCw0LvRjNC90YvQtSDQv9C10YDQtdC80LXQvdC90YvQtVxubGV0IHBoeXNpY3NXb3JsZCA9IG51bGw7XG5sZXQgc2VydmVyVGltZU9mZnNldCA9IDA7XG5sZXQgbmV0d29ya1N0YXRzID0ge1xuICAgIHBpbmc6IDAsXG4gICAgaml0dGVyOiAwLFxuICAgIHBhY2tldExvc3M6IDAsXG4gICAgbGFzdFVwZGF0ZVRpbWU6IDAsXG4gICAgdXBkYXRlQ291bnQ6IDAsXG4gICAgbWlzc2VkVXBkYXRlczogMFxufTtcblxuLy8g0JHRg9GE0LXRgNGLINC00LvRjyDQutCw0LbQtNC+0LPQviDQvtCx0YrQtdC60YLQsFxuY29uc3Qgb2JqZWN0QnVmZmVycyA9IG5ldyBNYXAoKTsgLy8gaWQgLT4gT2JqZWN0QnVmZmVyXG5cbi8vINCa0LvQsNGB0YEg0LTQu9GPINGF0YDQsNC90LXQvdC40Y8g0LTQsNC90L3Ri9GFINC+0LHRitC10LrRgtCwXG5jbGFzcyBPYmplY3RCdWZmZXIge1xuICAgIGNvbnN0cnVjdG9yKG9iamVjdElkKSB7XG4gICAgICAgIHRoaXMuaWQgPSBvYmplY3RJZDtcbiAgICAgICAgdGhpcy5zZXJ2ZXJVcGRhdGVzID0gW107ICAgICAgICAvLyDQnNCw0YHRgdC40LIg0YHQtdGA0LLQtdGA0L3Ri9GFINC+0LHQvdC+0LLQu9C10L3QuNC5INGBINCy0YDQtdC80LXQvdC90YvQvNC4INC80LXRgtC60LDQvNC4XG4gICAgICAgIHRoaXMucHJlZGljdGVkU3RhdGUgPSBudWxsOyAgICAgLy8g0J/RgNC10LTRgdC60LDQt9Cw0L3QvdC+0LUg0YHQvtGB0YLQvtGP0L3QuNC1XG4gICAgICAgIHRoaXMudmlzdWFsU3RhdGUgPSBudWxsOyAgICAgICAgLy8g0JLQuNC30YPQsNC70YzQvdC+0LUg0YHQvtGB0YLQvtGP0L3QuNC1IG1lc2gn0LBcbiAgICAgICAgdGhpcy5sYXN0Q29ycmVjdGlvblRpbWUgPSAwOyAgICAvLyDQktGA0LXQvNGPINC/0L7RgdC70LXQtNC90LXQuSDQutC+0YDRgNC10LrRhtC40LhcbiAgICAgICAgdGhpcy5jb3JyZWN0aW9uVmVsb2NpdHkgPSB7IHg6IDAsIHk6IDAsIHo6IDAgfTsgLy8g0KHQutC+0YDQvtGB0YLRjCDQutC+0YDRgNC10LrRhtC40LggbWVzaCfQsFxuICAgICAgICB0aGlzLm1heEJ1ZmZlclNpemUgPSAxMDsgICAgICAgIC8vINCc0LDQutGB0LjQvNCw0LvRjNC90YvQuSDRgNCw0LfQvNC10YAg0LHRg9GE0LXRgNCwXG4gICAgfVxuICAgIFxuICAgIC8vINCU0L7QsdCw0LLQuNGC0Ywg0YHQtdGA0LLQtdGA0L3QvtC1INC+0LHQvdC+0LLQu9C10L3QuNC1XG4gICAgYWRkU2VydmVyVXBkYXRlKHBvc2l0aW9uLCB2ZWxvY2l0eSwgdGltZXN0YW1wLCBzZXJ2ZXJUaW1lKSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZSA9IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7IC4uLnBvc2l0aW9uIH0sXG4gICAgICAgICAgICB2ZWxvY2l0eTogdmVsb2NpdHkgPyB7IC4uLnZlbG9jaXR5IH0gOiB7IHg6IDAsIHk6IDAsIHo6IDAgfSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLFxuICAgICAgICAgICAgc2VydmVyVGltZTogc2VydmVyVGltZSxcbiAgICAgICAgICAgIHJlY2VpdmVkQXQ6IERhdGUubm93KClcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuc2VydmVyVXBkYXRlcy5wdXNoKHVwZGF0ZSk7XG4gICAgICAgIFxuICAgICAgICAvLyDQodC+0YDRgtC40YDRg9C10Lwg0L/QviDQstGA0LXQvNC10L3QuCDRgdC10YDQstC10YDQsFxuICAgICAgICB0aGlzLnNlcnZlclVwZGF0ZXMuc29ydCgoYSwgYikgPT4gYS5zZXJ2ZXJUaW1lIC0gYi5zZXJ2ZXJUaW1lKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCe0LPRgNCw0L3QuNGH0LjQstCw0LXQvCDRgNCw0LfQvNC10YAg0LHRg9GE0LXRgNCwXG4gICAgICAgIGlmICh0aGlzLnNlcnZlclVwZGF0ZXMubGVuZ3RoID4gdGhpcy5tYXhCdWZmZXJTaXplKSB7XG4gICAgICAgICAgICB0aGlzLnNlcnZlclVwZGF0ZXMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyDQn9C+0LvRg9GH0LjRgtGMINC40L3RgtC10YDQv9C+0LvQuNGA0L7QstCw0L3QvdC+0LUg0YHQvtGB0YLQvtGP0L3QuNC1INC90LAg0L7Qv9GA0LXQtNC10LvQtdC90L3QvtC1INCy0YDQtdC80Y9cbiAgICBnZXRJbnRlcnBvbGF0ZWRTdGF0ZSh0YXJnZXRUaW1lKSB7XG4gICAgICAgIGlmICh0aGlzLnNlcnZlclVwZGF0ZXMubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuc2VydmVyVXBkYXRlcy5sZW5ndGggPT09IDEpIHJldHVybiB0aGlzLnNlcnZlclVwZGF0ZXNbMF07XG4gICAgICAgIFxuICAgICAgICAvLyDQndCw0LnRgtC4INC00LLQsCDQsdC70LjQttCw0LnRiNC40YUg0L7QsdC90L7QstC70LXQvdC40Y9cbiAgICAgICAgbGV0IGJlZm9yZSA9IG51bGwsIGFmdGVyID0gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zZXJ2ZXJVcGRhdGVzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2VydmVyVXBkYXRlc1tpXS5zZXJ2ZXJUaW1lIDw9IHRhcmdldFRpbWUgJiYgXG4gICAgICAgICAgICAgICAgdGhpcy5zZXJ2ZXJVcGRhdGVzW2kgKyAxXS5zZXJ2ZXJUaW1lID49IHRhcmdldFRpbWUpIHtcbiAgICAgICAgICAgICAgICBiZWZvcmUgPSB0aGlzLnNlcnZlclVwZGF0ZXNbaV07XG4gICAgICAgICAgICAgICAgYWZ0ZXIgPSB0aGlzLnNlcnZlclVwZGF0ZXNbaSArIDFdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyDQldGB0LvQuCDQvdC1INC90LDRiNC70Lgg0L/QvtC00YXQvtC00Y/RidC40Lkg0LjQvdGC0LXRgNCy0LDQuywg0LjRgdC/0L7Qu9GM0LfRg9C10Lwg0Y3QutGB0YLRgNCw0L/QvtC70Y/RhtC40Y5cbiAgICAgICAgaWYgKCFiZWZvcmUgfHwgIWFmdGVyKSB7XG4gICAgICAgICAgICBjb25zdCBsYXRlc3QgPSB0aGlzLnNlcnZlclVwZGF0ZXNbdGhpcy5zZXJ2ZXJVcGRhdGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgY29uc3QgZGVsdGFUaW1lID0gKHRhcmdldFRpbWUgLSBsYXRlc3Quc2VydmVyVGltZSkgLyAxMDAwLjA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCe0LPRgNCw0L3QuNGH0LjQstCw0LXQvCDRjdC60YHRgtGA0LDQv9C+0LvRj9GG0LjRjlxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKGRlbHRhVGltZSkgPiBQSFlTSUNTX0NPTkZJRy5USU1FLk1BWF9FWFRSQVBPTEFUSU9OIC8gMTAwMC4wKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhdGVzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXh0cmFwb2xhdGVTdGF0ZShsYXRlc3QsIGRlbHRhVGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vINCY0L3RgtC10YDQv9C+0LvRj9GG0LjRjyDQvNC10LbQtNGDINC00LLRg9C80Y8g0YLQvtGH0LrQsNC80LhcbiAgICAgICAgY29uc3QgdGltZURpZmYgPSBhZnRlci5zZXJ2ZXJUaW1lIC0gYmVmb3JlLnNlcnZlclRpbWU7XG4gICAgICAgIGlmICh0aW1lRGlmZiA9PT0gMCkgcmV0dXJuIGJlZm9yZTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHQgPSAodGFyZ2V0VGltZSAtIGJlZm9yZS5zZXJ2ZXJUaW1lKSAvIHRpbWVEaWZmO1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcnBvbGF0ZVN0YXRlcyhiZWZvcmUsIGFmdGVyLCB0KTtcbiAgICB9XG4gICAgXG4gICAgLy8g0K3QutGB0YLRgNCw0L/QvtC70Y/RhtC40Y8g0YHQvtGB0YLQvtGP0L3QuNGPXG4gICAgZXh0cmFwb2xhdGVTdGF0ZShzdGF0ZSwgZGVsdGFUaW1lKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgIHg6IHN0YXRlLnBvc2l0aW9uLnggKyBzdGF0ZS52ZWxvY2l0eS54ICogZGVsdGFUaW1lLFxuICAgICAgICAgICAgICAgIHk6IHN0YXRlLnBvc2l0aW9uLnkgKyBzdGF0ZS52ZWxvY2l0eS55ICogZGVsdGFUaW1lLFxuICAgICAgICAgICAgICAgIHo6IHN0YXRlLnBvc2l0aW9uLnogKyBzdGF0ZS52ZWxvY2l0eS56ICogZGVsdGFUaW1lXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVsb2NpdHk6IHsgLi4uc3RhdGUudmVsb2NpdHkgfSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogc3RhdGUudGltZXN0YW1wICsgZGVsdGFUaW1lICogMTAwMCxcbiAgICAgICAgICAgIHNlcnZlclRpbWU6IHN0YXRlLnNlcnZlclRpbWUgKyBkZWx0YVRpbWUgKiAxMDAwXG4gICAgICAgIH07XG4gICAgfVxuICAgIFxuICAgIC8vINCY0L3RgtC10YDQv9C+0LvRj9GG0LjRjyDQvNC10LbQtNGDINC00LLRg9C80Y8g0YHQvtGB0YLQvtGP0L3QuNGP0LzQuFxuICAgIGludGVycG9sYXRlU3RhdGVzKHN0YXRlMSwgc3RhdGUyLCB0KSB7XG4gICAgICAgIHQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB0KSk7IC8vINCe0LPRgNCw0L3QuNGH0LjQstCw0LXQvCB0INC+0YIgMCDQtNC+IDFcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgIHg6IHN0YXRlMS5wb3NpdGlvbi54ICsgKHN0YXRlMi5wb3NpdGlvbi54IC0gc3RhdGUxLnBvc2l0aW9uLngpICogdCxcbiAgICAgICAgICAgICAgICB5OiBzdGF0ZTEucG9zaXRpb24ueSArIChzdGF0ZTIucG9zaXRpb24ueSAtIHN0YXRlMS5wb3NpdGlvbi55KSAqIHQsXG4gICAgICAgICAgICAgICAgejogc3RhdGUxLnBvc2l0aW9uLnogKyAoc3RhdGUyLnBvc2l0aW9uLnogLSBzdGF0ZTEucG9zaXRpb24ueikgKiB0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVsb2NpdHk6IHtcbiAgICAgICAgICAgICAgICB4OiBzdGF0ZTEudmVsb2NpdHkueCArIChzdGF0ZTIudmVsb2NpdHkueCAtIHN0YXRlMS52ZWxvY2l0eS54KSAqIHQsXG4gICAgICAgICAgICAgICAgeTogc3RhdGUxLnZlbG9jaXR5LnkgKyAoc3RhdGUyLnZlbG9jaXR5LnkgLSBzdGF0ZTEudmVsb2NpdHkueSkgKiB0LFxuICAgICAgICAgICAgICAgIHo6IHN0YXRlMS52ZWxvY2l0eS56ICsgKHN0YXRlMi52ZWxvY2l0eS56IC0gc3RhdGUxLnZlbG9jaXR5LnopICogdFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogc3RhdGUxLnRpbWVzdGFtcCArIChzdGF0ZTIudGltZXN0YW1wIC0gc3RhdGUxLnRpbWVzdGFtcCkgKiB0LFxuICAgICAgICAgICAgc2VydmVyVGltZTogc3RhdGUxLnNlcnZlclRpbWUgKyAoc3RhdGUyLnNlcnZlclRpbWUgLSBzdGF0ZTEuc2VydmVyVGltZSkgKiB0XG4gICAgICAgIH07XG4gICAgfVxuICAgIFxuICAgIC8vINCe0YfQuNGB0YLQuNGC0Ywg0YHRgtCw0YDRi9C1INC+0LHQvdC+0LLQu9C10L3QuNGPXG4gICAgY2xlYW5PbGRVcGRhdGVzKGN1cnJlbnRUaW1lKSB7XG4gICAgICAgIGNvbnN0IGN1dG9mZlRpbWUgPSBjdXJyZW50VGltZSAtIFBIWVNJQ1NfQ09ORklHLlRJTUUuUFJFRElDVElPTl9XSU5ET1cgKiAyO1xuICAgICAgICB0aGlzLnNlcnZlclVwZGF0ZXMgPSB0aGlzLnNlcnZlclVwZGF0ZXMuZmlsdGVyKHVwZGF0ZSA9PiBcbiAgICAgICAgICAgIHVwZGF0ZS5zZXJ2ZXJUaW1lID4gY3V0b2ZmVGltZVxuICAgICAgICApO1xuICAgIH1cbn1cblxuLy8g0JjQvdC40YbQuNCw0LvQuNC30LDRhtC40Y8g0L3QvtCy0L7QuSDRgdC40YHRgtC10LzRiyDRhNC40LfQuNC60LhcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0QW1tbygpIHtcbiAgICAvLyDQo9Cx0LjRgNCw0LXQvCDRgdC/0LDQvCDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQuFxuICAgIFxuICAgIGlmICghd2luZG93LkFtbW8pIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIltQaHlzaWNzXSBBbW1vLmpzINC90LUg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC9XCIpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIFxuICAgIC8vINCh0L7Qt9C00LDQtdC8INGE0LjQt9C40YfQtdGB0LrQuNC5INC80LjRgFxuICAgIGNvbnN0IGNvbGxpc2lvbkNvbmZpZ3VyYXRpb24gPSBuZXcgQW1tby5idERlZmF1bHRDb2xsaXNpb25Db25maWd1cmF0aW9uKCk7XG4gICAgY29uc3QgZGlzcGF0Y2hlciA9IG5ldyBBbW1vLmJ0Q29sbGlzaW9uRGlzcGF0Y2hlcihjb2xsaXNpb25Db25maWd1cmF0aW9uKTtcbiAgICBjb25zdCBvdmVybGFwcGluZ1BhaXJDYWNoZSA9IG5ldyBBbW1vLmJ0RGJ2dEJyb2FkcGhhc2UoKTtcbiAgICBjb25zdCBzb2x2ZXIgPSBuZXcgQW1tby5idFNlcXVlbnRpYWxJbXB1bHNlQ29uc3RyYWludFNvbHZlcigpO1xuICAgIFxuICAgIHBoeXNpY3NXb3JsZCA9IG5ldyBBbW1vLmJ0RGlzY3JldGVEeW5hbWljc1dvcmxkKFxuICAgICAgICBkaXNwYXRjaGVyLCBvdmVybGFwcGluZ1BhaXJDYWNoZSwgc29sdmVyLCBjb2xsaXNpb25Db25maWd1cmF0aW9uXG4gICAgKTtcbiAgICBcbiAgICAvLyDQo9GB0YLQsNC90LDQstC70LjQstCw0LXQvCDQs9GA0LDQstC40YLQsNGG0LjRjlxuICAgIHBoeXNpY3NXb3JsZC5zZXRHcmF2aXR5KG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAtOS44MSwgMCkpO1xuICAgIFxuICAgIHJldHVybiB0cnVlO1xufVxuXG4vLyDQn9C+0LvRg9GH0LjRgtGMINGC0LXQutGD0YnQtdC1INGB0LXRgNCy0LXRgNC90L7QtSDQstGA0LXQvNGPINGBINGD0YfQtdGC0L7QvCDRgdC80LXRidC10L3QuNGPXG5mdW5jdGlvbiBnZXRFc3RpbWF0ZWRTZXJ2ZXJUaW1lKCkge1xuICAgIHJldHVybiBEYXRlLm5vdygpICsgc2VydmVyVGltZU9mZnNldDtcbn1cblxuLy8g0J7QsdC90L7QstC40YLRjCDRgdC80LXRidC10L3QuNC1INGB0LXRgNCy0LXRgNC90L7Qs9C+INCy0YDQtdC80LXQvdC4XG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlU2VydmVyVGltZU9mZnNldChzZXJ2ZXJUaW1lLCBjbGllbnRUaW1lID0gRGF0ZS5ub3coKSkge1xuICAgIGNvbnN0IG5ld09mZnNldCA9IHNlcnZlclRpbWUgLSBjbGllbnRUaW1lO1xuICAgIFxuICAgIC8vINCf0LvQsNCy0L3QviDQvtCx0L3QvtCy0LvRj9C10Lwg0YHQvNC10YnQtdC90LjQtSDRh9GC0L7QsdGLINC40LfQsdC10LbQsNGC0Ywg0YDQtdC30LrQuNGFINGB0LrQsNGH0LrQvtCyXG4gICAgaWYgKHNlcnZlclRpbWVPZmZzZXQgPT09IDApIHtcbiAgICAgICAgc2VydmVyVGltZU9mZnNldCA9IG5ld09mZnNldDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzZXJ2ZXJUaW1lT2Zmc2V0ID0gc2VydmVyVGltZU9mZnNldCAqIDAuOSArIG5ld09mZnNldCAqIDAuMTtcbiAgICB9XG4gICAgXG4gICAgLy8g0KPQsdC40YDQsNC10Lwg0YHQv9Cw0Lwg0LvQvtCz0L7QsiDRgdC80LXRidC10L3QuNGPINCy0YDQtdC80LXQvdC4XG59XG5cbi8vINCe0LHRgNCw0LHQvtGC0LrQsCDQvtCx0L3QvtCy0LvQtdC90LjRjyDQvtCx0YrQtdC60YLQsCDRgSDRgdC10YDQstC10YDQsFxuZXhwb3J0IGZ1bmN0aW9uIHJlY2VpdmVPYmplY3RVcGRhdGUoZGF0YSkge1xuICAgIGlmICghZGF0YSB8fCAhZGF0YS5pZCkge1xuICAgICAgICBjb25zb2xlLndhcm4oYFtQaHlzaWNzXSDQntCx0YrQtdC60YIgJHtkYXRhPy5pZCB8fCAndW5kZWZpbmVkJ30gLSDQvdC10LrQvtGA0YDQtdC60YLQvdGL0LUg0LTQsNC90L3Ri9C1YCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgY29uc3Qgb2JqID0gb2JqZWN0c1tkYXRhLmlkXTtcbiAgICBpZiAoIW9iaikge1xuICAgICAgICBjb25zb2xlLndhcm4oYFtQaHlzaWNzXSDQntCx0YrQtdC60YIgJHtkYXRhLmlkfSDQvdC1INC90LDQudC00LXQvSDQsiDQutC+0LvQu9C10LrRhtC40LhgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICAvLyDQn9C+0LvRg9GH0LDQtdC8INC40LvQuCDRgdC+0LfQtNCw0LXQvCDQsdGD0YTQtdGAINC00LvRjyDQvtCx0YrQtdC60YLQsFxuICAgIGxldCBidWZmZXIgPSBvYmplY3RCdWZmZXJzLmdldChkYXRhLmlkKTtcbiAgICBpZiAoIWJ1ZmZlcikge1xuICAgICAgICBidWZmZXIgPSBuZXcgT2JqZWN0QnVmZmVyKGRhdGEuaWQpO1xuICAgICAgICBvYmplY3RCdWZmZXJzLnNldChkYXRhLmlkLCBidWZmZXIpO1xuICAgIH1cbiAgICBcbiAgICAvLyDQlNCw0L3QvdGL0LUg0L4g0L/QvtC30LjRhtC40Lgg0LIg0LXQtNC40L3QvtC8INGE0L7RgNC80LDRgtC1OiBwb3NpdGlvbjogeyB4LCB5LCB6IH1cbiAgICBjb25zdCBwb3NpdGlvbiA9IHsgXG4gICAgICAgIHg6IGRhdGEucG9zaXRpb24/LnggfHwgMCwgXG4gICAgICAgIHk6IGRhdGEucG9zaXRpb24/LnkgfHwgMCwgXG4gICAgICAgIHo6IGRhdGEucG9zaXRpb24/LnogfHwgMCBcbiAgICB9O1xuICAgIFxuICAgIC8vINCk0LjQu9GM0YLRgNGD0LXQvCDQvdC10LrQvtGA0YDQtdC60YLQvdGL0LUg0LTQsNC90L3Ri9C1IC0g0LXRgdC70Lgg0LLRgdC1INC60L7QvtGA0LTQuNC90LDRgtGLINC90YPQu9C10LLRi9C1LCDQuNCz0L3QvtGA0LjRgNGD0LXQvFxuICAgIGNvbnN0IGhhc0dhcmJhZ2VEYXRhID0gcG9zaXRpb24ueCA9PT0gMCAmJiBwb3NpdGlvbi55ID09PSAwICYmIHBvc2l0aW9uLnogPT09IDA7XG4gICAgXG4gICAgaWYgKGhhc0dhcmJhZ2VEYXRhKSB7XG4gICAgICAgIC8vINCb0L7Qs9C40YDRg9C10Lwg0LzRg9GB0L7RgNC90YvQtSDQtNCw0L3QvdGL0LUg0LIg0YLQtdC70LXQvNC10YLRgNC40Y5cbiAgICAgICAgY2xpZW50VGVsZW1ldHJ5LmxvZ1NlcnZlclVwZGF0ZShkYXRhLmlkLCBwb3NpdGlvbiwgdmVsb2NpdHksIHRydWUpO1xuICAgICAgICAvLyDQmNCz0L3QvtGA0LjRgNGD0LXQvCDQvNGD0YHQvtGA0L3Ri9C1INC00LDQvdC90YvQtSDRgSDQvdGD0LvQtdCy0YvQvNC4INC/0L7Qt9C40YbQuNGP0LzQuFxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vINCQ0LTQsNC/0YLQuNGA0YPQtdC8INC00LDQvdC90YvQtSDQviDRgdC60L7RgNC+0YHRgtC4XG4gICAgY29uc3QgdmVsb2NpdHkgPSBkYXRhLnZlbG9jaXR5IHx8IHsgeDogMCwgeTogMCwgejogMCB9O1xuICAgIGNvbnN0IHNlcnZlclRpbWUgPSBkYXRhLnNlcnZlcl90aW1lIHx8IGdldEVzdGltYXRlZFNlcnZlclRpbWUoKTtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBkYXRhLnRpbWVzdGFtcCB8fCBEYXRlLm5vdygpO1xuICAgIFxuICAgIGJ1ZmZlci5hZGRTZXJ2ZXJVcGRhdGUocG9zaXRpb24sIHZlbG9jaXR5LCB0aW1lc3RhbXAsIHNlcnZlclRpbWUpO1xuICAgIFxuICAgIC8vINCb0L7Qs9C40YDRg9C10Lwg0YHQtdGA0LLQtdGA0L3QvtC1INC+0LHQvdC+0LLQu9C10L3QuNC1INCyINC00LjQsNCz0L3QvtGB0YLQuNC60YNcbiAgICBkaWFnbm9zdGljcy5sb2dTZXJ2ZXJVcGRhdGUoZGF0YS5pZCwgcG9zaXRpb24sIHZlbG9jaXR5LCBzZXJ2ZXJUaW1lKTtcbiAgICBcbiAgICAvLyDQm9C+0LPQuNGA0YPQtdC8INCy0LDQu9C40LTQvdC+0LUg0YHQtdGA0LLQtdGA0L3QvtC1INC+0LHQvdC+0LLQu9C10L3QuNC1INCyINGC0LXQu9C10LzQtdGC0YDQuNGOICjRgtC+0LvRjNC60L4g0LXRgdC70Lgg0LLQutC70Y7Rh9C10L0g0L/QvtC00YDQvtCx0L3Ri9C5INGA0LXQttC40LwpXG4gICAgaWYgKGNsaWVudFRlbGVtZXRyeS52ZXJib3NlTW9kZSkge1xuICAgICAgICBjbGllbnRUZWxlbWV0cnkubG9nU2VydmVyVXBkYXRlKGRhdGEuaWQsIHBvc2l0aW9uLCB2ZWxvY2l0eSwgZmFsc2UpO1xuICAgIH1cbiAgICBcbiAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0YHRgtCw0YLQuNGB0YLQuNC60YMg0YHQtdGC0LhcbiAgICB1cGRhdGVOZXR3b3JrU3RhdHMoKTtcbiAgICBcbiAgICAvLyDQn9GA0LjQvNC10L3Rj9C10Lwg0L7QsdC90L7QstC70LXQvdC40LUg0LIg0LfQsNCy0LjRgdC40LzQvtGB0YLQuCDQvtGCINGC0LjQv9CwINGE0LjQt9C40LrQuFxuICAgIHN3aXRjaCAob2JqLnBoeXNpY3NCeSkge1xuICAgICAgICBjYXNlICdib3RoJzpcbiAgICAgICAgICAgIGhhbmRsZUJvdGhQaHlzaWNzVXBkYXRlKG9iaiwgYnVmZmVyKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdidWxsZXQnOlxuICAgICAgICAgICAgaGFuZGxlQnVsbGV0UGh5c2ljc1VwZGF0ZShvYmosIGJ1ZmZlcik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYW1tbyc6XG4gICAgICAgICAgICBoYW5kbGVBbW1vUGh5c2ljc1VwZGF0ZShvYmosIGJ1ZmZlcik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgW1BoeXNpY3NdINCd0LXQuNC30LLQtdGB0YLQvdGL0Lkg0YLQuNC/INGE0LjQt9C40LrQuDogJHtvYmoucGh5c2ljc0J5fWApO1xuICAgIH1cbn1cblxuLy8g0J7QsdGA0LDQsdC+0YLQutCwINCz0LjQsdGA0LjQtNC90L7QuSDRhNC40LfQuNC60LggKGJvdGgpXG5mdW5jdGlvbiBoYW5kbGVCb3RoUGh5c2ljc1VwZGF0ZShvYmosIGJ1ZmZlcikge1xuICAgIGlmICghb2JqLmJvZHkpIHJldHVybjtcbiAgICBcbiAgICBjb25zdCBjdXJyZW50VGltZSA9IGdldEVzdGltYXRlZFNlcnZlclRpbWUoKTtcbiAgICBjb25zdCByZW5kZXJUaW1lID0gY3VycmVudFRpbWUgKyBQSFlTSUNTX0NPTkZJRy5USU1FLlBSRURJQ1RJT05fV0lORE9XO1xuICAgIFxuICAgIC8vINCf0L7Qu9GD0YfQsNC10Lwg0L/RgNC10LTRgdC60LDQt9Cw0L3QvdC+0LUg0YHQvtGB0YLQvtGP0L3QuNC1INC90LAg0LzQvtC80LXQvdGCINC+0YLRgNC40YHQvtCy0LrQuFxuICAgIGNvbnN0IHByZWRpY3RlZFN0YXRlID0gYnVmZmVyLmdldEludGVycG9sYXRlZFN0YXRlKHJlbmRlclRpbWUpO1xuICAgIGlmICghcHJlZGljdGVkU3RhdGUpIHJldHVybjtcbiAgICBcbiAgICAvLyDQn9C+0LvRg9GH0LDQtdC8INGC0LXQutGD0YnQtdC1INC/0L7Qu9C+0LbQtdC90LjQtSDRhNC40LfQuNGH0LXRgdC60L7Qs9C+INGC0LXQu9CwXG4gICAgY29uc3QgdHJhbnNmb3JtID0gb2JqLmJvZHkuZ2V0V29ybGRUcmFuc2Zvcm0oKTtcbiAgICBjb25zdCBjdXJyZW50UG9zID0gdHJhbnNmb3JtLmdldE9yaWdpbigpO1xuICAgIFxuICAgIC8vINCS0YvRh9C40YHQu9GP0LXQvCDRgNCw0YHRgdGC0L7Rj9C90LjQtSDQvNC10LbQtNGDINC/0YDQtdC00YHQutCw0LfQsNC90L3QvtC5INC4INGC0LXQutGD0YnQtdC5INC/0L7Qt9C40YbQuNC10LlcbiAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydChcbiAgICAgICAgTWF0aC5wb3cocHJlZGljdGVkU3RhdGUucG9zaXRpb24ueCAtIGN1cnJlbnRQb3MueCgpLCAyKSArXG4gICAgICAgIE1hdGgucG93KHByZWRpY3RlZFN0YXRlLnBvc2l0aW9uLnkgLSBjdXJyZW50UG9zLnkoKSwgMikgK1xuICAgICAgICBNYXRoLnBvdyhwcmVkaWN0ZWRTdGF0ZS5wb3NpdGlvbi56IC0gY3VycmVudFBvcy56KCksIDIpXG4gICAgKTtcbiAgICBcbiAgICAvLyDQotGA0LXRhdGD0YDQvtCy0L3QtdCy0LDRjyDRgdC40YHRgtC10LzQsCDQutC+0YDRgNC10LrRhtC40LhcbiAgICBpZiAoZGlzdGFuY2UgPiBQSFlTSUNTX0NPTkZJRy5DT1JSRUNUSU9OLlRFTEVQT1JUX1RIUkVTSE9MRCkge1xuICAgICAgICAvLyDQo9GA0L7QstC10L3RjCAzOiDQotC10LvQtdC/0L7RgNGC0LDRhtC40Y8g0L/RgNC4INC+0YfQtdC90Ywg0LHQvtC70YzRiNC40YUg0YDQsNGB0YXQvtC20LTQtdC90LjRj9GFXG4gICAgICAgIGRpYWdub3N0aWNzLmxvZ1RlbGVwb3J0KGJ1ZmZlci5pZCwgXG4gICAgICAgICAgICB7eDogY3VycmVudFBvcy54KCksIHk6IGN1cnJlbnRQb3MueSgpLCB6OiBjdXJyZW50UG9zLnooKX0sIFxuICAgICAgICAgICAgcHJlZGljdGVkU3RhdGUucG9zaXRpb24sIFxuICAgICAgICAgICAgJ2Rpc3RhbmNlX3RocmVzaG9sZCdcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCb0L7Qs9C40YDRg9C10Lwg0YLQtdC70LXQv9C+0YDRgtCw0YbQuNGOINCyINGC0LXQu9C10LzQtdGC0YDQuNGOICjQstGB0LXQs9C00LAgLSDRjdGC0L4g0LrRgNC40YLQuNGH0LXRgdC60LDRjyDQvtGI0LjQsdC60LApXG4gICAgICAgIGNsaWVudFRlbGVtZXRyeS5sb2dDb3JyZWN0aW9uKGJ1ZmZlci5pZCwgXG4gICAgICAgICAgICB7eDogY3VycmVudFBvcy54KCksIHk6IGN1cnJlbnRQb3MueSgpLCB6OiBjdXJyZW50UG9zLnooKX0sIFxuICAgICAgICAgICAgcHJlZGljdGVkU3RhdGUucG9zaXRpb24sIFxuICAgICAgICAgICAgJ3RlbGVwb3J0JywgXG4gICAgICAgICAgICBkaXN0YW5jZVxuICAgICAgICApO1xuICAgICAgICB0ZWxlcG9ydFBoeXNpY3NCb2R5KG9iai5ib2R5LCBwcmVkaWN0ZWRTdGF0ZS5wb3NpdGlvbiwgcHJlZGljdGVkU3RhdGUudmVsb2NpdHkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChkaXN0YW5jZSA+IFBIWVNJQ1NfQ09ORklHLkNPUlJFQ1RJT04uSEFSRF9DT1JSRUNUSU9OX1RIUkVTSE9MRCkge1xuICAgICAgICAvLyDQo9GA0L7QstC10L3RjCAyOiDQltC10YHRgtC60LDRjyDQutC+0YDRgNC10LrRhtC40Y8g0L/RgNC4INGB0YDQtdC00L3QuNGFINGA0LDRgdGF0L7QttC00LXQvdC40Y/RhVxuICAgICAgICBkaWFnbm9zdGljcy5sb2dDb3JyZWN0aW9uKGJ1ZmZlci5pZCwgXG4gICAgICAgICAgICB7eDogY3VycmVudFBvcy54KCksIHk6IGN1cnJlbnRQb3MueSgpLCB6OiBjdXJyZW50UG9zLnooKX0sIFxuICAgICAgICAgICAgcHJlZGljdGVkU3RhdGUucG9zaXRpb24sIFxuICAgICAgICAgICAgZGlzdGFuY2UsIFxuICAgICAgICAgICAgJ2hhcmQnXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICAvLyDQm9C+0LPQuNGA0YPQtdC8INC20LXRgdGC0LrRg9GOINC60L7RgNGA0LXQutGG0LjRjiDQsiDRgtC10LvQtdC80LXRgtGA0LjRjiAo0LLRgdC10LPQtNCwIC0g0LLQsNC20L3QsNGPINC+0YjQuNCx0LrQsClcbiAgICAgICAgY2xpZW50VGVsZW1ldHJ5LmxvZ0NvcnJlY3Rpb24oYnVmZmVyLmlkLCBcbiAgICAgICAgICAgIHt4OiBjdXJyZW50UG9zLngoKSwgeTogY3VycmVudFBvcy55KCksIHo6IGN1cnJlbnRQb3MueigpfSwgXG4gICAgICAgICAgICBwcmVkaWN0ZWRTdGF0ZS5wb3NpdGlvbiwgXG4gICAgICAgICAgICAnaGFyZCcsIFxuICAgICAgICAgICAgZGlzdGFuY2VcbiAgICAgICAgKTtcbiAgICAgICAgYXBwbHlIYXJkQ29ycmVjdGlvbihvYmouYm9keSwgcHJlZGljdGVkU3RhdGUsIGRpc3RhbmNlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZGlzdGFuY2UgPiBQSFlTSUNTX0NPTkZJRy5DT1JSRUNUSU9OLlBPU0lUSU9OX1RIUkVTSE9MRCkge1xuICAgICAgICAvLyDQo9GA0L7QstC10L3RjCAxOiDQn9C70LDQstC90LDRjyDQutC+0YDRgNC10LrRhtC40Y8g0L/RgNC4INC80LDQu9GL0YUg0YDQsNGB0YXQvtC20LTQtdC90LjRj9GFXG4gICAgICAgIGRpYWdub3N0aWNzLmxvZ0NvcnJlY3Rpb24oYnVmZmVyLmlkLCBcbiAgICAgICAgICAgIHt4OiBjdXJyZW50UG9zLngoKSwgeTogY3VycmVudFBvcy55KCksIHo6IGN1cnJlbnRQb3MueigpfSwgXG4gICAgICAgICAgICBwcmVkaWN0ZWRTdGF0ZS5wb3NpdGlvbiwgXG4gICAgICAgICAgICBkaXN0YW5jZSwgXG4gICAgICAgICAgICAnc21vb3RoJ1xuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgLy8g0JvQvtCz0LjRgNGD0LXQvCDQv9C70LDQstC90YPRjiDQutC+0YDRgNC10LrRhtC40Y4g0LIg0YLQtdC70LXQvNC10YLRgNC40Y4gKNGC0L7Qu9GM0LrQviDQsiDQv9C+0LTRgNC+0LHQvdC+0Lwg0YDQtdC20LjQvNC1KVxuICAgICAgICBpZiAoY2xpZW50VGVsZW1ldHJ5LnZlcmJvc2VNb2RlKSB7XG4gICAgICAgICAgICBjbGllbnRUZWxlbWV0cnkubG9nQ29ycmVjdGlvbihidWZmZXIuaWQsIFxuICAgICAgICAgICAgICAgIHt4OiBjdXJyZW50UG9zLngoKSwgeTogY3VycmVudFBvcy55KCksIHo6IGN1cnJlbnRQb3MueigpfSwgXG4gICAgICAgICAgICAgICAgcHJlZGljdGVkU3RhdGUucG9zaXRpb24sIFxuICAgICAgICAgICAgICAgICdzbW9vdGgnLCBcbiAgICAgICAgICAgICAgICBkaXN0YW5jZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBhcHBseVBoeXNpY3NDb3JyZWN0aW9uKG9iai5ib2R5LCBwcmVkaWN0ZWRTdGF0ZSwgZGlzdGFuY2UpO1xuICAgIH1cbiAgICBcbiAgICAvLyDQodC+0YXRgNCw0L3Rj9C10Lwg0L/RgNC10LTRgdC60LDQt9Cw0L3QvdC+0LUg0YHQvtGB0YLQvtGP0L3QuNC1INC00LvRjyDQstC40LfRg9Cw0LvRjNC90L7QuSDQutC+0YDRgNC10LrRhtC40LhcbiAgICBidWZmZXIucHJlZGljdGVkU3RhdGUgPSBwcmVkaWN0ZWRTdGF0ZTtcbn1cblxuLy8g0J7QsdGA0LDQsdC+0YLQutCwINGB0LXRgNCy0LXRgNC90L7QuSDRhNC40LfQuNC60LggKGJ1bGxldClcbmZ1bmN0aW9uIGhhbmRsZUJ1bGxldFBoeXNpY3NVcGRhdGUob2JqLCBidWZmZXIpIHtcbiAgICAvLyDQlNC70Y8gYnVsbGV0LdC+0LHRitC10LrRgtC+0LIg0L/RgNC+0YHRgtC+INC+0LHQvdC+0LLQu9GP0LXQvCBtZXNoINC90LDQv9GA0Y/QvNGD0Y5cbiAgICBjb25zdCBsYXRlc3RVcGRhdGUgPSBidWZmZXIuc2VydmVyVXBkYXRlc1tidWZmZXIuc2VydmVyVXBkYXRlcy5sZW5ndGggLSAxXTtcbiAgICBpZiAoIWxhdGVzdFVwZGF0ZSkgcmV0dXJuO1xuICAgIFxuICAgIGlmIChvYmoubWVzaCkge1xuICAgICAgICBvYmoubWVzaC5wb3NpdGlvbi5zZXQoXG4gICAgICAgICAgICBsYXRlc3RVcGRhdGUucG9zaXRpb24ueCxcbiAgICAgICAgICAgIGxhdGVzdFVwZGF0ZS5wb3NpdGlvbi55LFxuICAgICAgICAgICAgbGF0ZXN0VXBkYXRlLnBvc2l0aW9uLnpcbiAgICAgICAgKTtcbiAgICB9XG59XG5cbi8vINCe0LHRgNCw0LHQvtGC0LrQsCDQutC70LjQtdC90YLRgdC60L7QuSDRhNC40LfQuNC60LggKGFtbW8pXG5mdW5jdGlvbiBoYW5kbGVBbW1vUGh5c2ljc1VwZGF0ZShvYmosIGJ1ZmZlcikge1xuICAgIC8vINCU0LvRjyBhbW1vLdC+0LHRitC10LrRgtC+0LIg0YHQtdGA0LLQtdGA0L3Ri9C1INC+0LHQvdC+0LLQu9C10L3QuNGPINC40LPQvdC+0YDQuNGA0YPQtdC8XG4gICAgLy8g0KTQuNC30LjQutCwINC/0L7Qu9C90L7RgdGC0YzRjiDRg9C/0YDQsNCy0LvRj9C10YLRgdGPINC60LvQuNC10L3RgtC+0Lxcbn1cblxuLy8g0KLQtdC70LXQv9C+0YDRgtCw0YbQuNGPINGE0LjQt9C40YfQtdGB0LrQvtCz0L4g0YLQtdC70LBcbmZ1bmN0aW9uIHRlbGVwb3J0UGh5c2ljc0JvZHkoYm9keSwgcG9zaXRpb24sIHZlbG9jaXR5KSB7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gYm9keS5nZXRXb3JsZFRyYW5zZm9ybSgpO1xuICAgIHRyYW5zZm9ybS5nZXRPcmlnaW4oKS5zZXRWYWx1ZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56KTtcbiAgICBib2R5LnNldFdvcmxkVHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgXG4gICAgaWYgKHZlbG9jaXR5KSB7XG4gICAgICAgIGNvbnN0IGJ0VmVsb2NpdHkgPSBuZXcgQW1tby5idFZlY3RvcjModmVsb2NpdHkueCwgdmVsb2NpdHkueSwgdmVsb2NpdHkueik7XG4gICAgICAgIGJvZHkuc2V0TGluZWFyVmVsb2NpdHkoYnRWZWxvY2l0eSk7XG4gICAgICAgIEFtbW8uZGVzdHJveShidFZlbG9jaXR5KTtcbiAgICB9XG4gICAgXG4gICAgLy8g0JDQutGC0LjQstC40YDRg9C10Lwg0YLQtdC70L4g0L/QvtGB0LvQtSDRgtC10LvQtdC/0L7RgNGC0LDRhtC40LhcbiAgICBib2R5LmFjdGl2YXRlKHRydWUpO1xufVxuXG4vLyDQn9GA0LjQvNC10L3QtdC90LjQtSDQttC10YHRgtC60L7QuSDQutC+0YDRgNC10LrRhtC40Lgg0Log0YTQuNC30LjRh9C10YHQutC+0LzRgyDRgtC10LvRg1xuZnVuY3Rpb24gYXBwbHlIYXJkQ29ycmVjdGlvbihib2R5LCB0YXJnZXRTdGF0ZSwgZGlzdGFuY2UpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBib2R5LmdldFdvcmxkVHJhbnNmb3JtKCk7XG4gICAgY29uc3QgY3VycmVudFBvcyA9IHRyYW5zZm9ybS5nZXRPcmlnaW4oKTtcbiAgICBcbiAgICAvLyDQlNC70Y8g0LbQtdGB0YLQutC+0Lkg0LrQvtGA0YDQtdC60YbQuNC4INC/0LXRgNC10LzQtdGJ0LDQtdC8INC+0LHRitC10LrRgiDQvdCw0L/RgNGP0LzRg9GOINGBINC60L7RgNGA0LXQutGC0LjRgNC+0LLQutC+0Lkg0YHQutC+0YDQvtGB0YLQuFxuICAgIGNvbnN0IGNvcnJlY3Rpb25GYWN0b3IgPSBQSFlTSUNTX0NPTkZJRy5DT1JSRUNUSU9OLkhBUkRfQ09SUkVDVElPTl9GQUNUT1I7XG4gICAgXG4gICAgY29uc3QgbmV3UG9zID0ge1xuICAgICAgICB4OiBjdXJyZW50UG9zLngoKSArICh0YXJnZXRTdGF0ZS5wb3NpdGlvbi54IC0gY3VycmVudFBvcy54KCkpICogY29ycmVjdGlvbkZhY3RvcixcbiAgICAgICAgeTogY3VycmVudFBvcy55KCkgKyAodGFyZ2V0U3RhdGUucG9zaXRpb24ueSAtIGN1cnJlbnRQb3MueSgpKSAqIGNvcnJlY3Rpb25GYWN0b3IsXG4gICAgICAgIHo6IGN1cnJlbnRQb3MueigpICsgKHRhcmdldFN0YXRlLnBvc2l0aW9uLnogLSBjdXJyZW50UG9zLnooKSkgKiBjb3JyZWN0aW9uRmFjdG9yXG4gICAgfTtcbiAgICBcbiAgICAvLyDQo9GB0YLQsNC90LDQstC70LjQstCw0LXQvCDQvdC+0LLRg9GOINC/0L7Qt9C40YbQuNGOXG4gICAgdHJhbnNmb3JtLmdldE9yaWdpbigpLnNldFZhbHVlKG5ld1Bvcy54LCBuZXdQb3MueSwgbmV3UG9zLnopO1xuICAgIGJvZHkuc2V0V29ybGRUcmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICBcbiAgICAvLyDQmtC+0YDRgNC10LrRgtC40YDRg9C10Lwg0YHQutC+0YDQvtGB0YLRjCDQsiDRgdGC0L7RgNC+0L3RgyDRhtC10LvQtdCy0L7QuVxuICAgIGNvbnN0IGN1cnJlbnRWZWwgPSBib2R5LmdldExpbmVhclZlbG9jaXR5KCk7XG4gICAgY29uc3QgdGFyZ2V0VmVsID0gbmV3IEFtbW8uYnRWZWN0b3IzKFxuICAgICAgICBjdXJyZW50VmVsLngoKSArICh0YXJnZXRTdGF0ZS52ZWxvY2l0eS54IC0gY3VycmVudFZlbC54KCkpICogY29ycmVjdGlvbkZhY3RvcixcbiAgICAgICAgY3VycmVudFZlbC55KCkgKyAodGFyZ2V0U3RhdGUudmVsb2NpdHkueSAtIGN1cnJlbnRWZWwueSgpKSAqIGNvcnJlY3Rpb25GYWN0b3IsXG4gICAgICAgIGN1cnJlbnRWZWwueigpICsgKHRhcmdldFN0YXRlLnZlbG9jaXR5LnogLSBjdXJyZW50VmVsLnooKSkgKiBjb3JyZWN0aW9uRmFjdG9yXG4gICAgKTtcbiAgICBcbiAgICBib2R5LnNldExpbmVhclZlbG9jaXR5KHRhcmdldFZlbCk7XG4gICAgYm9keS5hY3RpdmF0ZSh0cnVlKTtcbiAgICBcbiAgICBBbW1vLmRlc3Ryb3kodGFyZ2V0VmVsKTtcbn1cblxuLy8g0J/RgNC40LzQtdC90LXQvdC40LUg0L/Qu9Cw0LLQvdC+0Lkg0LrQvtGA0YDQtdC60YbQuNC4INC6INGE0LjQt9C40YfQtdGB0LrQvtC80YMg0YLQtdC70YNcbmZ1bmN0aW9uIGFwcGx5UGh5c2ljc0NvcnJlY3Rpb24oYm9keSwgdGFyZ2V0U3RhdGUsIGRpc3RhbmNlKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gYm9keS5nZXRXb3JsZFRyYW5zZm9ybSgpO1xuICAgIGNvbnN0IGN1cnJlbnRQb3MgPSB0cmFuc2Zvcm0uZ2V0T3JpZ2luKCk7XG4gICAgXG4gICAgLy8g0JLRi9GH0LjRgdC70Y/QtdC8INC90LDQv9GA0LDQstC70LXQvdC40LUg0LrQvtGA0YDQtdC60YbQuNC4XG4gICAgY29uc3QgY29ycmVjdGlvbkRpciA9IHtcbiAgICAgICAgeDogdGFyZ2V0U3RhdGUucG9zaXRpb24ueCAtIGN1cnJlbnRQb3MueCgpLFxuICAgICAgICB5OiB0YXJnZXRTdGF0ZS5wb3NpdGlvbi55IC0gY3VycmVudFBvcy55KCksXG4gICAgICAgIHo6IHRhcmdldFN0YXRlLnBvc2l0aW9uLnogLSBjdXJyZW50UG9zLnooKVxuICAgIH07XG4gICAgXG4gICAgLy8g0J3QvtGA0LzQsNC70LjQt9GD0LXQvCDQvdCw0L/RgNCw0LLQu9C10L3QuNC1XG4gICAgY29uc3QgbGVuZ3RoID0gTWF0aC5zcXJ0KGNvcnJlY3Rpb25EaXIueCAqKiAyICsgY29ycmVjdGlvbkRpci55ICoqIDIgKyBjb3JyZWN0aW9uRGlyLnogKiogMik7XG4gICAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIFxuICAgIGNvcnJlY3Rpb25EaXIueCAvPSBsZW5ndGg7XG4gICAgY29ycmVjdGlvbkRpci55IC89IGxlbmd0aDtcbiAgICBjb3JyZWN0aW9uRGlyLnogLz0gbGVuZ3RoO1xuICAgIFxuICAgIC8vINCS0YvRh9C40YHQu9GP0LXQvCDRgdC40LvRgyDQutC+0YDRgNC10LrRhtC40LggKNCw0LTQsNC/0YLQuNCy0L3QviDQsiDQt9Cw0LLQuNGB0LjQvNC+0YHRgtC4INC+0YIg0YDQsNGB0YHRgtC+0Y/QvdC40Y8pXG4gICAgY29uc3QgY29ycmVjdGlvblN0cmVuZ3RoID0gTWF0aC5taW4oXG4gICAgICAgIGRpc3RhbmNlICogUEhZU0lDU19DT05GSUcuQ09SUkVDVElPTi5TTU9PVEhfRkFDVE9SLFxuICAgICAgICBQSFlTSUNTX0NPTkZJRy5DT1JSRUNUSU9OLk1BWF9DT1JSRUNUSU9OX1NQRUVEXG4gICAgKTtcbiAgICBcbiAgICAvLyDQn9GA0LjQvNC10L3Rj9C10Lwg0LrQvtGA0YDQtdC60YbQuNGOINC60LDQuiDQuNC80L/Rg9C70YzRgVxuICAgIGNvbnN0IGltcHVsc2UgPSBuZXcgQW1tby5idFZlY3RvcjMoXG4gICAgICAgIGNvcnJlY3Rpb25EaXIueCAqIGNvcnJlY3Rpb25TdHJlbmd0aCxcbiAgICAgICAgY29ycmVjdGlvbkRpci55ICogY29ycmVjdGlvblN0cmVuZ3RoLFxuICAgICAgICBjb3JyZWN0aW9uRGlyLnogKiBjb3JyZWN0aW9uU3RyZW5ndGhcbiAgICApO1xuICAgIFxuICAgIGJvZHkuYXBwbHlDZW50cmFsSW1wdWxzZShpbXB1bHNlKTtcbiAgICBib2R5LmFjdGl2YXRlKHRydWUpO1xuICAgIFxuICAgIEFtbW8uZGVzdHJveShpbXB1bHNlKTtcbn1cblxuLy8g0J7QsdC90L7QstC70LXQvdC40LUg0LLQuNC30YPQsNC70YzQvdC+0LPQviDRgdC+0YHRgtC+0Y/QvdC40Y8gbWVzaCfQtdC5XG5mdW5jdGlvbiB1cGRhdGVWaXN1YWxTdGF0ZXMoZGVsdGFUaW1lKSB7XG4gICAgZm9yIChjb25zdCBbb2JqZWN0SWQsIGJ1ZmZlcl0gb2Ygb2JqZWN0QnVmZmVycykge1xuICAgICAgICBjb25zdCBvYmogPSBvYmplY3RzW29iamVjdElkXTtcbiAgICAgICAgaWYgKCFvYmogfHwgIW9iai5tZXNoIHx8IG9iai5waHlzaWNzQnkgIT09ICdib3RoJykgY29udGludWU7XG4gICAgICAgIFxuICAgICAgICB1cGRhdGVNZXNoVmlzdWFsQ29ycmVjdGlvbihvYmosIGJ1ZmZlciwgZGVsdGFUaW1lKTtcbiAgICB9XG59XG5cbi8vINCe0LHQvdC+0LLQu9C10L3QuNC1INCy0LjQt9GD0LDQu9GM0L3QvtC5INC60L7RgNGA0LXQutGG0LjQuCBtZXNoJ9CwXG5mdW5jdGlvbiB1cGRhdGVNZXNoVmlzdWFsQ29ycmVjdGlvbihvYmosIGJ1ZmZlciwgZGVsdGFUaW1lKSB7XG4gICAgaWYgKCFvYmouYm9keSB8fCAhYnVmZmVyLnByZWRpY3RlZFN0YXRlKSByZXR1cm47XG4gICAgXG4gICAgLy8g0J/QvtC70YPRh9Cw0LXQvCDRgtC10LrRg9GJ0LXQtSDQv9C+0LvQvtC20LXQvdC40LUg0YTQuNC30LjRh9C10YHQutC+0LPQviDRgtC10LvQsFxuICAgIGNvbnN0IHRyYW5zZm9ybSA9IG9iai5ib2R5LmdldFdvcmxkVHJhbnNmb3JtKCk7XG4gICAgY29uc3QgYm9keVBvcyA9IHRyYW5zZm9ybS5nZXRPcmlnaW4oKTtcbiAgICBjb25zdCB0YXJnZXRQb3MgPSB7XG4gICAgICAgIHg6IGJvZHlQb3MueCgpLFxuICAgICAgICB5OiBib2R5UG9zLnkoKSxcbiAgICAgICAgejogYm9keVBvcy56KClcbiAgICB9O1xuICAgIFxuICAgIC8vINCf0L7Qu9GD0YfQsNC10Lwg0YLQtdC60YPRidC10LUg0L/QvtC70L7QttC10L3QuNC1IG1lc2gn0LBcbiAgICBjb25zdCBtZXNoUG9zID0gb2JqLm1lc2gucG9zaXRpb247XG4gICAgXG4gICAgLy8g0JLRi9GH0LjRgdC70Y/QtdC8INGA0LDRgdGB0YLQvtGP0L3QuNC1INC80LXQttC00YMgbWVzaCfQtdC8INC4INGE0LjQt9C40YfQtdGB0LrQuNC8INGC0LXQu9C+0LxcbiAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydChcbiAgICAgICAgTWF0aC5wb3codGFyZ2V0UG9zLnggLSBtZXNoUG9zLngsIDIpICtcbiAgICAgICAgTWF0aC5wb3codGFyZ2V0UG9zLnkgLSBtZXNoUG9zLnksIDIpICtcbiAgICAgICAgTWF0aC5wb3codGFyZ2V0UG9zLnogLSBtZXNoUG9zLnosIDIpXG4gICAgKTtcbiAgICBcbiAgICAvLyDQldGB0LvQuCDRgNCw0YHRgdGC0L7Rj9C90LjQtSDRgdC70LjRiNC60L7QvCDQsdC+0LvRjNGI0L7QtSAtINGC0LXQu9C10L/QvtGA0YLQuNGA0YPQtdC8IG1lc2hcbiAgICBpZiAoZGlzdGFuY2UgPiBQSFlTSUNTX0NPTkZJRy5WSVNVQUwuTUFYX1ZJU1VBTF9ESVNUQU5DRSkge1xuICAgICAgICBvYmoubWVzaC5wb3NpdGlvbi5zZXQodGFyZ2V0UG9zLngsIHRhcmdldFBvcy55LCB0YXJnZXRQb3Mueik7XG4gICAgICAgIGJ1ZmZlci5jb3JyZWN0aW9uVmVsb2NpdHkgPSB7IHg6IDAsIHk6IDAsIHo6IDAgfTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICAvLyDQldGB0LvQuCDRgNCw0YHRgdGC0L7Rj9C90LjQtSDQvNC10L3RjNGI0LUg0L/QvtGA0L7Qs9CwIC0g0L3QtSDQtNCy0LjQs9Cw0LXQvFxuICAgIGlmIChkaXN0YW5jZSA8IFBIWVNJQ1NfQ09ORklHLlZJU1VBTC5NSU5fTU9WRU1FTlRfVEhSRVNIT0xEKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgLy8g0JLRi9GH0LjRgdC70Y/QtdC8INGB0LjQu9GDINC/0YDQuNGC0Y/Qs9C40LLQsNC90LjRjyAo0L/RgNC+0L/QvtGA0YbQuNC+0L3QsNC70YzQvdCwINGA0LDRgdGB0YLQvtGP0L3QuNGOKVxuICAgIGNvbnN0IGF0dHJhY3Rpb25Gb3JjZSA9IGRpc3RhbmNlICogUEhZU0lDU19DT05GSUcuVklTVUFMLkFUVFJBQ1RJT05fU1RSRU5HVEg7XG4gICAgXG4gICAgLy8g0JLRi9GH0LjRgdC70Y/QtdC8INC90LDQv9GA0LDQstC70LXQvdC40LUg0LTQstC40LbQtdC90LjRj1xuICAgIGNvbnN0IGRpcmVjdGlvbiA9IHtcbiAgICAgICAgeDogKHRhcmdldFBvcy54IC0gbWVzaFBvcy54KSAvIGRpc3RhbmNlLFxuICAgICAgICB5OiAodGFyZ2V0UG9zLnkgLSBtZXNoUG9zLnkpIC8gZGlzdGFuY2UsXG4gICAgICAgIHo6ICh0YXJnZXRQb3MueiAtIG1lc2hQb3MueikgLyBkaXN0YW5jZVxuICAgIH07XG4gICAgXG4gICAgLy8g0J7QsdC90L7QstC70Y/QtdC8INGB0LrQvtGA0L7RgdGC0Ywg0LrQvtGA0YDQtdC60YbQuNC4XG4gICAgYnVmZmVyLmNvcnJlY3Rpb25WZWxvY2l0eS54ICs9IGRpcmVjdGlvbi54ICogYXR0cmFjdGlvbkZvcmNlICogZGVsdGFUaW1lO1xuICAgIGJ1ZmZlci5jb3JyZWN0aW9uVmVsb2NpdHkueSArPSBkaXJlY3Rpb24ueSAqIGF0dHJhY3Rpb25Gb3JjZSAqIGRlbHRhVGltZTtcbiAgICBidWZmZXIuY29ycmVjdGlvblZlbG9jaXR5LnogKz0gZGlyZWN0aW9uLnogKiBhdHRyYWN0aW9uRm9yY2UgKiBkZWx0YVRpbWU7XG4gICAgXG4gICAgLy8g0J/RgNC40LzQtdC90Y/QtdC8INC30LDRgtGD0YXQsNC90LjQtVxuICAgIGJ1ZmZlci5jb3JyZWN0aW9uVmVsb2NpdHkueCAqPSBQSFlTSUNTX0NPTkZJRy5WSVNVQUwuREFNUElOR19GQUNUT1I7XG4gICAgYnVmZmVyLmNvcnJlY3Rpb25WZWxvY2l0eS55ICo9IFBIWVNJQ1NfQ09ORklHLlZJU1VBTC5EQU1QSU5HX0ZBQ1RPUjtcbiAgICBidWZmZXIuY29ycmVjdGlvblZlbG9jaXR5LnogKj0gUEhZU0lDU19DT05GSUcuVklTVUFMLkRBTVBJTkdfRkFDVE9SO1xuICAgIFxuICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQv9C+0LvQvtC20LXQvdC40LUgbWVzaCfQsFxuICAgIG9iai5tZXNoLnBvc2l0aW9uLnggKz0gYnVmZmVyLmNvcnJlY3Rpb25WZWxvY2l0eS54ICogZGVsdGFUaW1lO1xuICAgIG9iai5tZXNoLnBvc2l0aW9uLnkgKz0gYnVmZmVyLmNvcnJlY3Rpb25WZWxvY2l0eS55ICogZGVsdGFUaW1lO1xuICAgIG9iai5tZXNoLnBvc2l0aW9uLnogKz0gYnVmZmVyLmNvcnJlY3Rpb25WZWxvY2l0eS56ICogZGVsdGFUaW1lO1xufVxuXG4vLyDQntCx0L3QvtCy0LvQtdC90LjQtSDRgdGC0LDRgtC40YHRgtC40LrQuCDRgdC10YLQuFxuZnVuY3Rpb24gdXBkYXRlTmV0d29ya1N0YXRzKCkge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgbmV0d29ya1N0YXRzLnVwZGF0ZUNvdW50Kys7XG4gICAgXG4gICAgaWYgKG5ldHdvcmtTdGF0cy5sYXN0VXBkYXRlVGltZSA+IDApIHtcbiAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSBub3cgLSBuZXR3b3JrU3RhdHMubGFzdFVwZGF0ZVRpbWU7XG4gICAgICAgIFxuICAgICAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0LTQttC40YLRgtC10YBcbiAgICAgICAgY29uc3QgZXhwZWN0ZWRJbnRlcnZhbCA9IFBIWVNJQ1NfQ09ORklHLlRJTUUuU0VSVkVSX1VQREFURV9JTlRFUlZBTDtcbiAgICAgICAgY29uc3Qgaml0dGVyID0gTWF0aC5hYnMoaW50ZXJ2YWwgLSBleHBlY3RlZEludGVydmFsKTtcbiAgICAgICAgbmV0d29ya1N0YXRzLmppdHRlciA9IG5ldHdvcmtTdGF0cy5qaXR0ZXIgKiAwLjkgKyBqaXR0ZXIgKiAwLjE7XG4gICAgICAgIFxuICAgICAgICAvLyDQodGH0LjRgtCw0LXQvCDQv9GA0L7Qv9GD0YnQtdC90L3Ri9C1INC+0LHQvdC+0LLQu9C10L3QuNGPXG4gICAgICAgIGlmIChpbnRlcnZhbCA+IGV4cGVjdGVkSW50ZXJ2YWwgKiAxLjUpIHtcbiAgICAgICAgICAgIG5ldHdvcmtTdGF0cy5taXNzZWRVcGRhdGVzKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgbmV0d29ya1N0YXRzLmxhc3RVcGRhdGVUaW1lID0gbm93O1xuICAgIFxuICAgIC8vINCS0YvRh9C40YHQu9GP0LXQvCDQv9C+0YLQtdGA0Y4g0L/QsNC60LXRgtC+0LJcbiAgICBpZiAobmV0d29ya1N0YXRzLnVwZGF0ZUNvdW50ID4gMTApIHtcbiAgICAgICAgbmV0d29ya1N0YXRzLnBhY2tldExvc3MgPSBuZXR3b3JrU3RhdHMubWlzc2VkVXBkYXRlcyAvIG5ldHdvcmtTdGF0cy51cGRhdGVDb3VudDtcbiAgICB9XG59XG5cbi8vINCQ0LTQsNC/0YLQsNGG0LjRjyDQv9Cw0YDQsNC80LXRgtGA0L7QsiDQv9C+0LQg0YHQtdGC0LXQstGL0LUg0YPRgdC70L7QstC40Y9cbmZ1bmN0aW9uIGFkYXB0VG9OZXR3b3JrQ29uZGl0aW9ucygpIHtcbiAgICBjb25zdCBwaW5nID0gbmV0d29ya1N0YXRzLnBpbmc7XG4gICAgY29uc3Qgaml0dGVyID0gbmV0d29ya1N0YXRzLmppdHRlcjtcbiAgICBjb25zdCBwYWNrZXRMb3NzID0gbmV0d29ya1N0YXRzLnBhY2tldExvc3M7XG4gICAgXG4gICAgLy8g0JDQtNCw0L/RgtC40YDRg9C10Lwg0L7QutC90L4g0L/RgNC10LTRgdC60LDQt9Cw0L3QuNGPXG4gICAgaWYgKHBpbmcgPiBQSFlTSUNTX0NPTkZJRy5ORVRXT1JLLkJBRF9QSU5HX1RIUkVTSE9MRCkge1xuICAgICAgICBQSFlTSUNTX0NPTkZJRy5USU1FLlBSRURJQ1RJT05fV0lORE9XID0gTWF0aC5taW4oNTAwLCBwaW5nICogMS41KTtcbiAgICB9IGVsc2UgaWYgKHBpbmcgPCBQSFlTSUNTX0NPTkZJRy5ORVRXT1JLLkdPT0RfUElOR19USFJFU0hPTEQpIHtcbiAgICAgICAgUEhZU0lDU19DT05GSUcuVElNRS5QUkVESUNUSU9OX1dJTkRPVyA9IE1hdGgubWF4KDEwMCwgcGluZyAqIDIpO1xuICAgIH1cbiAgICBcbiAgICAvLyDQkNC00LDQv9GC0LjRgNGD0LXQvCDRgdC40LvRgyDQutC+0YDRgNC10LrRhtC40LhcbiAgICBpZiAoaml0dGVyID4gUEhZU0lDU19DT05GSUcuTkVUV09SSy5KSVRURVJfVEhSRVNIT0xEKSB7XG4gICAgICAgIFBIWVNJQ1NfQ09ORklHLkNPUlJFQ1RJT04uU01PT1RIX0ZBQ1RPUiA9IE1hdGgubWF4KDAuMDUsIDAuMTUgLSBqaXR0ZXIgLyAxMDAwKTtcbiAgICB9XG4gICAgXG4gICAgLy8g0JDQtNCw0L/RgtC40YDRg9C10Lwg0LLQuNC30YPQsNC70YzQvdGD0Y4g0LrQvtGA0YDQtdC60YbQuNGOXG4gICAgaWYgKHBhY2tldExvc3MgPiBQSFlTSUNTX0NPTkZJRy5ORVRXT1JLLlBBQ0tFVF9MT1NTX1RIUkVTSE9MRCkge1xuICAgICAgICBQSFlTSUNTX0NPTkZJRy5WSVNVQUwuQVRUUkFDVElPTl9TVFJFTkdUSCA9IE1hdGgubWluKDE1LjAsIDguMCArIHBhY2tldExvc3MgKiAxMDApO1xuICAgIH1cbn1cblxuLy8g0J7RgdC90L7QstC90L7QuSDRhtC40LrQuyDQvtCx0L3QvtCy0LvQtdC90LjRjyDRhNC40LfQuNC60LhcbmV4cG9ydCBmdW5jdGlvbiBzdGVwUGh5c2ljcyhkZWx0YVRpbWUpIHtcbiAgICBpZiAoIXBoeXNpY3NXb3JsZCkgcmV0dXJuO1xuICAgIFxuICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDRhNC40LfQuNGH0LXRgdC60LjQuSDQvNC40YAg0LTQu9GPIGFtbW8t0L7QsdGK0LXQutGC0L7QslxuICAgIHBoeXNpY3NXb3JsZC5zdGVwU2ltdWxhdGlvbihkZWx0YVRpbWUsIDEwKTtcbiAgICBcbiAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0L/QvtC30LjRhtC40Lgg0L7QsdGK0LXQutGC0L7QsiDQuNC3INGE0LjQt9C40YfQtdGB0LrQuNGFINGC0LXQuyDQtNC70Y8gYW1tby3QvtCx0YrQtdC60YLQvtCyXG4gICAgdXBkYXRlUGh5c2ljc09iamVjdHMoZmFsc2UpO1xuICAgIFxuICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQstC40LfRg9Cw0LvRjNC90YvQtSDRgdC+0YHRgtC+0Y/QvdC40Y9cbiAgICB1cGRhdGVWaXN1YWxTdGF0ZXMoZGVsdGFUaW1lKTtcbiAgICBcbiAgICAvLyDQntGH0LjRidCw0LXQvCDRgdGC0LDRgNGL0LUg0LTQsNC90L3Ri9C1INC40Lcg0LHRg9GE0LXRgNC+0LJcbiAgICBjb25zdCBjdXJyZW50VGltZSA9IGdldEVzdGltYXRlZFNlcnZlclRpbWUoKTtcbiAgICBmb3IgKGNvbnN0IGJ1ZmZlciBvZiBvYmplY3RCdWZmZXJzLnZhbHVlcygpKSB7XG4gICAgICAgIGJ1ZmZlci5jbGVhbk9sZFVwZGF0ZXMoY3VycmVudFRpbWUpO1xuICAgIH1cbiAgICBcbiAgICAvLyDQn9C10YDQuNC+0LTQuNGH0LXRgdC60Lgg0LDQtNCw0L/RgtC40YDRg9C10LzRgdGPINC6INGB0LXRgtC10LLRi9C8INGD0YHQu9C+0LLQuNGP0LxcbiAgICBpZiAoRGF0ZS5ub3coKSAlIDEwMDAgPCBkZWx0YVRpbWUgKiAxMDAwKSB7IC8vINCf0YDQuNC80LXRgNC90L4g0YDQsNC3INCyINGB0LXQutGD0L3QtNGDXG4gICAgICAgIGFkYXB0VG9OZXR3b3JrQ29uZGl0aW9ucygpO1xuICAgIH1cbn1cblxuLy8g0J7QsdC90L7QstC70LXQvdC40LUg0L/QvtC30LjRhtC40Lkg0L7QsdGK0LXQutGC0L7QsiDQuNC3INGE0LjQt9C40YfQtdGB0LrQuNGFINGC0LXQu1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVBoeXNpY3NPYmplY3RzKHVzZVNlcnZlclBoeXNpY3MpIHtcbiAgICBmb3IgKGNvbnN0IFtpZCwgb2JqXSBvZiBPYmplY3QuZW50cmllcyhvYmplY3RzKSkge1xuICAgICAgICBpZiAob2JqLmJvZHkgJiYgb2JqLm1lc2ggJiYgb2JqLnBoeXNpY3NCeSA9PT0gJ2FtbW8nKSB7XG4gICAgICAgICAgICAvLyDQlNC70Y8gYW1tby3QvtCx0YrQtdC60YLQvtCyINC+0LHQvdC+0LLQu9GP0LXQvCBtZXNoINC40Lcg0YTQuNC30LjRh9C10YHQutC+0LPQviDRgtC10LvQsFxuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gb2JqLmJvZHkuZ2V0V29ybGRUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbiA9IHRyYW5zZm9ybS5nZXRPcmlnaW4oKTtcbiAgICAgICAgICAgIGNvbnN0IHJvdGF0aW9uID0gdHJhbnNmb3JtLmdldFJvdGF0aW9uKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIG9iai5tZXNoLnBvc2l0aW9uLnNldChvcmlnaW4ueCgpLCBvcmlnaW4ueSgpLCBvcmlnaW4ueigpKTtcbiAgICAgICAgICAgIG9iai5tZXNoLnF1YXRlcm5pb24uc2V0KHJvdGF0aW9uLngoKSwgcm90YXRpb24ueSgpLCByb3RhdGlvbi56KCksIHJvdGF0aW9uLncoKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vINCb0L7Qs9C40YDRg9C10Lwg0YHQvtGB0YLQvtGP0L3QuNC1INC+0LHRitC10LrRgtCwINCyINGC0LXQu9C10LzQtdGC0YDQuNGOICjRgtC+0LvRjNC60L4g0LTQu9GPINC40LPRgNC+0LrQvtCyKVxuICAgICAgICAgICAgaWYgKG9iai50eXBlID09PSAncGxheWVyJyAmJiBNYXRoLnJhbmRvbSgpIDwgMC4wMSkgeyAvLyAxJSDRgdGN0LzQv9C70LjQvdCzINGH0YLQvtCx0Ysg0L3QtSDQt9Cw0YHQvtGA0Y/RgtGMINC70L7Qs9C4XG4gICAgICAgICAgICAgICAgY29uc3QgdmVsb2NpdHkgPSBvYmouYm9keS5nZXRMaW5lYXJWZWxvY2l0eSgpO1xuICAgICAgICAgICAgICAgIGNsaWVudFRlbGVtZXRyeS5sb2dPYmplY3RTdGF0ZShcbiAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgICdwbGF5ZXInLFxuICAgICAgICAgICAgICAgICAgICAnYW1tbycsXG4gICAgICAgICAgICAgICAgICAgIHsgeDogb3JpZ2luLngoKSwgeTogb3JpZ2luLnkoKSwgejogb3JpZ2luLnooKSB9LFxuICAgICAgICAgICAgICAgICAgICB7IHg6IHZlbG9jaXR5LngoKSwgeTogdmVsb2NpdHkueSgpLCB6OiB2ZWxvY2l0eS56KCkgfSxcbiAgICAgICAgICAgICAgICAgICAgb2JqLm1hc3MgfHwgMS4wLFxuICAgICAgICAgICAgICAgICAgICBvYmoucmFkaXVzIHx8IDEuMCxcbiAgICAgICAgICAgICAgICAgICAgJ2NsaWVudCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vINCU0LvRjyBib3RoINC4IGJ1bGxldCDQvtCx0YrQtdC60YLQvtCyINC/0L7Qt9C40YbQuNC4INC+0LHQvdC+0LLQu9GP0Y7RgtGB0Y8g0LIg0YHQuNGB0YLQtdC80LUg0YTQuNC30LjQutC4XG4gICAgfVxufVxuXG4vLyDQn9C+0LvRg9GH0LjRgtGMINGE0LjQt9C40YfQtdGB0LrQuNC5INC80LjRgFxuZXhwb3J0IGZ1bmN0aW9uIGdldFBoeXNpY3NXb3JsZCgpIHtcbiAgICByZXR1cm4gcGh5c2ljc1dvcmxkO1xufVxuXG4vLyDQntCx0L3QvtCy0LjRgtGMINC/0LjQvdCzXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlUGluZyhwaW5nVmFsdWUpIHtcbiAgICBuZXR3b3JrU3RhdHMucGluZyA9IHBpbmdWYWx1ZTtcbn1cblxuLy8g0J/QvtC70YPRh9C40YLRjCDRgdGC0LDRgtC40YHRgtC40LrRgyDRgdC10YLQuFxuZXhwb3J0IGZ1bmN0aW9uIGdldE5ldHdvcmtTdGF0cygpIHtcbiAgICByZXR1cm4geyAuLi5uZXR3b3JrU3RhdHMgfTtcbn1cblxuLy8g0J/QvtC70YPRh9C40YLRjCDQutC+0L3RhNC40LPRg9GA0LDRhtC40Y4g0YTQuNC30LjQutC4XG5leHBvcnQgZnVuY3Rpb24gZ2V0UGh5c2ljc0NvbmZpZygpIHtcbiAgICByZXR1cm4geyAuLi5QSFlTSUNTX0NPTkZJRyB9O1xufVxuXG4vLyDQn9GA0LjQvNC10L3QtdC90LjQtSDQuNC80L/Rg9C70YzRgdCwINC6INGB0YTQtdGA0LVcbmV4cG9ydCBmdW5jdGlvbiBhcHBseUltcHVsc2VUb1NwaGVyZShpZCwgZm9yY2UpIHtcbiAgICBjb25zdCBvYmogPSBvYmplY3RzW2lkXTtcbiAgICBpZiAoIW9iaiB8fCAhb2JqLmJvZHkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBbUGh5c2ljc10g0J3QtSDRg9C00LDQu9C+0YHRjCDQvdCw0LnRgtC4INC+0LHRitC10LrRgiDQuNC70Lgg0YLQtdC70L4g0LTQu9GPINC40LzQv9GD0LvRjNGB0LA6ICR7aWR9YCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgLy8g0J/RgNC40LzQtdC90Y/QtdC8INC40LzQv9GD0LvRjNGBINC60LDQuiDQtdGB0YLRjCAo0YHQuNC70LAg0YPQttC1INGA0LDRgdGB0YfQuNGC0LDQvdCwINCyIGdhbWVwYWQpXG4gICAgY29uc3QgaW1wdWxzZSA9IG5ldyBBbW1vLmJ0VmVjdG9yMyhcbiAgICAgICAgZm9yY2UueCB8fCAwLFxuICAgICAgICBmb3JjZS55IHx8IDAsXG4gICAgICAgIGZvcmNlLnogfHwgMFxuICAgICk7XG4gICAgXG4gICAgb2JqLmJvZHkuYXBwbHlDZW50cmFsSW1wdWxzZShpbXB1bHNlKTtcbiAgICBvYmouYm9keS5hY3RpdmF0ZSh0cnVlKTtcbiAgICBcbiAgICBBbW1vLmRlc3Ryb3koaW1wdWxzZSk7XG59XG5cbi8vINCe0YfQuNGB0YLQutCwINGA0LXRgdGD0YDRgdC+0LJcbmV4cG9ydCBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIGlmIChwaHlzaWNzV29ybGQpIHtcbiAgICAgICAgLy8g0J7Rh9C40YnQsNC10Lwg0LLRgdC1INGC0LXQu9CwINC40Lcg0LzQuNGA0LBcbiAgICAgICAgY29uc3QgbnVtT2JqZWN0cyA9IHBoeXNpY3NXb3JsZC5nZXROdW1Db2xsaXNpb25PYmplY3RzKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSBudW1PYmplY3RzIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IHBoeXNpY3NXb3JsZC5nZXRDb2xsaXNpb25PYmplY3RBcnJheSgpLmF0KGkpO1xuICAgICAgICAgICAgcGh5c2ljc1dvcmxkLnJlbW92ZUNvbGxpc2lvbk9iamVjdChvYmopO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyDQo9C90LjRh9GC0L7QttCw0LXQvCDQvNC40YBcbiAgICAgICAgQW1tby5kZXN0cm95KHBoeXNpY3NXb3JsZCk7XG4gICAgICAgIHBoeXNpY3NXb3JsZCA9IG51bGw7XG4gICAgfVxuICAgIFxuICAgIC8vINCe0YfQuNGJ0LDQtdC8INCx0YPRhNC10YDRi1xuICAgIG9iamVjdEJ1ZmZlcnMuY2xlYXIoKTtcbiAgICBcbiAgICBjb25zb2xlLmxvZyhcIltQaHlzaWNzXSDQoNC10YHRg9GA0YHRiyDQvtGH0LjRidC10L3Ri1wiKTtcbn0iLCIvLyBvYmplY3RzLmpzXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBzY2VuZSB9IGZyb20gJy4vc2NlbmUuanMnO1xuaW1wb3J0IHsgXG4gICAgZ2V0UGh5c2ljc1dvcmxkLFxuICAgIGFwcGx5UGh5c2ljc0NvbmZpZyxcbiAgICByZWNlaXZlT2JqZWN0VXBkYXRlLFxuICAgIHN0ZXBQaHlzaWNzLFxuICAgIHVwZGF0ZVBoeXNpY3NPYmplY3RzXG59IGZyb20gJy4vcGh5c2ljcy5qcyc7XG5pbXBvcnQgZ2FtZVN0YXRlTWFuYWdlciBmcm9tICcuL2dhbWVzdGF0ZW1hbmFnZXIuanMnO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcblxuZXhwb3J0IGNvbnN0IHRlcnJhaW5DcmVhdGVkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuZXhwb3J0IGNvbnN0IHBsYXllckNyZWF0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbmV4cG9ydCBsZXQgb2JqZWN0cyA9IHt9OyAvLyDQodC70L7QstCw0YDRjCDQvtCx0YrQtdC60YLQvtCyOiBpZCAtPiB7IG1lc2gsIGJvZHksIHNlcnZlclBvcywgLi4uIH1cbmV4cG9ydCBsZXQgdGVycmFpbk1lc2g7IC8vINCt0LrRgdC/0L7RgNGC0LjRgNGD0LXQvCB0ZXJyYWluTWVzaFxuZXhwb3J0IGxldCBwbGF5ZXJNZXNoOyAvLyDQrdC60YHQv9C+0YDRgtC40YDRg9C10LwgcGxheWVyTWVzaFxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWVzaEFuZEJvZHlGb3JPYmplY3QoZGF0YSkge1xuICAgIGlmICghZGF0YSB8fCAhZGF0YS5vYmplY3RfdHlwZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBkYXRhIHJlY2VpdmVkIGZvciBvYmplY3QgY3JlYXRpb246XCIsIGRhdGEpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB0eXBlID0gZGF0YS5vYmplY3RfdHlwZTtcbiAgICBsZXQgbWVzaCA9IG51bGwsIGJvZHkgPSBudWxsO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgLy8g0KHQvtC30LTQsNC10Lwg0LzQtdGIINCyINC70Y7QsdC+0Lwg0YHQu9GD0YfQsNC1XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInRlcnJhaW5cIjpcbiAgICAgICAgICAgICAgICBtZXNoID0gY3JlYXRlVGVycmFpbk1lc2goZGF0YSk7XG4gICAgICAgICAgICAgICAgYm9keSA9IGNyZWF0ZVBoeXNpY3NCb2R5Rm9yVGVycmFpbihkYXRhKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzcGhlcmVcIjpcbiAgICAgICAgICAgICAgICBtZXNoID0gY3JlYXRlU3BoZXJlTWVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICBib2R5ID0gY3JlYXRlUGh5c2ljc0JvZHlGb3JTcGhlcmUoZGF0YSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidHJlZVwiOlxuICAgICAgICAgICAgICAgIG1lc2ggPSBjcmVhdGVUcmVlTWVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJib3hcIjpcbiAgICAgICAgICAgICAgICBtZXNoID0gY3JlYXRlQm94TWVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICBib2R5ID0gY3JlYXRlUGh5c2ljc0JvZHlGb3JCb3goZGF0YSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgVW5rbm93biBvYmplY3QgdHlwZTogJHt0eXBlfWApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8LCDRh9GC0L4gbWVzaCDQsdGL0Lsg0YPRgdC/0LXRiNC90L4g0YHQvtC30LTQsNC9XG4gICAgICAgIGlmICghbWVzaCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGNyZWF0ZSBtZXNoIGZvciBvYmplY3QgdHlwZTogJHt0eXBlfWApO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBzY2VuZS5hZGQobWVzaCk7XG4gICAgICAgIFxuICAgICAgICAvLyDQodC+0YXRgNCw0L3Rj9C10Lwg0LIg0L7QsdGK0LXQutGC0LUg0LjRgdGF0L7QtNC90YvQtSDQtNCw0L3QvdGL0LUsINCy0LrQu9GO0YfQsNGPINC80LDRgdGB0YNcbiAgICAgICAgY29uc3QgcmVzdWx0ID0geyBcbiAgICAgICAgICAgIG1lc2gsIFxuICAgICAgICAgICAgYm9keSwgXG4gICAgICAgICAgICBvYmplY3RfdHlwZTogdHlwZSwgXG4gICAgICAgICAgICBtYXNzOiBkYXRhLm1hc3MsIC8vINCh0L7RhdGA0LDQvdGP0LXQvCDQvNCw0YHRgdGDINC40Lcg0LTQsNC90L3Ri9GFINGB0LXRgNCy0LXRgNCwXG4gICAgICAgICAgICByYWRpdXM6IGRhdGEucmFkaXVzLCAvLyDQodC+0YXRgNCw0L3Rj9C10Lwg0YDQsNC00LjRg9GBINC40Lcg0LTQsNC90L3Ri9GFINGB0LXRgNCy0LXRgNCwXG4gICAgICAgICAgICBwaHlzaWNzQnk6IGRhdGEucGh5c2ljc19ieVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coYFtPYmplY3RzXSDQodC+0LfQtNCw0L0g0L7QsdGK0LXQutGCOiAke2RhdGEuaWR9ICgke2RhdGEub2JqZWN0X3R5cGV9KWApO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGDQntGI0LjQsdC60LAg0L/RgNC4INGB0L7Qt9C00LDQvdC40Lgg0L7QsdGK0LXQutGC0LAg0YLQuNC/0LAgJHt0eXBlfTpgLCBlcnJvcik7XG4gICAgICAgIC8vINCV0YHQu9C4IG1lc2gg0LHRi9C7INGB0L7Qt9C00LDQvSwg0L3QviDQv9GA0L7QuNC30L7RiNC70LAg0L7RiNC40LHQutCwLCDRg9C00LDQu9GP0LXQvCDQtdCz0L4g0LjQtyDRgdGG0LXQvdGLXG4gICAgICAgIGlmIChtZXNoKSB7XG4gICAgICAgICAgICBzY2VuZS5yZW1vdmUobWVzaCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVQaHlzaWNzQm9keUZvclRlcnJhaW4oZGF0YSkge1xuICAgIGNvbnN0IHBoeXNpY3NXb3JsZCA9IGdldFBoeXNpY3NXb3JsZCgpO1xuICAgIGlmICghcGh5c2ljc1dvcmxkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbT2JqZWN0c10g0KTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAINC90LUg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC9XCIpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIEFtbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0FtbW8uanMg0L3QtSDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0L0nKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgdyA9IGRhdGEuaGVpZ2h0bWFwX3c7XG4gICAgY29uc3QgaCA9IGRhdGEuaGVpZ2h0bWFwX2g7XG4gICAgY29uc3Qgc2NhbGVYID0gZGF0YS5zY2FsZV94O1xuICAgIGNvbnN0IHNjYWxlWiA9IGRhdGEuc2NhbGVfejtcblxuICAgIC8vINCh0L7Qt9C00LDQtdC8INCx0YPRhNC10YAg0LIg0L/QsNC80Y/RgtC4IEFtbW8g0LTQu9GPINC00LDQvdC90YvRhSDQstGL0YHQvtGCXG4gICAgY29uc3QgYW1tb0hlaWdodERhdGEgPSBBbW1vLl9tYWxsb2MoNCAqIHcgKiBoKTtcbiAgICBcbiAgICAvLyDQmtC+0L/QuNGA0YPQtdC8INC00LDQvdC90YvQtSDQstGL0YHQvtGCINCyINC/0LDQvNGP0YLRjCBBbW1vXG4gICAgbGV0IHAgPSAwO1xuICAgIGxldCBwMiA9IDA7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBoOyBqKyspIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3OyBpKyspIHtcbiAgICAgICAgICAgIEFtbW8uSEVBUEYzMlthbW1vSGVpZ2h0RGF0YSArIHAyID4+IDJdID0gZGF0YS5oZWlnaHRfZGF0YVtwXTtcbiAgICAgICAgICAgIHArKztcbiAgICAgICAgICAgIHAyICs9IDQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDQodC+0LfQtNCw0LXQvCDRhNC+0YDQvNGDINGC0LXRgNGA0LXQudC90LBcbiAgICBjb25zdCBzaGFwZSA9IG5ldyBBbW1vLmJ0SGVpZ2h0ZmllbGRUZXJyYWluU2hhcGUoXG4gICAgICAgIHcsXG4gICAgICAgIGgsXG4gICAgICAgIGFtbW9IZWlnaHREYXRhLFxuICAgICAgICAxLCAgLy8gaGVpZ2h0U2NhbGVcbiAgICAgICAgZGF0YS5taW5faGVpZ2h0LFxuICAgICAgICBkYXRhLm1heF9oZWlnaHQsXG4gICAgICAgIDEsICAvLyB1cCBheGlzID0gMSDQtNC70Y8gWVxuICAgICAgICBBbW1vLlBIWV9GTE9BVCxcbiAgICAgICAgZmFsc2UgIC8vIGZsaXBRdWFkRWRnZXNcbiAgICApO1xuXG4gICAgLy8g0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10Lwg0LzQsNGB0YjRgtCw0LHQuNGA0L7QstCw0L3QuNC1XG4gICAgc2hhcGUuc2V0TG9jYWxTY2FsaW5nKG5ldyBBbW1vLmJ0VmVjdG9yMyhzY2FsZVgsIGRhdGEuc2NhbGVfeSwgc2NhbGVaKSk7XG4gICAgXG4gICAgLy8g0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10LwgbWFyZ2luINC00LvRjyDRgtC10YDRgNC10LnQvdCwICgwLjUg0LLQvNC10YHRgtC+IDIuMCwg0YLQsNC6INC60LDQuiDRgtC10YDRgNC10LnQvSDQvNC10L3RjNGI0LUpXG4gICAgc2hhcGUuc2V0TWFyZ2luKDAuNSk7XG4gICAgXG4gICAgY29uc29sZS5sb2coXCJbVGVycmFpbl0g0KPRgdGC0LDQvdC+0LLQu9C10L0gbWFyZ2luINGC0LXRgNGA0LXQudC90LA6XCIsIDAuNSk7XG5cbiAgICAvLyDQodC+0LfQtNCw0LXQvCDRgtGA0LDQvdGB0YTQvtGA0LzQsNGG0LjRjlxuICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyBBbW1vLmJ0VHJhbnNmb3JtKCk7XG4gICAgdHJhbnNmb3JtLnNldElkZW50aXR5KCk7XG4gICAgXG4gICAgY29uc3QgbWFzcyA9IDA7IC8vINCh0YLQsNGC0LjRh9C10YHQutC+0LUg0YLQtdC70L5cbiAgICBjb25zdCBsb2NhbEluZXJ0aWEgPSBuZXcgQW1tby5idFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgY29uc3QgbW90aW9uU3RhdGUgPSBuZXcgQW1tby5idERlZmF1bHRNb3Rpb25TdGF0ZSh0cmFuc2Zvcm0pO1xuICAgIGNvbnN0IHJiSW5mbyA9IG5ldyBBbW1vLmJ0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mbyhtYXNzLCBtb3Rpb25TdGF0ZSwgc2hhcGUsIGxvY2FsSW5lcnRpYSk7XG4gICAgY29uc3QgYm9keSA9IG5ldyBBbW1vLmJ0UmlnaWRCb2R5KHJiSW5mbyk7XG5cbiAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0YLQtdC70L4g0LIg0YTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAXG4gICAgY29uc3QgVEVSUkFJTl9HUk9VUCA9IDE7XG4gICAgcGh5c2ljc1dvcmxkLmFkZFJpZ2lkQm9keShib2R5LCBURVJSQUlOX0dST1VQLCAtMSk7IC8vINCi0LXRgNGA0LXQudC9INGB0YLQsNC70LrQuNCy0LDQtdGC0YHRjyDRgdC+INCy0YHQtdC80LhcblxuICAgIC8vINCe0YfQuNGB0YLQutCwINC/0LDQvNGP0YLQuFxuICAgIEFtbW8uZGVzdHJveShyYkluZm8pO1xuICAgIEFtbW8uZGVzdHJveShsb2NhbEluZXJ0aWEpO1xuXG4gICAgY29uc29sZS5sb2coXCJbVGVycmFpbl0g0KTQuNC30LjRh9C10YHQutC+0LUg0YLQtdC70L4g0YHQvtC30LTQsNC90L46XCIsIHtcbiAgICAgICAg0YDQsNC30LzQtdGA0Ys6IHsgdywgaCB9LFxuICAgICAgICDQvNCw0YHRiNGC0LDQsTogeyB4OiBkYXRhLnNjYWxlWCwgeTogZGF0YS5zY2FsZV95LCB6OiBkYXRhLnNjYWxlWiB9LFxuICAgICAgICDQv9C+0LfQuNGG0LjRjzogeyBcbiAgICAgICAgICAgIHg6IGRhdGEueCB8fCAwLCBcbiAgICAgICAgICAgIHk6IChkYXRhLm1pbl9oZWlnaHQgKyBkYXRhLm1heF9oZWlnaHQpIC8gMixcbiAgICAgICAgICAgIHo6IGRhdGEueiB8fCAwIFxuICAgICAgICB9LFxuICAgICAgICDQvNC40L3QktGL0YHQvtGC0LA6IGRhdGEubWluX2hlaWdodCxcbiAgICAgICAg0LzQsNC60YHQktGL0YHQvtGC0LA6IGRhdGEubWF4X2hlaWdodFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJvZHk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRlcnJhaW5NZXNoKGRhdGEpIHtcbiAgICBjb25zdCB3ID0gZGF0YS5oZWlnaHRtYXBfdyB8fCA2NDtcbiAgICBjb25zdCBoID0gZGF0YS5oZWlnaHRtYXBfaCB8fCA2NDtcbiAgICBjb25zdCBnZW8gPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShcbiAgICAgICAgdyAqIGRhdGEuc2NhbGVfeCxcbiAgICAgICAgaCAqIGRhdGEuc2NhbGVfeixcbiAgICAgICAgdyAtIDEsXG4gICAgICAgIGggLSAxXG4gICAgKTtcbiAgICBnZW8ucm90YXRlWCgtTWF0aC5QSSAvIDIpO1xuXG4gICAgaWYgKGRhdGEuaGVpZ2h0X2RhdGEpIHtcbiAgICAgICAgY29uc3QgdmVydHMgPSBnZW8uYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0cy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgICAgY29uc3QgaXggPSAoaSAvIDMpICUgdztcbiAgICAgICAgICAgIGNvbnN0IGl6ID0gTWF0aC5mbG9vcihpIC8gMyAvIHcpO1xuICAgICAgICAgICAgdmVydHNbaSArIDFdID0gZGF0YS5oZWlnaHRfZGF0YVtpeiAqIHcgKyBpeF0gKiBkYXRhLnNjYWxlX3k7XG4gICAgICAgIH1cbiAgICAgICAgZ2VvLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7XG4gICAgfVxuXG4gICAgdGVycmFpbk1lc2ggPSBuZXcgVEhSRUUuTWVzaCggLy8g0J/RgNC40YHQstCw0LjQstCw0LXQvCBtZXNoINC/0LXRgNC10LzQtdC90L3QvtC5IHRlcnJhaW5NZXNoXG4gICAgICAgIGdlbyxcbiAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHtcbiAgICAgICAgICAgIGNvbG9yOiBwYXJzZUNvbG9yKGRhdGEuY29sb3IgfHwgXCIjMDAwMGZmXCIpLFxuICAgICAgICAgICAgd2lyZWZyYW1lOiBmYWxzZSxcbiAgICAgICAgICAgIGZsYXRTaGFkaW5nOiB0cnVlXG4gICAgICAgIH0pXG4gICAgKTtcbiAgICBcbiAgICAvLyDQktC60LvRjtGH0LDQtdC8INGC0LXQvdC4INC00LvRjyDRgtC10YDRgNC10LnQvdCwXG4gICAgdGVycmFpbk1lc2gucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG5cbiAgICBnYW1lU3RhdGVNYW5hZ2VyLnNldFRlcnJhaW5NZXNoKHRlcnJhaW5NZXNoKTtcbiAgICByZXR1cm4gdGVycmFpbk1lc2g7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTcGhlcmVNZXNoKGRhdGEpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBnZW8gPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoZGF0YS5yYWRpdXMgfHwgMSwgMzIsIDMyKTtcbiAgICAgICAgY29uc3QgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKFxuICAgICAgICAgICAgZ2VvLFxuICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHsgXG4gICAgICAgICAgICAgICAgY29sb3I6IHBhcnNlQ29sb3IoZGF0YS5jb2xvciB8fCBcIiM4ODg4ODhcIiksXG4gICAgICAgICAgICAgICAgc2hpbmluZXNzOiAzMFxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCS0LrQu9GO0YfQsNC10Lwg0YLQtdC90Lgg0LTQu9GPINGB0YTQtdGAXG4gICAgICAgIG1lc2guY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgICAgIG1lc2gucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG4gICAgICAgIFxuICAgICAgICAvLyDQn9GA0L7QstC10YDRj9C10LwsINGP0LLQu9GP0LXRgtGB0Y8g0LvQuCDRjdGC0L7RgiDQvtCx0YrQtdC60YIg0LjQs9GA0L7QutC+0Lwg0YLQtdC60YPRidC10LPQviDQutC70LjQtdC90YLQsFxuICAgICAgICBjb25zdCBwbGF5ZXJPYmplY3RJRCA9IGdhbWVTdGF0ZU1hbmFnZXIuZ2V0UGxheWVyT2JqZWN0SUQoKTtcbiAgICAgICAgaWYgKHBsYXllck9iamVjdElEICYmIGRhdGEuaWQgPT09IHBsYXllck9iamVjdElEKSB7XG4gICAgICAgICAgICBwbGF5ZXJNZXNoID0gbWVzaDtcbiAgICAgICAgICAgIGdhbWVTdGF0ZU1hbmFnZXIuc2V0UGxheWVyTWVzaChwbGF5ZXJNZXNoKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBbT2JqZWN0c10g0KPRgdGC0LDQvdC+0LLQu9C10L0gcGxheWVyTWVzaCDQtNC70Y8g0L7QsdGK0LXQutGC0LAgJHtkYXRhLmlkfWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8g0JLQoNCV0JzQldCd0J3QntCVINCg0JXQqNCV0J3QmNCVOiDQtdGB0LvQuCBwbGF5ZXIgSUQg0LXRidC1INC90LUg0L/QvtC70YPRh9C10L0g0Lgg0Y3RgtC+IHNwaGVyZSDRgSBcInBsYXllclwiINCyINC40LzQtdC90LgsINGD0YHRgtCw0L3QsNCy0LvQuNCy0LDQtdC8INC60LDQuiBwbGF5ZXJcbiAgICAgICAgICAgIGlmICghcGxheWVyT2JqZWN0SUQgJiYgZGF0YS5pZC5pbmNsdWRlcygncGxheWVyJykpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW09iamVjdHNdINCS0KDQldCc0JXQndCd0J4g0YPRgdGC0LDQvdCw0LLQu9C40LLQsNC10LwgJHtkYXRhLmlkfSDQutCw0LogcGxheWVyIG1lc2ggKHBsYXllciBJRCDQvdC1INC/0L7Qu9GD0YfQtdC9KWApO1xuICAgICAgICAgICAgICAgIHBsYXllck1lc2ggPSBtZXNoO1xuICAgICAgICAgICAgICAgIGdhbWVTdGF0ZU1hbmFnZXIuc2V0UGxheWVyTWVzaChwbGF5ZXJNZXNoKTtcbiAgICAgICAgICAgICAgICBnYW1lU3RhdGVNYW5hZ2VyLnNldFBsYXllcklEKCd0ZW1wX3BsYXllcicsIGRhdGEuaWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW09iamVjdHNdINCh0L7Qt9C00LDQvSDQvtCx0YrQtdC60YIgJHtkYXRhLmlkfSwgcGxheWVyIElEOiAke3BsYXllck9iamVjdElEIHx8ICfQvdC1INC/0L7Qu9GD0YfQtdC9J31gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtZXNoO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCLQntGI0LjQsdC60LAg0L/RgNC4INGB0L7Qt9C00LDQvdC40Lgg0LzQtdGI0LAg0YHRhNC10YDRizpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJveE1lc2goZGF0YSkge1xuICAgIGNvbnN0IGdlbyA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxLCAxLCAxKTtcbiAgICByZXR1cm4gbmV3IFRIUkVFLk1lc2goXG4gICAgICAgIGdlbyxcbiAgICAgICAgbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoeyBjb2xvcjogcGFyc2VDb2xvcihkYXRhLmNvbG9yIHx8IFwiIzg4ODg4OFwiKSB9KVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBoeXNpY3NCb2R5Rm9yU3BoZXJlKGRhdGEpIHtcbiAgICBjb25zdCBwaHlzaWNzV29ybGQgPSBnZXRQaHlzaWNzV29ybGQoKTtcbiAgICBpZiAoIXBoeXNpY3NXb3JsZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW09iamVjdHNdINCk0LjQt9C40YfQtdGB0LrQuNC5INC80LjRgCDQvdC1INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvVwiKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBBbW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignQW1tby5qcyDQvdC1INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvScpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBoeXNpY3NXb3JsZCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcign0KTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAINC90LUg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC9Jyk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vINCR0LXQt9C+0L/QsNGB0L3QsNGPINC/0YDQvtCy0LXRgNC60LAgd2luZG93LkFtbW9cbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cuQW1tbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3dpbmRvdy5BbW1vINC90LUg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC9Jyk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IGRhdGEucmFkaXVzO1xuICAgICAgICBjb25zdCBtYXNzID0gZGF0YS5tYXNzO1xuXG4gICAgICAgIC8vINCh0L7Qt9C00LDQtdC8INCy0YHQtSBBbW1vINC+0LHRitC10LrRgtGLINGH0LXRgNC10Lcgd2luZG93LkFtbW9cbiAgICAgICAgY29uc3Qgc2hhcGUgPSBuZXcgd2luZG93LkFtbW8uYnRTcGhlcmVTaGFwZShyYWRpdXMpO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBuZXcgd2luZG93LkFtbW8uYnRUcmFuc2Zvcm0oKTtcbiAgICAgICAgdHJhbnNmb3JtLnNldElkZW50aXR5KCk7XG4gICAgICAgIHRyYW5zZm9ybS5zZXRPcmlnaW4obmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMyhkYXRhLnggfHwgMCwgZGF0YS55IHx8IDAsIGRhdGEueiB8fCAwKSk7XG5cbiAgICAgICAgY29uc3QgbG9jYWxJbmVydGlhID0gbmV3IHdpbmRvdy5BbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICAgICAgc2hhcGUuY2FsY3VsYXRlTG9jYWxJbmVydGlhKG1hc3MsIGxvY2FsSW5lcnRpYSk7XG5cbiAgICAgICAgY29uc3QgbW90aW9uU3RhdGUgPSBuZXcgd2luZG93LkFtbW8uYnREZWZhdWx0TW90aW9uU3RhdGUodHJhbnNmb3JtKTtcbiAgICAgICAgY29uc3QgcmJJbmZvID0gbmV3IHdpbmRvdy5BbW1vLmJ0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mbyhcbiAgICAgICAgICAgIG1hc3MsXG4gICAgICAgICAgICBtb3Rpb25TdGF0ZSxcbiAgICAgICAgICAgIHNoYXBlLFxuICAgICAgICAgICAgbG9jYWxJbmVydGlhXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGJvZHkgPSBuZXcgd2luZG93LkFtbW8uYnRSaWdpZEJvZHkocmJJbmZvKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCf0YDQvtCy0LXRgNGP0LXQvCwg0YfRgtC+INGC0LXQu9C+INC40LzQtdC10YIg0L3QtdC+0LHRhdC+0LTQuNC80YvQtSDQvNC10YLQvtC00YtcbiAgICAgICAgaWYgKCFib2R5IHx8IHR5cGVvZiBib2R5LmdldE1vdGlvblN0YXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCfQntGI0LjQsdC60LA6INGB0L7Qt9C00LDQvdC90L7QtSDRhNC40LfQuNGH0LXRgdC60L7QtSDRgtC10LvQviDQvdC10LTQtdC50YHRgtCy0LjRgtC10LvRjNC90L4nKTtcbiAgICAgICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3kocmJJbmZvKTtcbiAgICAgICAgICAgIHdpbmRvdy5BbW1vLmRlc3Ryb3kobG9jYWxJbmVydGlhKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyDQo9GB0YLQsNC90LDQstC70LjQstCw0LXQvCDQtNC+0L/QvtC70L3QuNGC0LXQu9GM0L3Ri9C1INGB0LLQvtC50YHRgtCy0LBcbiAgICAgICAgYm9keS5zZXRGcmljdGlvbigxLjApOyAgICAgICAgICAvLyDQnNCw0LrRgdC40LzQsNC70YzQvdC+0LUg0YLRgNC10L3QuNC1INC00LvRjyDQutC+0L3RgtGA0L7Qu9GPXG4gICAgICAgIGJvZHkuc2V0Um9sbGluZ0ZyaWN0aW9uKDAuMyk7ICAgLy8g0KPQstC10LvQuNGH0LjQstCw0LXQvCDRgdC+0L/RgNC+0YLQuNCy0LvQtdC90LjQtSDQutCw0YfQtdC90LjRjlxuICAgICAgICBib2R5LnNldFJlc3RpdHV0aW9uKDAuMCk7ICAgICAgIC8vINCf0L7Qu9C90L7RgdGC0YzRjiDRg9Cx0LjRgNCw0LXQvCDQvtGC0YHQutC+0LogIFxuICAgICAgICBib2R5LnNldERhbXBpbmcoMC4yLCAwLjMpOyAgICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDQt9Cw0YLRg9GF0LDQvdC40LUg0LTQu9GPINC+0YHRgtCw0L3QvtCy0LrQuFxuICAgICAgICBcbiAgICAgICAgLy8g0J7RgtC60LvRjtGH0LDQtdC8INC00LXQsNC60YLQuNCy0LDRhtC40Y5cbiAgICAgICAgYm9keS5zZXRBY3RpdmF0aW9uU3RhdGUoNCk7IC8vIERJU0FCTEVfREVBQ1RJVkFUSU9OXG4gICAgICAgIFxuICAgICAgICAvLyDQlNC70Y8g0L3QtdCx0L7Qu9GM0YjQuNGFINGB0YTQtdGAINCy0LrQu9GO0YfQsNC10LwgQ0NEIChjb250aW51b3VzIGNvbGxpc2lvbiBkZXRlY3Rpb24pLFxuICAgICAgICAvLyDRh9GC0L7QsdGLINC/0YDQtdC00L7RgtCy0YDQsNGC0LjRgtGMINC/0YDQvtCy0LDQu9C40LLQsNC90LjQtSDRgdC60LLQvtC30Ywg0L/QvtCy0LXRgNGF0L3QvtGB0YLQuCDQv9GA0Lgg0LLRi9GB0L7QutC+0Lkg0YHQutC+0YDQvtGB0YLQuFxuICAgICAgICBib2R5LnNldENjZE1vdGlvblRocmVzaG9sZChyYWRpdXMgKiAwLjcpO1xuICAgICAgICBib2R5LnNldENjZFN3ZXB0U3BoZXJlUmFkaXVzKHJhZGl1cyAqIDAuNik7XG5cbiAgICAgICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INGC0LXQu9C+INCyINGE0LjQt9C40YfQtdGB0LrQuNC5INC80LjRgFxuICAgICAgICBjb25zdCBTUEhFUkVfR1JPVVAgPSAyO1xuICAgICAgICBwaHlzaWNzV29ybGQuYWRkUmlnaWRCb2R5KGJvZHksIFNQSEVSRV9HUk9VUCwgLTEpOyAvLyDQodGE0LXRgNGLINGB0YLQsNC70LrQuNCy0LDRjtGC0YHRjyDRgdC+INCy0YHQtdC80LhcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKGBbT2JqZWN0c10g0KTQuNC30LjRh9C10YHQutC+0LUg0YLQtdC70L4g0YHRhNC10YDRiyAke2RhdGEuaWR9INGB0L7Qt9C00LDQvdC+OiByYWRpdXM9JHtyYWRpdXN9LCBtYXNzPSR7bWFzc31gKTtcblxuICAgICAgICAvLyDQntGH0LjRgdGC0LrQsCDQv9Cw0LzRj9GC0LhcbiAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveShyYkluZm8pO1xuICAgICAgICB3aW5kb3cuQW1tby5kZXN0cm95KGxvY2FsSW5lcnRpYSk7XG5cbiAgICAgICAgcmV0dXJuIGJvZHk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcign0J7RiNC40LHQutCwINC/0YDQuCDRgdC+0LfQtNCw0L3QuNC4INGE0LjQt9C40YfQtdGB0LrQvtCz0L4g0YLQtdC70LA6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBoeXNpY3NCb2R5Rm9yQm94KGRhdGEpIHtcbiAgICBjb25zdCBwaHlzaWNzV29ybGQgPSBnZXRQaHlzaWNzV29ybGQoKTtcbiAgICBpZiAoIXBoeXNpY3NXb3JsZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiW09iamVjdHNdINCk0LjQt9C40YfQtdGB0LrQuNC5INC80LjRgCDQvdC1INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvVwiKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBBbW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignQW1tby5qcyDQvdC1INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvScpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBoeXNpY3NXb3JsZCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcign0KTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAINC90LUg0LjQvdC40YbQuNCw0LvQuNC30LjRgNC+0LLQsNC9Jyk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHdpZHRoID0gZGF0YS53aWR0aCB8fCAxO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBkYXRhLmhlaWdodCB8fCAxO1xuICAgICAgICBjb25zdCBkZXB0aCA9IGRhdGEuZGVwdGggfHwgMTtcbiAgICAgICAgY29uc3QgbWFzcyA9IGRhdGEubWFzcyB8fCAxO1xuXG4gICAgICAgIC8vINCh0L7Qt9C00LDQtdC8INCy0YHQtSBBbW1vINC+0LHRitC10LrRgtGLINGH0LXRgNC10Lcgd2luZG93LkFtbW9cbiAgICAgICAgY29uc3Qgc2hhcGUgPSBuZXcgd2luZG93LkFtbW8uYnRCb3hTaGFwZShuZXcgd2luZG93LkFtbW8uYnRWZWN0b3IzKHdpZHRoLzIsIGhlaWdodC8yLCBkZXB0aC8yKSk7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyB3aW5kb3cuQW1tby5idFRyYW5zZm9ybSgpO1xuICAgICAgICB0cmFuc2Zvcm0uc2V0SWRlbnRpdHkoKTtcbiAgICAgICAgdHJhbnNmb3JtLnNldE9yaWdpbihuZXcgd2luZG93LkFtbW8uYnRWZWN0b3IzKGRhdGEueCB8fCAwLCBkYXRhLnkgfHwgMCwgZGF0YS56IHx8IDApKTtcblxuICAgICAgICBjb25zdCBsb2NhbEluZXJ0aWEgPSBuZXcgd2luZG93LkFtbW8uYnRWZWN0b3IzKDAsIDAsIDApO1xuICAgICAgICBzaGFwZS5jYWxjdWxhdGVMb2NhbEluZXJ0aWEobWFzcywgbG9jYWxJbmVydGlhKTtcblxuICAgICAgICBjb25zdCBtb3Rpb25TdGF0ZSA9IG5ldyB3aW5kb3cuQW1tby5idERlZmF1bHRNb3Rpb25TdGF0ZSh0cmFuc2Zvcm0pO1xuICAgICAgICBjb25zdCByYkluZm8gPSBuZXcgd2luZG93LkFtbW8uYnRSaWdpZEJvZHlDb25zdHJ1Y3Rpb25JbmZvKFxuICAgICAgICAgICAgbWFzcyxcbiAgICAgICAgICAgIG1vdGlvblN0YXRlLFxuICAgICAgICAgICAgc2hhcGUsXG4gICAgICAgICAgICBsb2NhbEluZXJ0aWFcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgYm9keSA9IG5ldyB3aW5kb3cuQW1tby5idFJpZ2lkQm9keShyYkluZm8pO1xuICAgICAgICBcbiAgICAgICAgLy8g0J3QsNGB0YLRgNCw0LjQstCw0LXQvCDRhNC40LfQuNGH0LXRgdC60LjQtSDRgdCy0L7QudGB0YLQstCwXG4gICAgICAgIGJvZHkuc2V0RnJpY3Rpb24oMC41KTtcbiAgICAgICAgYm9keS5zZXRSb2xsaW5nRnJpY3Rpb24oMC4xKTtcbiAgICAgICAgYm9keS5zZXRSZXN0aXR1dGlvbigwLjIpOyAvLyDQndC10LzQvdC+0LPQviDRg9C80LXQvdGM0YjQsNC10Lwg0YPQv9GA0YPQs9C+0YHRgtGMINC00LvRjyDRgdGC0LDQsdC40LvRjNC90L7RgdGC0LhcbiAgICAgICAgYm9keS5zZXREYW1waW5nKDAuMDEsIDAuMDEpOyAvLyDQndC10LHQvtC70YzRiNC+0LUg0LvQuNC90LXQudC90L7QtSDQuCDRg9Cz0LvQvtCy0L7QtSDQt9Cw0YLRg9GF0LDQvdC40LVcbiAgICAgICAgXG4gICAgICAgIC8vINCS0LrQu9GO0YfQsNC10LwgQ0NEINC00LvRjyDQv9GA0LXQtNC+0YLQstGA0LDRidC10L3QuNGPINC/0YDQvtCy0LDQu9C40LLQsNC90LjRjyDRgdC60LLQvtC30Ywg0YLQtdGA0YDQtdC50L1cbiAgICAgICAgY29uc3QgbWF4RGltZW5zaW9uID0gTWF0aC5tYXgod2lkdGgsIGhlaWdodCwgZGVwdGgpO1xuICAgICAgICBib2R5LnNldENjZE1vdGlvblRocmVzaG9sZChtYXhEaW1lbnNpb24gKiAwLjgpOyAvLyDQo9Cy0LXQu9C40YfQuNCy0LDQtdC8INC/0L7RgNC+0LMg0LTQu9GPINCw0LrRgtC40LLQsNGG0LjQuCBDQ0RcbiAgICAgICAgYm9keS5zZXRDY2RTd2VwdFNwaGVyZVJhZGl1cyhtYXhEaW1lbnNpb24gKiAwLjcpOyAvLyDQoNCw0LTQuNGD0YEg0YHRhNC10YDRiyDQtNC70Y8gQ0NEXG4gICAgICAgIFxuICAgICAgICAvLyDQntGC0LrQu9GO0YfQsNC10Lwg0LTQtdCw0LrRgtC40LLQsNGG0LjRjlxuICAgICAgICBib2R5LnNldEFjdGl2YXRpb25TdGF0ZSg0KTsgLy8gRElTQUJMRV9ERUFDVElWQVRJT05cblxuICAgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0YLQtdC70L4g0LIg0YTQuNC30LjRh9C10YHQutC40Lkg0LzQuNGAXG4gICAgICAgIGNvbnN0IEJPWF9HUk9VUCA9IDM7XG4gICAgICAgIHBoeXNpY3NXb3JsZC5hZGRSaWdpZEJvZHkoYm9keSwgQk9YX0dST1VQLCAtMSk7IC8vINCa0L7RgNC+0LHQutC4INGB0YLQsNC70LrQuNCy0LDRjtGC0YHRjyDRgdC+INCy0YHQtdC80LhcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKFwiW0JveF0g0KTQuNC30LjRh9C10YHQutC+0LUg0YLQtdC70L4g0YHQvtC30LTQsNC90L46XCIsIHtcbiAgICAgICAgICAgIGRpbWVuc2lvbnM6IHtcbiAgICAgICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICAgICAgZGVwdGhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXNzLFxuICAgICAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICB4OiBkYXRhLnggfHwgMCxcbiAgICAgICAgICAgICAgICB5OiBkYXRhLnkgfHwgMCxcbiAgICAgICAgICAgICAgICB6OiBkYXRhLnogfHwgMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNjZDoge1xuICAgICAgICAgICAgICAgIG1vdGlvblRocmVzaG9sZDogbWF4RGltZW5zaW9uICogMC44LFxuICAgICAgICAgICAgICAgIHN3ZXB0U3BoZXJlUmFkaXVzOiBtYXhEaW1lbnNpb24gKiAwLjdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmcmljdGlvbjogMC41LFxuICAgICAgICAgICAgcmVzdGl0dXRpb246IDAuMlxuICAgICAgICB9KTtcblxuICAgICAgICAvLyDQntGH0LjRgdGC0LrQsCDQv9Cw0LzRj9GC0LhcbiAgICAgICAgd2luZG93LkFtbW8uZGVzdHJveShyYkluZm8pO1xuICAgICAgICB3aW5kb3cuQW1tby5kZXN0cm95KGxvY2FsSW5lcnRpYSk7XG5cbiAgICAgICAgcmV0dXJuIGJvZHk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcign0J7RiNC40LHQutCwINC/0YDQuCDRgdC+0LfQtNCw0L3QuNC4INGE0LjQt9C40YfQtdGB0LrQvtCz0L4g0YLQtdC70LA6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ29sb3IoY29sb3JTdHIpIHtcbiAgICBpZiAoIWNvbG9yU3RyKSByZXR1cm4gMHg4ODg4ODg7XG4gICAgaWYgKGNvbG9yU3RyLnN0YXJ0c1dpdGgoXCIjXCIpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChjb2xvclN0ci5zbGljZSgxKSwgMTYpO1xuICAgIH1cbiAgICByZXR1cm4gMHg4ODg4ODg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUZXN0U3BoZXJlKCkge1xuICAgIC8vINCh0L7Qt9C00LDQtdC8INCy0LjQt9GD0LDQu9GM0L3Rg9GOINGB0YTQtdGA0YNcbiAgICBjb25zdCByYWRpdXMgPSAxO1xuICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KHJhZGl1cywgMzIsIDMyKTtcbiAgICBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7IFxuICAgICAgICBjb2xvcjogMHhmZjAwZmYsXG4gICAgICAgIHNoaW5pbmVzczogMzBcbiAgICB9KTtcbiAgICBjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICBcbiAgICAvLyDQktC60LvRjtGH0LDQtdC8INGC0LXQvdC4INC00LvRjyDRgtC10YHRgtC+0LLQvtC5INGB0YTQtdGA0YtcbiAgICBtZXNoLmNhc3RTaGFkb3cgPSB0cnVlO1xuICAgIG1lc2gucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG4gICAgXG4gICAgLy8g0J/QvtC30LjRhtC40L7QvdC40YDRg9C10Lwg0YHRhNC10YDRgyDQstGL0YHQvtC60L4g0L3QsNC0INGC0LXRgNGA0LXQudC90L7QvFxuICAgIGNvbnN0IHN0YXJ0WSA9IDU4OyAvLyDQktGL0YHQvtGC0LAg0L3QsNC0INGC0LXRgNGA0LXQudC90L7QvFxuICAgIG1lc2gucG9zaXRpb24uc2V0KDAsIHN0YXJ0WSwgMCk7XG4gICAgc2NlbmUuYWRkKG1lc2gpO1xuXG4gICAgLy8g0KHQvtC30LTQsNC10Lwg0YTQuNC30LjRh9C10YHQutC+0LUg0YLQtdC70L5cbiAgICBjb25zdCBzaGFwZSA9IG5ldyBBbW1vLmJ0U3BoZXJlU2hhcGUocmFkaXVzKTtcbiAgICBjb25zdCBtYXNzID0gNTsgLy8g0KPQstC10LvQuNGH0LjQstCw0LXQvCDQvNCw0YHRgdGDINGBIDMg0LTQviA1XG4gICAgXG4gICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IEFtbW8uYnRUcmFuc2Zvcm0oKTtcbiAgICB0cmFuc2Zvcm0uc2V0SWRlbnRpdHkoKTtcbiAgICB0cmFuc2Zvcm0uc2V0T3JpZ2luKG5ldyBBbW1vLmJ0VmVjdG9yMygwLCBzdGFydFksIDApKTtcblxuICAgIGNvbnN0IGxvY2FsSW5lcnRpYSA9IG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcbiAgICBzaGFwZS5jYWxjdWxhdGVMb2NhbEluZXJ0aWEobWFzcywgbG9jYWxJbmVydGlhKTtcblxuICAgIGNvbnN0IG1vdGlvblN0YXRlID0gbmV3IEFtbW8uYnREZWZhdWx0TW90aW9uU3RhdGUodHJhbnNmb3JtKTtcbiAgICBjb25zdCByYkluZm8gPSBuZXcgQW1tby5idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm8obWFzcywgbW90aW9uU3RhdGUsIHNoYXBlLCBsb2NhbEluZXJ0aWEpO1xuICAgIGNvbnN0IGJvZHkgPSBuZXcgQW1tby5idFJpZ2lkQm9keShyYkluZm8pO1xuXG4gICAgLy8g0JLQsNC20L3Ri9C1INC90LDRgdGC0YDQvtC50LrQuCDQtNC70Y8g0YTQuNC30LjRh9C10YHQutC+0LPQviDRgtC10LvQsFxuICAgIGJvZHkuc2V0QWN0aXZhdGlvblN0YXRlKDQpOyAvLyBESVNBQkxFX0RFQUNUSVZBVElPTlxuICAgIGJvZHkuc2V0RnJpY3Rpb24oMS4wKTsgICAgICAgICAgLy8g0JzQsNC60YHQuNC80LDQu9GM0L3QvtC1INGC0YDQtdC90LjQtSDQtNC70Y8g0LrQvtC90YLRgNC+0LvRj1xuICAgIGJvZHkuc2V0Um9sbGluZ0ZyaWN0aW9uKDAuMyk7ICAgLy8g0KPQstC10LvQuNGH0LjQstCw0LXQvCDRgdC+0L/RgNC+0YLQuNCy0LvQtdC90LjQtSDQutCw0YfQtdC90LjRjlxuICAgIGJvZHkuc2V0UmVzdGl0dXRpb24oMC4wKTsgICAgICAgLy8g0J/QvtC70L3QvtGB0YLRjNGOINGD0LHQuNGA0LDQtdC8INC+0YLRgdC60L7QuiAgXG4gICAgYm9keS5zZXREYW1waW5nKDAuMiwgMC4zKTsgICAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0LfQsNGC0YPRhdCw0L3QuNC1INC00LvRjyDQvtGB0YLQsNC90L7QstC60LhcblxuICAgIC8vINCS0LrQu9GO0YfQsNC10LwgQ0NEINC00LvRjyDQv9GA0LXQtNC+0YLQstGA0LDRidC10L3QuNGPINC/0YDQvtCy0LDQu9C40LLQsNC90LjRjyDRgdC60LLQvtC30Ywg0L7QsdGK0LXQutGC0YtcbiAgICBib2R5LnNldENjZE1vdGlvblRocmVzaG9sZChyYWRpdXMgKiAwLjYpO1xuICAgIGJvZHkuc2V0Q2NkU3dlcHRTcGhlcmVSYWRpdXMocmFkaXVzICogMC41KTtcblxuICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDRgtC10LvQviDQsiDRhNC40LfQuNGH0LXRgdC60LjQuSDQvNC40YBcbiAgICBjb25zdCBTUEhFUkVfR1JPVVAgPSAyO1xuICAgIGNvbnN0IHBoeXNpY3NXb3JsZCA9IGdldFBoeXNpY3NXb3JsZCgpO1xuICAgIHBoeXNpY3NXb3JsZC5hZGRSaWdpZEJvZHkoYm9keSwgU1BIRVJFX0dST1VQLCAtMSk7IC8vINCi0LXRgdGC0L7QstCw0Y8g0YHRhNC10YDQsCDRgdGC0LDQu9C60LjQstCw0LXRgtGB0Y8g0YHQviDQstGB0LXQvNC4XG5cbiAgICAvLyDQntGH0LjRgdGC0LrQsCDQv9Cw0LzRj9GC0LhcbiAgICBBbW1vLmRlc3Ryb3kocmJJbmZvKTtcbiAgICBBbW1vLmRlc3Ryb3kobG9jYWxJbmVydGlhKTtcblxuICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDQvtCx0YrQtdC60YIg0LIg0L3QsNGIINGB0L/QuNGB0L7QuiDQvtCx0YrQtdC60YLQvtCyXG4gICAgY29uc3QgdGVzdFNwaGVyZU9iaiA9IHtcbiAgICAgICAgbWVzaCxcbiAgICAgICAgYm9keSxcbiAgICAgICAgb2JqZWN0X3R5cGU6IFwidGVzdF9zcGhlcmVcIixcbiAgICAgICAgcGh5c2ljc0J5OiBcImFtbW9cIiAvLyDQmNC30LzQtdC90LXQvdC+INGBIFwiYm90aFwiINC90LAgXCJhbW1vXCIsINGH0YLQvtCx0Ysg0YPQv9GA0LDQstC70Y/Qu9C+0YHRjCDRgtC+0LvRjNC60L4g0LvQvtC60LDQu9GM0L3QvtC5INGE0LjQt9C40LrQvtC5XG4gICAgfTtcbiAgICBvYmplY3RzW1widGVzdF9zcGhlcmVcIl0gPSB0ZXN0U3BoZXJlT2JqO1xuXG4gICAgcmV0dXJuIHRlc3RTcGhlcmVPYmo7XG59IiwiLy8gY2FtZXJhLmpzXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBvYmplY3RzIH0gZnJvbSAnLi9vYmplY3RzJztcbmltcG9ydCB7IGdldEFycm93RGlyZWN0aW9uIH0gZnJvbSAnLi9nYW1lcGFkJztcbmltcG9ydCBnYW1lU3RhdGVNYW5hZ2VyIGZyb20gJy4vZ2FtZXN0YXRlbWFuYWdlci5qcyc7XG5cbi8vINCe0LHRitGP0LLQu9GP0LXQvCDQutCw0LzQtdGA0YNcbmV4cG9ydCBsZXQgY2FtZXJhO1xuXG4vLyDQndCw0YHRgtGA0L7QudC60Lgg0LrQsNC80LXRgNGLIC0g0L7RgdGC0LDQstC70Y/QtdC8INC+0YDQuNCz0LjQvdCw0LvRjNC90YvQtSDQt9C90LDRh9C10L3QuNGPXG5jb25zdCBDQU1FUkFfSEVJR0hUID0gMTAwO1xuY29uc3QgQ0FNRVJBX0RJU1RBTkNFID0gMTAwO1xuY29uc3QgU01PT1RIX0ZBQ1RPUiA9IDAuMDU7XG5jb25zdCBST1RBVElPTl9TTU9PVEhfRkFDVE9SID0gMC4wMztcbmNvbnN0IERFQURfWk9ORV9BTkdMRSA9IDAuMztcbmNvbnN0IE1JTl9ZX0FOR0xFID0gLTAuNTtcbmNvbnN0IE1BWF9ZX0FOR0xFID0gMC41O1xuXG4vLyDQlNC+0L/QvtC70L3QuNGC0LXQu9GM0L3Ri9C1INC90LDRgdGC0YDQvtC50LrQuCDQtNC70Y8g0LDQtNCw0L/RgtC40LLQvdC+0LPQviDQtNC+0LLQvtGA0L7RgtCwXG5jb25zdCBNSU5fQURBUFRJVkVfRkFDVE9SID0gMC4wMTsgICAvLyDQnNC40L3QuNC80LDQu9GM0L3Ri9C5INGE0LDQutGC0L7RgCDQtNC+0LLQvtGA0L7RgtCwXG5jb25zdCBNQVhfQURBUFRJVkVfRkFDVE9SID0gMC4xMjsgICAvLyDQnNCw0LrRgdC40LzQsNC70YzQvdGL0Lkg0YTQsNC60YLQvtGAINC00LvRjyDQsdGL0YHRgtGA0YvRhSDQv9C+0LLQvtGA0L7RgtC+0LJcbmNvbnN0IFFVQURSQVRJQ19GQUNUT1IgPSAwLjk7ICAgICAgIC8vINCa0L7RjdGE0YTQuNGG0LjQtdC90YIg0LrQstCw0LTRgNCw0YLQuNGH0L3QvtC5INC30LDQstC40YHQuNC80L7RgdGC0LggKDAtMSlcblxuLy8g0JLQvdGD0YLRgNC10L3QvdGP0Y8g0L/QtdGA0LXQvNC10L3QvdCw0Y8g0LTQu9GPINGF0YDQsNC90LXQvdC40Y8g0YLQtdC60YPRidC10LPQviDQt9C90LDRh9C10L3QuNGPINC60L7RjdGE0YTQuNGG0LjQtdC90YLQsFxubGV0IGN1cnJlbnRRdWFkcmF0aWNGYWN0b3IgPSBRVUFEUkFUSUNfRkFDVE9SO1xuXG4vLyDQodC+0YXRgNCw0L3Rj9C10Lwg0L/QvtGB0LvQtdC00L3RjtGOINC40LfQstC10YHRgtC90YPRjiDQv9C+0LfQuNGG0LjRjiDQuCDQvdCw0L/RgNCw0LLQu9C10L3QuNC1INC40LPRgNC+0LrQsFxubGV0IGxhc3RLbm93blBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMCk7XG5sZXQgbGFzdENhbWVyYVBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwgQ0FNRVJBX0hFSUdIVCwgQ0FNRVJBX0RJU1RBTkNFKTtcbmxldCBsYXN0Q2FtZXJhRGlyZWN0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgLTEpOyAvLyDQndCw0YfQsNC70YzQvdC+0LUg0L3QsNC/0YDQsNCy0LvQtdC90LjQtSDQutCw0LzQtdGA0YtcbmxldCB0YXJnZXRDYW1lcmFEaXJlY3Rpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAtMSk7XG5sZXQgY2FtZXJhVGFyZ2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTsgLy8g0J/RgNC+0LzQtdC20YPRgtC+0YfQvdCw0Y8g0YLQvtGH0LrQsCDQtNC70Y8g0YHQs9C70LDQttC40LLQsNC90LjRj1xubGV0IGxhc3RBcnJvd0RpcmVjdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIDEpOyAvLyDQn9C+0YHQu9C10LTQvdC10LUg0L3QsNC/0YDQsNCy0LvQtdC90LjQtSDRgdGC0YDQtdC70LrQuFxubGV0IGxhc3RNZWFzdXJlZEFuZ2xlID0gMDsgLy8g0J/QvtGB0LvQtdC00L3QuNC5INC40LfQvNC10YDQtdC90L3Ri9C5INGD0LPQvtC7INC00LvRjyDQu9C+0LPQuNGA0L7QstCw0L3QuNGPXG5sZXQgbGFzdE1lYXN1cmVkRGlzdGFuY2UgPSAwOyAvLyDQn9C+0YHQu9C10LTQvdC10LUg0LjQt9C80LXRgNC10L3QvdC+0LUg0YDQsNGB0YHRgtC+0Y/QvdC40LUg0LTQu9GPINC70L7Qs9C40YDQvtCy0LDQvdC40Y9cbmxldCB0dXJuaW5nQWN0aXZlID0gZmFsc2U7IC8vINCk0LvQsNCzINCw0LrRgtC40LLQvdC+0LPQviDQv9C+0LLQvtGA0L7RgtCwINC00LvRjyDQu9C+0LPQuNGA0L7QstCw0L3QuNGPXG5cbi8vINCU0L7QsdCw0LLQuNC8INC90L7QstGD0Y4g0L/QtdGA0LXQvNC10L3QvdGD0Y4g0LTQu9GPINGB0LPQu9Cw0LbQuNCy0LDQvdC40Y8g0YLQvtGH0LrQuCwg0L3QsCDQutC+0YLQvtGA0YPRjiDRgdC80L7RgtGA0LjRgiDQutCw0LzQtdGA0LBcbmxldCBzbW9vdGhMb29rQXRUYXJnZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdENhbWVyYSgpIHtcbiAgICAvLyDQodC+0LfQtNCw0LXQvCDQutCw0LzQtdGA0YNcbiAgICBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoXG4gICAgICAgIDYwLFxuICAgICAgICB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCxcbiAgICAgICAgMC4yLFxuICAgICAgICAyMDAwXG4gICAgKTtcbiAgICBcbiAgICAvLyDQo9GB0YLQsNC90LDQstC70LjQstCw0LXQvCDQvdCw0YfQsNC70YzQvdGD0Y4g0L/QvtC30LjRhtC40Y5cbiAgICBjYW1lcmEucG9zaXRpb24uc2V0KDAsIENBTUVSQV9IRUlHSFQsIENBTUVSQV9ESVNUQU5DRSk7XG4gICAgY2FtZXJhLmxvb2tBdCgwLCAwLCAwKTtcbiAgICBcbiAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0L7QsdGA0LDQsdC+0YLRh9C40Log0LjQt9C80LXQvdC10L3QuNGPINGA0LDQt9C80LXRgNCwINC+0LrQvdCwXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uV2luZG93UmVzaXplKTtcbiAgICBcbiAgICAvLyDQmNC90LjRhtC40LDQu9C40LfQuNGA0YPQtdC8INC30L3QsNGH0LXQvdC40LUgY3VycmVudFF1YWRyYXRpY0ZhY3RvclxuICAgIGN1cnJlbnRRdWFkcmF0aWNGYWN0b3IgPSBRVUFEUkFUSUNfRkFDVE9SO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKFwiW0NhbWVyYV0g0JrQsNC80LXRgNCwINC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvdCwXCIpO1xuICAgIHJldHVybiBjYW1lcmE7XG59XG5cbmZ1bmN0aW9uIG9uV2luZG93UmVzaXplKCkge1xuICAgIGlmICghY2FtZXJhKSByZXR1cm47XG4gICAgY2FtZXJhLmFzcGVjdCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIGNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG59XG5cbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDQstGL0YfQuNGB0LvQtdC90LjRjyDRg9Cz0LvQsCDQvNC10LbQtNGDINC00LLRg9C80Y8g0L3QsNC/0YDQsNCy0LvQtdC90LjRj9C80Lgg0LIgM0RcbmZ1bmN0aW9uIGFuZ2xlQmV0d2VlbkRpcmVjdGlvbnMoZGlyMSwgZGlyMikge1xuICAgIC8vINCd0L7RgNC80LDQu9C40LfRg9C10Lwg0LLQtdC60YLQvtGA0Ysg0LTQu9GPINC60L7RgNGA0LXQutGC0L3QvtCz0L4g0LLRi9GH0LjRgdC70LXQvdC40Y8g0YPQs9C70LBcbiAgICBjb25zdCB2MSA9IGRpcjEuY2xvbmUoKS5ub3JtYWxpemUoKTtcbiAgICBjb25zdCB2MiA9IGRpcjIuY2xvbmUoKS5ub3JtYWxpemUoKTtcbiAgICBcbiAgICAvLyDQktGL0YfQuNGB0LvRj9C10Lwg0YPQs9C+0Lsg0LzQtdC20LTRgyDQstC10LrRgtC+0YDQsNC80LhcbiAgICByZXR1cm4gTWF0aC5hY29zKE1hdGgubWluKDEsIE1hdGgubWF4KC0xLCB2MS5kb3QodjIpKSkpO1xufVxuXG4vLyDQpNGD0L3QutGG0LjRjyDQtNC70Y8g0LLRi9GH0LjRgdC70LXQvdC40Y8g0LDQtNCw0L/RgtC40LLQvdC+0LPQviDRhNCw0LrRgtC+0YDQsCDQtNC+0LLQvtGA0L7RgtCwINGBINC60LLQsNC00YDQsNGC0LjRh9C90L7QuSDQt9Cw0LLQuNGB0LjQvNC+0YHRgtGM0Y5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUFkYXB0aXZlUm90YXRpb25GYWN0b3IoYW5nbGUsIGRpc3RhbmNlKSB7XG4gICAgLy8g0J3QvtGA0LzQsNC70LjQt9GD0LXQvCDRgNCw0YHRgdGC0L7Rj9C90LjQtSAo0L/RgNC10LTQv9C+0LvQsNCz0LDQtdC8LCDRh9GC0L4g0LzQsNC60YHQuNC80LDQu9GM0L3QvtC1INC30L3QsNGH0LjQvNC+0LUg0YDQsNGB0YHRgtC+0Y/QvdC40LUgLSAxMDApXG4gICAgY29uc3Qgbm9ybWFsaXplZERpc3RhbmNlID0gTWF0aC5taW4oZGlzdGFuY2UsIDEwMCkgLyAxMDA7XG4gICAgXG4gICAgLy8g0JLRi9GH0LjRgdC70Y/QtdC8INC+0YLQvdC+0YHQuNGC0LXQu9GM0L3Rg9GOINGB0LrQvtGA0L7RgdGC0Ywg0L/QvtCy0L7RgNC+0YLQsCDRgSDRg9GH0LXRgtC+0Lwg0YPQs9C70LBcbiAgICBjb25zdCBhbmdsZVJhdGlvID0gYW5nbGUgLyBERUFEX1pPTkVfQU5HTEU7XG4gICAgXG4gICAgLy8g0J/RgNC40LzQtdC90Y/QtdC8INC60LLQsNC00YDQsNGC0LjRh9C90YPRjiDQt9Cw0LLQuNGB0LjQvNC+0YHRgtGMINC+0YIg0YDQsNGB0YHRgtC+0Y/QvdC40Y8g0YEg0L3QsNGB0YLRgNCw0LjQstCw0LXQvNGL0Lwg0LrQvtGN0YTRhNC40YbQuNC10L3RgtC+0LxcbiAgICAvLyDQmtC+0LPQtNCwIGN1cnJlbnRRdWFkcmF0aWNGYWN0b3IgPSAwLCDQt9Cw0LLQuNGB0LjQvNC+0YHRgtGMINC70LjQvdC10LnQvdCw0Y9cbiAgICAvLyDQmtC+0LPQtNCwIGN1cnJlbnRRdWFkcmF0aWNGYWN0b3IgPSAxLCDQt9Cw0LLQuNGB0LjQvNC+0YHRgtGMINC/0L7Qu9C90L7RgdGC0YzRjiDQutCy0LDQtNGA0LDRgtC40YfQvdCw0Y9cbiAgICBjb25zdCBkaXN0YW5jZUZhY3RvciA9IG5vcm1hbGl6ZWREaXN0YW5jZSAqICgxIC0gY3VycmVudFF1YWRyYXRpY0ZhY3RvcikgKyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5wb3cobm9ybWFsaXplZERpc3RhbmNlLCAyKSAqIGN1cnJlbnRRdWFkcmF0aWNGYWN0b3I7XG4gICAgXG4gICAgLy8g0JrQvtC80LHQuNC90LjRgNGD0LXQvCDRhNCw0LrRgtC+0YDRiyDRg9Cz0LvQsCDQuCDRgNCw0YHRgdGC0L7Rj9C90LjRj1xuICAgIGNvbnN0IGNvbWJpbmVkRmFjdG9yID0gYW5nbGVSYXRpbyAqIGRpc3RhbmNlRmFjdG9yO1xuICAgIFxuICAgIC8vINCY0L3RgtC10YDQv9C+0LvQuNGA0YPQtdC8INC80LXQttC00YMg0LzQuNC90LjQvNCw0LvRjNC90YvQvCDQuCDQvNCw0LrRgdC40LzQsNC70YzQvdGL0Lwg0YTQsNC60YLQvtGA0LDQvNC4INC00L7QstC+0YDQvtGC0LBcbiAgICBjb25zdCBhZGFwdGl2ZUZhY3RvciA9IE1JTl9BREFQVElWRV9GQUNUT1IgKyBcbiAgICAgICAgKE1BWF9BREFQVElWRV9GQUNUT1IgLSBNSU5fQURBUFRJVkVfRkFDVE9SKSAqIFxuICAgICAgICBNYXRoLm1pbigxLjAsIGNvbWJpbmVkRmFjdG9yKTtcbiAgICBcbiAgICByZXR1cm4gYWRhcHRpdmVGYWN0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVDYW1lcmEoKSB7XG4gICAgaWYgKCFjYW1lcmEpIHJldHVybjtcbiAgICBcbiAgICAvLyDQn9C+0LvRg9GH0LDQtdC8IElEINC+0LHRitC10LrRgtCwINC40LPRgNC+0LrQsCDQvtGCIEdhbWVTdGF0ZU1hbmFnZXJcbiAgICBjb25zdCBwbGF5ZXJPYmplY3RJRCA9IGdhbWVTdGF0ZU1hbmFnZXIuZ2V0UGxheWVyT2JqZWN0SUQoKTtcbiAgICBpZiAoIXBsYXllck9iamVjdElEKSB7XG4gICAgICAgIC8vINCV0YHQu9C4IHBsYXllciBJRCDQtdGJ0LUg0L3QtSDQv9C+0LvRg9GH0LXQvSwg0LjRgdC/0L7Qu9GM0LfRg9C10Lwg0L/QvtGB0LvQtdC00L3RjtGOINC40LfQstC10YHRgtC90YPRjiDQv9C+0LfQuNGG0LjRjlxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHBsYXllciA9IG9iamVjdHNbcGxheWVyT2JqZWN0SURdO1xuICAgIFxuICAgIGlmIChwbGF5ZXIgJiYgcGxheWVyLm1lc2gpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFBsYXllclBvc2l0aW9uID0gcGxheWVyLm1lc2gucG9zaXRpb24uY2xvbmUoKTtcbiAgICAgICAgY29uc3QgYXJyb3dEaXJlY3Rpb24gPSBnZXRBcnJvd0RpcmVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgLy8g0J/Qu9Cw0LLQvdC+INC+0LHQvdC+0LLQu9GP0LXQvCDRgtC+0YfQutGDLCDQvdCwINC60L7RgtC+0YDRg9GOINGB0LzQvtGC0YDQuNGCINC60LDQvNC10YDQsFxuICAgICAgICBzbW9vdGhMb29rQXRUYXJnZXQubGVycChjdXJyZW50UGxheWVyUG9zaXRpb24sIFNNT09USF9GQUNUT1IpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGFycm93RGlyZWN0aW9uLmxlbmd0aCgpID4gMCkge1xuICAgICAgICAgICAgY29uc3QgYW5nbGUgPSBhbmdsZUJldHdlZW5EaXJlY3Rpb25zKGFycm93RGlyZWN0aW9uLCBsYXN0QXJyb3dEaXJlY3Rpb24pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoYW5nbGUgPiBERUFEX1pPTkVfQU5HTEUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB5Q29tcG9uZW50ID0gTWF0aC5tYXgoTUlOX1lfQU5HTEUsIE1hdGgubWluKE1BWF9ZX0FOR0xFLCAtYXJyb3dEaXJlY3Rpb24ueSkpO1xuICAgICAgICAgICAgICAgIHRhcmdldENhbWVyYURpcmVjdGlvbi5zZXQoLWFycm93RGlyZWN0aW9uLngsIHlDb21wb25lbnQsIC1hcnJvd0RpcmVjdGlvbi56KS5ub3JtYWxpemUoKTtcbiAgICAgICAgICAgICAgICBsYXN0QXJyb3dEaXJlY3Rpb24uY29weShhcnJvd0RpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgdHVybmluZ0FjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGFkYXB0aXZlUm90YXRpb25GYWN0b3IgPSBjYWxjdWxhdGVBZGFwdGl2ZVJvdGF0aW9uRmFjdG9yKGxhc3RNZWFzdXJlZEFuZ2xlLCBsYXN0TWVhc3VyZWREaXN0YW5jZSk7XG4gICAgICAgIGxhc3RDYW1lcmFEaXJlY3Rpb24ubGVycCh0YXJnZXRDYW1lcmFEaXJlY3Rpb24sIGFkYXB0aXZlUm90YXRpb25GYWN0b3IpO1xuICAgICAgICBsYXN0Q2FtZXJhRGlyZWN0aW9uLm5vcm1hbGl6ZSgpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbERpc3RhbmNlID0gQ0FNRVJBX0RJU1RBTkNFICogTWF0aC5jb3MobGFzdENhbWVyYURpcmVjdGlvbi55KTtcbiAgICAgICAgY29uc3QgY2FtZXJhT2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoXG4gICAgICAgICAgICBsYXN0Q2FtZXJhRGlyZWN0aW9uLnggKiBob3Jpem9udGFsRGlzdGFuY2UsXG4gICAgICAgICAgICBDQU1FUkFfSEVJR0hUICsgbGFzdENhbWVyYURpcmVjdGlvbi55ICogQ0FNRVJBX0RJU1RBTkNFLFxuICAgICAgICAgICAgbGFzdENhbWVyYURpcmVjdGlvbi56ICogaG9yaXpvbnRhbERpc3RhbmNlXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB0YXJnZXRQb3NpdGlvbiA9IGN1cnJlbnRQbGF5ZXJQb3NpdGlvbi5jbG9uZSgpLmFkZChjYW1lcmFPZmZzZXQpO1xuICAgICAgICBjYW1lcmFUYXJnZXQubGVycCh0YXJnZXRQb3NpdGlvbiwgU01PT1RIX0ZBQ1RPUik7XG4gICAgICAgIGNhbWVyYS5wb3NpdGlvbi5jb3B5KGNhbWVyYVRhcmdldCk7XG4gICAgICAgIFxuICAgICAgICAvLyDQmtCw0LzQtdGA0LAg0YLQtdC/0LXRgNGMINGB0LzQvtGC0YDQuNGCINC90LAg0YHQs9C70LDQttC10L3QvdGD0Y4g0L/QvtC30LjRhtC40Y5cbiAgICAgICAgY2FtZXJhLmxvb2tBdChzbW9vdGhMb29rQXRUYXJnZXQpO1xuICAgICAgICBcbiAgICAgICAgbGFzdEtub3duUG9zaXRpb24uY29weShjdXJyZW50UGxheWVyUG9zaXRpb24pO1xuICAgIH1cbn1cblxuLy8g0KTRg9C90LrRhtC40Y8g0LTQu9GPINC40LfQvNC10L3QtdC90LjRjyDQutC+0Y3RhNGE0LjRhtC40LXQvdGC0LAg0LrQstCw0LTRgNCw0YLQuNGH0L3QvtC5INC30LDQstC40YHQuNC80L7RgdGC0LhcbmV4cG9ydCBmdW5jdGlvbiBzZXRRdWFkcmF0aWNGYWN0b3IodmFsdWUpIHtcbiAgICAvLyDQntCz0YDQsNC90LjRh9C40LLQsNC10Lwg0LfQvdCw0YfQtdC90LjQtSDQvtGCIDAg0LTQviAxXG4gICAgY29uc3QgbmV3VmFsdWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB2YWx1ZSkpO1xuICAgIGNvbnNvbGUubG9nKGBbQ2FtZXJhXSDQmNC30LzQtdC90LXQvdC40LUg0LrQvtGN0YTRhNC40YbQuNC10L3RgtCwINC60LLQsNC00YDQsNGC0LjRh9C90L7QuSDQt9Cw0LLQuNGB0LjQvNC+0YHRgtC4OiAke2N1cnJlbnRRdWFkcmF0aWNGYWN0b3IudG9GaXhlZCgyKX0gLT4gJHtuZXdWYWx1ZS50b0ZpeGVkKDIpfWApO1xuICAgIGN1cnJlbnRRdWFkcmF0aWNGYWN0b3IgPSBuZXdWYWx1ZTtcbiAgICByZXR1cm4gbmV3VmFsdWU7XG59XG5cbi8vINCk0YPQvdC60YbQuNGPINC00LvRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0YLQtdC60YPRidC10LPQviDQutC+0Y3RhNGE0LjRhtC40LXQvdGC0LAg0LrQstCw0LTRgNCw0YLQuNGH0L3QvtC5INC30LDQstC40YHQuNC80L7RgdGC0LhcbmV4cG9ydCBmdW5jdGlvbiBnZXRRdWFkcmF0aWNGYWN0b3IoKSB7XG4gICAgcmV0dXJuIGN1cnJlbnRRdWFkcmF0aWNGYWN0b3I7XG59XG5cbi8vIERlYnVnLdGE0YPQvdC60YbQuNGPINC00LvRjyDQstGL0LLQvtC00LAg0YDQsNGB0YjQuNGA0LXQvdC90L7QuSDQuNC90YTQvtGA0LzQsNGG0LjQuCDQviDQutCw0LzQtdGA0LVcbmV4cG9ydCBmdW5jdGlvbiBsb2dDYW1lcmFTdGF0dXMoKSB7XG4gICAgaWYgKCFjYW1lcmEpIHJldHVybjtcbiAgICBcbiAgICAvLyBjb25zb2xlLmxvZyhgW0NhbWVyYV0gUG9zaXRpb246ICgke2NhbWVyYS5wb3NpdGlvbi54LnRvRml4ZWQoMil9LCAke2NhbWVyYS5wb3NpdGlvbi55LnRvRml4ZWQoMil9LCAke2NhbWVyYS5wb3NpdGlvbi56LnRvRml4ZWQoMil9KWApO1xuICAgIC8vIGNvbnNvbGUubG9nKGBbQ2FtZXJhXSBEaXJlY3Rpb246ICgke2xhc3RDYW1lcmFEaXJlY3Rpb24ueC50b0ZpeGVkKDIpfSwgJHtsYXN0Q2FtZXJhRGlyZWN0aW9uLnkudG9GaXhlZCgyKX0sICR7bGFzdENhbWVyYURpcmVjdGlvbi56LnRvRml4ZWQoMil9KWApO1xuICAgIC8vIGNvbnNvbGUubG9nKGBbQ2FtZXJhXSBUYXJnZXQgRGlyZWN0aW9uOiAoJHt0YXJnZXRDYW1lcmFEaXJlY3Rpb24ueC50b0ZpeGVkKDIpfSwgJHt0YXJnZXRDYW1lcmFEaXJlY3Rpb24ueS50b0ZpeGVkKDIpfSwgJHt0YXJnZXRDYW1lcmFEaXJlY3Rpb24uei50b0ZpeGVkKDIpfSlgKTtcbiAgICAvLyBjb25zb2xlLmxvZyhgW0NhbWVyYV0gQXJyb3cgRGlyZWN0aW9uOiAoJHtsYXN0QXJyb3dEaXJlY3Rpb24ueC50b0ZpeGVkKDIpfSwgJHtsYXN0QXJyb3dEaXJlY3Rpb24ueS50b0ZpeGVkKDIpfSwgJHtsYXN0QXJyb3dEaXJlY3Rpb24uei50b0ZpeGVkKDIpfSlgKTtcbiAgICAvLyBjb25zb2xlLmxvZyhgW0NhbWVyYV0gTG9va2luZyBhdDogKCR7bGFzdEtub3duUG9zaXRpb24ueC50b0ZpeGVkKDIpfSwgJHtsYXN0S25vd25Qb3NpdGlvbi55LnRvRml4ZWQoMil9LCAke2xhc3RLbm93blBvc2l0aW9uLnoudG9GaXhlZCgyKX0pYCk7XG4gICAgLy8gY29uc29sZS5sb2coYFtDYW1lcmFdIFR1cm5pbmcgQWN0aXZlOiAke3R1cm5pbmdBY3RpdmV9LCBMYXN0IEFuZ2xlOiAke2xhc3RNZWFzdXJlZEFuZ2xlLnRvRml4ZWQoMyl9INGA0LDQtCAoJHsobGFzdE1lYXN1cmVkQW5nbGUgKiAxODAgLyBNYXRoLlBJKS50b0ZpeGVkKDEpfcKwKWApO1xuICAgIC8vIGNvbnNvbGUubG9nKGBbQ2FtZXJhXSBMYXN0IERpc3RhbmNlOiAke2xhc3RNZWFzdXJlZERpc3RhbmNlLnRvRml4ZWQoMSl9LCBRdWFkcmF0aWMgRmFjdG9yOiAke2N1cnJlbnRRdWFkcmF0aWNGYWN0b3IudG9GaXhlZCgyKX0sIERlZmF1bHQ6ICR7UVVBRFJBVElDX0ZBQ1RPUi50b0ZpeGVkKDIpfWApO1xuICAgIC8vIGNvbnNvbGUubG9nKGBbQ2FtZXJhXSBBZGFwdGl2ZSBGYWN0b3I6ICR7Y2FsY3VsYXRlQWRhcHRpdmVSb3RhdGlvbkZhY3RvcihsYXN0TWVhc3VyZWRBbmdsZSwgbGFzdE1lYXN1cmVkRGlzdGFuY2UpLnRvRml4ZWQoMyl9YCk7XG4gICAgXG4gICAgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8INC90LDQu9C40YfQuNC1INC40LPRgNC+0LrQsFxuICAgIGNvbnN0IHBsYXllck9iamVjdElEID0gZ2FtZVN0YXRlTWFuYWdlci5nZXRQbGF5ZXJPYmplY3RJRCgpO1xuICAgIGlmIChwbGF5ZXJPYmplY3RJRCkge1xuICAgICAgICBjb25zdCBwbGF5ZXIgPSBvYmplY3RzW3BsYXllck9iamVjdElEXTtcbiAgICAgICAgaWYgKHBsYXllciAmJiBwbGF5ZXIubWVzaCkge1xuICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgW0NhbWVyYV0gUGxheWVyIGZvdW5kIGF0OiAoJHtwbGF5ZXIubWVzaC5wb3NpdGlvbi54LnRvRml4ZWQoMil9LCAke3BsYXllci5tZXNoLnBvc2l0aW9uLnkudG9GaXhlZCgyKX0sICR7cGxheWVyLm1lc2gucG9zaXRpb24uei50b0ZpeGVkKDIpfSlgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgLy8gY29uc29sZS5sb2coYFtDYW1lcmFdIFBsYXllciBvYmplY3Qgd2l0aCBJRCBcIiR7cGxheWVyT2JqZWN0SUR9XCIgbm90IGZvdW5kIGluIG9iamVjdHMhYCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhgW0NhbWVyYV0gUGxheWVyIElEIG5vdCB5ZXQgcmVjZWl2ZWQgZnJvbSBzZXJ2ZXJgKTtcbiAgICB9XG59ICIsIi8vINCS0LjQt9GD0LDQu9GM0L3Ri9C5INC40L3RgtC10YDRhNC10LnRgSDQtNC70Y8g0YLQtdC70LXQvNC10YLRgNC40LhcbmNsYXNzIFRlbGVtZXRyeVVJIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wYW5lbCA9IG51bGw7XG4gICAgICAgIHRoaXMubG9nQ29udGFpbmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc0NvbGxhcHNlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1heExvZ0VudHJpZXMgPSAxMDA7XG4gICAgICAgIHRoaXMubG9nRW50cmllcyA9IFtdO1xuICAgICAgICB0aGlzLmZpbHRlcnMgPSB7XG4gICAgICAgICAgICBjb3JyZWN0aW9uczogdHJ1ZSxcbiAgICAgICAgICAgIHVwZGF0ZXM6IHRydWUsXG4gICAgICAgICAgICBjb21tYW5kczogdHJ1ZSxcbiAgICAgICAgICAgIGdhcmJhZ2U6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudmlld01vZGUgPSAnc3VtbWFyeSc7IC8vICdzdW1tYXJ5JyDQuNC70LggJ2RldGFpbGVkJ1xuICAgICAgICB0aGlzLmRldGFpbGVkRGF0YSA9IFtdOyAvLyDQlNC10YLQsNC70YzQvdGL0LUg0LTQsNC90L3Ri9C1INGC0LXQu9C10LzQtdGC0YDQuNC4XG4gICAgICAgIFxuICAgICAgICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNyZWF0ZVVJKCk7XG4gICAgICAgIHRoaXMuc2V0dXBFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgICBcbiAgICBjcmVhdGVVSSgpIHtcbiAgICAgICAgLy8g0KHQvtC30LTQsNC10Lwg0L7RgdC90L7QstC90YPRjiDQv9Cw0L3QtdC70YxcbiAgICAgICAgdGhpcy5wYW5lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLnBhbmVsLmlkID0gJ3RlbGVtZXRyeS1wYW5lbCc7XG4gICAgICAgIHRoaXMucGFuZWwuaW5uZXJIVE1MID0gYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRlbGVtZXRyeS1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGVsZW1ldHJ5LXRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGVsZW1ldHJ5LWljb25cIj7wn5SsPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj7QotC10LvQtdC80LXRgtGA0LjRjzwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZWxlbWV0cnktc3RhdHVzXCIgaWQ9XCJ0ZWxlbWV0cnktc3RhdHVzXCI+0J7Qmjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGVsZW1ldHJ5LWNvbnRyb2xzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9XCJ0ZWxlbWV0cnktbW9kZVwiIHRpdGxlPVwi0J/QtdGA0LXQutC70Y7Rh9C40YLRjCDRgNC10LbQuNC8XCI+8J+TijwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwidGVsZW1ldHJ5LXRvZ2dsZVwiIHRpdGxlPVwi0KHQstC10YDQvdGD0YLRjC/QoNCw0LfQstC10YDQvdGD0YLRjFwiPuKIkjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwidGVsZW1ldHJ5LWNsZWFyXCIgdGl0bGU9XCLQntGH0LjRgdGC0LjRgtGMXCI+8J+Xke+4jzwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwidGVsZW1ldHJ5LWV4cG9ydFwiIHRpdGxlPVwi0K3QutGB0L/QvtGA0YJcIj7wn5K+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9XCJ0ZWxlbWV0cnktY2xvc2VcIiB0aXRsZT1cItCX0LDQutGA0YvRgtGMXCI+w5c8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRlbGVtZXRyeS1ib2R5XCIgaWQ9XCJ0ZWxlbWV0cnktYm9keVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZWxlbWV0cnktZmlsdGVyc1wiPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwiZmlsdGVyLWNvcnJlY3Rpb25zXCIgY2hlY2tlZD4g0JrQvtGA0YDQtdC60YbQuNC4PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cImZpbHRlci11cGRhdGVzXCIgY2hlY2tlZD4g0J7QsdC90L7QstC70LXQvdC40Y88L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwiZmlsdGVyLWNvbW1hbmRzXCIgY2hlY2tlZD4g0JrQvtC80LDQvdC00Ys8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwiZmlsdGVyLWdhcmJhZ2VcIiBjaGVja2VkPiDQnNGD0YHQvtGAPC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGVsZW1ldHJ5LXN0YXRzXCIgaWQ9XCJ0ZWxlbWV0cnktc3RhdHNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInN0YXQtaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzdGF0LWxhYmVsXCI+0JrQvtGA0YDQtdC60YbQuNC5Ojwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3RhdC12YWx1ZVwiIGlkPVwic3RhdC1jb3JyZWN0aW9uc1wiPjA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3RhdC1pdGVtXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInN0YXQtbGFiZWxcIj7QntCx0L3QvtCy0LvQtdC90LjQuTo8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInN0YXQtdmFsdWVcIiBpZD1cInN0YXQtdXBkYXRlc1wiPjA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3RhdC1pdGVtXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInN0YXQtbGFiZWxcIj7QnNGD0YHQvtGA0L3Ri9GFOjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3RhdC12YWx1ZVwiIGlkPVwic3RhdC1nYXJiYWdlXCI+MDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRlbGVtZXRyeS1jb250ZW50XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZWxlbWV0cnktbG9nXCIgaWQ9XCJ0ZWxlbWV0cnktbG9nXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZWxlbWV0cnktZGV0YWlsZWRcIiBpZD1cInRlbGVtZXRyeS1kZXRhaWxlZFwiIHN0eWxlPVwiZGlzcGxheTogbm9uZTtcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgICAgICBcbiAgICAgICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INGB0YLQuNC70LhcbiAgICAgICAgdGhpcy5hZGRTdHlsZXMoKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDQv9Cw0L3QtdC70Ywg0L3QsCDRgdGC0YDQsNC90LjRhtGDXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5wYW5lbCk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmxvZ0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0ZWxlbWV0cnktbG9nJyk7XG4gICAgfVxuICAgIFxuICAgIGFkZFN0eWxlcygpIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICBzdHlsZS50ZXh0Q29udGVudCA9IGBcbiAgICAgICAgICAgICN0ZWxlbWV0cnktcGFuZWwge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgICAgICAgICB0b3A6IDIwcHg7XG4gICAgICAgICAgICAgICAgcmlnaHQ6IDIwcHg7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDQwMHB4O1xuICAgICAgICAgICAgICAgIG1heC1oZWlnaHQ6IDYwdmg7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjkpO1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICM0NDQ7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgICAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAnQ291cmllciBOZXcnLCBtb25vc3BhY2U7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICAgICAgICAgIHotaW5kZXg6IDEwMDAwO1xuICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgNHB4IDEycHggcmdiYSgwLCAwLCAwLCAwLjUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAudGVsZW1ldHJ5LWhlYWRlciB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAjMzMzO1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDhweCAxMnB4O1xuICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDhweCA4cHggMCAwO1xuICAgICAgICAgICAgICAgIGN1cnNvcjogbW92ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLnRlbGVtZXRyeS10aXRsZSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgICAgICAgIGdhcDogOHB4O1xuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAudGVsZW1ldHJ5LXN0YXR1cyB7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogMnB4IDZweDtcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMHB4O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICMyZDVhMmQ7XG4gICAgICAgICAgICAgICAgY29sb3I6ICM5MGVlOTA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC50ZWxlbWV0cnktc3RhdHVzLndhcm5pbmcge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICM1YTRkMmQ7XG4gICAgICAgICAgICAgICAgY29sb3I6ICNmZmQ3MDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC50ZWxlbWV0cnktc3RhdHVzLmVycm9yIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAjNWEyZDJkO1xuICAgICAgICAgICAgICAgIGNvbG9yOiAjZmY2YjZiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAudGVsZW1ldHJ5LWNvbnRyb2xzIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGdhcDogNHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAudGVsZW1ldHJ5LWNvbnRyb2xzIGJ1dHRvbiB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogIzU1NTtcbiAgICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogNHB4IDhweDtcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLnRlbGVtZXRyeS1jb250cm9scyBidXR0b246aG92ZXIge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICM2NjY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC50ZWxlbWV0cnktYm9keSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTJweDtcbiAgICAgICAgICAgICAgICBtYXgtaGVpZ2h0OiA1MHZoO1xuICAgICAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgICAgIGdhcDogOHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAudGVsZW1ldHJ5LWJvZHkuY29sbGFwc2VkIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAudGVsZW1ldHJ5LWZpbHRlcnMge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgZ2FwOiAxMnB4O1xuICAgICAgICAgICAgICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogOHB4O1xuICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjNDQ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAudGVsZW1ldHJ5LWZpbHRlcnMgbGFiZWwge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBnYXA6IDRweDtcbiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMXB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAudGVsZW1ldHJ5LWZpbHRlcnMgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdIHtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC50ZWxlbWV0cnktc3RhdHMge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDZweCAwO1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICMxYTFhMWE7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDhweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLnN0YXQtaXRlbSB7XG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAuc3RhdC1sYWJlbCB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMHB4O1xuICAgICAgICAgICAgICAgIGNvbG9yOiAjOTk5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAuc3RhdC12YWx1ZSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAudGVsZW1ldHJ5LWNvbnRlbnQge1xuICAgICAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC50ZWxlbWV0cnktbG9nLCAudGVsZW1ldHJ5LWRldGFpbGVkIHtcbiAgICAgICAgICAgICAgICBmbGV4OiAxO1xuICAgICAgICAgICAgICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgICAgICAgICAgICAgbWF4LWhlaWdodDogMzAwcHg7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogNHB4O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICMxMTE7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICMzMzM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC5sb2ctZW50cnkge1xuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDJweCA0cHg7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAxcHggMDtcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMXB4O1xuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC5sb2ctZW50cnkuY29ycmVjdGlvbiB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDEwNywgMTA3LCAwLjEpO1xuICAgICAgICAgICAgICAgIGJvcmRlci1sZWZ0OiAzcHggc29saWQgI2ZmNmI2YjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLmxvZy1lbnRyeS51cGRhdGUge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMTM1LCAyMDYsIDIzNSwgMC4xKTtcbiAgICAgICAgICAgICAgICBib3JkZXItbGVmdDogM3B4IHNvbGlkICM4N2NlZWI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC5sb2ctZW50cnkuY29tbWFuZCB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgxNDQsIDIzOCwgMTQ0LCAwLjEpO1xuICAgICAgICAgICAgICAgIGJvcmRlci1sZWZ0OiAzcHggc29saWQgIzkwZWU5MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLmxvZy1lbnRyeS5nYXJiYWdlIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMTY1LCAwLCAwLjEpO1xuICAgICAgICAgICAgICAgIGJvcmRlci1sZWZ0OiAzcHggc29saWQgI2ZmYTUwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLmxvZy1lbnRyeS5zdW1tYXJ5IHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDE0NywgMTEyLCAyMTksIDAuMSk7XG4gICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDNweCBzb2xpZCAjOTM3MGRiO1xuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAubG9nLXRpbWVzdGFtcCB7XG4gICAgICAgICAgICAgICAgY29sb3I6ICM2NjY7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxMHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAubG9nLW1lc3NhZ2Uge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAuZGV0YWlsZWQtZW50cnkge1xuICAgICAgICAgICAgICAgIG1hcmdpbjogNHB4IDA7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogNnB4O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICMxYTFhMWE7XG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgICAgICAgICAgIGJvcmRlci1sZWZ0OiAzcHggc29saWQgIzU1NTtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDEwcHg7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLmRldGFpbGVkLWVudHJ5Lm9iamVjdC1zdGF0ZSB7XG4gICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQtY29sb3I6ICM0Q0FGNTA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC5kZXRhaWxlZC1lbnRyeS5jb3JyZWN0aW9uIHtcbiAgICAgICAgICAgICAgICBib3JkZXItbGVmdC1jb2xvcjogI2ZmNmI2YjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLmRldGFpbGVkLWVudHJ5LnNlcnZlci11cGRhdGUge1xuICAgICAgICAgICAgICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjODdjZWViO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAuZGV0YWlsZWQtZW50cnkuY2xpZW50LWNvbW1hbmQge1xuICAgICAgICAgICAgICAgIGJvcmRlci1sZWZ0LWNvbG9yOiAjOTBlZTkwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAuZGV0YWlsZWQtaGVhZGVyIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogI2NjYztcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAycHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC5kZXRhaWxlZC1kYXRhIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogI2FhYTtcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogOHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAuZGV0YWlsZWQtcG9zaXRpb24ge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAjZmZlYjNiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAuZGV0YWlsZWQtdmVsb2NpdHkge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAjMjE5NmYzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAuZGV0YWlsZWQtdGltZXN0YW1wIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogIzY2NjtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDlweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICAgICAgXG4gICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgIH1cbiAgICBcbiAgICBzZXR1cEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICAvLyDQmtC90L7Qv9C60LAg0L/QtdGA0LXQutC70Y7Rh9C10L3QuNGPINGA0LXQttC40LzQsFxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGVsZW1ldHJ5LW1vZGUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlVmlld01vZGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyDQmtC90L7Qv9C60LAg0YHQstC+0YDQsNGH0LjQstCw0L3QuNGPL9GA0LDQt9Cy0L7RgNCw0YfQuNCy0LDQvdC40Y9cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RlbGVtZXRyeS10b2dnbGUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlQ29sbGFwc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyDQmtC90L7Qv9C60LAg0L7Rh9C40YHRgtC60LhcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RlbGVtZXRyeS1jbGVhcicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jbGVhckxvZygpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vINCa0L3QvtC/0LrQsCDRjdC60YHQv9C+0YDRgtCwXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0ZWxlbWV0cnktZXhwb3J0JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmV4cG9ydERhdGEoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyDQmtC90L7Qv9C60LAg0LfQsNC60YDRi9GC0LjRj1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGVsZW1ldHJ5LWNsb3NlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyDQpNC40LvRjNGC0YDRi1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsdGVyLWNvcnJlY3Rpb25zJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVycy5jb3JyZWN0aW9ucyA9IGUudGFyZ2V0LmNoZWNrZWQ7XG4gICAgICAgICAgICB0aGlzLmFwcGx5RmlsdGVycygpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWx0ZXItdXBkYXRlcycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmZpbHRlcnMudXBkYXRlcyA9IGUudGFyZ2V0LmNoZWNrZWQ7XG4gICAgICAgICAgICB0aGlzLmFwcGx5RmlsdGVycygpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWx0ZXItY29tbWFuZHMnKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5maWx0ZXJzLmNvbW1hbmRzID0gZS50YXJnZXQuY2hlY2tlZDtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlGaWx0ZXJzKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbHRlci1nYXJiYWdlJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVycy5nYXJiYWdlID0gZS50YXJnZXQuY2hlY2tlZDtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlGaWx0ZXJzKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8g0JTQtdC70LDQtdC8INC/0LDQvdC10LvRjCDQv9C10YDQtdGC0LDRgdC60LjQstCw0LXQvNC+0LlcbiAgICAgICAgdGhpcy5tYWtlRHJhZ2dhYmxlKCk7XG4gICAgfVxuICAgIFxuICAgIG1ha2VEcmFnZ2FibGUoKSB7XG4gICAgICAgIGNvbnN0IGhlYWRlciA9IHRoaXMucGFuZWwucXVlcnlTZWxlY3RvcignLnRlbGVtZXRyeS1oZWFkZXInKTtcbiAgICAgICAgbGV0IGlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgbGV0IGN1cnJlbnRYLCBjdXJyZW50WSwgaW5pdGlhbFgsIGluaXRpYWxZO1xuICAgICAgICBcbiAgICAgICAgaGVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChlKSA9PiB7XG4gICAgICAgICAgICBpc0RyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGluaXRpYWxYID0gZS5jbGllbnRYIC0gdGhpcy5wYW5lbC5vZmZzZXRMZWZ0O1xuICAgICAgICAgICAgaW5pdGlhbFkgPSBlLmNsaWVudFkgLSB0aGlzLnBhbmVsLm9mZnNldFRvcDtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgY3VycmVudFggPSBlLmNsaWVudFggLSBpbml0aWFsWDtcbiAgICAgICAgICAgICAgICBjdXJyZW50WSA9IGUuY2xpZW50WSAtIGluaXRpYWxZO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMucGFuZWwuc3R5bGUubGVmdCA9IGN1cnJlbnRYICsgJ3B4JztcbiAgICAgICAgICAgICAgICB0aGlzLnBhbmVsLnN0eWxlLnRvcCA9IGN1cnJlbnRZICsgJ3B4JztcbiAgICAgICAgICAgICAgICB0aGlzLnBhbmVsLnN0eWxlLnJpZ2h0ID0gJ2F1dG8nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCAoKSA9PiB7XG4gICAgICAgICAgICBpc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICB0b2dnbGVWaWV3TW9kZSgpIHtcbiAgICAgICAgY29uc3QgbG9nQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RlbGVtZXRyeS1sb2cnKTtcbiAgICAgICAgY29uc3QgZGV0YWlsZWRDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGVsZW1ldHJ5LWRldGFpbGVkJyk7XG4gICAgICAgIGNvbnN0IG1vZGVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGVsZW1ldHJ5LW1vZGUnKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudmlld01vZGUgPSB0aGlzLnZpZXdNb2RlID09PSAnc3VtbWFyeScgPyAnZGV0YWlsZWQnIDogJ3N1bW1hcnknO1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMudmlld01vZGUgPT09ICdkZXRhaWxlZCcpIHtcbiAgICAgICAgICAgIGxvZ0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgZGV0YWlsZWRDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICBtb2RlQnV0dG9uLnRleHRDb250ZW50ID0gJ/Cfk4gnO1xuICAgICAgICAgICAgbW9kZUJ1dHRvbi50aXRsZSA9ICfQodCy0L7QtNC90YvQuSDRgNC10LbQuNC8JztcbiAgICAgICAgICAgIHRoaXMucmVuZGVyRGV0YWlsZWRWaWV3KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2dDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICBkZXRhaWxlZENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgbW9kZUJ1dHRvbi50ZXh0Q29udGVudCA9ICfwn5OKJztcbiAgICAgICAgICAgIG1vZGVCdXR0b24udGl0bGUgPSAn0JTQtdGC0LDQu9GM0L3Ri9C5INGA0LXQttC40LwnO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHRvZ2dsZUNvbGxhcHNlKCkge1xuICAgICAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RlbGVtZXRyeS1ib2R5Jyk7XG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0ZWxlbWV0cnktdG9nZ2xlJyk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmlzQ29sbGFwc2VkID0gIXRoaXMuaXNDb2xsYXBzZWQ7XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5pc0NvbGxhcHNlZCkge1xuICAgICAgICAgICAgYm9keS5jbGFzc0xpc3QuYWRkKCdjb2xsYXBzZWQnKTtcbiAgICAgICAgICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9ICcrJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnY29sbGFwc2VkJyk7XG4gICAgICAgICAgICBidXR0b24udGV4dENvbnRlbnQgPSAn4oiSJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICB0b2dnbGVQYXVzZSgpIHtcbiAgICAgICAgdGhpcy5pc1BhdXNlZCA9ICF0aGlzLmlzUGF1c2VkO1xuICAgICAgICBjb25zdCBwYXVzZUJ0biA9IHRoaXMucGFuZWwucXVlcnlTZWxlY3RvcignLnRlbGVtZXRyeS1jb250cm9scyBidXR0b246bnRoLWNoaWxkKDIpJyk7XG4gICAgICAgIGlmICh0aGlzLmlzUGF1c2VkKSB7XG4gICAgICAgICAgICBwYXVzZUJ0bi5pbm5lckhUTUwgPSAn4pa277iPJztcbiAgICAgICAgICAgIHBhdXNlQnRuLnRpdGxlID0gJ9CS0L7Qt9C+0LHQvdC+0LLQuNGC0Ywg0L7QsdC90L7QstC70LXQvdC40LUg0YLQtdC70LXQvNC10YLRgNC40LgnO1xuICAgICAgICAgICAgdGhpcy5hZGRMb2dFbnRyeSgnc3lzdGVtJywgJ9Ci0LXQu9C10LzQtdGC0YDQuNGPINC/0YDQuNC+0YHRgtCw0L3QvtCy0LvQtdC90LAnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhdXNlQnRuLmlubmVySFRNTCA9ICfij7jvuI8nO1xuICAgICAgICAgICAgcGF1c2VCdG4udGl0bGUgPSAn0J/RgNC40L7RgdGC0LDQvdC+0LLQuNGC0Ywg0L7QsdC90L7QstC70LXQvdC40LUg0YLQtdC70LXQvNC10YLRgNC40LgnO1xuICAgICAgICAgICAgdGhpcy5hZGRMb2dFbnRyeSgnc3lzdGVtJywgJ9Ci0LXQu9C10LzQtdGC0YDQuNGPINCy0L7Qt9C+0LHQvdC+0LLQu9C10L3QsCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGFkZExvZ0VudHJ5KHR5cGUsIG1lc3NhZ2UsIHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNQYXVzZWQpIHJldHVybjtcbiAgICAgICAgY29uc3QgZW50cnkgPSB7XG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIHRpbWVzdGFtcCxcbiAgICAgICAgICAgIHZpc2libGU6IHRoaXMuZmlsdGVyc1t0eXBlXSAhPT0gZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMubG9nRW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICAgICAgXG4gICAgICAgIC8vINCe0LPRgNCw0L3QuNGH0LjQstCw0LXQvCDQutC+0LvQuNGH0LXRgdGC0LLQviDQt9Cw0L/QuNGB0LXQuVxuICAgICAgICBpZiAodGhpcy5sb2dFbnRyaWVzLmxlbmd0aCA+IHRoaXMubWF4TG9nRW50cmllcykge1xuICAgICAgICAgICAgdGhpcy5sb2dFbnRyaWVzLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMucmVuZGVyTG9nRW50cnkoZW50cnkpO1xuICAgICAgICB0aGlzLnVwZGF0ZVN0YXRzKCk7XG4gICAgICAgIHRoaXMuc2Nyb2xsVG9Cb3R0b20oKTtcbiAgICB9XG4gICAgXG4gICAgcmVuZGVyTG9nRW50cnkoZW50cnkpIHtcbiAgICAgICAgaWYgKCFlbnRyeS52aXNpYmxlKSByZXR1cm47XG4gICAgICAgIFxuICAgICAgICBjb25zdCBsb2dFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGxvZ0VsZW1lbnQuY2xhc3NOYW1lID0gYGxvZy1lbnRyeSAke2VudHJ5LnR5cGV9YDtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRpbWVTdHIgPSBlbnRyeS50aW1lc3RhbXAudG9Mb2NhbGVUaW1lU3RyaW5nKCdydS1SVScsIHtcbiAgICAgICAgICAgIGhvdXIxMjogZmFsc2UsXG4gICAgICAgICAgICBob3VyOiAnMi1kaWdpdCcsXG4gICAgICAgICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgICAgICAgIHNlY29uZDogJzItZGlnaXQnLFxuICAgICAgICAgICAgZnJhY3Rpb25hbFNlY29uZERpZ2l0czogM1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGxvZ0VsZW1lbnQuaW5uZXJIVE1MID0gYFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsb2ctdGltZXN0YW1wXCI+WyR7dGltZVN0cn1dPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsb2ctbWVzc2FnZVwiPiR7ZW50cnkubWVzc2FnZX08L3NwYW4+XG4gICAgICAgIGA7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmxvZ0NvbnRhaW5lci5hcHBlbmRDaGlsZChsb2dFbGVtZW50KTtcbiAgICAgICAgXG4gICAgICAgIC8vINCj0LTQsNC70Y/QtdC8INGB0YLQsNGA0YvQtSDQt9Cw0L/QuNGB0Lgg0LjQtyBET01cbiAgICAgICAgd2hpbGUgKHRoaXMubG9nQ29udGFpbmVyLmNoaWxkcmVuLmxlbmd0aCA+IHRoaXMubWF4TG9nRW50cmllcykge1xuICAgICAgICAgICAgdGhpcy5sb2dDb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5sb2dDb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgdXBkYXRlU3RhdHMoKSB7XG4gICAgICAgIGNvbnN0IHJlY2VudFRpbWUgPSBEYXRlLm5vdygpIC0gMTAwMDA7IC8vINCf0L7RgdC70LXQtNC90LjQtSAxMCDRgdC10LrRg9C90LRcbiAgICAgICAgY29uc3QgcmVjZW50RW50cmllcyA9IHRoaXMubG9nRW50cmllcy5maWx0ZXIoZSA9PiBlLnRpbWVzdGFtcC5nZXRUaW1lKCkgPiByZWNlbnRUaW1lKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGNvcnJlY3Rpb25zID0gcmVjZW50RW50cmllcy5maWx0ZXIoZSA9PiBlLnR5cGUgPT09ICdjb3JyZWN0aW9uJykubGVuZ3RoO1xuICAgICAgICBjb25zdCB1cGRhdGVzID0gcmVjZW50RW50cmllcy5maWx0ZXIoZSA9PiBlLnR5cGUgPT09ICd1cGRhdGUnKS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGdhcmJhZ2UgPSByZWNlbnRFbnRyaWVzLmZpbHRlcihlID0+IGUudHlwZSA9PT0gJ2dhcmJhZ2UnKS5sZW5ndGg7XG4gICAgICAgIFxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdC1jb3JyZWN0aW9ucycpLnRleHRDb250ZW50ID0gY29ycmVjdGlvbnM7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGF0LXVwZGF0ZXMnKS50ZXh0Q29udGVudCA9IHVwZGF0ZXM7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGF0LWdhcmJhZ2UnKS50ZXh0Q29udGVudCA9IGdhcmJhZ2U7XG4gICAgICAgIFxuICAgICAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0YHRgtCw0YLRg9GBXG4gICAgICAgIGNvbnN0IHN0YXR1c0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGVsZW1ldHJ5LXN0YXR1cycpO1xuICAgICAgICBpZiAoY29ycmVjdGlvbnMgPiAxMCB8fCBnYXJiYWdlID4gNSkge1xuICAgICAgICAgICAgc3RhdHVzRWxlbWVudC50ZXh0Q29udGVudCA9ICfQn9Cg0J7QkdCb0JXQnNCrJztcbiAgICAgICAgICAgIHN0YXR1c0VsZW1lbnQuY2xhc3NOYW1lID0gJ3RlbGVtZXRyeS1zdGF0dXMgZXJyb3InO1xuICAgICAgICB9IGVsc2UgaWYgKGNvcnJlY3Rpb25zID4gMyB8fCBnYXJiYWdlID4gMCkge1xuICAgICAgICAgICAgc3RhdHVzRWxlbWVudC50ZXh0Q29udGVudCA9ICfQn9Cg0JXQlNCj0J/QoNCV0JbQlNCV0J3QmNCVJztcbiAgICAgICAgICAgIHN0YXR1c0VsZW1lbnQuY2xhc3NOYW1lID0gJ3RlbGVtZXRyeS1zdGF0dXMgd2FybmluZyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0dXNFbGVtZW50LnRleHRDb250ZW50ID0gJ9Ce0JonO1xuICAgICAgICAgICAgc3RhdHVzRWxlbWVudC5jbGFzc05hbWUgPSAndGVsZW1ldHJ5LXN0YXR1cyc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgYXBwbHlGaWx0ZXJzKCkge1xuICAgICAgICB0aGlzLmxvZ0NvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgdGhpcy5sb2dFbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgICAgICAgZW50cnkudmlzaWJsZSA9IHRoaXMuZmlsdGVyc1tlbnRyeS50eXBlXSAhPT0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoZW50cnkudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyTG9nRW50cnkoZW50cnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zY3JvbGxUb0JvdHRvbSgpO1xuICAgIH1cbiAgICBcbiAgICBzY3JvbGxUb0JvdHRvbSgpIHtcbiAgICAgICAgdGhpcy5sb2dDb250YWluZXIuc2Nyb2xsVG9wID0gdGhpcy5sb2dDb250YWluZXIuc2Nyb2xsSGVpZ2h0O1xuICAgIH1cbiAgICBcbiAgICBjbGVhckxvZygpIHtcbiAgICAgICAgdGhpcy5sb2dFbnRyaWVzID0gW107XG4gICAgICAgIHRoaXMubG9nQ29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgICAgICB0aGlzLnVwZGF0ZVN0YXRzKCk7XG4gICAgICAgIHRoaXMuYWRkTG9nRW50cnkoJ3N1bW1hcnknLCAn0JvQvtCzINC+0YfQuNGJ0LXQvScsIG5ldyBEYXRlKCkpO1xuICAgIH1cbiAgICBcbiAgICBleHBvcnREYXRhKCkge1xuICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICBlbnRyaWVzOiB0aGlzLmxvZ0VudHJpZXMubWFwKGVudHJ5ID0+ICh7XG4gICAgICAgICAgICAgICAgdHlwZTogZW50cnkudHlwZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBlbnRyeS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogZW50cnkudGltZXN0YW1wLnRvSVNPU3RyaW5nKClcbiAgICAgICAgICAgIH0pKVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCAyKV0sIHsgdHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nIH0pO1xuICAgICAgICBjb25zdCB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICBhLmhyZWYgPSB1cmw7XG4gICAgICAgIGEuZG93bmxvYWQgPSBgdGVsZW1ldHJ5XyR7RGF0ZS5ub3coKX0uanNvbmA7XG4gICAgICAgIGEuY2xpY2soKTtcbiAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5hZGRMb2dFbnRyeSgnc3VtbWFyeScsIGDQlNCw0L3QvdGL0LUg0Y3QutGB0L/QvtGA0YLQuNGA0L7QstCw0L3RiyAoJHt0aGlzLmxvZ0VudHJpZXMubGVuZ3RofSDQt9Cw0L/QuNGB0LXQuSlgLCBuZXcgRGF0ZSgpKTtcbiAgICB9XG4gICAgXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5wYW5lbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICB9XG4gICAgXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5wYW5lbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cbiAgICBcbiAgICByZW5kZXJEZXRhaWxlZFZpZXcoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0ZWxlbWV0cnktZGV0YWlsZWQnKTtcbiAgICAgICAgaWYgKCFjb250YWluZXIpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgXG4gICAgICAgIC8vINCf0L7QutCw0LfRi9Cy0LDQtdC8INC/0L7RgdC70LXQtNC90LjQtSA1MCDQtNC10YLQsNC70YzQvdGL0YUg0LfQsNC/0LjRgdC10LlcbiAgICAgICAgY29uc3QgcmVjZW50RGF0YSA9IHRoaXMuZGV0YWlsZWREYXRhLnNsaWNlKC01MCk7XG4gICAgICAgIFxuICAgICAgICByZWNlbnREYXRhLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuY3JlYXRlRGV0YWlsZWRFbnRyeShlbnRyeSk7XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8g0J/RgNC+0LrRgNGD0YfQuNCy0LDQtdC8INCy0L3QuNC3XG4gICAgICAgIGNvbnRhaW5lci5zY3JvbGxUb3AgPSBjb250YWluZXIuc2Nyb2xsSGVpZ2h0O1xuICAgIH1cbiAgICBcbiAgICBjcmVhdGVEZXRhaWxlZEVudHJ5KGVudHJ5KSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBgZGV0YWlsZWQtZW50cnkgJHtlbnRyeS50eXBlfWA7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB0aW1lU3RyID0gbmV3IERhdGUoZW50cnkudGltZXN0YW1wKS50b0xvY2FsZVRpbWVTdHJpbmcoJ3J1LVJVJywge1xuICAgICAgICAgICAgaG91cjEyOiBmYWxzZSxcbiAgICAgICAgICAgIGhvdXI6ICcyLWRpZ2l0JyxcbiAgICAgICAgICAgIG1pbnV0ZTogJzItZGlnaXQnLFxuICAgICAgICAgICAgc2Vjb25kOiAnMi1kaWdpdCcsXG4gICAgICAgICAgICBmcmFjdGlvbmFsU2Vjb25kRGlnaXRzOiAzXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBgPGRpdiBjbGFzcz1cImRldGFpbGVkLXRpbWVzdGFtcFwiPlske3RpbWVTdHJ9XTwvZGl2PmA7XG4gICAgICAgIFxuICAgICAgICBzd2l0Y2ggKGVudHJ5LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ29iamVjdC1zdGF0ZSc6XG4gICAgICAgICAgICAgICAgY29udGVudCArPSB0aGlzLmZvcm1hdE9iamVjdFN0YXRlKGVudHJ5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvcnJlY3Rpb24nOlxuICAgICAgICAgICAgICAgIGNvbnRlbnQgKz0gdGhpcy5mb3JtYXRDb3JyZWN0aW9uKGVudHJ5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlcnZlci11cGRhdGUnOlxuICAgICAgICAgICAgICAgIGNvbnRlbnQgKz0gdGhpcy5mb3JtYXRTZXJ2ZXJVcGRhdGUoZW50cnkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY2xpZW50LWNvbW1hbmQnOlxuICAgICAgICAgICAgICAgIGNvbnRlbnQgKz0gdGhpcy5mb3JtYXRDbGllbnRDb21tYW5kKGVudHJ5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY29udGVudCArPSBgPGRpdiBjbGFzcz1cImRldGFpbGVkLWhlYWRlclwiPiR7ZW50cnkudHlwZX08L2Rpdj5gO1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgKz0gYDxkaXYgY2xhc3M9XCJkZXRhaWxlZC1kYXRhXCI+JHtKU09OLnN0cmluZ2lmeShlbnRyeS5kYXRhKX08L2Rpdj5gO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IGNvbnRlbnQ7XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cbiAgICBcbiAgICBmb3JtYXRPYmplY3RTdGF0ZShlbnRyeSkge1xuICAgICAgICBjb25zdCBkYXRhID0gZW50cnkuZGF0YTtcbiAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkZXRhaWxlZC1oZWFkZXJcIj7QodC+0YHRgtC+0Y/QvdC40LUg0L7QsdGK0LXQutGC0LAgJHtkYXRhLm9iamVjdElkfTwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRldGFpbGVkLWRhdGFcIj5cbiAgICAgICAgICAgICAgICA8ZGl2PtCi0LjQvzogJHtkYXRhLm9iamVjdFR5cGV9ICgke2RhdGEucGh5c2ljc1R5cGV9KTwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkZXRhaWxlZC1wb3NpdGlvblwiPtCf0L7Qt9C40YbQuNGPOiB4PSR7ZGF0YS5wb3NpdGlvbi54LnRvRml4ZWQoMyl9LCB5PSR7ZGF0YS5wb3NpdGlvbi55LnRvRml4ZWQoMyl9LCB6PSR7ZGF0YS5wb3NpdGlvbi56LnRvRml4ZWQoMyl9PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRldGFpbGVkLXZlbG9jaXR5XCI+0KHQutC+0YDQvtGB0YLRjDogeD0ke2RhdGEudmVsb2NpdHkueC50b0ZpeGVkKDMpfSwgeT0ke2RhdGEudmVsb2NpdHkueS50b0ZpeGVkKDMpfSwgej0ke2RhdGEudmVsb2NpdHkuei50b0ZpeGVkKDMpfSAoJHtkYXRhLnNwZWVkLnRvRml4ZWQoMyl9IHUvcyk8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2PtCc0LDRgdGB0LA6ICR7ZGF0YS5tYXNzfSwg0KDQsNC00LjRg9GBOiAke2RhdGEucmFkaXVzfTwvZGl2PlxuICAgICAgICAgICAgICAgICR7ZGF0YS5hcHBsaWVkSW1wdWxzZSA/IGA8ZGl2PtCY0LzQv9GD0LvRjNGBOiB4PSR7ZGF0YS5hcHBsaWVkSW1wdWxzZS54LnRvRml4ZWQoMyl9LCB5PSR7ZGF0YS5hcHBsaWVkSW1wdWxzZS55LnRvRml4ZWQoMyl9LCB6PSR7ZGF0YS5hcHBsaWVkSW1wdWxzZS56LnRvRml4ZWQoMyl9PC9kaXY+YCA6ICcnfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxuICAgIFxuICAgIGZvcm1hdENvcnJlY3Rpb24oZW50cnkpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGVudHJ5LmRhdGE7XG4gICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGV0YWlsZWQtaGVhZGVyXCI+0JrQvtGA0YDQtdC60YbQuNGPICR7ZGF0YS5jb3JyZWN0aW9uVHlwZX06INC+0LHRitC10LrRgiAke2RhdGEub2JqZWN0SWR9PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGV0YWlsZWQtZGF0YVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkZXRhaWxlZC1wb3NpdGlvblwiPtCe0YI6IHg9JHtkYXRhLmZyb21Qb3MueC50b0ZpeGVkKDMpfSwgeT0ke2RhdGEuZnJvbVBvcy55LnRvRml4ZWQoMyl9LCB6PSR7ZGF0YS5mcm9tUG9zLnoudG9GaXhlZCgzKX08L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGV0YWlsZWQtcG9zaXRpb25cIj7QlNC+OiB4PSR7ZGF0YS50b1Bvcy54LnRvRml4ZWQoMyl9LCB5PSR7ZGF0YS50b1Bvcy55LnRvRml4ZWQoMyl9LCB6PSR7ZGF0YS50b1Bvcy56LnRvRml4ZWQoMyl9PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdj7QoNCw0YHRgdGC0L7Rj9C90LjQtTogJHtkYXRhLmRpc3RhbmNlLnRvRml4ZWQoMyl9INC10LTQuNC90LjRhjwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxuICAgIFxuICAgIGZvcm1hdFNlcnZlclVwZGF0ZShlbnRyeSkge1xuICAgICAgICBjb25zdCBkYXRhID0gZW50cnkuZGF0YTtcbiAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkZXRhaWxlZC1oZWFkZXJcIj7QntCx0L3QvtCy0LvQtdC90LjQtSDRgdC10YDQstC10YDQsDog0L7QsdGK0LXQutGCICR7ZGF0YS5vYmplY3RJZH08L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkZXRhaWxlZC1kYXRhXCI+XG4gICAgICAgICAgICAgICAgJHtkYXRhLmlzR2FyYmFnZSA/ICc8ZGl2IHN0eWxlPVwiY29sb3I6ICNmZmE1MDA7XCI+4pqg77iPINCc0KPQodCe0KDQndCr0JUg0JTQkNCd0J3Qq9CVPC9kaXY+JyA6ICcnfVxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkZXRhaWxlZC1wb3NpdGlvblwiPtCf0L7Qt9C40YbQuNGPOiB4PSR7ZGF0YS5wb3NpdGlvbi54LnRvRml4ZWQoMyl9LCB5PSR7ZGF0YS5wb3NpdGlvbi55LnRvRml4ZWQoMyl9LCB6PSR7ZGF0YS5wb3NpdGlvbi56LnRvRml4ZWQoMyl9PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRldGFpbGVkLXZlbG9jaXR5XCI+0KHQutC+0YDQvtGB0YLRjDogeD0ke2RhdGEudmVsb2NpdHkueC50b0ZpeGVkKDMpfSwgeT0ke2RhdGEudmVsb2NpdHkueS50b0ZpeGVkKDMpfSwgej0ke2RhdGEudmVsb2NpdHkuei50b0ZpeGVkKDMpfTwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxuICAgIFxuICAgIGZvcm1hdENsaWVudENvbW1hbmQoZW50cnkpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGVudHJ5LmRhdGE7XG4gICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGV0YWlsZWQtaGVhZGVyXCI+0JrQvtC80LDQvdC00LAg0LrQu9C40LXQvdGC0LA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkZXRhaWxlZC1kYXRhXCI+XG4gICAgICAgICAgICAgICAgPGRpdj7QndCw0L/RgNCw0LLQu9C10L3QuNC1OiB4PSR7ZGF0YS5kaXJlY3Rpb24ueC50b0ZpeGVkKDMpfSwgeT0ke2RhdGEuZGlyZWN0aW9uLnkudG9GaXhlZCgzKX0sIHo9JHtkYXRhLmRpcmVjdGlvbi56LnRvRml4ZWQoMyl9PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdj7QoNCw0YHRgdGC0L7Rj9C90LjQtTogJHtkYXRhLmRpc3RhbmNlLnRvRml4ZWQoMyl9PC9kaXY+XG4gICAgICAgICAgICAgICAgJHtkYXRhLmZvcmNlID8gYDxkaXY+0KHQuNC70LA6IHg9JHtkYXRhLmZvcmNlLngudG9GaXhlZCgzKX0sIHk9JHtkYXRhLmZvcmNlLnkudG9GaXhlZCgzKX0sIHo9JHtkYXRhLmZvcmNlLnoudG9GaXhlZCgzKX08L2Rpdj5gIDogJyd9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICB9XG4gICAgXG4gICAgYWRkRGV0YWlsZWRFbnRyeSh0eXBlLCBkYXRhLCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUGF1c2VkKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGVudHJ5ID0ge1xuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcC5nZXRUaW1lID8gdGltZXN0YW1wLmdldFRpbWUoKSA6IHRpbWVzdGFtcFxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgdGhpcy5kZXRhaWxlZERhdGEucHVzaChlbnRyeSk7XG4gICAgICAgIFxuICAgICAgICAvLyDQntCz0YDQsNC90LjRh9C40LLQsNC10Lwg0YDQsNC30LzQtdGAINCx0YPRhNC10YDQsFxuICAgICAgICBpZiAodGhpcy5kZXRhaWxlZERhdGEubGVuZ3RoID4gMjAwKSB7XG4gICAgICAgICAgICB0aGlzLmRldGFpbGVkRGF0YS5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0LTQtdGC0LDQu9GM0L3Ri9C5INCy0LjQtCDQtdGB0LvQuCDQvtC9INCw0LrRgtC40LLQtdC9XG4gICAgICAgIGlmICh0aGlzLnZpZXdNb2RlID09PSAnZGV0YWlsZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckRldGFpbGVkVmlldygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8g0JzQtdGC0L7QtNGLINC00LvRjyDQuNC90YLQtdCz0YDQsNGG0LjQuCDRgSDRgtC10LvQtdC80LXRgtGA0LjQtdC5XG4gICAgbG9nQ29ycmVjdGlvbihvYmplY3RJZCwgZnJvbVBvcywgdG9Qb3MsIHR5cGUsIGRpc3RhbmNlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUGF1c2VkKSByZXR1cm47XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBg0JrQvtGA0YDQtdC60YbQuNGPICR7dHlwZX06INC+0LHRitC10LrRgiAke29iamVjdElkfSwg0YDQsNGB0YHRgtC+0Y/QvdC40LUgJHtkaXN0YW5jZS50b0ZpeGVkKDIpfWA7XG4gICAgICAgIHRoaXMuYWRkTG9nRW50cnkoJ2NvcnJlY3Rpb24nLCBtZXNzYWdlKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDQtNC10YLQsNC70YzQvdGL0LUg0LTQsNC90L3Ri9C1XG4gICAgICAgIHRoaXMuYWRkRGV0YWlsZWRFbnRyeSgnY29ycmVjdGlvbicsIHtcbiAgICAgICAgICAgIG9iamVjdElkLFxuICAgICAgICAgICAgZnJvbVBvcyxcbiAgICAgICAgICAgIHRvUG9zLFxuICAgICAgICAgICAgY29ycmVjdGlvblR5cGU6IHR5cGUsXG4gICAgICAgICAgICBkaXN0YW5jZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgbG9nU2VydmVyVXBkYXRlKG9iamVjdElkLCBwb3NpdGlvbiwgdmVsb2NpdHksIGlzR2FyYmFnZSkge1xuICAgICAgICBpZiAodGhpcy5pc1BhdXNlZCkgcmV0dXJuO1xuICAgICAgICBpZiAoaXNHYXJiYWdlKSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYNCc0YPRgdC+0YDQvdGL0LUg0LTQsNC90L3Ri9C1INC+0YIg0YHQtdGA0LLQtdGA0LA6INC+0LHRitC10LrRgiAke29iamVjdElkfWA7XG4gICAgICAgICAgICB0aGlzLmFkZExvZ0VudHJ5KCdnYXJiYWdlJywgbWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYNCe0LHQvdC+0LLQu9C10L3QuNC1INGB0LXRgNCy0LXRgNCwOiDQvtCx0YrQtdC60YIgJHtvYmplY3RJZH1gO1xuICAgICAgICAgICAgdGhpcy5hZGRMb2dFbnRyeSgndXBkYXRlJywgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vINCU0L7QsdCw0LLQu9GP0LXQvCDQtNC10YLQsNC70YzQvdGL0LUg0LTQsNC90L3Ri9C1XG4gICAgICAgIHRoaXMuYWRkRGV0YWlsZWRFbnRyeSgnc2VydmVyLXVwZGF0ZScsIHtcbiAgICAgICAgICAgIG9iamVjdElkLFxuICAgICAgICAgICAgcG9zaXRpb24sXG4gICAgICAgICAgICB2ZWxvY2l0eSxcbiAgICAgICAgICAgIGlzR2FyYmFnZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgbG9nQ2xpZW50Q29tbWFuZChkaXJlY3Rpb24sIGRpc3RhbmNlLCBmb3JjZSkge1xuICAgICAgICBpZiAodGhpcy5pc1BhdXNlZCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYNCa0L7QvNCw0L3QtNCwINC60LvQuNC10L3RgtCwOiDRgNCw0YHRgdGC0L7Rj9C90LjQtSAke2Rpc3RhbmNlLnRvRml4ZWQoMil9YDtcbiAgICAgICAgdGhpcy5hZGRMb2dFbnRyeSgnY29tbWFuZCcsIG1lc3NhZ2UpO1xuICAgICAgICBcbiAgICAgICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC00LXRgtCw0LvRjNC90YvQtSDQtNCw0L3QvdGL0LVcbiAgICAgICAgdGhpcy5hZGREZXRhaWxlZEVudHJ5KCdjbGllbnQtY29tbWFuZCcsIHtcbiAgICAgICAgICAgIGRpcmVjdGlvbixcbiAgICAgICAgICAgIGRpc3RhbmNlLFxuICAgICAgICAgICAgZm9yY2VcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIGxvZ1N1bW1hcnkoc3RhdHMpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNQYXVzZWQpIHJldHVybjtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGDQodCy0L7QtNC60LA6INC60L7RgNGA0LXQutGG0LjQuSAke3N0YXRzLmNvcnJlY3Rpb25zIHx8IDB9LCDQvtCx0L3QvtCy0LvQtdC90LjQuSAke3N0YXRzLnVwZGF0ZXMgfHwgMH0sINC80YPRgdC+0YDQvdGL0YUgJHtzdGF0cy5nYXJiYWdlIHx8IDB9YDtcbiAgICAgICAgdGhpcy5hZGRMb2dFbnRyeSgnc3VtbWFyeScsIG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHByaW50UmVjZW50UGxheWVyRGF0YSgpIHtcbiAgICAgICAgLy8g0KHQvtCx0LjRgNCw0LXQvCDQv9C+0YHQu9C10LTQvdC40LUg0LTQsNC90L3Ri9C1INC/0L4g0LrQsNC20LTQvtC80YMg0LjQs9GA0L7QutGDXG4gICAgICAgIGNvbnN0IHBsYXllckRhdGEgPSBuZXcgTWFwKCk7XG4gICAgICAgIFxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5kYXRhLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBjb25zdCBlbnRyeSA9IHRoaXMuZGF0YVtpXTtcbiAgICAgICAgICAgIGlmIChlbnRyeS5vYmplY3RUeXBlID09PSAncGxheWVyJyAmJiBlbnRyeS5wb3NpdGlvbiAmJiAhcGxheWVyRGF0YS5oYXMoZW50cnkub2JqZWN0SWQpKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyRGF0YS5zZXQoZW50cnkub2JqZWN0SWQsIGVudHJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgW3BsYXllcklkLCBkYXRhXSBvZiBwbGF5ZXJEYXRhKSB7XG4gICAgICAgICAgICAvLyDQmtC+0L3QstC10YDRgtC40YDRg9C10LwgdGltZXN0YW1wINCyINGH0LjRgtCw0LXQvNC+0LUg0LLRgNC10LzRj1xuICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoZGF0YS50aW1lc3RhbXApO1xuICAgICAgICAgICAgY29uc3QgdGltZVN0ciA9IHRpbWVzdGFtcC50b0xvY2FsZVRpbWVTdHJpbmcoJ3J1LVJVJywgeyBcbiAgICAgICAgICAgICAgICBob3VyMTI6IGZhbHNlLCBcbiAgICAgICAgICAgICAgICBob3VyOiAnMi1kaWdpdCcsIFxuICAgICAgICAgICAgICAgIG1pbnV0ZTogJzItZGlnaXQnLCBcbiAgICAgICAgICAgICAgICBzZWNvbmQ6ICcyLWRpZ2l0JyxcbiAgICAgICAgICAgICAgICBmcmFjdGlvbmFsU2Vjb25kRGlnaXRzOiAzIFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDwn46uIFtDbGllbnRUZWxlbWV0cnldINCY0LPRgNC+0LogJHtwbGF5ZXJJZH0gWyR7dGltZVN0cn1dOmApO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYCAgIPCfk40g0J/QvtC30LjRhtC40Y86ICgke2RhdGEucG9zaXRpb24ueC50b0ZpeGVkKDIpfSwgJHtkYXRhLnBvc2l0aW9uLnkudG9GaXhlZCgyKX0sICR7ZGF0YS5wb3NpdGlvbi56LnRvRml4ZWQoMil9KWApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZGF0YS52ZWxvY2l0eSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAgICDwn4+DINCh0LrQvtGA0L7RgdGC0Yw6ICgke2RhdGEudmVsb2NpdHkueC50b0ZpeGVkKDIpfSwgJHtkYXRhLnZlbG9jaXR5LnkudG9GaXhlZCgyKX0sICR7ZGF0YS52ZWxvY2l0eS56LnRvRml4ZWQoMil9KSB8JHtkYXRhLnNwZWVkLnRvRml4ZWQoMil9fGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZGF0YS5tYXNzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgICAg4pqW77iPICDQnNCw0YHRgdCwOiAke2RhdGEubWFzcy50b0ZpeGVkKDIpfSDQutCzLCDQoNCw0LTQuNGD0YE6ICR7ZGF0YS5yYWRpdXMudG9GaXhlZCgyKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc29sZS5sb2coYCAgIPCflKcg0KTQuNC30LjQutCwOiAke2RhdGEucGh5c2ljc1R5cGV9LCDQmNGB0YLQvtGH0L3QuNC6OiAke2RhdGEuc291cmNlfWApO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYCAgIOKPsCDQktGA0LXQvNC10L3QvdCw0Y8g0LzQtdGC0LrQsDogJHtkYXRhLnRpbWVzdGFtcH1gKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGRhdGEuYXBwbGllZEltcHVsc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgICAg8J+SpSDQmNC80L/Rg9C70YzRgTogKCR7ZGF0YS5hcHBsaWVkSW1wdWxzZS54LnRvRml4ZWQoMil9LCAke2RhdGEuYXBwbGllZEltcHVsc2UueS50b0ZpeGVkKDIpfSwgJHtkYXRhLmFwcGxpZWRJbXB1bHNlLnoudG9GaXhlZCgyKX0pYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vINCh0L7Qt9C00LDQtdC8INCz0LvQvtCx0LDQu9GM0L3Ri9C5INGN0LrQt9C10LzQv9C70Y/RgFxud2luZG93LnRlbGVtZXRyeVVJID0gbmV3IFRlbGVtZXRyeVVJKCk7XG5cbi8vINCa0L7QvdGB0L7Qu9GM0L3Ri9C1INC60L7QvNCw0L3QtNGLXG53aW5kb3cuc2hvd1RlbGVtZXRyeVVJID0gKCkgPT4gd2luZG93LnRlbGVtZXRyeVVJLnNob3coKTtcbndpbmRvdy5oaWRlVGVsZW1ldHJ5VUkgPSAoKSA9PiB3aW5kb3cudGVsZW1ldHJ5VUkuaGlkZSgpO1xud2luZG93LmNsZWFyVGVsZW1ldHJ5VUkgPSAoKSA9PiB3aW5kb3cudGVsZW1ldHJ5VUkuY2xlYXJMb2coKTtcbndpbmRvdy50ZWxlbWV0cnlEZXRhaWxlZE1vZGUgPSAoKSA9PiB7XG4gICAgaWYgKHdpbmRvdy50ZWxlbWV0cnlVSS52aWV3TW9kZSA9PT0gJ3N1bW1hcnknKSB7XG4gICAgICAgIHdpbmRvdy50ZWxlbWV0cnlVSS50b2dnbGVWaWV3TW9kZSgpO1xuICAgIH1cbn07XG53aW5kb3cudGVsZW1ldHJ5U3VtbWFyeU1vZGUgPSAoKSA9PiB7XG4gICAgaWYgKHdpbmRvdy50ZWxlbWV0cnlVSS52aWV3TW9kZSA9PT0gJ2RldGFpbGVkJykge1xuICAgICAgICB3aW5kb3cudGVsZW1ldHJ5VUkudG9nZ2xlVmlld01vZGUoKTtcbiAgICB9XG59O1xuICAgIHdpbmRvdy50ZWxlbWV0cnlQYXVzZSA9ICgpID0+IHtcbiAgICBpZiAoIXdpbmRvdy50ZWxlbWV0cnlVSS5pc1BhdXNlZCkge1xuICAgICAgICB3aW5kb3cudGVsZW1ldHJ5VUkudG9nZ2xlUGF1c2UoKTtcbiAgICB9XG59O1xud2luZG93LnRlbGVtZXRyeVJlc3VtZSA9ICgpID0+IHtcbiAgICBpZiAod2luZG93LnRlbGVtZXRyeVVJLmlzUGF1c2VkKSB7XG4gICAgICAgIHdpbmRvdy50ZWxlbWV0cnlVSS50b2dnbGVQYXVzZSgpO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IFRlbGVtZXRyeVVJIH07ICIsIi8vIGluZGV4LmpzIC0g0JPQu9Cw0LLQvdGL0Lkg0YTQsNC50Lsg0LTQu9GPINC90L7QstC+0Lkg0YHQuNGB0YLQtdC80Ysg0YTQuNC30LjQutC4XG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5pbXBvcnQgeyBzY2VuZSwgaW5pdFNjZW5lLCByZW5kZXJlciBhcyBzY2VuZVJlbmRlcmVyIH0gZnJvbSAnLi9zY2VuZS5qcyc7XG5pbXBvcnQgeyBpbml0Q2FtZXJhLCB1cGRhdGVDYW1lcmEgfSBmcm9tICcuL2NhbWVyYS5qcyc7XG5pbXBvcnQgeyBcbiAgICBpbml0QW1tbyBhcyBpbml0TmV3UGh5c2ljcywgXG4gICAgc3RlcFBoeXNpY3MgYXMgc3RlcE5ld1BoeXNpY3MsIFxuICAgIGdldFBoeXNpY3NXb3JsZCBhcyBnZXROZXdQaHlzaWNzV29ybGQsXG4gICAgY2xlYW51cCBhcyBjbGVhbnVwTmV3UGh5c2ljcyxcbiAgICBnZXROZXR3b3JrU3RhdHMsXG4gICAgZ2V0UGh5c2ljc0NvbmZpZ1xufSBmcm9tICcuL3BoeXNpY3MuanMnO1xuaW1wb3J0IHsgXG4gICAgaW5pdE5ld05ldHdvcmssIFxuICAgIHNlbmRDb21tYW5kLCBcbiAgICBzZW5kSW1wdWxzZSxcbiAgICBnZXREZXRhaWxlZE5ldHdvcmtTdGF0cyxcbiAgICBnZXRDb25uZWN0aW9uU3RhdGUsXG4gICAgY2xvc2VDb25uZWN0aW9uXG59IGZyb20gJy4vbmV0d29yay5qcyc7XG5pbXBvcnQgeyBvYmplY3RzLCBjcmVhdGVNZXNoQW5kQm9keUZvck9iamVjdCB9IGZyb20gJy4vb2JqZWN0cy5qcyc7XG5pbXBvcnQgZ2FtZVN0YXRlTWFuYWdlciwgeyBpbml0R2FtZVN0YXRlTWFuYWdlciB9IGZyb20gJy4vZ2FtZXN0YXRlbWFuYWdlci5qcyc7XG4vLyDQmNC80L/QvtGA0YLQuNGA0YPQtdC8INCy0LjQt9GD0LDQu9GM0L3Rg9GOINC/0LDQvdC10LvRjCDRgtC10LvQtdC80LXRgtGA0LjQuFxuaW1wb3J0ICcuL3RlbGVtZXRyeV91aS5qcyc7XG5cbi8vINCa0L7QvdGE0LjQs9GD0YDQsNGG0LjRjyDQv9GA0LjQu9C+0LbQtdC90LjRj1xuY29uc3QgQVBQX0NPTkZJRyA9IHtcbiAgICBTRVJWRVJfVVJMOiAnd3M6Ly9sb2NhbGhvc3Q6ODA4MC93cycsXG4gICAgVEFSR0VUX0ZQUzogNjAsXG4gICAgUEhZU0lDU19USU1FU1RFUDogMS82MCxcbiAgICBERUJVR19NT0RFOiB0cnVlLFxuICAgIEVOQUJMRV9TVEFUUzogdHJ1ZVxufTtcblxuLy8g0KHQvtGB0YLQvtGP0L3QuNC1INC/0YDQuNC70L7QttC10L3QuNGPXG5sZXQgaXNSdW5uaW5nID0gZmFsc2U7XG5sZXQgbGFzdEZyYW1lVGltZSA9IDA7XG5sZXQgZnJhbWVDb3VudCA9IDA7XG5sZXQgZnBzQ291bnRlciA9IDA7XG5sZXQgbGFzdEZwc1VwZGF0ZSA9IDA7XG5cbi8vINCg0LXQvdC00LXRgNC10YBcbmxldCByZW5kZXJlciA9IG51bGw7XG5cbi8vINCa0LDQvNC10YDQsFxubGV0IGNhbWVyYSA9IG51bGw7XG5cbi8vIFVJINGN0LvQtdC80LXQvdGC0Ysg0LTQu9GPINC+0YLQvtCx0YDQsNC20LXQvdC40Y8g0YHRgtCw0YLQuNGB0YLQuNC60LhcbmxldCBzdGF0c0NvbnRhaW5lciA9IG51bGw7XG5cbi8vINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINC/0YDQuNC70L7QttC10L3QuNGPXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdE5ld0FwcCgpIHtcbiAgICBjb25zb2xlLmxvZyhcIltOZXdBcHBdINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINC90L7QstC+0LPQviDQv9GA0LjQu9C+0LbQtdC90LjRjy4uLlwiKTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgICAvLyDQl9Cw0LPRgNGD0LbQsNC10LwgQW1tby5qc1xuICAgICAgICBhd2FpdCBsb2FkQW1tbygpO1xuICAgICAgICBcbiAgICAgICAgLy8g0JjQvdC40YbQuNCw0LvQuNC30LjRgNGD0LXQvCDRgdGG0LXQvdGDXG4gICAgICAgIGluaXRTY2VuZSgpO1xuICAgICAgICBcbiAgICAgICAgLy8g0JjQvdC40YbQuNCw0LvQuNC30LjRgNGD0LXQvCDQutCw0LzQtdGA0YNcbiAgICAgICAgY2FtZXJhID0gaW5pdENhbWVyYSgpO1xuICAgICAgICBcbiAgICAgICAgLy8g0JjRgdC/0L7Qu9GM0LfRg9C10Lwg0YDQtdC90LTQtdGA0LXRgCDQuNC3INGB0YbQtdC90YtcbiAgICAgICAgcmVuZGVyZXIgPSBzY2VuZVJlbmRlcmVyO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coXCJbTmV3QXBwXSDQmNGB0L/QvtC70YzQt9GD0LXRgtGB0Y8g0YDQtdC90LTQtdGA0LXRgCDQuNC3INGB0YbQtdC90YtcIik7XG4gICAgICAgIFxuICAgICAgICAvLyDQmNC90LjRhtC40LDQu9C40LfQuNGA0YPQtdC8INC90L7QstGD0Y4g0YHQuNGB0YLQtdC80YMg0YTQuNC30LjQutC4XG4gICAgICAgIGNvbnN0IHBoeXNpY3NJbml0aWFsaXplZCA9IGF3YWl0IGluaXROZXdQaHlzaWNzKCk7XG4gICAgICAgIGlmICghcGh5c2ljc0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQndC1INGD0LTQsNC70L7RgdGMINC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDRgtGMINGE0LjQt9C40LrRg1wiKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8g0JjQvdC40YbQuNCw0LvQuNC30LjRgNGD0LXQvCDQvdC+0LLRg9GOINGB0LXRgtC10LLRg9GOINGB0LjRgdGC0LXQvNGDXG4gICAgICAgIGNvbnN0IG5ldHdvcmtJbml0aWFsaXplZCA9IGF3YWl0IGluaXROZXdOZXR3b3JrKEFQUF9DT05GSUcuU0VSVkVSX1VSTCk7XG4gICAgICAgIGlmICghbmV0d29ya0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQndC1INGD0LTQsNC70L7RgdGMINC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDRgtGMINGB0LXRgtGMXCIpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyDQmNC90LjRhtC40LDQu9C40LfQuNGA0YPQtdC8IGdhbWVTdGF0ZU1hbmFnZXIg0YEg0YTRg9C90LrRhtC40Y/QvNC4INGB0LXRgtC10LLQvtCz0L4g0LzQvtC00YPQu9GPXG4gICAgICAgIGluaXRHYW1lU3RhdGVNYW5hZ2VyKHNjZW5lKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJbTmV3QXBwXSBHYW1lU3RhdGVNYW5hZ2VyINC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvVwiKTtcbiAgICAgICAgXG4gICAgICAgIC8vINCh0L7Qt9C00LDQtdC8IFVJINC00LvRjyDRgdGC0LDRgtC40YHRgtC40LrQuFxuICAgICAgICBjcmVhdGVTdGF0c1VJKCk7XG4gICAgICAgIFxuICAgICAgICAvLyDQndCw0YHRgtGA0LDQuNCy0LDQtdC8INC+0LHRgNCw0LHQvtGC0YfQuNC60Lgg0YHQvtCx0YvRgtC40LlcbiAgICAgICAgc2V0dXBFdmVudEhhbmRsZXJzKCk7XG4gICAgICAgIFxuICAgICAgICAvLyDQl9Cw0L/Rg9GB0LrQsNC10Lwg0L7RgdC90L7QstC90L7QuSDRhtC40LrQu1xuICAgICAgICBzdGFydE1haW5Mb29wKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhcIltOZXdBcHBdINCf0YDQuNC70L7QttC10L3QuNC1INGD0YHQv9C10YjQvdC+INC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvdC+XCIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIltOZXdBcHBdINCe0YjQuNCx0LrQsCDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQuDpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG4vLyDQmNC90LjRhtC40LDQu9C40LfQsNGG0LjRjyDRgNC10L3QtNC10YDQtdGA0LBcbmFzeW5jIGZ1bmN0aW9uIGluaXRSZW5kZXJlcigpIHtcbiAgICByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHsgXG4gICAgICAgIGFudGlhbGlhczogdHJ1ZSxcbiAgICAgICAgYWxwaGE6IHRydWUsXG4gICAgICAgIHBvd2VyUHJlZmVyZW5jZTogXCJoaWdoLXBlcmZvcm1hbmNlXCJcbiAgICB9KTtcbiAgICBcbiAgICByZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8oTWF0aC5taW4od2luZG93LmRldmljZVBpeGVsUmF0aW8sIDIpKTtcbiAgICByZW5kZXJlci5zaGFkb3dNYXAuZW5hYmxlZCA9IHRydWU7XG4gICAgcmVuZGVyZXIuc2hhZG93TWFwLnR5cGUgPSBUSFJFRS5QQ0ZTb2Z0U2hhZG93TWFwO1xuICAgIHJlbmRlcmVyLm91dHB1dENvbG9yU3BhY2UgPSBUSFJFRS5TUkdCQ29sb3JTcGFjZTtcbiAgICBcbiAgICAvLyDQlNC+0LHQsNCy0LvRj9C10LwgY2FudmFzINCyIERPTVxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lLWNvbnRhaW5lcicpIHx8IGRvY3VtZW50LmJvZHk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHJlbmRlcmVyLmRvbUVsZW1lbnQpO1xuICAgIFxuICAgIC8vINCe0LHRgNCw0LHQvtGC0YfQuNC6INC40LfQvNC10L3QtdC90LjRjyDRgNCw0LfQvNC10YDQsCDQvtC60L3QsFxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSk7XG4gICAgXG4gICAgY29uc29sZS5sb2coXCJbTmV3QXBwXSDQoNC10L3QtNC10YDQtdGAINC40L3QuNGG0LjQsNC70LjQt9C40YDQvtCy0LDQvVwiKTtcbn1cblxuLy8g0J7QsdGA0LDQsdC+0YLRh9C40Log0LjQt9C80LXQvdC10L3QuNGPINGA0LDQt9C80LXRgNCwINC+0LrQvdCwXG5mdW5jdGlvbiBvbldpbmRvd1Jlc2l6ZSgpIHtcbiAgICBpZiAoY2FtZXJhKSB7XG4gICAgICAgIGNhbWVyYS5hc3BlY3QgPSB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICB9XG4gICAgaWYgKHJlbmRlcmVyKSB7XG4gICAgICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XG4gICAgfVxufVxuXG4vLyDQodC+0LfQtNCw0L3QuNC1IFVJINC00LvRjyDRgdGC0LDRgtC40YHRgtC40LrQuFxuZnVuY3Rpb24gY3JlYXRlU3RhdHNVSSgpIHtcbiAgICBpZiAoIUFQUF9DT05GSUcuRU5BQkxFX1NUQVRTKSByZXR1cm47XG4gICAgXG4gICAgLy8g0KHQvtC30LTQsNC10Lwg0LrQvtC90YLQtdC50L3QtdGAINC00LvRjyDRgdGC0LDRgtC40YHRgtC40LrQuFxuICAgIHN0YXRzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgc3RhdHNDb250YWluZXIuaWQgPSAnc3RhdHMtY29udGFpbmVyJztcbiAgICBzdGF0c0NvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgIHRvcDogMTBweDtcbiAgICAgICAgbGVmdDogMTBweDtcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjgpO1xuICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICAgICAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcbiAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICB6LWluZGV4OiAxMDAwO1xuICAgICAgICBtaW4td2lkdGg6IDI1MHB4O1xuICAgIGA7XG4gICAgXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzdGF0c0NvbnRhaW5lcik7XG4gICAgXG4gICAgY29uc29sZS5sb2coXCJbTmV3QXBwXSBVSSDRgdGC0LDRgtC40YHRgtC40LrQuCDRgdC+0LfQtNCw0L1cIik7XG59XG5cbi8vINCe0LHQvdC+0LLQu9C10L3QuNC1IFVJINGB0YLQsNGC0LjRgdGC0LjQutC4XG5mdW5jdGlvbiB1cGRhdGVTdGF0c1VJKCkge1xuICAgIGlmICghc3RhdHNDb250YWluZXIgfHwgIUFQUF9DT05GSUcuRU5BQkxFX1NUQVRTKSByZXR1cm47XG4gICAgXG4gICAgY29uc3QgbmV0d29ya1N0YXRzID0gZ2V0RGV0YWlsZWROZXR3b3JrU3RhdHMoKTtcbiAgICBjb25zdCBwaHlzaWNzU3RhdHMgPSBnZXROZXR3b3JrU3RhdHMoKTtcbiAgICBjb25zdCBwaHlzaWNzQ29uZmlnID0gZ2V0UGh5c2ljc0NvbmZpZygpO1xuICAgIFxuICAgIGNvbnN0IGh0bWwgPSBgXG4gICAgICAgIDxkaXY+PHN0cm9uZz7wn4yQINCh0LXRgtGMPC9zdHJvbmc+PC9kaXY+XG4gICAgICAgIDxkaXY+0KHQvtGB0YLQvtGP0L3QuNC1OiAke2dldENvbm5lY3Rpb25TdGF0ZSgpfTwvZGl2PlxuICAgICAgICA8ZGl2PtCf0LjQvdCzOiAke25ldHdvcmtTdGF0cy5waW5nLnRvRml4ZWQoMSl9INC80YE8L2Rpdj5cbiAgICAgICAgPGRpdj7QlNC20LjRgtGC0LXRgDogJHtuZXR3b3JrU3RhdHMuaml0dGVyLnRvRml4ZWQoMSl9INC80YE8L2Rpdj5cbiAgICAgICAgPGRpdj7QmtCw0YfQtdGB0YLQstC+OiAke25ldHdvcmtTdGF0cy5xdWFsaXR5fTwvZGl2PlxuICAgICAgICA8ZGl2PtCf0L7RgtC10YDRjyDQv9Cw0LrQtdGC0L7QsjogJHsobmV0d29ya1N0YXRzLnBhY2tldExvc3MgKiAxMDApLnRvRml4ZWQoMil9JTwvZGl2PlxuICAgICAgICA8ZGl2PtCf0LDQutC10YLQvtCyINC/0L7Qu9GD0YfQtdC90L46ICR7bmV0d29ya1N0YXRzLnBhY2tldHNSZWNlaXZlZH08L2Rpdj5cbiAgICAgICAgXG4gICAgICAgIDxkaXYgc3R5bGU9XCJtYXJnaW4tdG9wOiAxMHB4O1wiPjxzdHJvbmc+4pqhINCk0LjQt9C40LrQsDwvc3Ryb25nPjwvZGl2PlxuICAgICAgICA8ZGl2PkZQUzogJHtmcHNDb3VudGVyfTwvZGl2PlxuICAgICAgICA8ZGl2PtCe0LHRitC10LrRgtC+0LI6ICR7T2JqZWN0LmtleXMob2JqZWN0cykubGVuZ3RofTwvZGl2PlxuICAgICAgICA8ZGl2PtCe0LrQvdC+INC/0YDQtdC00YHQutCw0LfQsNC90LjRjzogJHtwaHlzaWNzQ29uZmlnLlRJTUUuUFJFRElDVElPTl9XSU5ET1d9INC80YE8L2Rpdj5cbiAgICAgICAgPGRpdj7Qn9C+0YDQvtCzINGC0LXQu9C10L/QvtGA0YLQsNGG0LjQuDogJHtwaHlzaWNzQ29uZmlnLkNPUlJFQ1RJT04uVEVMRVBPUlRfVEhSRVNIT0xEfTwvZGl2PlxuICAgICAgICBcbiAgICAgICAgPGRpdiBzdHlsZT1cIm1hcmdpbi10b3A6IDEwcHg7XCI+PHN0cm9uZz7wn46uINCj0L/RgNCw0LLQu9C10L3QuNC1PC9zdHJvbmc+PC9kaXY+XG4gICAgICAgIDxkaXY+V0FTRCAtINC00LLQuNC20LXQvdC40LU8L2Rpdj5cbiAgICAgICAgPGRpdj5TcGFjZSAtINC/0YDRi9C20L7QujwvZGl2PlxuICAgICAgICA8ZGl2PlIgLSDRgdCx0YDQvtGBINC/0L7Qt9C40YbQuNC4PC9kaXY+XG4gICAgICAgIDxkaXY+VCAtINC/0LXRgNC10LrQu9GO0YfQtdC90LjQtSDRgNC10LbQuNC80LA8L2Rpdj5cbiAgICBgO1xuICAgIFxuICAgIHN0YXRzQ29udGFpbmVyLmlubmVySFRNTCA9IGh0bWw7XG59XG5cbi8vINCd0LDRgdGC0YDQvtC50LrQsCDQvtCx0YDQsNCx0L7RgtGH0LjQutC+0LIg0YHQvtCx0YvRgtC40LlcbmZ1bmN0aW9uIHNldHVwRXZlbnRIYW5kbGVycygpIHtcbiAgICAvLyDQntCx0YDQsNCx0L7RgtGH0LjQutC4INC60LvQsNCy0LjQsNGC0YPRgNGLXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uS2V5RG93bik7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBvbktleVVwKTtcbiAgICBcbiAgICAvLyDQntCx0YDQsNCx0L7RgtGH0LjQutC4INC80YvRiNC4XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Nb3VzZURvd24pO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbk1vdXNlVXApO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlKTtcbiAgICBcbiAgICAvLyDQntCx0YDQsNCx0L7RgtGH0LjQuiDQt9Cw0LrRgNGL0YLQuNGPINGB0YLRgNCw0L3QuNGG0YtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgb25CZWZvcmVVbmxvYWQpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKFwiW05ld0FwcF0g0J7QsdGA0LDQsdC+0YLRh9C40LrQuCDRgdC+0LHRi9GC0LjQuSDQvdCw0YHRgtGA0L7QtdC90YtcIik7XG59XG5cbi8vINCe0LHRgNCw0LHQvtGC0YfQuNC6INC90LDQttCw0YLQuNGPINC60LvQsNCy0LjRiFxuZnVuY3Rpb24gb25LZXlEb3duKGV2ZW50KSB7XG4gICAgY29uc3Qga2V5ID0gZXZlbnQuY29kZTtcbiAgICBcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlICdLZXlXJzpcbiAgICAgICAgY2FzZSAnQXJyb3dVcCc6XG4gICAgICAgICAgICBzZW5kTW92ZW1lbnRDb21tYW5kKCdmb3J3YXJkJywgdHJ1ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIFxuICAgICAgICBjYXNlICdLZXlTJzpcbiAgICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgICAgIHNlbmRNb3ZlbWVudENvbW1hbmQoJ2JhY2t3YXJkJywgdHJ1ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIFxuICAgICAgICBjYXNlICdLZXlBJzpcbiAgICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcbiAgICAgICAgICAgIHNlbmRNb3ZlbWVudENvbW1hbmQoJ2xlZnQnLCB0cnVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgXG4gICAgICAgIGNhc2UgJ0tleUQnOlxuICAgICAgICBjYXNlICdBcnJvd1JpZ2h0JzpcbiAgICAgICAgICAgIHNlbmRNb3ZlbWVudENvbW1hbmQoJ3JpZ2h0JywgdHJ1ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIFxuICAgICAgICBjYXNlICdTcGFjZSc6XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgc2VuZE1vdmVtZW50Q29tbWFuZCgnanVtcCcsIHRydWUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBcbiAgICAgICAgY2FzZSAnS2V5Uic6XG4gICAgICAgICAgICBzZW5kQ29tbWFuZCgncmVzZXRfcG9zaXRpb24nKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgXG4gICAgICAgIGNhc2UgJ0tleVQnOlxuICAgICAgICAgICAgdG9nZ2xlUGh5c2ljc01vZGUoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgXG4gICAgICAgIGNhc2UgJ0tleUYnOlxuICAgICAgICAgICAgdG9nZ2xlRnVsbHNjcmVlbigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBcbiAgICAgICAgY2FzZSAnRXNjYXBlJzpcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59XG5cbi8vINCe0LHRgNCw0LHQvtGC0YfQuNC6INC+0YLQv9GD0YHQutCw0L3QuNGPINC60LvQsNCy0LjRiFxuZnVuY3Rpb24gb25LZXlVcChldmVudCkge1xuICAgIGNvbnN0IGtleSA9IGV2ZW50LmNvZGU7XG4gICAgXG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAnS2V5Vyc6XG4gICAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICAgICAgc2VuZE1vdmVtZW50Q29tbWFuZCgnZm9yd2FyZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgXG4gICAgICAgIGNhc2UgJ0tleVMnOlxuICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICAgICAgc2VuZE1vdmVtZW50Q29tbWFuZCgnYmFja3dhcmQnLCBmYWxzZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIFxuICAgICAgICBjYXNlICdLZXlBJzpcbiAgICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcbiAgICAgICAgICAgIHNlbmRNb3ZlbWVudENvbW1hbmQoJ2xlZnQnLCBmYWxzZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIFxuICAgICAgICBjYXNlICdLZXlEJzpcbiAgICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XG4gICAgICAgICAgICBzZW5kTW92ZW1lbnRDb21tYW5kKCdyaWdodCcsIGZhbHNlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgXG4gICAgICAgIGNhc2UgJ1NwYWNlJzpcbiAgICAgICAgICAgIHNlbmRNb3ZlbWVudENvbW1hbmQoJ2p1bXAnLCBmYWxzZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59XG5cbi8vINCe0YLQv9GA0LDQstC60LAg0LrQvtC80LDQvdC00Ysg0LTQstC40LbQtdC90LjRj1xuZnVuY3Rpb24gc2VuZE1vdmVtZW50Q29tbWFuZChkaXJlY3Rpb24sIGlzUHJlc3NlZCkge1xuICAgIHNlbmRDb21tYW5kKCdtb3ZlbWVudCcsIHtcbiAgICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb24sXG4gICAgICAgIHByZXNzZWQ6IGlzUHJlc3NlZCxcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXG4gICAgfSk7XG59XG5cbi8vINCe0LHRgNCw0LHQvtGC0YfQuNC6INC90LDQttCw0YLQuNGPINC80YvRiNC4XG5mdW5jdGlvbiBvbk1vdXNlRG93bihldmVudCkge1xuICAgIGlmIChldmVudC5idXR0b24gPT09IDApIHsgLy8g0JvQtdCy0LDRjyDQutC90L7Qv9C60LAg0LzRi9GI0LhcbiAgICAgICAgLy8g0JzQvtC20L3QviDQtNC+0LHQsNCy0LjRgtGMINC70L7Qs9C40LrRgyDQtNC70Y8g0YHRgtGA0LXQu9GM0LHRiyDQuNC70Lgg0LLQt9Cw0LjQvNC+0LTQtdC50YHRgtCy0LjRj1xuICAgICAgICBjb25zb2xlLmxvZyhcIltOZXdBcHBdINCb0LXQstCw0Y8g0LrQvdC+0L/QutCwINC80YvRiNC4INC90LDQttCw0YLQsFwiKTtcbiAgICB9XG59XG5cbi8vINCe0LHRgNCw0LHQvtGC0YfQuNC6INC+0YLQv9GD0YHQutCw0L3QuNGPINC80YvRiNC4XG5mdW5jdGlvbiBvbk1vdXNlVXAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuYnV0dG9uID09PSAwKSB7IC8vINCb0LXQstCw0Y8g0LrQvdC+0L/QutCwINC80YvRiNC4XG4gICAgICAgIGNvbnNvbGUubG9nKFwiW05ld0FwcF0g0JvQtdCy0LDRjyDQutC90L7Qv9C60LAg0LzRi9GI0Lgg0L7RgtC/0YPRidC10L3QsFwiKTtcbiAgICB9XG59XG5cbi8vINCe0LHRgNCw0LHQvtGC0YfQuNC6INC00LLQuNC20LXQvdC40Y8g0LzRi9GI0LhcbmZ1bmN0aW9uIG9uTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgLy8g0JzQvtC20L3QviDQtNC+0LHQsNCy0LjRgtGMINC70L7Qs9C40LrRgyDQtNC70Y8g0L/QvtCy0L7RgNC+0YLQsCDQutCw0LzQtdGA0Ytcbn1cblxuLy8g0J/QtdGA0LXQutC70Y7Rh9C10L3QuNC1INGA0LXQttC40LzQsCDRhNC40LfQuNC60LhcbmZ1bmN0aW9uIHRvZ2dsZVBoeXNpY3NNb2RlKCkge1xuICAgIC8vINCX0LTQtdGB0Ywg0LzQvtC20L3QviDQtNC+0LHQsNCy0LjRgtGMINC70L7Qs9C40LrRgyDQv9C10YDQtdC60LvRjtGH0LXQvdC40Y8g0LzQtdC20LTRgyDRgNCw0LfQvdGL0LzQuCDRgNC10LbQuNC80LDQvNC4INGE0LjQt9C40LrQuFxuICAgIGNvbnNvbGUubG9nKFwiW05ld0FwcF0g0J/QtdGA0LXQutC70Y7Rh9C10L3QuNC1INGA0LXQttC40LzQsCDRhNC40LfQuNC60LhcIik7XG59XG5cbi8vINCf0LXRgNC10LrQu9GO0YfQtdC90LjQtSDQv9C+0LvQvdC+0Y3QutGA0LDQvdC90L7Qs9C+INGA0LXQttC40LzQsFxuZnVuY3Rpb24gdG9nZ2xlRnVsbHNjcmVlbigpIHtcbiAgICBpZiAoIWRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50KSB7XG4gICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKCk7XG4gICAgfVxufVxuXG4vLyDQntCx0YDQsNCx0L7RgtGH0LjQuiDQt9Cw0LrRgNGL0YLQuNGPINGB0YLRgNCw0L3QuNGG0YtcbmZ1bmN0aW9uIG9uQmVmb3JlVW5sb2FkKCkge1xuICAgIGNsZWFudXAoKTtcbn1cblxuLy8g0JfQsNC/0YPRgdC6INC+0YHQvdC+0LLQvdC+0LPQviDRhtC40LrQu9CwXG5mdW5jdGlvbiBzdGFydE1haW5Mb29wKCkge1xuICAgIGlzUnVubmluZyA9IHRydWU7XG4gICAgbGFzdEZyYW1lVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShtYWluTG9vcCk7XG4gICAgXG4gICAgY29uc29sZS5sb2coXCJbTmV3QXBwXSDQntGB0L3QvtCy0L3QvtC5INGG0LjQutC7INC30LDQv9GD0YnQtdC9XCIpO1xufVxuXG4vLyDQntGB0L3QvtCy0L3QvtC5INGG0LjQutC7INC/0YDQuNC70L7QttC10L3QuNGPXG5mdW5jdGlvbiBtYWluTG9vcChjdXJyZW50VGltZSkge1xuICAgIGlmICghaXNSdW5uaW5nKSByZXR1cm47XG4gICAgXG4gICAgLy8g0JLRi9GH0LjRgdC70Y/QtdC8IGRlbHRhVGltZVxuICAgIGNvbnN0IGRlbHRhVGltZSA9IE1hdGgubWluKChjdXJyZW50VGltZSAtIGxhc3RGcmFtZVRpbWUpIC8gMTAwMCwgMS8zMCk7IC8vINCe0LPRgNCw0L3QuNGH0LjQstCw0LXQvCDQvNCw0LrRgdC40LzQsNC70YzQvdGL0LkgZGVsdGFUaW1lXG4gICAgbGFzdEZyYW1lVGltZSA9IGN1cnJlbnRUaW1lO1xuICAgIFxuICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDRgdGH0LXRgtGH0LjQuiBGUFNcbiAgICBmcmFtZUNvdW50Kys7XG4gICAgaWYgKGN1cnJlbnRUaW1lIC0gbGFzdEZwc1VwZGF0ZSA+PSAxMDAwKSB7XG4gICAgICAgIGZwc0NvdW50ZXIgPSBmcmFtZUNvdW50O1xuICAgICAgICBmcmFtZUNvdW50ID0gMDtcbiAgICAgICAgbGFzdEZwc1VwZGF0ZSA9IGN1cnJlbnRUaW1lO1xuICAgIH1cbiAgICBcbiAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0YTQuNC30LjQutGDXG4gICAgc3RlcE5ld1BoeXNpY3MoZGVsdGFUaW1lKTtcbiAgICBcbiAgICAvLyDQntCx0L3QvtCy0LvRj9C10Lwg0L/QvtC30LjRhtC40LggbWVzaCfQtdC5INC40Lcg0YTQuNC30LjRh9C10YHQutC40YUg0YLQtdC7XG4gICAgdXBkYXRlTWVzaFBvc2l0aW9ucygpO1xuICAgIFxuICAgIC8vINCe0LHQvdC+0LLQu9GP0LXQvCDQutCw0LzQtdGA0YNcbiAgICB1cGRhdGVDYW1lcmEoZGVsdGFUaW1lKTtcbiAgICBcbiAgICAvLyDQoNC10L3QtNC10YDQuNC8INGB0YbQtdC90YNcbiAgICBpZiAoY2FtZXJhKSB7XG4gICAgICAgIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTtcbiAgICB9XG4gICAgXG4gICAgLy8g0J7QsdC90L7QstC70Y/QtdC8IFVJINGB0YLQsNGC0LjRgdGC0LjQutC4XG4gICAgaWYgKGZyYW1lQ291bnQgJSAzMCA9PT0gMCkgeyAvLyDQntCx0L3QvtCy0LvRj9C10LwgVUkg0LrQsNC20LTRi9C1IDMwINC60LDQtNGA0L7QslxuICAgICAgICB1cGRhdGVTdGF0c1VJKCk7XG4gICAgfVxuICAgIFxuICAgIC8vINCf0LvQsNC90LjRgNGD0LXQvCDRgdC70LXQtNGD0Y7RidC40Lkg0LrQsNC00YBcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobWFpbkxvb3ApO1xufVxuXG4vLyDQntCx0L3QvtCy0LvQtdC90LjQtSDQv9C+0LfQuNGG0LjQuSBtZXNoJ9C10Lkg0LjQtyDRhNC40LfQuNGH0LXRgdC60LjRhSDRgtC10LtcbmZ1bmN0aW9uIHVwZGF0ZU1lc2hQb3NpdGlvbnMoKSB7XG4gICAgZm9yIChjb25zdCBbaWQsIG9ial0gb2YgT2JqZWN0LmVudHJpZXMob2JqZWN0cykpIHtcbiAgICAgICAgaWYgKG9iai5ib2R5ICYmIG9iai5tZXNoICYmIG9iai5waHlzaWNzQnkgPT09ICdhbW1vJykge1xuICAgICAgICAgICAgLy8g0JTQu9GPIGFtbW8t0L7QsdGK0LXQutGC0L7QsiDQvtCx0L3QvtCy0LvRj9C10LwgbWVzaCDQuNC3INGE0LjQt9C40YfQtdGB0LrQvtCz0L4g0YLQtdC70LBcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IG9iai5ib2R5LmdldFdvcmxkVHJhbnNmb3JtKCk7XG4gICAgICAgICAgICBjb25zdCBvcmlnaW4gPSB0cmFuc2Zvcm0uZ2V0T3JpZ2luKCk7XG4gICAgICAgICAgICBjb25zdCByb3RhdGlvbiA9IHRyYW5zZm9ybS5nZXRSb3RhdGlvbigpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBvYmoubWVzaC5wb3NpdGlvbi5zZXQob3JpZ2luLngoKSwgb3JpZ2luLnkoKSwgb3JpZ2luLnooKSk7XG4gICAgICAgICAgICBvYmoubWVzaC5xdWF0ZXJuaW9uLnNldChyb3RhdGlvbi54KCksIHJvdGF0aW9uLnkoKSwgcm90YXRpb24ueigpLCByb3RhdGlvbi53KCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vINCU0LvRjyBib3RoINC4IGJ1bGxldCDQvtCx0YrQtdC60YLQvtCyINC/0L7Qt9C40YbQuNC4INC+0LHQvdC+0LLQu9GP0Y7RgtGB0Y8g0LIg0YHQuNGB0YLQtdC80LUg0YTQuNC30LjQutC4XG4gICAgfVxufVxuXG5cblxuLy8g0J7RgdGC0LDQvdC+0LLQutCwINC/0YDQuNC70L7QttC10L3QuNGPXG5leHBvcnQgZnVuY3Rpb24gc3RvcEFwcCgpIHtcbiAgICBpc1J1bm5pbmcgPSBmYWxzZTtcbiAgICBjbGVhbnVwKCk7XG4gICAgY29uc29sZS5sb2coXCJbTmV3QXBwXSDQn9GA0LjQu9C+0LbQtdC90LjQtSDQvtGB0YLQsNC90L7QstC70LXQvdC+XCIpO1xufVxuXG4vLyDQntGH0LjRgdGC0LrQsCDRgNC10YHRg9GA0YHQvtCyXG5mdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIC8vINCX0LDQutGA0YvQstCw0LXQvCDRgdC10YLQtdCy0L7QtSDRgdC+0LXQtNC40L3QtdC90LjQtVxuICAgIGNsb3NlQ29ubmVjdGlvbigpO1xuICAgIFxuICAgIC8vINCe0YfQuNGJ0LDQtdC8INGE0LjQt9C40LrRg1xuICAgIGNsZWFudXBOZXdQaHlzaWNzKCk7XG4gICAgXG4gICAgLy8g0KPQtNCw0LvRj9C10LwgVUlcbiAgICBpZiAoc3RhdHNDb250YWluZXIpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzdGF0c0NvbnRhaW5lcik7XG4gICAgICAgIHN0YXRzQ29udGFpbmVyID0gbnVsbDtcbiAgICB9XG4gICAgXG4gICAgLy8g0J7Rh9C40YnQsNC10Lwg0YDQtdC90LTQtdGA0LXRgFxuICAgIGlmIChyZW5kZXJlcikge1xuICAgICAgICByZW5kZXJlci5kaXNwb3NlKCk7XG4gICAgICAgIHJlbmRlcmVyID0gbnVsbDtcbiAgICB9XG4gICAgXG4gICAgY29uc29sZS5sb2coXCJbTmV3QXBwXSDQoNC10YHRg9GA0YHRiyDQvtGH0LjRidC10L3Ri1wiKTtcbn1cblxuLy8g0KHQvtC30LTQsNC90LjQtSDRgtC10YHRgtC+0LLQvtCz0L4g0L7QsdGK0LXQutGC0LBcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUZXN0T2JqZWN0KHR5cGUgPSAnc3BoZXJlJykge1xuICAgIGNvbnN0IHRlc3REYXRhID0ge1xuICAgICAgICBpZDogJ3Rlc3RfJyArIERhdGUubm93KCksXG4gICAgICAgIG9iamVjdF90eXBlOiB0eXBlLFxuICAgICAgICB4OiBNYXRoLnJhbmRvbSgpICogMjAgLSAxMCxcbiAgICAgICAgeTogMTAsXG4gICAgICAgIHo6IE1hdGgucmFuZG9tKCkgKiAyMCAtIDEwLFxuICAgICAgICBtYXNzOiAxLjAsXG4gICAgICAgIHJhZGl1czogMS4wLFxuICAgICAgICBjb2xvcjogJyNmZjAwMDAnLFxuICAgICAgICBwaHlzaWNzX2J5OiAnYm90aCdcbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IG9iaiA9IGNyZWF0ZU1lc2hBbmRCb2R5Rm9yT2JqZWN0KHRlc3REYXRhKTtcbiAgICBpZiAob2JqKSB7XG4gICAgICAgIG9iamVjdHNbdGVzdERhdGEuaWRdID0gb2JqO1xuICAgICAgICBjb25zb2xlLmxvZyhcIltOZXdBcHBdINCh0L7Qt9C00LDQvSDRgtC10YHRgtC+0LLRi9C5INC+0LHRitC10LrRgjpcIiwgdGVzdERhdGEuaWQpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdGVzdERhdGEuaWQ7XG59XG5cbi8vINCf0YDQuNC80LXQvdC10L3QuNC1INC40LzQv9GD0LvRjNGB0LAg0Log0L7QsdGK0LXQutGC0YNcbmV4cG9ydCBmdW5jdGlvbiBhcHBseVRlc3RJbXB1bHNlKG9iamVjdElkLCBkaXJlY3Rpb24gPSB7IHg6IDAsIHk6IDEwLCB6OiAwIH0pIHtcbiAgICBzZW5kSW1wdWxzZShvYmplY3RJZCwgZGlyZWN0aW9uLCA1LjApO1xufVxuXG4vLyDQrdC60YHQv9C+0YDRgiDQtNC70Y8g0L7RgtC70LDQtNC60LhcbndpbmRvdy5uZXdBcHAgPSB7XG4gICAgY3JlYXRlVGVzdE9iamVjdCxcbiAgICBhcHBseVRlc3RJbXB1bHNlLFxuICAgIGdldE5ldHdvcmtTdGF0czogZ2V0RGV0YWlsZWROZXR3b3JrU3RhdHMsXG4gICAgZ2V0UGh5c2ljc1N0YXRzOiBnZXROZXR3b3JrU3RhdHMsXG4gICAgc3RvcEFwcCxcbiAgICBjbGVhbnVwXG59O1xuXG4vLyDQl9Cw0LPRgNGD0LfQutCwIEFtbW8uanNcbmFzeW5jIGZ1bmN0aW9uIGxvYWRBbW1vKCkge1xuICAgIGNvbnNvbGUubG9nKFwiW05ld0FwcF0g0JfQsNCz0YDRg9C30LrQsCBBbW1vLmpzLi4uXCIpO1xuICAgIFxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGlmICh3aW5kb3cuQW1tbykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJbTmV3QXBwXSBBbW1vLmpzINGD0LbQtSDQt9Cw0LPRgNGD0LbQtdC9XCIpO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgc2NyaXB0LnNyYyA9ICcuL2FtbW8vYW1tby53YXNtLmpzJztcbiAgICAgICAgc2NyaXB0Lm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW05ld0FwcF0gQW1tby5qcyDQt9Cw0LPRgNGD0LbQtdC9INGD0YHQv9C10YjQvdC+XCIpO1xuICAgICAgICAgICAgLy8gQW1tby5qcyDRgtGA0LXQsdGD0LXRgiDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQuFxuICAgICAgICAgICAgQW1tbygpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiW05ld0FwcF0gQW1tby5qcyDQuNC90LjRhtC40LDQu9C40LfQuNGA0L7QstCw0L1cIik7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSkuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgfTtcbiAgICAgICAgc2NyaXB0Lm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW05ld0FwcF0g0J7RiNC40LHQutCwINC30LDQs9GA0YPQt9C60LggQW1tby5qc1wiKTtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ9Cd0LUg0YPQtNCw0LvQvtGB0Ywg0LfQsNCz0YDRg9C30LjRgtGMIEFtbW8uanMnKSk7XG4gICAgICAgIH07XG4gICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICB9KTtcbn1cblxuLy8g0JDQstGC0L7QvNCw0YLQuNGH0LXRgdC60LjQuSDQt9Cw0L/Rg9GB0Log0L/RgNC4INC30LDQs9GA0YPQt9C60LUg0YHRgtGA0LDQvdC40YbRi1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIltOZXdBcHBdIERPTSDQt9Cw0LPRgNGD0LbQtdC9LCDQuNC90LjRhtC40LDQu9C40LfQuNGA0YPQtdC8INC/0YDQuNC70L7QttC10L3QuNC1Li4uXCIpO1xuICAgIGluaXROZXdBcHAoKTtcbn0pOyAiXSwibmFtZXMiOlsiVEhSRUUiLCJzY2VuZSIsInJlbmRlcmVyIiwiZGlyZWN0aW9uYWxMaWdodCIsImluaXRTY2VuZSIsImNvbnNvbGUiLCJsb2ciLCJTY2VuZSIsImJhY2tncm91bmQiLCJDb2xvciIsIldlYkdMUmVuZGVyZXIiLCJhbnRpYWxpYXMiLCJzZXRTaXplIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwic2hhZG93TWFwIiwiZW5hYmxlZCIsInR5cGUiLCJQQ0ZTb2Z0U2hhZG93TWFwIiwiZG9jdW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJkb21FbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uV2luZG93UmVzaXplIiwiYW1iaWVudCIsIkFtYmllbnRMaWdodCIsImFkZCIsIkRpcmVjdGlvbmFsTGlnaHQiLCJwb3NpdGlvbiIsInNldCIsImNhc3RTaGFkb3ciLCJzaGFkb3ciLCJjYW1lcmEiLCJuZWFyIiwiZmFyIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwibWFwU2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwiZmlsbExpZ2h0IiwidXBkYXRlU2hhZG93Q2FtZXJhIiwiY2FtZXJhRGlyZWN0aW9uIiwiVmVjdG9yMyIsImdldFdvcmxkRGlyZWN0aW9uIiwic3VuT2Zmc2V0Iiwic3VuUG9zaXRpb24iLCJjbG9uZSIsImNvcHkiLCJ0YXJnZXRPZmZzZXQiLCJtdWx0aXBseVNjYWxhciIsInRhcmdldFBvc2l0aW9uIiwidGFyZ2V0IiwidXBkYXRlTWF0cml4V29ybGQiLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4IiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsImUiLCJ0IiwiciIsIk9iamVjdCIsInByb3RvdHlwZSIsIm4iLCJoYXNPd25Qcm9wZXJ0eSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiaSIsIlN5bWJvbCIsImEiLCJpdGVyYXRvciIsImMiLCJhc3luY0l0ZXJhdG9yIiwidSIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwid3JhcCIsIkdlbmVyYXRvciIsImNyZWF0ZSIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJhcmciLCJjYWxsIiwiaCIsImwiLCJmIiwicyIsInkiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwicCIsImQiLCJnZXRQcm90b3R5cGVPZiIsInYiLCJ2YWx1ZXMiLCJnIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiaW52b2tlIiwiX3R5cGVvZiIsInJlc29sdmUiLCJfX2F3YWl0IiwidGhlbiIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiRXJyb3IiLCJkb25lIiwibWV0aG9kIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsImlzTmFOIiwibGVuZ3RoIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJrZXlzIiwicmV2ZXJzZSIsInBvcCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJydmFsIiwiaGFuZGxlIiwiY29tcGxldGUiLCJmaW5pc2giLCJfY2F0Y2giLCJkZWxlZ2F0ZVlpZWxkIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJhcmd1bWVudHMiLCJhcHBseSIsIl9uZXh0IiwiX3Rocm93Iiwib2JqZWN0cyIsImNyZWF0ZU1lc2hBbmRCb2R5Rm9yT2JqZWN0IiwiZ2FtZVN0YXRlTWFuYWdlciIsInJlY2VpdmVPYmplY3RVcGRhdGUiLCJoYW5kbGVTZXJ2ZXJVcGRhdGUiLCJ1cGRhdGVTZXJ2ZXJUaW1lT2Zmc2V0IiwidXBkYXRlUGluZyIsImdldE5ldHdvcmtTdGF0cyIsImdldFBoeXNpY3NXb3JsZCIsIk5FVFdPUktfQ09ORklHIiwiUElOR19JTlRFUlZBTCIsIlRJTUVfU1lOQ19JTlRFUlZBTCIsIk1BWF9QSU5HX1NBTVBMRVMiLCJNQVhfVElNRV9PRkZTRVRfU0FNUExFUyIsIlJFQ09OTkVDVF9ERUxBWSIsIk1BWF9SRUNPTk5FQ1RfQVRURU1QVFMiLCJ3cyIsImNvbm5lY3Rpb25TdGF0ZSIsInJlY29ubmVjdEF0dGVtcHRzIiwibGFzdFBpbmdUaW1lIiwicGluZ0hpc3RvcnkiLCJ0aW1lT2Zmc2V0SGlzdG9yeSIsIm5ldHdvcmtNZXRyaWNzIiwicGFja2V0c1JlY2VpdmVkIiwicGFja2V0c0xvc3QiLCJ0b3RhbExhdGVuY3kiLCJhdmVyYWdlTGF0ZW5jeSIsImppdHRlciIsImxhc3RQYWNrZXRUaW1lIiwiY29ubmVjdGlvblF1YWxpdHkiLCJwYWNrZXRCdWZmZXIiLCJsYXN0UHJvY2Vzc2VkUGFja2V0SWQiLCJnbG9iYWxQaHlzaWNzQ29uZmlnIiwiaW5pdE5ld05ldHdvcmsiLCJfeCIsIl9pbml0TmV3TmV0d29yayIsIl9jYWxsZWUiLCJzZXJ2ZXJVcmwiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwiY29ubmVjdFRvU2VydmVyIiwic3RhcnRQZXJpb2RpY1Rhc2tzIiwidDAiLCJlcnJvciIsIl94MiIsIl9jb25uZWN0VG9TZXJ2ZXIiLCJfY2FsbGVlMiIsIl9jYWxsZWUyJCIsIl9jb250ZXh0MiIsInJlamVjdCIsIldlYlNvY2tldCIsIm9ub3BlbiIsInNlbmRQaW5nIiwib25tZXNzYWdlIiwiZXZlbnQiLCJoYW5kbGVNZXNzYWdlIiwiZGF0YSIsIm9uY2xvc2UiLCJjb2RlIiwicmVhc29uIiwic2V0VGltZW91dCIsImNvbmNhdCIsIm9uZXJyb3IiLCJjbG9zZSIsIm1lc3NhZ2UiLCJKU09OIiwicGFyc2UiLCJEYXRlIiwibm93IiwiaGFuZGxlUGluZyIsImhhbmRsZVBvbmciLCJoYW5kbGVPYmplY3RVcGRhdGUiLCJoYW5kbGVCYXRjaFVwZGF0ZSIsImhhbmRsZVRpbWVTeW5jIiwiaGFuZGxlT2JqZWN0Q3JlYXRlIiwiaGFuZGxlRm9vZFNwYXduZWQiLCJoYW5kbGVQaHlzaWNzQ29uZmlnIiwiaGFuZGxlSW5mbyIsImhhbmRsZVBsYXllcklkIiwiaGFuZGxlQ29tbWFuZEFjayIsIndhcm4iLCJwb25nTWVzc2FnZSIsImNsaWVudF90aW1lIiwic2VydmVyX3RpbWUiLCJzZW5kIiwic3RyaW5naWZ5IiwibGF0ZW5jeSIsInNoaWZ0IiwiYXZlcmFnZVBpbmciLCJyZWR1Y2UiLCJzdW0iLCJwaW5nIiwiaW5kZXgiLCJNYXRoIiwiYWJzIiwidXBkYXRlQ29ubmVjdGlvblF1YWxpdHkiLCJyYW5kb20iLCJ0b0ZpeGVkIiwiaWQiLCJyZWNlaXZlZF9hdCIsInVwZGF0ZXMiLCJyZWNlaXZlZEF0Iiwic2VydmVyVGltZSIsInRpbWUiLCJvYmplY3RJZHMiLCJfaSIsIl9vYmplY3RJZHMiLCJvYmplY3RJZCIsIm9iamVjdERhdGEiLCJfb2JqZWN0RGF0YSRwb3NpdGlvbiIsIl9vYmplY3REYXRhJHBvc2l0aW9uMiIsIl9vYmplY3REYXRhJHBvc2l0aW9uMyIsIm9iamVjdFR5cGUiLCJpbmNsdWRlcyIsImNyZWF0ZURhdGEiLCJvYmplY3RfdHlwZSIsIngiLCJ6IiwicGh5c2ljc19ieSIsIm1hc3MiLCJyYWRpdXMiLCJvYmoiLCJjb25maWciLCJ3b3JsZCIsInBsYXllciIsImNvbnRyb2wiLCJhcHBseUFtbW9QaHlzaWNzQ29uZmlnIiwibGV2ZWwiLCJpbXBvcnRhbnQiLCJpbmZvIiwidGV4dCIsInBsYXllcklkIiwicGxheWVyX2lkIiwic2V0UGxheWVySUQiLCJzdGF0dXMiLCJjbWQiLCJwaW5nTWVzc2FnZSIsInNlbmRDb21tYW5kIiwiY29tbWFuZCIsInVuZGVmaW5lZCIsInNlbmRJbXB1bHNlIiwiZGlyZWN0aW9uIiwiZm9yY2UiLCJvYmplY3RfaWQiLCJ0aW1lc3RhbXAiLCJzZXRJbnRlcnZhbCIsInJlcXVlc3RUaW1lU3luYyIsInVwZGF0ZU5ldHdvcmtTdGF0aXN0aWNzIiwicGFja2V0TG9zcyIsIm1heCIsInN0YXRzIiwiZ2V0RGV0YWlsZWROZXR3b3JrU3RhdHMiLCJxdWFsaXR5IiwiZ2V0Q29ubmVjdGlvblN0YXRlIiwiY2xvc2VDb25uZWN0aW9uIiwiaGlkZGVuIiwiQW1tbyIsInBoeXNpY3NXb3JsZCIsIndvcmxkQ29uZmlnIiwiZ3Jhdml0eV94IiwiZ3Jhdml0eV95IiwiZ3Jhdml0eV96IiwiZ3Jhdml0eSIsImJ0VmVjdG9yMyIsInNldEdyYXZpdHkiLCJkZXN0cm95IiwibGluZWFyX2RhbXBpbmciLCJzZXREYW1waW5nIiwiZ2V0QW5ndWxhckRhbXBpbmciLCJhbmd1bGFyX2RhbXBpbmciLCJnZXRMaW5lYXJEYW1waW5nIiwiZnJpY3Rpb24iLCJzZXRGcmljdGlvbiIsInJvbGxpbmdfZnJpY3Rpb24iLCJzZXRSb2xsaW5nRnJpY3Rpb24iLCJhY3RpdmF0ZSIsInBsYXllckNvbmZpZyIsImdldFBsYXllck9iamVjdElEIiwicGxheWVyX21hc3MiLCJzaGFwZSIsImdldENvbGxpc2lvblNoYXBlIiwibG9jYWxJbmVydGlhIiwiY2FsY3VsYXRlTG9jYWxJbmVydGlhIiwic2V0TWFzc1Byb3BzIiwicmVzdGl0dXRpb24iLCJzZXRSZXN0aXR1dGlvbiIsIkNPTlRST0xfQ09ORklHIiwiZ2V0R2xvYmFsUGh5c2ljc0NvbmZpZyIsIl9jbGFzc0NhbGxDaGVjayIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiX3RvUHJvcGVydHlLZXkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJfdG9QcmltaXRpdmUiLCJ0b1ByaW1pdGl2ZSIsIlN0cmluZyIsIk51bWJlciIsIkV5ZVN5c3RlbSIsImV5ZVRleHR1cmUiLCJsZWZ0RXllIiwicmlnaHRFeWUiLCJzcGhlcmVNZXNoIiwiZXllU2l6ZSIsImV5ZURpc3RhbmNlIiwiZXllT2Zmc2V0IiwiZW1vdGlvbnMiLCJjdXJyZW50RW1vdGlvbiIsImxvYWRUZXh0dXJlIiwiX2xvYWRUZXh0dXJlIiwibG9hZGVyIiwiVGV4dHVyZUxvYWRlciIsImxvYWQiLCJ0ZXh0dXJlIiwiaW1hZ2UiLCJwcm9ncmVzcyIsIm1hZ0ZpbHRlciIsIk5lYXJlc3RGaWx0ZXIiLCJtaW5GaWx0ZXIiLCJ3cmFwUyIsIkNsYW1wVG9FZGdlV3JhcHBpbmciLCJ3cmFwVCIsImNyZWF0ZUZhbGxiYWNrVGV4dHVyZSIsImNhbnZhcyIsImNyZWF0ZUVsZW1lbnQiLCJjdHgiLCJnZXRDb250ZXh0IiwiY2xlYXJSZWN0IiwicHVwaWxYIiwicHVwaWxZIiwicHVwaWxTaXplIiwiZXllSGVpZ2h0IiwiZXllQ29sb3IiLCJlbW90aW9uIiwiZmlsbFN0eWxlIiwiYmVnaW5QYXRoIiwiZWxsaXBzZSIsIlBJIiwiZmlsbCIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwic3Ryb2tlIiwiQ2FudmFzVGV4dHVyZSIsImNyZWF0ZUV5ZXMiLCJnZW9tZXRyeSIsInBhcmFtZXRlcnMiLCJleWVHZW9tZXRyeSIsIlBsYW5lR2VvbWV0cnkiLCJleWVNYXRlcmlhbCIsIk1lc2hCYXNpY01hdGVyaWFsIiwibWFwIiwidHJhbnNwYXJlbnQiLCJhbHBoYVRlc3QiLCJzaWRlIiwiRG91YmxlU2lkZSIsIk1lc2giLCJwYXJlbnQiLCJ1cGRhdGVFeWVQb3NpdGlvbnMiLCJ1cGRhdGVFbW90aW9uIiwic3BoZXJlUG9zIiwiZ2FtZXBhZERpcmVjdGlvbiIsInBvc2l0aW9uRXllc0Fyb3VuZFNwaGVyZSIsInBvc2l0aW9uRXllc0RlZmF1bHQiLCJub3JtYWxpemVkRGlyIiwibm9ybWFsaXplIiwib3Bwb3NpdGVEaXIiLCJuZWdhdGUiLCJleWVTZXBhcmF0aW9uIiwiYmFzZVBvc2l0aW9uIiwidXAiLCJjcm9zc1ZlY3RvcnMiLCJjcm9zcyIsImxvb2tBdCIsImNvb3JkcyIsInV2T2Zmc2V0WCIsInV2T2Zmc2V0WSIsInV2U2NhbGVYIiwidXZTY2FsZVkiLCJtYXRlcmlhbCIsIm9mZnNldCIsInJlcGVhdCIsIm5lZWRzVXBkYXRlIiwic2hvd0RpcmVjdGlvbiIsInNob3dBZ2dyZXNzaW9uIiwic2hvd0ZlYXIiLCJzaG93SGFwcGluZXNzIiwic2hvd05vcm1hbCIsInJlbW92ZUV5ZXMiLCJyZW1vdmUiLCJkaXNwb3NlIiwiZ2xvYmFsRXllU3lzdGVtIiwiaW5pdEV5ZVN5c3RlbSIsImFkZEV5ZXNUb1NwaGVyZSIsImNoZWNrQW5kQ3JlYXRlIiwidXBkYXRlU3BoZXJlRW1vdGlvbiIsInNob3dEaXJlY3Rpb25PblNwaGVyZSIsInNob3dBZ2dyZXNzaW9uT25TcGhlcmUiLCJzaG93RmVhck9uU3BoZXJlIiwic2hvd0hhcHBpbmVzc09uU3BoZXJlIiwic2hvd05vcm1hbE9uU3BoZXJlIiwiTW92ZW1lbnREaWFnbm9zdGljcyIsImxvZ3MiLCJtYXhMb2dzIiwiY2xpZW50Q29tbWFuZHMiLCJzZXJ2ZXJVcGRhdGVzIiwibG9jYWxJbXB1bHNlcyIsImNvcnJlY3Rpb25zIiwidGVsZXBvcnRzIiwibGFzdFByaW50VGltZSIsInByaW50SW50ZXJ2YWwiLCJlbmFibGUiLCJkaXNhYmxlIiwiY2F0ZWdvcnkiLCJlbnRyeSIsIl9vYmplY3RTcHJlYWQiLCJwcmludFN1bW1hcnkiLCJsb2dDbGllbnRDb21tYW5kIiwiZGlzdGFuY2UiLCJwbGF5ZXJPYmplY3RJRCIsImxvZ1NlcnZlclVwZGF0ZSIsInZlbG9jaXR5IiwibWFnbml0dWRlIiwic3FydCIsInBvdyIsInNlcnZlclRpbWVzdGFtcCIsImNsaWVudFRpbWUiLCJsb2dMb2NhbEltcHVsc2UiLCJsb2dDb3JyZWN0aW9uIiwiY3VycmVudFBvcyIsInRhcmdldFBvcyIsImxvZ1RlbGVwb3J0IiwiZnJvbVBvcyIsInRvUG9zIiwicHJpbnREZXRhaWxlZEluZm8iLCJyZWNlbnRUaW1lIiwicmVjZW50Q29ycmVjdGlvbnMiLCJmaWx0ZXIiLCJ0b1VwcGVyQ2FzZSIsInJlY2VudENvbW1hbmRzIiwic2FtcGxlIiwicmVjZW50VXBkYXRlcyIsIl9zYW1wbGUkdmVsb2NpdHkiLCJyZWNlbnRJbXB1bHNlcyIsInJlY2VudFRlbGVwb3J0cyIsImdldFJlY2VudExvZ3MiLCJjb3VudCIsImZpbHRlcmVkIiwiZXhwb3J0TG9ncyIsImRpYWdub3N0aWNzIiwiZW5hYmxlRGlhZyIsImRpc2FibGVEaWFnIiwiZGlhZ0xvZ3MiLCJDbGllbnRUZWxlbWV0cnkiLCJ2ZXJib3NlTW9kZSIsIm1heEVudHJpZXMiLCJjb3VudGVycyIsImxhc3RQcmludCIsImxhc3RTdGF0ZXMiLCJNYXAiLCJsb2dPYmplY3RTdGF0ZSIsInBoeXNpY3NUeXBlIiwic291cmNlIiwic3BlZWQiLCJjYWxjdWxhdGVTcGVlZCIsImNoZWNrUHJpbnRTdW1tYXJ5IiwibG9nSW1wdWxzZSIsImltcHVsc2UiLCJhcHBsaWVkSW1wdWxzZSIsImNvcnJlY3Rpb25UeXBlIiwiZXZlbnRUeXBlIiwiaGFzR2FyYmFnZURhdGEiLCJwcmludFJlY2VudFBsYXllckRhdGEiLCJhbmFseXplSXNzdWVzIiwicHJpbnRDb21wYWN0U3VtbWFyeSIsInJlY2VudERhdGEiLCJnYXJiYWdlVXBkYXRlcyIsInBsYXllckRhdGEiLCJoYXMiLCJfaXRlcmF0b3IiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsIl9zdGVwIiwiX3N0ZXAkdmFsdWUiLCJfc2xpY2VkVG9BcnJheSIsInRpbWVTdHIiLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJob3VyMTIiLCJob3VyIiwibWludXRlIiwic2Vjb25kIiwiZnJhY3Rpb25hbFNlY29uZERpZ2l0cyIsImVyciIsImF2Z0Rpc3RhbmNlIiwiYmlnQ29ycmVjdGlvbnMiLCJhbmFseXplVGltZURpc2NyZXBhbmNpZXMiLCJjbGllbnRTdGF0ZXMiLCJzZXJ2ZXJTdGF0ZXMiLCJsYXRlc3RDbGllbnQiLCJsYXRlc3RTZXJ2ZXIiLCJ0aW1lRGlmZiIsInBvc0RpZmYiLCJzZXRFbmFibGVkIiwic2V0VmVyYm9zZU1vZGUiLCJ2ZXJib3NlIiwiY2xlYXIiLCJleHBvcnRKU09OIiwiZXhwb3J0Rm9yQ29tcGFyaXNvbiIsImNvbXBhdGlibGVEYXRhIiwicGh5c2ljc190eXBlIiwiYXBwbGllZF9pbXB1bHNlIiwiZXZlbnRfdHlwZSIsImNvcnJlY3Rpb25fdHlwZSIsImdldFN0YXRzIiwibGFzdDVzZWMiLCJ0b3RhbEVudHJpZXMiLCJlbnRyaWVzTGFzdDVzZWMiLCJjbGllbnRUZWxlbWV0cnkiLCJ0ZWxlbWV0cnlVSSIsImludGVncmF0ZVdpdGhVSSIsIm9yaWdpbmFsTG9nQ29ycmVjdGlvbiIsImJpbmQiLCJvcmlnaW5hbExvZ1NlcnZlclVwZGF0ZSIsIm9yaWdpbmFsTG9nQ2xpZW50Q29tbWFuZCIsIm9yaWdpbmFsTG9nT2JqZWN0U3RhdGUiLCJhZGREZXRhaWxlZEVudHJ5Iiwib3JpZ2luYWxMb2dJbXB1bHNlIiwib3JpZ2luYWxQcmludFN1bW1hcnkiLCJsb2dTdW1tYXJ5IiwiZW5hYmxlQ2xpZW50VGVsZW1ldHJ5IiwiZGlzYWJsZUNsaWVudFRlbGVtZXRyeSIsImVuYWJsZVZlcmJvc2VUZWxlbWV0cnkiLCJkaXNhYmxlVmVyYm9zZVRlbGVtZXRyeSIsImNsZWFyQ2xpZW50VGVsZW1ldHJ5IiwiZXhwb3J0Q2xpZW50VGVsZW1ldHJ5IiwiY2xpZW50VGVsZW1ldHJ5U3RhdHMiLCJleHBvcnRDbGllbnRUZWxlbWV0cnlGb3JDb21wYXJpc29uIiwiZ2V0UGh5c2ljc0NvbmZpZyIsImFwcGx5SW1wdWxzZVRvU3BoZXJlIiwiREVCVUdfTU9ERSIsIk1JTl9BUlJPV19MRU5HVEgiLCJNQVhfQVJST1dfTEVOR1RIIiwiU0VORF9JTlRFUlZBTCIsIkFSUk9XX0hFSUdIVF9PRkZTRVQiLCJSQVlfVVBEQVRFX0lOVEVSVkFMIiwiS0VZX0ZPUkNFIiwiTUlOX0RFQURaT05FIiwiTUFYX0RFQURaT05FIiwiYXJyb3dIZWxwZXIiLCJsYXN0U2VudFBvc2l0aW9uIiwibGFzdFNlbmRUaW1lIiwicmF5Y2FzdGVyIiwiUmF5Y2FzdGVyIiwibW91c2UiLCJWZWN0b3IyIiwiY2FtZXJhTGFzdFBvc2l0aW9uIiwibGFzdFJheVVwZGF0ZVRpbWUiLCJsYXN0SW50ZXJzZWN0UG9pbnQiLCJpc01vdXNlQWN0aXZlIiwidyIsImN1cnJlbnREaXJlY3Rpb24iLCJkaXJlY3Rpb25OZWVkc1VwZGF0ZSIsInRlcnJhaW5NZXNoUmVmIiwicGxheWVyTWVzaFJlZiIsImNhbWVyYVJlZiIsImxhc3RMb2NhbEltcHVsc2VUaW1lIiwibGFzdEZyYW1lVGltZSIsIkxPQ0FMX0lNUFVMU0VfSU5URVJWQUwiLCJNSU5fRElTVEFOQ0VfVE9fVEFSR0VUIiwiZ2V0QXJyb3dEaXJlY3Rpb24iLCJpbml0R2FtZXBhZCIsInRlcnJhaW5NZXNoIiwicGxheWVyTWVzaCIsIkFycm93SGVscGVyIiwib25Nb3VzZU1vdmUiLCJvbktleURvd24iLCJvbktleVVwIiwicXVlcnlTZWxlY3RvciIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJtb3VzZVgiLCJtb3VzZVkiLCJjYXN0UmF5QW5kVXBkYXRlRGlyZWN0aW9uIiwiYW5pbWF0ZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInVwZGF0ZUFycm93SGVscGVyIiwiZXF1YWxzIiwidXBkYXRlUmF5RnJvbUxhc3RNb3VzZSIsInByb2Nlc3NMb2NhbFBoeXNpY3MiLCJwcm9jZXNzS2V5Ym9hcmRJbnB1dCIsInBoeXNpY3NDb25maWciLCJrZXlGb3JjZSIsImltcHVsc2VfbXVsdGlwbGllciIsImJhc2VfaW1wdWxzZSIsInNlbmREaXJlY3Rpb25Ub1NlcnZlciIsInVzZXJEYXRhIiwiY3VycmVudFRpbWUiLCJkZWx0YVRpbWUiLCJzaG91bGRNb3ZlIiwiZGlzdGFuY2VUb1RhcmdldCIsImRpc3RhbmNlVG8iLCJ0aW1lU2luY2VMYXN0SW1wdWxzZSIsImJhc2VGb3JjZSIsIm1pbiIsInRvTG93ZXJDYXNlIiwiY2xpZW50WCIsImNsaWVudFkiLCJzZXRGcm9tQ2FtZXJhIiwiaW50ZXJzZWN0cyIsImludGVyc2VjdE9iamVjdHMiLCJwb2ludCIsInVzZVNlcnZlclBoeXNpY3MiLCJlc3RpbWF0ZWRSYWRpdXMiLCJhZGFwdGl2ZURlYWR6b25lIiwiZW5oYW5jZWREaXN0YW5jZSIsInNldERlYnVnTW9kZSIsInZpc2libGUiLCJnZXREZWJ1Z01vZGUiLCJhcnJvd1Bvc2l0aW9uIiwic2V0RGlyZWN0aW9uIiwiYXJyb3dMZW5ndGgiLCJzZXRMZW5ndGgiLCJnZXRDdXJyZW50RGlyZWN0aW9uIiwiZ2V0TGFzdEludGVyc2VjdFBvaW50IiwiaXNNb3VzZUFjdGl2ZUluQ2FudmFzIiwiRXZlbnRFbWl0dGVyIiwiR2FtZVN0YXRlTWFuYWdlciIsIl9FdmVudEVtaXR0ZXIiLCJfdGhpcyIsIl9jYWxsU3VwZXIiLCJ0ZXJyYWluTWVzaENyZWF0ZWQiLCJwbGF5ZXJNZXNoQ3JlYXRlZCIsInBsYXllcklEIiwiaXNQbGF5ZXJJRFJlY2VpdmVkIiwiX2luaGVyaXRzIiwic2V0VGVycmFpbk1lc2giLCJtZXNoIiwiY2hlY2tHYW1lU3RhdGUiLCJzZXRQbGF5ZXJNZXNoIiwiZW1pdCIsIm9iamVjdElEIiwiZ2V0UGxheWVySUQiLCJpc1BsYXllclJlYWR5IiwiaW5pdCIsImluaXRHYW1lU3RhdGVNYW5hZ2VyIiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsIkFycmF5IiwiaXNBcnJheSIsIl9uIiwiRiIsIl9hcnJheUxpa2VUb0FycmF5IiwidG9TdHJpbmciLCJmcm9tIiwidGVzdCIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsIlBIWVNJQ1NfQ09ORklHIiwiVElNRSIsIlBSRURJQ1RJT05fV0lORE9XIiwiTUFYX0VYVFJBUE9MQVRJT04iLCJTRVJWRVJfVVBEQVRFX0lOVEVSVkFMIiwiVElNRVNUQU1QX1RPTEVSQU5DRSIsIkNPUlJFQ1RJT04iLCJQT1NJVElPTl9USFJFU0hPTEQiLCJWRUxPQ0lUWV9USFJFU0hPTEQiLCJIQVJEX0NPUlJFQ1RJT05fVEhSRVNIT0xEIiwiVEVMRVBPUlRfVEhSRVNIT0xEIiwiU01PT1RIX0ZBQ1RPUiIsIkhBUkRfQ09SUkVDVElPTl9GQUNUT1IiLCJNQVhfQ09SUkVDVElPTl9TUEVFRCIsIlZJU1VBTCIsIkFUVFJBQ1RJT05fU1RSRU5HVEgiLCJNQVhfVklTVUFMX0RJU1RBTkNFIiwiREFNUElOR19GQUNUT1IiLCJNSU5fTU9WRU1FTlRfVEhSRVNIT0xEIiwiTkVUV09SSyIsIkdPT0RfUElOR19USFJFU0hPTEQiLCJCQURfUElOR19USFJFU0hPTEQiLCJKSVRURVJfVEhSRVNIT0xEIiwiUEFDS0VUX0xPU1NfVEhSRVNIT0xEIiwic2VydmVyVGltZU9mZnNldCIsIm5ldHdvcmtTdGF0cyIsImxhc3RVcGRhdGVUaW1lIiwidXBkYXRlQ291bnQiLCJtaXNzZWRVcGRhdGVzIiwib2JqZWN0QnVmZmVycyIsIk9iamVjdEJ1ZmZlciIsInByZWRpY3RlZFN0YXRlIiwidmlzdWFsU3RhdGUiLCJsYXN0Q29ycmVjdGlvblRpbWUiLCJjb3JyZWN0aW9uVmVsb2NpdHkiLCJtYXhCdWZmZXJTaXplIiwiYWRkU2VydmVyVXBkYXRlIiwidXBkYXRlIiwic29ydCIsImIiLCJnZXRJbnRlcnBvbGF0ZWRTdGF0ZSIsInRhcmdldFRpbWUiLCJiZWZvcmUiLCJhZnRlciIsImxhdGVzdCIsImV4dHJhcG9sYXRlU3RhdGUiLCJpbnRlcnBvbGF0ZVN0YXRlcyIsInN0YXRlIiwic3RhdGUxIiwic3RhdGUyIiwiY2xlYW5PbGRVcGRhdGVzIiwiY3V0b2ZmVGltZSIsImluaXRBbW1vIiwiX2luaXRBbW1vIiwiY29sbGlzaW9uQ29uZmlndXJhdGlvbiIsImRpc3BhdGNoZXIiLCJvdmVybGFwcGluZ1BhaXJDYWNoZSIsInNvbHZlciIsImJ0RGVmYXVsdENvbGxpc2lvbkNvbmZpZ3VyYXRpb24iLCJidENvbGxpc2lvbkRpc3BhdGNoZXIiLCJidERidnRCcm9hZHBoYXNlIiwiYnRTZXF1ZW50aWFsSW1wdWxzZUNvbnN0cmFpbnRTb2x2ZXIiLCJidERpc2NyZXRlRHluYW1pY3NXb3JsZCIsImdldEVzdGltYXRlZFNlcnZlclRpbWUiLCJuZXdPZmZzZXQiLCJfZGF0YSRwb3NpdGlvbiIsIl9kYXRhJHBvc2l0aW9uMiIsIl9kYXRhJHBvc2l0aW9uMyIsImJ1ZmZlciIsImdldCIsInVwZGF0ZU5ldHdvcmtTdGF0cyIsInBoeXNpY3NCeSIsImhhbmRsZUJvdGhQaHlzaWNzVXBkYXRlIiwiaGFuZGxlQnVsbGV0UGh5c2ljc1VwZGF0ZSIsImhhbmRsZUFtbW9QaHlzaWNzVXBkYXRlIiwicmVuZGVyVGltZSIsInRyYW5zZm9ybSIsImdldFdvcmxkVHJhbnNmb3JtIiwiZ2V0T3JpZ2luIiwidGVsZXBvcnRQaHlzaWNzQm9keSIsImFwcGx5SGFyZENvcnJlY3Rpb24iLCJhcHBseVBoeXNpY3NDb3JyZWN0aW9uIiwibGF0ZXN0VXBkYXRlIiwic2V0VmFsdWUiLCJzZXRXb3JsZFRyYW5zZm9ybSIsImJ0VmVsb2NpdHkiLCJzZXRMaW5lYXJWZWxvY2l0eSIsInRhcmdldFN0YXRlIiwiY29ycmVjdGlvbkZhY3RvciIsIm5ld1BvcyIsImN1cnJlbnRWZWwiLCJnZXRMaW5lYXJWZWxvY2l0eSIsInRhcmdldFZlbCIsImNvcnJlY3Rpb25EaXIiLCJjb3JyZWN0aW9uU3RyZW5ndGgiLCJhcHBseUNlbnRyYWxJbXB1bHNlIiwidXBkYXRlVmlzdWFsU3RhdGVzIiwidXBkYXRlTWVzaFZpc3VhbENvcnJlY3Rpb24iLCJib2R5UG9zIiwibWVzaFBvcyIsImF0dHJhY3Rpb25Gb3JjZSIsImludGVydmFsIiwiZXhwZWN0ZWRJbnRlcnZhbCIsImFkYXB0VG9OZXR3b3JrQ29uZGl0aW9ucyIsInN0ZXBQaHlzaWNzIiwic3RlcFNpbXVsYXRpb24iLCJ1cGRhdGVQaHlzaWNzT2JqZWN0cyIsIl9pdGVyYXRvcjIiLCJfc3RlcDIiLCJfT2JqZWN0JGVudHJpZXMiLCJlbnRyaWVzIiwiX09iamVjdCRlbnRyaWVzJF9pIiwib3JpZ2luIiwicm90YXRpb24iLCJnZXRSb3RhdGlvbiIsInF1YXRlcm5pb24iLCJwaW5nVmFsdWUiLCJjbGVhbnVwIiwibnVtT2JqZWN0cyIsImdldE51bUNvbGxpc2lvbk9iamVjdHMiLCJnZXRDb2xsaXNpb25PYmplY3RBcnJheSIsImF0IiwicmVtb3ZlQ29sbGlzaW9uT2JqZWN0IiwiYXBwbHlQaHlzaWNzQ29uZmlnIiwidGVycmFpbkNyZWF0ZWQiLCJwbGF5ZXJDcmVhdGVkIiwiY3JlYXRlVGVycmFpbk1lc2giLCJjcmVhdGVQaHlzaWNzQm9keUZvclRlcnJhaW4iLCJjcmVhdGVTcGhlcmVNZXNoIiwiY3JlYXRlUGh5c2ljc0JvZHlGb3JTcGhlcmUiLCJjcmVhdGVUcmVlTWVzaCIsImNyZWF0ZUJveE1lc2giLCJjcmVhdGVQaHlzaWNzQm9keUZvckJveCIsInJlc3VsdCIsImhlaWdodG1hcF93IiwiaGVpZ2h0bWFwX2giLCJzY2FsZVgiLCJzY2FsZV94Iiwic2NhbGVaIiwic2NhbGVfeiIsImFtbW9IZWlnaHREYXRhIiwiX21hbGxvYyIsInAyIiwiaiIsIkhFQVBGMzIiLCJoZWlnaHRfZGF0YSIsImJ0SGVpZ2h0ZmllbGRUZXJyYWluU2hhcGUiLCJtaW5faGVpZ2h0IiwibWF4X2hlaWdodCIsIlBIWV9GTE9BVCIsInNldExvY2FsU2NhbGluZyIsInNjYWxlX3kiLCJzZXRNYXJnaW4iLCJidFRyYW5zZm9ybSIsInNldElkZW50aXR5IiwibW90aW9uU3RhdGUiLCJidERlZmF1bHRNb3Rpb25TdGF0ZSIsInJiSW5mbyIsImJ0UmlnaWRCb2R5Q29uc3RydWN0aW9uSW5mbyIsImJ0UmlnaWRCb2R5IiwiVEVSUkFJTl9HUk9VUCIsImFkZFJpZ2lkQm9keSIsItGA0LDQt9C80LXRgNGLIiwi0LzQsNGB0YjRgtCw0LEiLCLQv9C+0LfQuNGG0LjRjyIsItC80LjQvdCS0YvRgdC+0YLQsCIsItC80LDQutGB0JLRi9GB0L7RgtCwIiwiZ2VvIiwicm90YXRlWCIsInZlcnRzIiwiYXR0cmlidXRlcyIsImFycmF5IiwiaXgiLCJpeiIsImZsb29yIiwiY29tcHV0ZVZlcnRleE5vcm1hbHMiLCJNZXNoUGhvbmdNYXRlcmlhbCIsImNvbG9yIiwicGFyc2VDb2xvciIsIndpcmVmcmFtZSIsImZsYXRTaGFkaW5nIiwicmVjZWl2ZVNoYWRvdyIsIlNwaGVyZUdlb21ldHJ5Iiwic2hpbmluZXNzIiwiQm94R2VvbWV0cnkiLCJNZXNoTGFtYmVydE1hdGVyaWFsIiwiYnRTcGhlcmVTaGFwZSIsInNldE9yaWdpbiIsImdldE1vdGlvblN0YXRlIiwic2V0QWN0aXZhdGlvblN0YXRlIiwic2V0Q2NkTW90aW9uVGhyZXNob2xkIiwic2V0Q2NkU3dlcHRTcGhlcmVSYWRpdXMiLCJTUEhFUkVfR1JPVVAiLCJkZXB0aCIsImJ0Qm94U2hhcGUiLCJtYXhEaW1lbnNpb24iLCJCT1hfR1JPVVAiLCJkaW1lbnNpb25zIiwiY2NkIiwibW90aW9uVGhyZXNob2xkIiwic3dlcHRTcGhlcmVSYWRpdXMiLCJjb2xvclN0ciIsInN0YXJ0c1dpdGgiLCJwYXJzZUludCIsImNyZWF0ZVRlc3RTcGhlcmUiLCJzdGFydFkiLCJ0ZXN0U3BoZXJlT2JqIiwiQ0FNRVJBX0hFSUdIVCIsIkNBTUVSQV9ESVNUQU5DRSIsIlJPVEFUSU9OX1NNT09USF9GQUNUT1IiLCJERUFEX1pPTkVfQU5HTEUiLCJNSU5fWV9BTkdMRSIsIk1BWF9ZX0FOR0xFIiwiTUlOX0FEQVBUSVZFX0ZBQ1RPUiIsIk1BWF9BREFQVElWRV9GQUNUT1IiLCJRVUFEUkFUSUNfRkFDVE9SIiwiY3VycmVudFF1YWRyYXRpY0ZhY3RvciIsImxhc3RLbm93blBvc2l0aW9uIiwibGFzdENhbWVyYVBvc2l0aW9uIiwibGFzdENhbWVyYURpcmVjdGlvbiIsInRhcmdldENhbWVyYURpcmVjdGlvbiIsImNhbWVyYVRhcmdldCIsImxhc3RBcnJvd0RpcmVjdGlvbiIsImxhc3RNZWFzdXJlZEFuZ2xlIiwibGFzdE1lYXN1cmVkRGlzdGFuY2UiLCJ0dXJuaW5nQWN0aXZlIiwic21vb3RoTG9va0F0VGFyZ2V0IiwiaW5pdENhbWVyYSIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwiYXNwZWN0IiwiYW5nbGVCZXR3ZWVuRGlyZWN0aW9ucyIsImRpcjEiLCJkaXIyIiwidjEiLCJ2MiIsImFjb3MiLCJkb3QiLCJjYWxjdWxhdGVBZGFwdGl2ZVJvdGF0aW9uRmFjdG9yIiwiYW5nbGUiLCJub3JtYWxpemVkRGlzdGFuY2UiLCJhbmdsZVJhdGlvIiwiZGlzdGFuY2VGYWN0b3IiLCJjb21iaW5lZEZhY3RvciIsImFkYXB0aXZlRmFjdG9yIiwidXBkYXRlQ2FtZXJhIiwiY3VycmVudFBsYXllclBvc2l0aW9uIiwiYXJyb3dEaXJlY3Rpb24iLCJsZXJwIiwieUNvbXBvbmVudCIsImFkYXB0aXZlUm90YXRpb25GYWN0b3IiLCJob3Jpem9udGFsRGlzdGFuY2UiLCJjb3MiLCJjYW1lcmFPZmZzZXQiLCJzZXRRdWFkcmF0aWNGYWN0b3IiLCJuZXdWYWx1ZSIsImdldFF1YWRyYXRpY0ZhY3RvciIsImxvZ0NhbWVyYVN0YXR1cyIsIlRlbGVtZXRyeVVJIiwicGFuZWwiLCJsb2dDb250YWluZXIiLCJpc0NvbGxhcHNlZCIsIm1heExvZ0VudHJpZXMiLCJsb2dFbnRyaWVzIiwiZmlsdGVycyIsImNvbW1hbmRzIiwiZ2FyYmFnZSIsInZpZXdNb2RlIiwiZGV0YWlsZWREYXRhIiwiaXNQYXVzZWQiLCJjcmVhdGVVSSIsInNldHVwRXZlbnRMaXN0ZW5lcnMiLCJpbm5lckhUTUwiLCJhZGRTdHlsZXMiLCJnZXRFbGVtZW50QnlJZCIsInN0eWxlIiwidGV4dENvbnRlbnQiLCJoZWFkIiwidG9nZ2xlVmlld01vZGUiLCJ0b2dnbGVDb2xsYXBzZSIsImNsZWFyTG9nIiwiZXhwb3J0RGF0YSIsImhpZGUiLCJjaGVja2VkIiwiYXBwbHlGaWx0ZXJzIiwibWFrZURyYWdnYWJsZSIsIl90aGlzMiIsImhlYWRlciIsImlzRHJhZ2dpbmciLCJjdXJyZW50WCIsImN1cnJlbnRZIiwiaW5pdGlhbFgiLCJpbml0aWFsWSIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJwcmV2ZW50RGVmYXVsdCIsImRldGFpbGVkQ29udGFpbmVyIiwibW9kZUJ1dHRvbiIsImRpc3BsYXkiLCJ0aXRsZSIsInJlbmRlckRldGFpbGVkVmlldyIsImJ1dHRvbiIsImNsYXNzTGlzdCIsInRvZ2dsZVBhdXNlIiwicGF1c2VCdG4iLCJhZGRMb2dFbnRyeSIsInJlbmRlckxvZ0VudHJ5IiwidXBkYXRlU3RhdHMiLCJzY3JvbGxUb0JvdHRvbSIsImxvZ0VsZW1lbnQiLCJjbGFzc05hbWUiLCJjaGlsZHJlbiIsInJlbW92ZUNoaWxkIiwiZmlyc3RDaGlsZCIsInJlY2VudEVudHJpZXMiLCJnZXRUaW1lIiwic3RhdHVzRWxlbWVudCIsIl90aGlzMyIsInNjcm9sbFRvcCIsInNjcm9sbEhlaWdodCIsInRvSVNPU3RyaW5nIiwiYmxvYiIsIkJsb2IiLCJ1cmwiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJocmVmIiwiZG93bmxvYWQiLCJjbGljayIsInJldm9rZU9iamVjdFVSTCIsInNob3ciLCJfdGhpczQiLCJjb250YWluZXIiLCJlbGVtZW50IiwiY3JlYXRlRGV0YWlsZWRFbnRyeSIsImNvbnRlbnQiLCJmb3JtYXRPYmplY3RTdGF0ZSIsImZvcm1hdENvcnJlY3Rpb24iLCJmb3JtYXRTZXJ2ZXJVcGRhdGUiLCJmb3JtYXRDbGllbnRDb21tYW5kIiwiaXNHYXJiYWdlIiwic2hvd1RlbGVtZXRyeVVJIiwiaGlkZVRlbGVtZXRyeVVJIiwiY2xlYXJUZWxlbWV0cnlVSSIsInRlbGVtZXRyeURldGFpbGVkTW9kZSIsInRlbGVtZXRyeVN1bW1hcnlNb2RlIiwidGVsZW1ldHJ5UGF1c2UiLCJ0ZWxlbWV0cnlSZXN1bWUiLCJzY2VuZVJlbmRlcmVyIiwiaW5pdE5ld1BoeXNpY3MiLCJzdGVwTmV3UGh5c2ljcyIsImdldE5ld1BoeXNpY3NXb3JsZCIsImNsZWFudXBOZXdQaHlzaWNzIiwiQVBQX0NPTkZJRyIsIlNFUlZFUl9VUkwiLCJUQVJHRVRfRlBTIiwiUEhZU0lDU19USU1FU1RFUCIsIkVOQUJMRV9TVEFUUyIsImlzUnVubmluZyIsImZyYW1lQ291bnQiLCJmcHNDb3VudGVyIiwibGFzdEZwc1VwZGF0ZSIsInN0YXRzQ29udGFpbmVyIiwiaW5pdE5ld0FwcCIsIl9pbml0TmV3QXBwIiwicGh5c2ljc0luaXRpYWxpemVkIiwibmV0d29ya0luaXRpYWxpemVkIiwibG9hZEFtbW8iLCJjcmVhdGVTdGF0c1VJIiwic2V0dXBFdmVudEhhbmRsZXJzIiwic3RhcnRNYWluTG9vcCIsImluaXRSZW5kZXJlciIsIl9pbml0UmVuZGVyZXIiLCJhbHBoYSIsInBvd2VyUHJlZmVyZW5jZSIsInNldFBpeGVsUmF0aW8iLCJkZXZpY2VQaXhlbFJhdGlvIiwib3V0cHV0Q29sb3JTcGFjZSIsIlNSR0JDb2xvclNwYWNlIiwiY3NzVGV4dCIsInVwZGF0ZVN0YXRzVUkiLCJwaHlzaWNzU3RhdHMiLCJodG1sIiwib25Nb3VzZURvd24iLCJvbk1vdXNlVXAiLCJvbkJlZm9yZVVubG9hZCIsInNlbmRNb3ZlbWVudENvbW1hbmQiLCJ0b2dnbGVQaHlzaWNzTW9kZSIsInRvZ2dsZUZ1bGxzY3JlZW4iLCJmdWxsc2NyZWVuRWxlbWVudCIsImV4aXRGdWxsc2NyZWVuIiwiaXNQcmVzc2VkIiwicHJlc3NlZCIsImRvY3VtZW50RWxlbWVudCIsInJlcXVlc3RGdWxsc2NyZWVuIiwicGVyZm9ybWFuY2UiLCJtYWluTG9vcCIsInVwZGF0ZU1lc2hQb3NpdGlvbnMiLCJyZW5kZXIiLCJzdG9wQXBwIiwiY3JlYXRlVGVzdE9iamVjdCIsInRlc3REYXRhIiwiYXBwbHlUZXN0SW1wdWxzZSIsIm5ld0FwcCIsImdldFBoeXNpY3NTdGF0cyIsIl9sb2FkQW1tbyIsIl9jYWxsZWUzIiwiX2NhbGxlZTMkIiwiX2NvbnRleHQzIiwic2NyaXB0Iiwic3JjIiwib25sb2FkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///308\n')},7:module=>{eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n")}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var C=1/0;for(L=0;L<deferred.length;L++){for(var[U,F,B]=deferred[L],g=!0,t=0;t<U.length;t++)(!1&B||C>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[t])))?U.splice(t--,1):(g=!1,B<C&&(C=B));if(g){deferred.splice(L--,1);var I=F();void 0!==I&&(Q=I)}}return Q}B=B||0;for(var L=deferred.length;L>0&&deferred[L-1][2]>B;L--)deferred[L]=deferred[L-1];deferred[L]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),(()=>{var Q={792:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,C,[g,t,I]=F,L=0;if(g.some((U=>0!==Q[U]))){for(B in t)__webpack_require__.o(t,B)&&(__webpack_require__.m[B]=t[B]);if(I)var s=I(__webpack_require__)}for(U&&U(F);L<g.length;L++)C=g[L],__webpack_require__.o(Q,C)&&Q[C]&&Q[C][0](),Q[C]=0;return __webpack_require__.O(s)},F=self.webpackChunkweb=self.webpackChunkweb||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[233],(()=>__webpack_require__(308)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();