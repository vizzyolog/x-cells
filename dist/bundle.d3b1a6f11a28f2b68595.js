(()=>{var __webpack_modules__={470:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.core.js\nvar three_core = __webpack_require__(922);\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(437);\n;// ./src/scene.js\n// scene.js\n\nvar scene_scene, renderer;\nvar directionalLight; // Экспортируем свет для доступности в других модулях\n\nfunction initScene() {\n  console.log("try to initScene");\n  scene_scene = new three_core/* Scene */.Z58();\n  scene_scene.background = new three_core/* Color */.Q1f(0x88ccff);\n  renderer = new three_module/* WebGLRenderer */.JeP({\n    antialias: true\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  // Включаем поддержку теней\n  renderer.shadowMap.enabled = true;\n  renderer.shadowMap.type = three_core/* PCFSoftShadowMap */.Wk7;\n  document.body.appendChild(renderer.domElement);\n  window.addEventListener(\'resize\', onWindowResize);\n\n  // Настраиваем освещение\n  var ambient = new three_core/* AmbientLight */.$p8(0xffffff, 0.8);\n  scene_scene.add(ambient);\n\n  // Основной направленный свет с тенями\n  directionalLight = new three_core/* DirectionalLight */.ZyN(0xffffff, 1);\n  directionalLight.position.set(50, 100, 50);\n  directionalLight.castShadow = true;\n\n  // Настраиваем параметры теней для охвата большой области\n  directionalLight.shadow.camera.near = 0.1;\n  directionalLight.shadow.camera.far = 500;\n  directionalLight.shadow.camera.left = -100;\n  directionalLight.shadow.camera.right = 100;\n  directionalLight.shadow.camera.top = 100;\n  directionalLight.shadow.camera.bottom = -100;\n  directionalLight.shadow.mapSize.width = 512; // Большее разрешение для лучшего качества\n  directionalLight.shadow.mapSize.height = 512;\n  // directionalLight.shadow.bias = -0.0001; // Уменьшаем артефакты тени\n  scene_scene.add(directionalLight);\n\n  // Добавляем вспомогательный свет для подсветки теней\n  var fillLight = new three_core/* DirectionalLight */.ZyN(0xffffff, 1);\n  fillLight.position.set(-50, 50, -50);\n  scene_scene.add(fillLight);\n\n  // Можно добавить помощник для отладки теней (раскомментируйте при необходимости)\n  // const helper = new THREE.CameraHelper(directionalLight.shadow.camera);\n  // scene.add(helper);\n}\nfunction onWindowResize() {\n  // Обработка изменения размера окна только для рендерера\n  // (камера обрабатывается в camera.js)\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\n// Добавляем функцию для обновления положения источника света относительно камеры, как солнце\nfunction updateShadowCamera(camera) {\n  if (!directionalLight || !camera) return;\n\n  // Получаем направление взгляда камеры\n  var cameraDirection = new three_core/* Vector3 */.Pq0();\n  camera.getWorldDirection(cameraDirection);\n\n  // Создаем позицию "солнца" относительно камеры\n  // Поднимаем "солнце" на 200 единиц вверх от позиции камеры и смещаем немного в сторону и назад\n  var sunOffset = new three_core/* Vector3 */.Pq0(100, 200, -50);\n  var sunPosition = camera.position.clone().add(sunOffset);\n\n  // Обновляем позицию света\n  directionalLight.position.copy(sunPosition);\n\n  // Определяем точку, куда направлен свет - перед камерой на расстоянии 100 единиц\n  var targetOffset = cameraDirection.clone().multiplyScalar(100);\n  var targetPosition = camera.position.clone().add(targetOffset);\n  directionalLight.target.position.copy(targetPosition);\n\n  // Обновляем матрицу трансформации цели света\n  directionalLight.target.updateMatrixWorld();\n\n  // Обновляем матрицу камеры теней\n  directionalLight.shadow.camera.updateProjectionMatrix();\n}\n\n// EXTERNAL MODULE: ./node_modules/events/events.js\nvar events = __webpack_require__(7);\n;// ./src/simple-food-client.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\n// Простая клиентская система еды для Фазы 1\n\nvar SimpleFoodClient = /*#__PURE__*/function () {\n  function SimpleFoodClient(scene, world) {\n    _classCallCheck(this, SimpleFoodClient);\n    this.scene = scene;\n    this.world = world;\n    this.foodMeshes = new Map(); // foodID -> mesh\n\n    // console.log(\'[SimpleFoodClient] Инициализирован\');\n  }\n\n  // Обработка события создания новой еды\n  return _createClass(SimpleFoodClient, [{\n    key: "handleFoodSpawned",\n    value: function handleFoodSpawned(foodItem) {\n      // console.log(\'[SimpleFoodClient] Создание еды:\', foodItem);\n\n      if (this.foodMeshes.has(foodItem.id)) {\n        console.warn(\'[SimpleFoodClient] Еда уже существует:\', foodItem.id);\n        return;\n      }\n\n      // Создаем простую сферу для еды\n      var geometry = new three_core/* SphereGeometry */.Gu$(foodItem.radius * 2, 8, 6);\n      var material = new three_core/* MeshBasicMaterial */.V9B({\n        color: foodItem.color,\n        transparent: true,\n        opacity: 0.8\n      });\n      var mesh = new three_core/* Mesh */.eaF(geometry, material);\n      mesh.position.set(foodItem.x, foodItem.y, foodItem.z);\n\n      // Добавляем простую анимацию (пульсация)\n      mesh.userData = {\n        id: foodItem.id,\n        originalScale: 1.0,\n        animationTime: 0\n      };\n      this.scene.add(mesh);\n      this.foodMeshes.set(foodItem.id, mesh);\n\n      // console.log(\'[SimpleFoodClient] Еда создана:\', foodItem.id, \'в позиции\', foodItem.x, foodItem.y, foodItem.z);\n    }\n\n    // Обработка события поедания еды\n  }, {\n    key: "handleFoodConsumed",\n    value: function handleFoodConsumed(playerID, foodID, massGain) {\n      var _this = this;\n      // console.log(\'[SimpleFoodClient] Еда съедена:\', { playerID, foodID, massGain });\n\n      var mesh = this.foodMeshes.get(foodID);\n      if (!mesh) {\n        console.warn(\'[SimpleFoodClient] Не найдена еда для удаления:\', foodID);\n        return;\n      }\n\n      // Простая анимация исчезновения\n      this.animateDisappear(mesh, function () {\n        _this.scene.remove(mesh);\n        _this.foodMeshes["delete"](foodID);\n\n        // Очищаем геометрию и материал\n        mesh.geometry.dispose();\n        mesh.material.dispose();\n      });\n\n      // console.log(\'[SimpleFoodClient] Еда удалена:\', foodID);\n    }\n\n    // Обработка полного состояния еды (при подключении)\n  }, {\n    key: "handleFoodState",\n    value: function handleFoodState(foodItems) {\n      // console.log(\'[SimpleFoodClient] Получено состояние еды:\', foodItems);\n\n      // Удаляем всю старую еду\n      this.clearAllFood();\n\n      // Создаем новую еду\n      for (var _i = 0, _Object$entries = Object.entries(foodItems); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          foodID = _Object$entries$_i[0],\n          foodItem = _Object$entries$_i[1];\n        this.handleFoodSpawned(foodItem);\n      }\n    }\n\n    // Очистка всей еды\n  }, {\n    key: "clearAllFood",\n    value: function clearAllFood() {\n      var _iterator = _createForOfIteratorHelper(this.foodMeshes),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            foodID = _step$value[0],\n            mesh = _step$value[1];\n          this.scene.remove(mesh);\n          mesh.geometry.dispose();\n          mesh.material.dispose();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      this.foodMeshes.clear();\n      // console.log(\'[SimpleFoodClient] Вся еда очищена\');\n    }\n\n    // Анимация исчезновения\n  }, {\n    key: "animateDisappear",\n    value: function animateDisappear(mesh, onComplete) {\n      var startScale = mesh.scale.x;\n      var duration = 300; // 300мс\n      var startTime = Date.now();\n      var _animate = function animate() {\n        var elapsed = Date.now() - startTime;\n        var progress = Math.min(elapsed / duration, 1);\n\n        // Уменьшаем размер и прозрачность\n        var scale = startScale * (1 - progress);\n        mesh.scale.set(scale, scale, scale);\n        mesh.material.opacity = 0.8 * (1 - progress);\n        if (progress < 1) {\n          requestAnimationFrame(_animate);\n        } else {\n          onComplete();\n        }\n      };\n      _animate();\n    }\n\n    // Обновление анимаций (вызывается каждый кадр)\n  }, {\n    key: "update",\n    value: function update(deltaTime) {\n      var time = Date.now() * 0.001; // Время в секундах\n      var _iterator2 = _createForOfIteratorHelper(this.foodMeshes),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n            foodID = _step2$value[0],\n            mesh = _step2$value[1];\n          // Простая пульсация\n          var pulseSpeed = 2.0;\n          var pulseAmount = 0.1;\n          var scale = 1.0 + Math.sin(time * pulseSpeed) * pulseAmount;\n          mesh.scale.set(scale, scale, scale);\n\n          // Небольшое вращение\n          mesh.rotation.y += deltaTime * 0.5;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n\n    // Получить количество еды\n  }, {\n    key: "getFoodCount",\n    value: function getFoodCount() {\n      return this.foodMeshes.size;\n    }\n\n    // Проверка существования еды\n  }, {\n    key: "hasFoodItem",\n    value: function hasFoodItem(foodID) {\n      return this.foodMeshes.has(foodID);\n    }\n  }]);\n}();\n;// ./src/network.js\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == network_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(network_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction network_createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = network_unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction network_slicedToArray(r, e) { return network_arrayWithHoles(r) || network_iterableToArrayLimit(r, e) || network_unsupportedIterableToArray(r, e) || network_nonIterableRest(); }\nfunction network_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction network_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return network_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? network_arrayLikeToArray(r, a) : void 0; } }\nfunction network_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction network_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction network_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction network_typeof(o) { "@babel/helpers - typeof"; return network_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, network_typeof(o); }\n// network.js\n\n\n\n\nvar ws = null;\nvar physicsStarted = false;\nvar pendingObjects = [];\n\n// Добавляем переменные для работы с временными метками\nvar serverTimeOffset = 0; // Разница между серверным и клиентским временем\nvar serverTimeOffsetSamples = []; // Хранение образцов для вычисления среднего значения\nvar MAX_OFFSET_SAMPLES = 10; // Максимальное количество образцов\nvar pingHistory = []; // История пингов для анализа\nvar MAX_PING_SAMPLES = 10; // Максимальное количество образцов пинга\n\n// Глобальная конфигурация физики\nvar physicsConfig = null;\n\n// Добавляем переменную для текущего значения пинга\nvar currentPing = 0;\n\n// Добавляем переменную для отслеживания времени последнего обновления\nvar lastUpdateTime = Date.now();\nvar UPDATE_TIMEOUT = 500; // Увеличиваем с 100 до 500мс - более разумный таймаут\nvar UPDATE_WARNING_TIMEOUT = 200; // Предупреждение при 200мс без обновлений\n\n// Добавляем переменные для дебаунса\nvar lastKeyboardImpulseTime = 0;\nvar KEYBOARD_IMPULSE_INTERVAL = 50; // Синхронизируем с серверным интервалом\n\n// Добавляем переменную для отслеживания состояния вкладки\nvar isTabActive = true;\nvar lastActiveTime = Date.now();\n\n// === НОВОЕ: Система еды ===\nvar foodClient = null;\n\n// === НОВОЕ: Система контроля соединения ===\nvar connectionStats = {\n  lastBatchUpdate: Date.now(),\n  lastPing: Date.now(),\n  lastCommand: Date.now(),\n  batchUpdateCount: 0,\n  missedUpdatesThreshold: 3,\n  // Пропускаем только после 3 подряд пропущенных обновлений\n  avgUpdateInterval: 50,\n  // Ожидаемый интервал обновлений от сервера\n  lastWarningTime: 0 // Время последнего предупреждения (для предотвращения спама)\n};\n\n// Функция для получения текущей конфигурации физики\nfunction getPhysicsConfig() {\n  return physicsConfig;\n}\n\n// Функция для получения текущего значения пинга\nfunction getCurrentPing() {\n  return currentPing;\n}\n\n// Вычисляем текущее серверное время на основе смещения\nfunction estimateServerTime() {\n  return Date.now() + serverTimeOffset;\n}\n\n// Обновление смещения времени сервера\nfunction updateServerTimeOffset(serverTime) {\n  var now = Date.now();\n  var currentOffset = serverTime - now;\n\n  // Добавляем новый образец\n  serverTimeOffsetSamples.push(currentOffset);\n\n  // Ограничиваем количество образцов\n  if (serverTimeOffsetSamples.length > MAX_OFFSET_SAMPLES) {\n    serverTimeOffsetSamples.shift();\n  }\n\n  // Используем медиану вместо среднего для устойчивости к выбросам\n  var sortedOffsets = [].concat(serverTimeOffsetSamples).sort(function (a, b) {\n    return a - b;\n  });\n  var medianOffset = sortedOffsets[Math.floor(sortedOffsets.length / 2)];\n  serverTimeOffset = medianOffset;\n\n  // Обновляем отображение времени\n  updateTimeDisplay();\n\n  //console.log(`[Time] Синхронизация времени: смещение = ${medianOffset} мс`);\n}\n\n// Добавляем функцию для обновления отображения пинга на экране\nfunction updatePingDisplay(pingValue) {\n  var pingElement = document.getElementById(\'ping-display\');\n  var jitterElement = document.getElementById(\'jitter-display\');\n  var strategyElement = document.getElementById(\'strategy-display\');\n  var adaptationElement = document.getElementById(\'adaptation-display\');\n  if (pingElement) {\n    // Обновляем отображение пинга с цветовой индикацией\n    if (pingValue < 50) {\n      pingElement.style.color = \'#4CAF50\'; // Зеленый для хорошего пинга\n    } else if (pingValue < 150) {\n      pingElement.style.color = \'#FF9800\'; // Оранжевый для среднего пинга\n    } else {\n      pingElement.style.color = \'#F44336\'; // Красный для высокого пинга\n      // Добавляем мигание для очень высокого пинга\n      if (pingValue > 300) {\n        pingElement.style.animation = \'blink 1s infinite\';\n      } else {\n        pingElement.style.animation = \'none\';\n      }\n    }\n    pingElement.textContent = "\\u041F\\u0438\\u043D\\u0433: ".concat(Math.round(pingValue), " \\u043C\\u0441");\n  }\n\n  // Получаем информацию о джиттере и адаптации из физики\n  if (typeof getSmoothedJitter === \'function\') {\n    var jitter = getSmoothedJitter();\n    if (jitterElement) {\n      if (jitter < 10) {\n        jitterElement.style.color = \'#4CAF50\'; // Зеленый для низкого джиттера\n      } else if (jitter < 30) {\n        jitterElement.style.color = \'#FF9800\'; // Оранжевый для среднего джиттера\n      } else {\n        jitterElement.style.color = \'#F44336\'; // Красный для высокого джиттера\n      }\n      jitterElement.textContent = "\\u0414\\u0436\\u0438\\u0442\\u0442\\u0435\\u0440: ".concat(jitter.toFixed(1), " \\u043C\\u0441");\n    }\n  }\n\n  // Получаем информацию о стратегии интерполяции\n  if (typeof getInterpolationStrategy === \'function\') {\n    var strategy = getInterpolationStrategy(pingValue);\n    if (strategyElement) {\n      var strategyText = \'\';\n      var strategyColor = \'\';\n      switch (strategy) {\n        case \'linear\':\n          strategyText = \'Линейная\';\n          strategyColor = \'#4CAF50\';\n          break;\n        case \'hermite\':\n          strategyText = \'Hermite\';\n          strategyColor = \'#FF9800\';\n          break;\n        case \'extrapolation\':\n          strategyText = \'Экстраполяция\';\n          strategyColor = \'#F44336\';\n          break;\n        default:\n          strategyText = \'Неизвестно\';\n          strategyColor = \'#9E9E9E\';\n      }\n      strategyElement.style.color = strategyColor;\n      strategyElement.textContent = "\\u0421\\u0442\\u0440\\u0430\\u0442\\u0435\\u0433\\u0438\\u044F: ".concat(strategyText);\n    }\n  }\n\n  // Получаем информацию о состоянии адаптации\n  if (typeof networkMonitor !== \'undefined\' && adaptationElement) {\n    var isAdapting = networkMonitor.adaptationState.isAdapting;\n    if (isAdapting) {\n      adaptationElement.style.color = \'#FF9800\';\n      adaptationElement.textContent = \'Адаптация: ⚡ Активна\';\n      adaptationElement.style.animation = \'blink 0.5s infinite\';\n    } else {\n      adaptationElement.style.color = \'#4CAF50\';\n      adaptationElement.textContent = \'Адаптация: ✓ Стабильно\';\n      adaptationElement.style.animation = \'none\';\n    }\n  }\n}\n\n// Функция для обновления серверного времени на экране\nfunction updateTimeDisplay() {\n  var serverTimeElem = document.getElementById(\'server-time\');\n  var timeOffsetElem = document.getElementById(\'time-offset\');\n  if (serverTimeElem && timeOffsetElem) {\n    var estServerTime = estimateServerTime();\n    var serverDate = new Date(estServerTime);\n    serverTimeElem.textContent = "\\u0412\\u0440\\u0435\\u043C\\u044F \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430: ".concat(serverDate.toLocaleTimeString());\n    timeOffsetElem.textContent = "\\u0421\\u043C\\u0435\\u0449\\u0435\\u043D\\u0438\\u0435: ".concat(serverTimeOffset.toFixed(0), " \\u043C\\u0441");\n  }\n}\n\n// Создаем интервал для периодического обновления времени\nvar timeDisplayInterval;\nvar serverDelay = 0;\nfunction updateServerDelayDisplay(delay) {\n  var delayDisplay = document.getElementById(\'server-delay-display\');\n  if (delayDisplay) {\n    delayDisplay.textContent = "\\u0417\\u0430\\u0434\\u0435\\u0440\\u0436\\u043A\\u0430 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430: ".concat(delay.toFixed(0), " \\u043C\\u0441");\n  }\n}\n\n// Функция для проверки состояния соединения\nfunction checkConnectionState() {\n  var currentTime = Date.now();\n\n  // Проверяем состояние WebSocket соединения\n  if (!ws || ws.readyState !== WebSocket.OPEN) {\n    return false;\n  }\n\n  // Используем время последнего batch_update как основной индикатор\n  var timeSinceLastBatch = currentTime - connectionStats.lastBatchUpdate;\n  var timeSinceLastPing = currentTime - connectionStats.lastPing;\n\n  // Считаем серверную активность по любому типу обновлений\n  var timeSinceAnyActivity = Math.min(timeSinceLastBatch, timeSinceLastPing);\n\n  // Предупреждение только при долгом отсутствии ЛЮБЫХ обновлений\n  if (timeSinceAnyActivity > UPDATE_WARNING_TIMEOUT && timeSinceAnyActivity <= UPDATE_TIMEOUT) {\n    // Логируем предупреждение только раз в 2 секунды, чтобы не спамить\n    if (currentTime - connectionStats.lastWarningTime > 2000) {\n      console.warn("[WS] \\u0414\\u043E\\u043B\\u0433\\u043E \\u043D\\u0435\\u0442 \\u0430\\u043A\\u0442\\u0438\\u0432\\u043D\\u043E\\u0441\\u0442\\u0438 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430: ".concat(timeSinceAnyActivity, "\\u043C\\u0441 (batch: ").concat(timeSinceLastBatch, "\\u043C\\u0441, ping: ").concat(timeSinceLastPing, "\\u043C\\u0441)"));\n      connectionStats.lastWarningTime = currentTime;\n    }\n  }\n\n  // Переключаемся на локальную физику только при критической задержке batch_update\n  // И только если нет недавней активности от пинга тоже\n  if (timeSinceLastBatch > UPDATE_TIMEOUT && timeSinceLastPing > UPDATE_TIMEOUT / 2) {\n    // Логируем только если это не связано с неактивной вкладкой\n    if (isTabActive && currentTime - connectionStats.lastWarningTime > 2000) {\n      console.log("[WS] \\u041A\\u0440\\u0438\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u0430\\u044F \\u0437\\u0430\\u0434\\u0435\\u0440\\u0436\\u043A\\u0430 \\u0432\\u0441\\u0435\\u0445 \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0439, \\u043F\\u0435\\u0440\\u0435\\u043A\\u043B\\u044E\\u0447\\u0430\\u0435\\u043C\\u0441\\u044F \\u043D\\u0430 \\u043B\\u043E\\u043A\\u0430\\u043B\\u044C\\u043D\\u0443\\u044E \\u0444\\u0438\\u0437\\u0438\\u043A\\u0443 (batch: ".concat(timeSinceLastBatch, "\\u043C\\u0441, ping: ").concat(timeSinceLastPing, "\\u043C\\u0441)"));\n      connectionStats.lastWarningTime = currentTime;\n    }\n    return false;\n  }\n  return true;\n}\n\n// Обработка сообщений с сервера\nfunction handleMessage(data) {\n  try {\n    // Если сообщение содержит временную метку сервера, обновляем смещение\n    if (data.server_time) {\n      updateServerTimeOffset(data.server_time);\n    }\n\n    // Обрабатываем конфигурацию физики\n    if (data.type === "physics_config") {\n      physicsConfig = data.config;\n      applyPhysicsConfig(physicsConfig);\n      return;\n    }\n\n    // === НОВОЕ: Обработка событий еды ===\n    if (data.type === "food_spawned" && foodClient) {\n      foodClient.handleFoodSpawned(data.food_item);\n      return;\n    }\n    if (data.type === "food_consumed" && foodClient) {\n      foodClient.handleFoodConsumed(data.player_id, data.food_id, data.mass_gain);\n\n      // === ПРОСТОЕ: Только обновляем JS объект, физику обновит player_size_update ===\n      var currentPlayerID = gamestatemanager.getPlayerID();\n      if (currentPlayerID === data.player_id) {\n        var obj = objects_objects[data.player_id];\n        if (obj) {\n          var oldMass = obj.mass || 0;\n          obj.mass = oldMass + data.mass_gain;\n          console.log("[Network] \\u041C\\u0430\\u0441\\u0441\\u0430 \\u0442\\u0435\\u043A\\u0443\\u0449\\u0435\\u0433\\u043E \\u0438\\u0433\\u0440\\u043E\\u043A\\u0430 \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0430: ".concat(oldMass.toFixed(1), " \\u2192 ").concat(obj.mass.toFixed(1), " (+").concat(data.mass_gain.toFixed(1), ")"));\n        } else {\n          console.warn("[Network] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 \\u0442\\u0435\\u043A\\u0443\\u0449\\u0435\\u0433\\u043E \\u0438\\u0433\\u0440\\u043E\\u043A\\u0430 ".concat(data.player_id, " \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D \\u0434\\u043B\\u044F \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u044F \\u043C\\u0430\\u0441\\u0441\\u044B"));\n        }\n      }\n      return;\n    }\n    if (data.type === "food_state" && foodClient) {\n      foodClient.handleFoodState(data.food);\n      return;\n    }\n\n    // === НОВОЕ: Обработка обновления размера игрока ===\n    if (data.type === "player_size_update") {\n      console.log("[Network] \\u041F\\u041E\\u041B\\u0423\\u0427\\u0415\\u041D\\u041E \\u0421\\u041E\\u0411\\u042B\\u0422\\u0418\\u0415 player_size_update \\u0434\\u043B\\u044F ".concat(data.player_id, ": \\u0440\\u0430\\u0434\\u0438\\u0443\\u0441=").concat(data.new_radius, ", \\u043C\\u0430\\u0441\\u0441\\u0430=").concat(data.new_mass));\n      handlePlayerSizeUpdate(data.player_id, data.new_radius, data.new_mass);\n      return;\n    }\n\n    // Обрабатываем сообщение с player ID\n    if (data.type === "player_id") {\n      if (data.player_id && data.object_id) {\n        gamestatemanager.setPlayerID(data.player_id, data.object_id);\n        console.log("[Network] \\u041F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D player ID: ".concat(data.player_id, ", object ID: ").concat(data.object_id));\n\n        // Проверяем, есть ли уже созданный объект игрока и устанавливаем playerMesh\n        var playerObject = objects_objects[data.object_id];\n        if (playerObject && playerObject.mesh) {\n          gamestatemanager.setPlayerMesh(playerObject.mesh);\n          console.log("[Network] \\u0423\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D playerMesh \\u0434\\u043B\\u044F \\u0441\\u0443\\u0449\\u0435\\u0441\\u0442\\u0432\\u0443\\u044E\\u0449\\u0435\\u0433\\u043E \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(data.object_id));\n        }\n      } else {\n        console.error(\'[Network] Получено некорректное сообщение player_id:\', data);\n      }\n      return;\n    }\n\n    // Обрабатываем pong-сообщения для синхронизации времени\n    if (data.type === "pong") {\n      var now = Date.now();\n      var roundTripTime = now - data.client_time;\n\n      // === НОВОЕ: Обновляем статистику соединения ===\n      connectionStats.lastPing = now;\n      pingHistory.push(roundTripTime);\n      if (pingHistory.length > MAX_PING_SAMPLES) {\n        pingHistory.shift();\n      }\n      var avgPing = pingHistory.reduce(function (sum, ping) {\n        return sum + ping;\n      }, 0) / pingHistory.length;\n      // Обновляем глобальное значение пинга\n      currentPing = avgPing;\n      updatePingDisplay(avgPing);\n      updateServerTimeOffset(data.server_time + roundTripTime / 2);\n      return;\n    }\n\n    // === ОБНОВЛЕННАЯ ЛОГИКА: Более умное обновление времени активности ===\n    // Обновляем статистику для batch_update\n    if (data.type === "batch_update") {\n      connectionStats.lastBatchUpdate = Date.now();\n      connectionStats.batchUpdateCount++;\n    }\n\n    // Обновляем общее время для других типов игровых обновлений  \n    if (data.type === "batch_update" || data.type === "update" || data.id && data.position || data.id && data.velocity) {\n      lastUpdateTime = Date.now();\n    }\n\n    // Обрабатываем пакетные обновления\n    if (data.type === "batch_update") {\n      // Проверяем наличие обновлений\n      if (!data.updates || network_typeof(data.updates) !== \'object\') {\n        console.warn(\'[WS] Получен пустой пакет обновлений\');\n        return;\n      }\n\n      // Обрабатываем каждое обновление в пакете\n      for (var _i = 0, _Object$entries = Object.entries(data.updates); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = network_slicedToArray(_Object$entries[_i], 2),\n          id = _Object$entries$_i[0],\n          update = _Object$entries$_i[1];\n        if (!update || network_typeof(update) !== \'object\') {\n          continue;\n        }\n\n        // Проверяем наличие необходимых данных\n        if (!update.position && !update.velocity) {\n          continue;\n        }\n\n        // Добавляем id в обновление\n        update.id = id;\n        update.type = "update";\n\n        // Передаем в функцию обработки обновлений\n        receiveObjectUpdate(update);\n      }\n      return;\n    }\n    if (data.type === "update") {\n      // Проверяем, содержит ли update сообщение данные объекта\n      if (data.objects || data.id) {\n        receiveObjectUpdate(data);\n      }\n    } else if (data.type === "create" && data.id) {\n      // Создаем объект и добавляем его в список объектов\n      var _obj = createMeshAndBodyForObject(data);\n\n      // Проверяем, что объект был успешно создан\n      if (_obj) {\n        _obj.id = data.id; // Сохраняем id в объекте\n        _obj.physicsBy = data.physics_by || "both";\n        _obj.serverPos = {\n          x: data.x || 0,\n          y: data.y || 0,\n          z: data.z || 0\n        };\n        // Добавляем временную метку сервера\n        _obj.serverCreationTime = data.server_time;\n        _obj.clientCreationTime = Date.now();\n        objects_objects[data.id] = _obj;\n\n        // Запоминаем точное время создания объекта для дальнейшей синхронизации\n        _obj.createdAt = Date.now();\n        _obj.lastServerUpdate = Date.now(); // Инициализируем время последнего обновления\n\n        // Если физический мир активен, активируем тело\n        var physicsWorld = physics_getPhysicsWorld();\n        if (physicsWorld) {\n          if (!physicsStarted) {\n            // Добавляем в список ожидающих, если физика еще не запущена\n            pendingObjects.push(data.id);\n          } else {\n            // Активируем тело сразу\n            _obj.body.activate(true);\n            // Устанавливаем начальную позицию точно по серверным координатам\n            if (_obj.serverPos) {\n              try {\n                // Проверяем наличие Ammo\n                if (typeof window.Ammo === \'undefined\') {\n                  console.error(\'[WS] window.Ammo не определен при попытке телепортации объекта\');\n                  return;\n                }\n                var transform = new window.Ammo.btTransform();\n                _obj.body.getMotionState().getWorldTransform(transform);\n                transform.setOrigin(new window.Ammo.btVector3(_obj.serverPos.x, _obj.serverPos.y, _obj.serverPos.z));\n                _obj.body.getMotionState().setWorldTransform(transform);\n                _obj.mesh.position.set(_obj.serverPos.x, _obj.serverPos.y, _obj.serverPos.z);\n\n                // Очищаем память\n                window.Ammo.destroy(transform);\n              } catch (error) {\n                console.error("[WS] \\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0442\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0430\\u0446\\u0438\\u0438 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(data.id, ":"), error);\n              }\n            }\n          }\n        }\n      } else {\n        console.error("[WS] \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0441\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, ", \\u0442\\u0438\\u043F: ").concat(data.object_type));\n      }\n    } else if (data.type === "cmd_ack") {\n      // Обрабатываем подтверждение команды с временной меткой\n\n      // === НОВОЕ: Обновляем статистику команд ===\n      connectionStats.lastCommand = Date.now();\n      if (data.client_time && data.server_time) {\n        var _roundTripTime = Date.now() - data.client_time;\n\n        // Добавляем измерение пинга в историю\n        pingHistory.push(_roundTripTime);\n        if (pingHistory.length > MAX_PING_SAMPLES) {\n          pingHistory.shift();\n        }\n\n        // Вычисляем средний пинг\n        var _avgPing = pingHistory.reduce(function (sum, ping) {\n          return sum + ping;\n        }, 0) / pingHistory.length;\n\n        // Обновляем отображение пинга на экране\n        updatePingDisplay(_avgPing);\n        currentPing = _avgPing;\n\n        // Обновляем смещение серверного времени с учетом RTT/2 (предполагаем симметричную задержку)\n        updateServerTimeOffset(data.server_time + _roundTripTime / 2);\n      }\n    }\n  } catch (error) {\n    console.error(\'[WS] Ошибка обработки сообщения:\', error);\n  }\n}\nfunction handleKeyDown(e) {\n  // Проверяем состояние соединения перед обработкой команды\n  var useServerPhysics = checkConnectionState();\n  var cmd = "";\n  var forceX = 0,\n    forceY = 0,\n    forceZ = 0;\n\n  // Получаем текущую конфигурацию физики\n  var physicsConfig = getPhysicsConfig();\n  if (!physicsConfig) {\n    console.error("[WS] Конфигурация физики не инициализирована");\n    return;\n  }\n  if (typeof physicsConfig.base_impulse !== \'number\') {\n    console.error("[WS] base_impulse не определен в конфигурации физики");\n    return;\n  }\n  var baseForce = physicsConfig.base_impulse;\n  switch (e.key) {\n    case "ArrowLeft":\n      cmd = "LEFT";\n      forceX = -baseForce;\n      break;\n    case "ArrowRight":\n      cmd = "RIGHT";\n      forceX = baseForce;\n      break;\n    case "ArrowUp":\n      cmd = "UP";\n      forceZ = -baseForce;\n      break;\n    case "ArrowDown":\n      cmd = "DOWN";\n      forceZ = baseForce;\n      break;\n    case " ":\n      cmd = "SPACE";\n      forceY = baseForce * 2; // Увеличиваем вертикальный импульс\n      break;\n    default:\n      return;\n  }\n  try {\n    // Отправляем команду на сервер, если соединение активно\n    if (useServerPhysics) {\n      var clientTime = Date.now();\n      var commandObj = {\n        type: "cmd",\n        cmd: cmd,\n        client_time: clientTime,\n        data: {\n          x: forceX,\n          y: forceY,\n          z: forceZ\n        }\n      };\n      ws.send(JSON.stringify(commandObj));\n    }\n\n    // Применяем импульс локально если не используем серверную физику\n    if (!useServerPhysics) {\n      var currentTime = Date.now();\n      var timeSinceLastImpulse = currentTime - lastKeyboardImpulseTime;\n\n      // Применяем импульс только если прошло достаточно времени с последнего применения\n      if (timeSinceLastImpulse >= KEYBOARD_IMPULSE_INTERVAL) {\n        var physicsWorld = physics_getPhysicsWorld();\n        if (!physicsWorld) {\n          console.error("[WS] Физический мир не инициализирован");\n          return;\n        }\n        for (var id in objects_objects) {\n          var obj = objects_objects[id];\n          if (obj && obj.body && obj.mesh && obj.mesh.geometry && obj.mesh.geometry.type === "SphereGeometry") {\n            try {\n              // Применяем импульс с точно такой же силой, как на сервере\n              applyImpulseToSphere(id, {\n                x: forceX,\n                y: forceY,\n                z: forceZ\n              });\n            } catch (error) {\n              console.error("[WS] \\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043F\\u0440\\u0438\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u0438 \\u0438\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441\\u0430 \\u043A \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0443 ".concat(id, ":"), error);\n            }\n          }\n        }\n\n        // Обновляем время последнего применения импульса\n        lastKeyboardImpulseTime = currentTime;\n      }\n    }\n  } catch (error) {\n    console.error("[WS] Ошибка отправки:", error);\n  }\n}\n\n// Обработка видимости страницы\nfunction handleVisibilityChange() {\n  if (document.hidden) {\n    isTabActive = false;\n    console.log("[WS] Вкладка неактивна, запоминаем время");\n    lastActiveTime = Date.now();\n  } else {\n    var wasInactive = !isTabActive;\n    isTabActive = true;\n    if (wasInactive) {\n      var inactiveTime = Date.now() - lastActiveTime;\n      console.log("[WS] \\u0412\\u043A\\u043B\\u0430\\u0434\\u043A\\u0430 \\u0441\\u043D\\u043E\\u0432\\u0430 \\u0430\\u043A\\u0442\\u0438\\u0432\\u043D\\u0430 \\u043F\\u043E\\u0441\\u043B\\u0435 ".concat(inactiveTime, "\\u043C\\u0441 \\u0431\\u0435\\u0437\\u0434\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u044F"));\n\n      // Если вкладка была неактивна долгое время, запрашиваем обновления с сервера\n      if (inactiveTime > 1000) {\n        console.log("[WS] Принудительно запрашиваем обновления с сервера");\n        sendPing(); // Отправляем ping для обновления\n\n        // Сбрасываем время последнего обновления для принудительного использования\n        // локальной физики до получения свежих данных\n        lastUpdateTime = 0;\n      }\n    }\n  }\n}\nfunction initNetwork() {\n  return _initNetwork.apply(this, arguments);\n}\n\n// Функция для отправки ping-сообщения с временной меткой клиента\nfunction _initNetwork() {\n  _initNetwork = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log("[WS] Начало инициализации WebSocket");\n          ws = new WebSocket("ws://localhost:8080/ws");\n          ws.onopen = function () {\n            console.log("[WS] connected");\n            // Инициализируем индикатор пинга\n            updatePingDisplay(0);\n            // Обновляем информацию о времени\n            updateTimeDisplay();\n            // Запускаем интервал обновления времени\n            if (timeDisplayInterval) clearInterval(timeDisplayInterval);\n            timeDisplayInterval = setInterval(updateTimeDisplay, 1000);\n            // Отправим тестовое сообщение для синхронизации времени\n            sendPing();\n          };\n          ws.onmessage = function (evt) {\n            try {\n              var data = JSON.parse(evt.data);\n              if (!data || network_typeof(data) !== \'object\') {\n                throw new Error(\'Неверный формат данных\');\n              }\n\n              // Обрабатываем пакетные обновления\n              if (data.type === "batch_update" && data.updates) {\n                handleMessage(data);\n                return;\n              }\n\n              // Обрабатываем остальные сообщения\n              if (data.type === "update" && data.id) {\n                receiveObjectUpdate(data);\n              } else if (data.type === "create" && data.id) {\n                handleMessage(data);\n              } else if (data.type === "pong") {\n                handleMessage(data);\n              } else {\n                handleMessage(data);\n              }\n            } catch (error) {\n              console.error("[WS] Ошибка при обработке сообщения:", error);\n            }\n          };\n          ws.onerror = function (error) {\n            console.error("[WS] WebSocket error:", error);\n            console.error("[WS] Детали ошибки:", {\n              message: error.message,\n              type: error.type,\n              eventPhase: error.eventPhase\n            });\n          };\n          ws.onclose = function (event) {\n            console.log("[WS] Соединение закрыто:", {\n              code: event.code,\n              reason: event.reason,\n              wasClean: event.wasClean\n            });\n\n            // Останавливаем обновление времени при закрытии соединения\n            if (timeDisplayInterval) {\n              clearInterval(timeDisplayInterval);\n              timeDisplayInterval = null;\n            }\n          };\n          document.addEventListener("keydown", handleKeyDown);\n\n          // Добавляем обработчик видимости страницы\n          document.addEventListener("visibilitychange", handleVisibilityChange);\n\n          // Запускаем периодическую синхронизацию времени\n          setInterval(sendPing, 10000); // Каждые 10 секунд\n          return _context.abrupt("return", ws);\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context["catch"](0);\n          console.error("[WS] Ошибка при создании WebSocket:", _context.t0);\n          console.error("[WS] Стек вызовов:", _context.t0.stack);\n        case 17:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 13]]);\n  }));\n  return _initNetwork.apply(this, arguments);\n}\nfunction sendPing() {\n  if (!ws || ws.readyState !== WebSocket.OPEN) return;\n  var clientTime = Date.now();\n  var pingObj = {\n    type: "ping",\n    client_time: clientTime\n  };\n  try {\n    ws.send(JSON.stringify(pingObj));\n    //console.log(`[WS] Отправлен ping для синхронизации времени, время клиента: ${clientTime}`);\n  } catch (error) {\n    console.error("[WS] Ошибка отправки ping:", error);\n  }\n}\n\n// Новая функция для запуска физики с задержкой\nfunction startPhysicsSimulation() {\n  physicsStarted = true;\n\n  // Активируем все ожидающие объекты\n  var physicsWorld = physics_getPhysicsWorld();\n  if (physicsWorld) {\n    var _iterator = network_createForOfIteratorHelper(pendingObjects),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var id = _step.value;\n        var obj = objects_objects[id];\n        if (obj && obj.body) {\n          // Активируем тело\n          obj.body.activate(true);\n\n          // Телепортируем к последним известным серверным координатам\n          if (obj.serverPos) {\n            var transform = new Ammo.btTransform();\n            obj.body.getMotionState().getWorldTransform(transform);\n            transform.setOrigin(new Ammo.btVector3(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z));\n            obj.body.getMotionState().setWorldTransform(transform);\n            obj.mesh.position.set(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z);\n            console.log("[Physics] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(id, " \\u0430\\u043A\\u0442\\u0438\\u0432\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D \\u0438 \\u0442\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D \\u0432 \\u043A\\u043E\\u043E\\u0440\\u0434\\u0438\\u043D\\u0430\\u0442\\u044B:"), {\n              x: obj.serverPos.x,\n              y: obj.serverPos.y,\n              z: obj.serverPos.z\n            });\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  // Очищаем список ожидающих\n  pendingObjects = [];\n  console.log("[Physics] Физика активирована, все ожидающие объекты обработаны");\n}\n\n// Экспортируем функции для доступа из других модулей\n\n\n// === НОВЫЕ ФУНКЦИИ ДЛЯ СИСТЕМЫ ЕДЫ ===\n\n// Функция для инициализации системы еды (вызывается из main.js после создания scene)\nfunction initFoodSystem(scene, world) {\n  foodClient = new SimpleFoodClient(scene, world);\n  console.log(\'[Network] Система еды инициализирована\');\n}\n\n// Функция для обновления системы еды (вызывается из render loop)\nfunction updateFoodSystem(deltaTime) {\n  if (foodClient) {\n    foodClient.update(deltaTime);\n  }\n}\n\n// Функция для получения количества еды (для UI)\nfunction getFoodCount() {\n  return foodClient ? foodClient.getFoodCount() : 0;\n}\n\n// === НОВОЕ: Обработка обновления размера игрока ===\nfunction handlePlayerSizeUpdate(playerID, newRadius, newMass) {\n  console.log("[Network] \\u041F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u043E \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0440\\u0430\\u0437\\u043C\\u0435\\u0440\\u0430 \\u0438\\u0433\\u0440\\u043E\\u043A\\u0430 ".concat(playerID, ": \\u0440\\u0430\\u0434\\u0438\\u0443\\u0441=").concat(newRadius.toFixed(1), ", \\u043C\\u0430\\u0441\\u0441\\u0430=").concat(newMass.toFixed(1)));\n  var obj = objects_objects[playerID];\n  if (!obj) {\n    console.warn("[Network] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 \\u0438\\u0433\\u0440\\u043E\\u043A\\u0430 ".concat(playerID, " \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D \\u0434\\u043B\\u044F \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u044F \\u0440\\u0430\\u0437\\u043C\\u0435\\u0440\\u0430"));\n    return;\n  }\n\n  // Обновляем только данные объекта, без физики пока\n  obj.radius = newRadius;\n  obj.mass = newMass;\n\n  // Обновляем визуальный mesh\n  if (obj.mesh && obj.mesh.geometry) {\n    var _obj$mesh$geometry$pa;\n    var originalRadius = ((_obj$mesh$geometry$pa = obj.mesh.geometry.parameters) === null || _obj$mesh$geometry$pa === void 0 ? void 0 : _obj$mesh$geometry$pa.radius) || 1;\n    var scale = newRadius / originalRadius;\n    obj.mesh.scale.setScalar(scale);\n    console.log("[Network] \\u0420\\u0430\\u0437\\u043C\\u0435\\u0440 \\u0438\\u0433\\u0440\\u043E\\u043A\\u0430 ".concat(playerID, " \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D: \\u0440\\u0430\\u0434\\u0438\\u0443\\u0441=").concat(newRadius.toFixed(1), ", \\u043C\\u0430\\u0441\\u0441\\u0430=").concat(newMass.toFixed(1), ", scale=").concat(scale.toFixed(2)));\n  }\n\n  // Простое обновление массы в физическом теле (без смены радиуса)\n  if (obj.body && obj.physicsBy !== "bullet") {\n    try {\n      var currentVel = obj.body.getLinearVelocity();\n      var shape = obj.body.getCollisionShape();\n      var localInertia = new window.Ammo.btVector3(0, 0, 0);\n      shape.calculateLocalInertia(newMass, localInertia);\n      obj.body.setMassProps(newMass, localInertia);\n      obj.body.setLinearVelocity(currentVel);\n      obj.body.activate(true);\n\n      // Очистка памяти\n      window.Ammo.destroy(localInertia);\n      window.Ammo.destroy(currentVel);\n      console.log("[Network] \\u0424\\u0438\\u0437\\u0438\\u0447\\u0435\\u0441\\u043A\\u0430\\u044F \\u043C\\u0430\\u0441\\u0441\\u0430 \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0430: ".concat(newMass, "\\u043A\\u0433"));\n    } catch (error) {\n      console.error("[Network] \\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u044F \\u043C\\u0430\\u0441\\u0441\\u044B:", error);\n    }\n  }\n}\n;// ./src/gamepad.js\n\n\n\n\n\n// Константы для настройки поведения\nvar DEBUG_MODE = true; // Включает/выключает отладочные элементы (arrowHelper)\nvar MIN_ARROW_LENGTH = 10;\nvar MAX_ARROW_LENGTH = 150;\nvar SEND_INTERVAL = 50; // Синхронизируем с серверным интервалом\nvar ARROW_HEIGHT_OFFSET = 2; // Смещение стрелки по высоте над игроком\nvar RAY_UPDATE_INTERVAL = 50; // Синхронизируем с серверным интервалом\nvar KEY_FORCE = 2.0; // Значительно увеличиваем силу импульса для клавиатурного управления\nvar DEADZONE = 10.0; // Увеличенная мертвая зона - сопоставима со средним радиусом сферы (2-20)\nvar MIN_DEADZONE = 5.0; // Минимальная мертвая зона\nvar MAX_DEADZONE = 25.0; // Максимальная мертвая зона\n\nvar arrowHelper;\nvar lastSentPosition = new three_core/* Vector3 */.Pq0();\nvar lastSendTime = 0;\nvar raycaster = new three_core/* Raycaster */.tBo();\nvar mouse = new three_core/* Vector2 */.I9Y();\nvar cameraLastPosition = new three_core/* Vector3 */.Pq0();\nvar lastRayUpdateTime = 0;\nvar lastIntersectPoint = new three_core/* Vector3 */.Pq0();\nvar isMouseActive = true; // Флаг активности мыши над игровой областью (временно true для отладки)\n\n// Флаги для клавиатурного управления\nvar keys = {\n  w: false,\n  a: false,\n  s: false,\n  d: false\n};\n\n// Переменные для хранения направления\nvar currentDirection = new three_core/* Vector3 */.Pq0();\nvar directionNeedsUpdate = false;\nvar terrainMeshRef = null;\nvar playerMeshRef = null;\nvar cameraRef = null;\nvar socketRef = null;\n\n// Добавляем переменные для дебаунса\nvar lastLocalImpulseTime = 0;\nvar LOCAL_IMPULSE_INTERVAL = 50; // Синхронизируем с серверным интервалом\n\nfunction getArrowDirection() {\n  return lastSentPosition.clone();\n}\nfunction initGamepad(camera, terrainMesh, playerMesh, socket, scene) {\n  // Сохраняем ссылки на объекты для использования в других функциях\n  terrainMeshRef = terrainMesh;\n  playerMeshRef = playerMesh;\n  cameraRef = camera;\n  socketRef = socket;\n  cameraLastPosition.copy(camera.position);\n\n  // Создаем и добавляем arrowHelper в сцену\n  arrowHelper = new three_core/* ArrowHelper */.E0M(new three_core/* Vector3 */.Pq0(0, 0, 1),\n  // Начальное направление\n  playerMesh.position,\n  // Начальная позиция\n  MIN_ARROW_LENGTH,\n  // Длина стрелки (начальная)\n  0xffff00 // Цвет стрелки\n  );\n\n  // Добавляем arrowHelper в сцену только если DEBUG_MODE включен\n  if (DEBUG_MODE) {\n    scene.add(arrowHelper);\n  }\n\n  // Добавляем обработчики событий мыши и клавиатуры\n  window.addEventListener(\'mousemove\', onMouseMove);\n  window.addEventListener(\'keydown\', onKeyDown);\n  window.addEventListener(\'keyup\', onKeyUp);\n\n  // Добавляем обработчики для отслеживания когда мышь покидает канвас\n  var canvas = document.querySelector(\'canvas\');\n  if (canvas) {\n    canvas.addEventListener(\'mouseenter\', onMouseEnter);\n    canvas.addEventListener(\'mouseleave\', onMouseLeave);\n\n    // Проверяем, находится ли мышь уже в канвасе при инициализации\n    var rect = canvas.getBoundingClientRect();\n    var mouseX = window.mouseX || window.innerWidth / 2;\n    var mouseY = window.mouseY || window.innerHeight / 2;\n    if (mouseX >= rect.left && mouseX <= rect.right && mouseY >= rect.top && mouseY <= rect.bottom) {\n      isMouseActive = true;\n    }\n  }\n\n  // Запускаем анимацию для обновления стрелки и обработки клавиатурного ввода\n  animate();\n  function animate() {\n    requestAnimationFrame(animate);\n\n    // Обновляем стрелку если нужно и если она видима\n    if (directionNeedsUpdate && DEBUG_MODE) {\n      updateArrowHelper(playerMesh);\n      directionNeedsUpdate = false;\n    }\n\n    // Проверяем, двигалась ли камера и нужно ли обновить луч\n    var now = Date.now();\n    if (isMouseActive && cameraRef && now - lastRayUpdateTime > RAY_UPDATE_INTERVAL) {\n      // Если камера движется и мышь активна над игровой областью\n      if (!cameraRef.position.equals(cameraLastPosition)) {\n        // Обновляем луч с последних координат мыши\n        updateRayFromLastMouse();\n        cameraLastPosition.copy(cameraRef.position);\n        lastRayUpdateTime = now;\n      }\n    }\n\n    // Обрабатываем клавиатурное управление\n    processKeyboardInput();\n  }\n  function processKeyboardInput() {\n    if (!playerMeshRef || !socketRef) return;\n\n    // Проверяем, если хотя бы одна клавиша нажата\n    if (keys.w || keys.a || keys.s || keys.d) {\n      // Создаем вектор направления на основе нажатых клавиш\n      var direction = new three_core/* Vector3 */.Pq0(0, 0, 0);\n      if (keys.w) direction.z -= 1;\n      if (keys.s) direction.z += 1;\n      if (keys.a) direction.x -= 1;\n      if (keys.d) direction.x += 1;\n\n      // Нормализуем направление, если оно не нулевое\n      if (direction.length() > 0) {\n        direction.normalize();\n\n        // Отправляем направление на сервер\n        if (Date.now() - lastSendTime > SEND_INTERVAL) {\n          // Получаем текущую конфигурацию физики\n          var physicsConfig = getPhysicsConfig();\n\n          // Используем множитель импульса из конфигурации, если она доступна\n          var keyForce = KEY_FORCE;\n          if (physicsConfig && physicsConfig.impulse_multiplier) {\n            keyForce = physicsConfig.base_impulse; // Увеличиваем в 8 раз базовый импульс\n          } else {\n            keyForce = KEY_FORCE; // Или увеличиваем в 4 раза значение по умолчанию\n          }\n\n          // Отправляем импульс на сервер\n          sendDirectionToServer(direction, keyForce, socketRef);\n          lastSendTime = Date.now();\n\n          // Обновляем lastSentPosition для отображения стрелки\n          lastSentPosition.copy(direction);\n          lastSentPosition.userData = {\n            distance: keyForce\n          };\n          directionNeedsUpdate = true;\n        }\n      }\n    }\n  }\n  function onKeyDown(event) {\n    // Обновляем состояние клавиш\n    switch (event.key.toLowerCase()) {\n      case \'w\':\n        keys.w = true;\n        break;\n      case \'a\':\n        keys.a = true;\n        break;\n      case \'s\':\n        keys.s = true;\n        break;\n      case \'d\':\n        keys.d = true;\n        break;\n    }\n  }\n  function onKeyUp(event) {\n    // Обновляем состояние клавиш\n    switch (event.key.toLowerCase()) {\n      case \'w\':\n        keys.w = false;\n        break;\n      case \'a\':\n        keys.a = false;\n        break;\n      case \'s\':\n        keys.s = false;\n        break;\n      case \'d\':\n        keys.d = false;\n        break;\n    }\n  }\n  function onMouseMove(event) {\n    // Сохраняем глобальные координаты мыши\n    window.mouseX = event.clientX;\n    window.mouseY = event.clientY;\n\n    // Обновляем координаты мыши для Three.js\n    mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n    // Устанавливаем флаг активности мыши\n    isMouseActive = true;\n\n    // Вызываем функцию обновления направления\n    castRayAndUpdateDirection();\n  }\n  function onMouseEnter(event) {\n    // Мышь вошла в область канваса\n    isMouseActive = true;\n  }\n  function onMouseLeave(event) {\n    // Мышь покинула область канваса - останавливаем управление\n    isMouseActive = false;\n  }\n  function updateRayFromLastMouse() {\n    // Обновляем луч с текущими координатами мыши и новой позицией камеры\n    castRayAndUpdateDirection();\n  }\n  function castRayAndUpdateDirection() {\n    if (!cameraRef || !terrainMeshRef || !playerMeshRef || !socketRef) return;\n\n    // Не обрабатываем управление мышью, если мышь точно вне канваса\n    // Но разрешаем, если мышь была активна (для случаев движения камеры)\n    if (!isMouseActive) {\n      return;\n    }\n\n    // Устанавливаем луч от камеры через координаты мыши\n    raycaster.setFromCamera(mouse, cameraRef);\n\n    // Находим пересечения с террейном\n    var intersects = raycaster.intersectObjects([terrainMeshRef]);\n    if (intersects.length > 0) {\n      var targetPosition = intersects[0].point;\n      lastIntersectPoint.copy(targetPosition);\n\n      // Вычисляем направление в 3D пространстве (с учетом оси Y)\n      currentDirection.set(targetPosition.x - playerMeshRef.position.x, targetPosition.y - playerMeshRef.position.y,\n      // Учитываем высоту\n      targetPosition.z - playerMeshRef.position.z);\n\n      // Сохраняем длину до нормализации (расстояние от игрока до точки пересечения)\n      var distance = currentDirection.length();\n\n      // Нормализуем для получения направления\n      currentDirection.normalize();\n\n      // Запоминаем направление и расстояние\n      lastSentPosition.copy(currentDirection);\n\n      // Сохраняем исходное расстояние для использования в updateArrowHelper\n      lastSentPosition.userData = {\n        distance: distance\n      };\n\n      // Помечаем, что направление нужно обновить\n      directionNeedsUpdate = true;\n\n      // Проверяем, нужно ли отправлять данные на сервер\n      if (Date.now() - lastSendTime > SEND_INTERVAL) {\n        sendDirectionToServer(currentDirection, distance, socketRef);\n        lastSendTime = Date.now();\n      }\n    }\n  }\n  function sendDirectionToServer(direction, distance, socket) {\n    // Проверяем состояние соединения\n    var useServerPhysics = checkConnectionState();\n\n    // Получаем конфигурацию физики\n    var physicsConfig = getPhysicsConfig();\n    if (!physicsConfig) {\n      console.error(\'[Gamepad] Конфигурация физики не инициализирована\');\n      return;\n    }\n\n    // Получаем ID объекта игрока\n    var playerObjectID = gamestatemanager.getPlayerObjectID();\n    if (!playerObjectID) {\n      console.warn(\'[Gamepad] Player ID еще не получен от сервера, команда не отправлена\');\n      return;\n    }\n\n    // Вычисляем адаптивную мертвую зону\n    // Для радиусов сфер 2-20 единиц используем мертвую зону от 5 до 25 единиц\n    var estimatedRadius = Math.min(20, Math.max(2, distance / 10)); // Оценка радиуса по расстоянию\n    var adaptiveDeadzone = Math.min(MAX_DEADZONE, Math.max(MIN_DEADZONE, estimatedRadius * 1.5));\n\n    // Если расстояние меньше адаптивной мертвой зоны, не отправляем команду\n    if (distance < adaptiveDeadzone) {\n      return;\n    }\n\n    // Для мышиного управления увеличиваем дистанцию, которая используется как сила импульса\n    var enhancedDistance = Math.min(distance * 1.5, 100); // Увеличиваем на 50%, но не больше 100\n\n    // Вычисляем силу импульса\n    var force = {\n      x: direction.x * enhancedDistance,\n      y: direction.y * enhancedDistance,\n      z: direction.z * enhancedDistance\n    };\n\n    // Отправляем команду на сервер, если соединение активно\n    if (useServerPhysics && socket && socket.readyState === WebSocket.OPEN) {\n      try {\n        socket.send(JSON.stringify({\n          type: \'cmd\',\n          cmd: \'MOUSE_VECTOR\',\n          data: {\n            x: direction.x,\n            y: direction.y,\n            z: direction.z,\n            distance: enhancedDistance\n          },\n          client_time: Date.now(),\n          object_id: playerObjectID // Используем динамический player ID\n        }));\n      } catch (error) {\n        console.error(\'[Gamepad] Ошибка отправки команды на сервер:\', error);\n        useServerPhysics = false;\n      }\n    }\n\n    // Если не используем серверную физику, применяем импульс локально\n    if (!useServerPhysics) {\n      var currentTime = Date.now();\n      var timeSinceLastImpulse = currentTime - lastLocalImpulseTime;\n\n      // Применяем импульс только если прошло достаточно времени с последнего применения\n      if (timeSinceLastImpulse >= LOCAL_IMPULSE_INTERVAL) {\n        try {\n          applyImpulseToSphere(playerObjectID, force); // Используем динамический player ID\n\n          // Обновляем время последнего применения импульса\n          lastLocalImpulseTime = currentTime;\n        } catch (error) {\n          console.error(\'[Gamepad] Ошибка применения локального импульса:\', error);\n        }\n      }\n    }\n  }\n}\n\n// Функция для включения/выключения отображения arrowHelper\nfunction setDebugMode(enabled) {\n  if (arrowHelper) {\n    arrowHelper.visible = enabled;\n  }\n}\n\n// Функция для получения текущего статуса отладочного режима\nfunction getDebugMode() {\n  return DEBUG_MODE;\n}\n\n// Обновляем позицию и направление arrowHelper\nfunction updateArrowHelper(playerMesh) {\n  if (arrowHelper) {\n    // Позиция стрелки с учетом смещения по высоте\n    var arrowPosition = new three_core/* Vector3 */.Pq0(playerMesh.position.x, playerMesh.position.y + ARROW_HEIGHT_OFFSET,\n    // Поднимаем стрелку над игроком\n    playerMesh.position.z);\n\n    // Обновляем позицию стрелки\n    arrowHelper.position.copy(arrowPosition);\n\n    // Устанавливаем направление стрелки (теперь с учетом оси Y)\n    arrowHelper.setDirection(lastSentPosition);\n\n    // Используем сохраненное расстояние до точки пересечения\n    var distance = lastSentPosition.userData ? lastSentPosition.userData.distance : MIN_ARROW_LENGTH;\n\n    // Ограничиваем длину стрелки, чтобы она не была слишком большой или маленькой\n    var arrowLength = Math.min(MAX_ARROW_LENGTH, Math.max(MIN_ARROW_LENGTH, distance));\n\n    // Устанавливаем длину стрелки пропорционально расстоянию\n    arrowHelper.setLength(arrowLength);\n  }\n}\n\n// Экспортируем функции для использования в других модулях\n\n;// ./src/camera.js\n// camera.js\n\n\n\n\n\n// Объявляем камеру\nvar camera;\n\n// Настройки камеры - оставляем оригинальные значения\nvar CAMERA_HEIGHT = 100;\nvar CAMERA_DISTANCE = 100;\nvar SMOOTH_FACTOR = 0.05;\nvar ROTATION_SMOOTH_FACTOR = 0.03;\nvar DEAD_ZONE_ANGLE = 0.3;\nvar MIN_Y_ANGLE = -0.5;\nvar MAX_Y_ANGLE = 0.5;\n\n// Дополнительные настройки для адаптивного доворота\nvar MIN_ADAPTIVE_FACTOR = 0.01; // Минимальный фактор доворота\nvar MAX_ADAPTIVE_FACTOR = 0.12; // Максимальный фактор для быстрых поворотов\nvar QUADRATIC_FACTOR = 0.9; // Коэффициент квадратичной зависимости (0-1)\n\n// Внутренняя переменная для хранения текущего значения коэффициента\nvar currentQuadraticFactor = QUADRATIC_FACTOR;\n\n// Сохраняем последнюю известную позицию и направление игрока\nvar lastKnownPosition = new three_core/* Vector3 */.Pq0(0, 0, 0);\nvar lastCameraPosition = new three_core/* Vector3 */.Pq0(0, CAMERA_HEIGHT, CAMERA_DISTANCE);\nvar lastCameraDirection = new three_core/* Vector3 */.Pq0(0, 0, -1); // Начальное направление камеры\nvar targetCameraDirection = new three_core/* Vector3 */.Pq0(0, 0, -1);\nvar cameraTarget = new three_core/* Vector3 */.Pq0(); // Промежуточная точка для сглаживания\nvar lastArrowDirection = new three_core/* Vector3 */.Pq0(0, 0, 1); // Последнее направление стрелки\nvar lastMeasuredAngle = 0; // Последний измеренный угол для логирования\nvar lastMeasuredDistance = 0; // Последнее измеренное расстояние для логирования\nvar turningActive = false; // Флаг активного поворота для логирования\n\n// Добавим новую переменную для сглаживания точки, на которую смотрит камера\nvar smoothLookAtTarget = new three_core/* Vector3 */.Pq0();\nfunction initCamera() {\n  // Создаем камеру\n  camera = new three_core/* PerspectiveCamera */.ubm(60, window.innerWidth / window.innerHeight, 0.2, 2000);\n\n  // Устанавливаем начальную позицию\n  camera.position.set(0, CAMERA_HEIGHT, CAMERA_DISTANCE);\n  camera.lookAt(0, 0, 0);\n\n  // Добавляем обработчик изменения размера окна\n  window.addEventListener(\'resize\', camera_onWindowResize);\n\n  // Инициализируем значение currentQuadraticFactor\n  currentQuadraticFactor = QUADRATIC_FACTOR;\n  console.log("[Camera] Камера инициализирована");\n  return camera;\n}\nfunction camera_onWindowResize() {\n  if (!camera) return;\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n}\n\n// Функция для вычисления угла между двумя направлениями в 3D\nfunction angleBetweenDirections(dir1, dir2) {\n  // Нормализуем векторы для корректного вычисления угла\n  var v1 = dir1.clone().normalize();\n  var v2 = dir2.clone().normalize();\n\n  // Вычисляем угол между векторами\n  return Math.acos(Math.min(1, Math.max(-1, v1.dot(v2))));\n}\n\n// Функция для вычисления адаптивного фактора доворота с квадратичной зависимостью\nfunction calculateAdaptiveRotationFactor(angle, distance) {\n  // Нормализуем расстояние (предполагаем, что максимальное значимое расстояние - 100)\n  var normalizedDistance = Math.min(distance, 100) / 100;\n\n  // Вычисляем относительную скорость поворота с учетом угла\n  var angleRatio = angle / DEAD_ZONE_ANGLE;\n\n  // Применяем квадратичную зависимость от расстояния с настраиваемым коэффициентом\n  // Когда currentQuadraticFactor = 0, зависимость линейная\n  // Когда currentQuadraticFactor = 1, зависимость полностью квадратичная\n  var distanceFactor = normalizedDistance * (1 - currentQuadraticFactor) + Math.pow(normalizedDistance, 2) * currentQuadraticFactor;\n\n  // Комбинируем факторы угла и расстояния\n  var combinedFactor = angleRatio * distanceFactor;\n\n  // Интерполируем между минимальным и максимальным факторами доворота\n  var adaptiveFactor = MIN_ADAPTIVE_FACTOR + (MAX_ADAPTIVE_FACTOR - MIN_ADAPTIVE_FACTOR) * Math.min(1.0, combinedFactor);\n  return adaptiveFactor;\n}\nfunction updateCamera() {\n  if (!camera) return;\n\n  // Получаем ID объекта игрока от GameStateManager\n  var playerObjectID = gamestatemanager.getPlayerObjectID();\n  if (!playerObjectID) {\n    // Если player ID еще не получен, используем последнюю известную позицию\n    return;\n  }\n  var player = objects_objects[playerObjectID];\n  if (player && player.mesh) {\n    var currentPlayerPosition = player.mesh.position.clone();\n    var arrowDirection = getArrowDirection();\n\n    // Плавно обновляем точку, на которую смотрит камера\n    smoothLookAtTarget.lerp(currentPlayerPosition, SMOOTH_FACTOR);\n    if (arrowDirection.length() > 0) {\n      var angle = angleBetweenDirections(arrowDirection, lastArrowDirection);\n      if (angle > DEAD_ZONE_ANGLE) {\n        var yComponent = Math.max(MIN_Y_ANGLE, Math.min(MAX_Y_ANGLE, -arrowDirection.y));\n        targetCameraDirection.set(-arrowDirection.x, yComponent, -arrowDirection.z).normalize();\n        lastArrowDirection.copy(arrowDirection);\n        turningActive = true;\n      }\n    }\n    var adaptiveRotationFactor = calculateAdaptiveRotationFactor(lastMeasuredAngle, lastMeasuredDistance);\n    lastCameraDirection.lerp(targetCameraDirection, adaptiveRotationFactor);\n    lastCameraDirection.normalize();\n    var horizontalDistance = CAMERA_DISTANCE * Math.cos(lastCameraDirection.y);\n    var cameraOffset = new three_core/* Vector3 */.Pq0(lastCameraDirection.x * horizontalDistance, CAMERA_HEIGHT + lastCameraDirection.y * CAMERA_DISTANCE, lastCameraDirection.z * horizontalDistance);\n    var targetPosition = currentPlayerPosition.clone().add(cameraOffset);\n    cameraTarget.lerp(targetPosition, SMOOTH_FACTOR);\n    camera.position.copy(cameraTarget);\n\n    // Камера теперь смотрит на сглаженную позицию\n    camera.lookAt(smoothLookAtTarget);\n    lastKnownPosition.copy(currentPlayerPosition);\n  }\n}\n\n// Функция для изменения коэффициента квадратичной зависимости\nfunction setQuadraticFactor(value) {\n  // Ограничиваем значение от 0 до 1\n  var newValue = Math.max(0, Math.min(1, value));\n  console.log("[Camera] \\u0418\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u0435 \\u043A\\u043E\\u044D\\u0444\\u0444\\u0438\\u0446\\u0438\\u0435\\u043D\\u0442\\u0430 \\u043A\\u0432\\u0430\\u0434\\u0440\\u0430\\u0442\\u0438\\u0447\\u043D\\u043E\\u0439 \\u0437\\u0430\\u0432\\u0438\\u0441\\u0438\\u043C\\u043E\\u0441\\u0442\\u0438: ".concat(currentQuadraticFactor.toFixed(2), " -> ").concat(newValue.toFixed(2)));\n  currentQuadraticFactor = newValue;\n  return newValue;\n}\n\n// Функция для получения текущего коэффициента квадратичной зависимости\nfunction getQuadraticFactor() {\n  return currentQuadraticFactor;\n}\n\n// Debug-функция для вывода расширенной информации о камере\nfunction logCameraStatus() {\n  if (!camera) return;\n\n  // console.log(`[Camera] Position: (${camera.position.x.toFixed(2)}, ${camera.position.y.toFixed(2)}, ${camera.position.z.toFixed(2)})`);\n  // console.log(`[Camera] Direction: (${lastCameraDirection.x.toFixed(2)}, ${lastCameraDirection.y.toFixed(2)}, ${lastCameraDirection.z.toFixed(2)})`);\n  // console.log(`[Camera] Target Direction: (${targetCameraDirection.x.toFixed(2)}, ${targetCameraDirection.y.toFixed(2)}, ${targetCameraDirection.z.toFixed(2)})`);\n  // console.log(`[Camera] Arrow Direction: (${lastArrowDirection.x.toFixed(2)}, ${lastArrowDirection.y.toFixed(2)}, ${lastArrowDirection.z.toFixed(2)})`);\n  // console.log(`[Camera] Looking at: (${lastKnownPosition.x.toFixed(2)}, ${lastKnownPosition.y.toFixed(2)}, ${lastKnownPosition.z.toFixed(2)})`);\n  // console.log(`[Camera] Turning Active: ${turningActive}, Last Angle: ${lastMeasuredAngle.toFixed(3)} рад (${(lastMeasuredAngle * 180 / Math.PI).toFixed(1)}°)`);\n  // console.log(`[Camera] Last Distance: ${lastMeasuredDistance.toFixed(1)}, Quadratic Factor: ${currentQuadraticFactor.toFixed(2)}, Default: ${QUADRATIC_FACTOR.toFixed(2)}`);\n  // console.log(`[Camera] Adaptive Factor: ${calculateAdaptiveRotationFactor(lastMeasuredAngle, lastMeasuredDistance).toFixed(3)}`);\n\n  // Проверяем наличие игрока\n  var playerObjectID = gameStateManager.getPlayerObjectID();\n  if (playerObjectID) {\n    var player = objects[playerObjectID];\n    if (player && player.mesh) {\n      // console.log(`[Camera] Player found at: (${player.mesh.position.x.toFixed(2)}, ${player.mesh.position.y.toFixed(2)}, ${player.mesh.position.z.toFixed(2)})`);\n    } else {\n      // console.log(`[Camera] Player object with ID "${playerObjectID}" not found in objects!`);\n    }\n  } else {\n    // console.log(`[Camera] Player ID not yet received from server`);\n  }\n}\n;// ./src/gamestatemanager.js\nfunction gamestatemanager_typeof(o) { "@babel/helpers - typeof"; return gamestatemanager_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, gamestatemanager_typeof(o); }\nfunction gamestatemanager_classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction gamestatemanager_defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, gamestatemanager_toPropertyKey(o.key), o); } }\nfunction gamestatemanager_createClass(e, r, t) { return r && gamestatemanager_defineProperties(e.prototype, r), t && gamestatemanager_defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction gamestatemanager_toPropertyKey(t) { var i = gamestatemanager_toPrimitive(t, "string"); return "symbol" == gamestatemanager_typeof(i) ? i : i + ""; }\nfunction gamestatemanager_toPrimitive(t, r) { if ("object" != gamestatemanager_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != gamestatemanager_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && ("object" == gamestatemanager_typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\n// gamestatemanager.js\n\n\n\n\n\nvar GameStateManager = /*#__PURE__*/function (_EventEmitter) {\n  function GameStateManager(ws) {\n    var _this;\n    gamestatemanager_classCallCheck(this, GameStateManager);\n    _this = _callSuper(this, GameStateManager);\n    _this.terrainMeshCreated = false;\n    _this.playerMeshCreated = false;\n    _this.terrainMesh = null;\n    _this.playerMesh = null;\n    _this.ws = ws;\n    _this.scene = scene_scene;\n    _this.playerID = null; // Динамический ID игрока, получаемый от сервера\n    _this.playerObjectID = null; // ID объекта игрока в мире\n    _this.isPlayerIDReceived = false; // Флаг получения ID от сервера\n    return _this;\n  }\n  _inherits(GameStateManager, _EventEmitter);\n  return gamestatemanager_createClass(GameStateManager, [{\n    key: "setTerrainMesh",\n    value: function setTerrainMesh(mesh) {\n      this.terrainMesh = mesh;\n      this.terrainMeshCreated = true;\n      this.checkGameState();\n    }\n  }, {\n    key: "setPlayerMesh",\n    value: function setPlayerMesh(mesh) {\n      this.playerMesh = mesh;\n      this.playerMeshCreated = true;\n      this.checkGameState();\n    }\n  }, {\n    key: "checkGameState",\n    value: function checkGameState() {\n      if (this.terrainMeshCreated && this.playerMeshCreated) {\n        initGamepad(camera, this.terrainMesh, this.playerMesh, this.ws, this.scene);\n        this.emit(\'gameInitialized\');\n        console.warn("[Game State Manager] game initialized!!!");\n      }\n    }\n\n    // Устанавливает player ID, полученный от сервера\n  }, {\n    key: "setPlayerID",\n    value: function setPlayerID(playerID, objectID) {\n      this.playerID = playerID;\n      this.playerObjectID = objectID;\n      this.isPlayerIDReceived = true;\n      console.log("[GameStateManager] \\u0423\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D player ID: ".concat(playerID, ", object ID: ").concat(objectID));\n    }\n\n    // Возвращает ID объекта игрока для отправки команд\n  }, {\n    key: "getPlayerObjectID",\n    value: function getPlayerObjectID() {\n      return this.playerObjectID;\n    }\n\n    // Возвращает player ID\n  }, {\n    key: "getPlayerID",\n    value: function getPlayerID() {\n      return this.playerID;\n    }\n\n    // Проверяет, получен ли player ID от сервера\n  }, {\n    key: "isPlayerReady",\n    value: function isPlayerReady() {\n      return this.isPlayerIDReceived && this.playerObjectID !== null;\n    }\n\n    // Сбрасывает состояние при отключении\n  }, {\n    key: "reset",\n    value: function reset() {\n      this.playerMesh = null;\n      this.playerID = null;\n      this.playerObjectID = null;\n      this.isPlayerIDReceived = false;\n      console.log(\'[GameStateManager] Состояние сброшено\');\n    }\n\n    // Инициализация с WebSocket\n  }, {\n    key: "init",\n    value: function init(ws, scene) {\n      this.ws = ws;\n      this.scene = scene;\n    }\n  }]);\n}(events.EventEmitter); // Создаем singleton экземпляр\nvar gamestatemanager_gameStateManager = new GameStateManager();\nfunction initGameStateManager(ws, scene) {\n  gamestatemanager_gameStateManager.init(ws, scene);\n}\n\n// Экспортируем singleton по умолчанию\n/* harmony default export */ const gamestatemanager = (gamestatemanager_gameStateManager);\n\n;// ./src/objects.js\n// objects.js\n\n\n\n\n\nvar terrainCreated = new events.EventEmitter();\nvar playerCreated = new events.EventEmitter();\nvar objects_objects = {}; // Словарь объектов: id -> { mesh, body, serverPos, ... }\nvar terrainMesh; // Экспортируем terrainMesh\nvar playerMesh; // Экспортируем playerMesh\n\nfunction createMeshAndBodyForObject(data) {\n  if (!data || !data.object_type) {\n    console.error("Invalid data received for object creation:", data);\n    return null;\n  }\n  var type = data.object_type;\n  var mesh = null,\n    body = null;\n  try {\n    // Создаем меш в любом случае\n    switch (type) {\n      case "terrain":\n        mesh = createTerrainMesh(data);\n        body = createPhysicsBodyForTerrain(data);\n        break;\n      case "sphere":\n        mesh = createSphereMesh(data);\n        body = createPhysicsBodyForSphere(data);\n        break;\n      case "tree":\n        mesh = createTreeMesh(data);\n        break;\n      case "box":\n        mesh = createBoxMesh(data);\n        body = createPhysicsBodyForBox(data);\n        break;\n      default:\n        console.warn("Unknown object type: ".concat(type));\n        return null;\n    }\n\n    // Проверяем, что mesh был успешно создан\n    if (!mesh) {\n      console.error("Failed to create mesh for object type: ".concat(type));\n      return null;\n    }\n    scene_scene.add(mesh);\n\n    // Сохраняем в объекте исходные данные, включая массу\n    var result = {\n      mesh: mesh,\n      body: body,\n      object_type: type,\n      mass: data.mass,\n      // Сохраняем массу из данных сервера\n      radius: data.radius,\n      // Сохраняем радиус из данных сервера\n      physicsBy: data.physics_by\n    };\n    console.log("[Objects] Создан объект:", {\n      id: data.id,\n      type: data.object_type,\n      physics_by: data.physics_by,\n      mass: data.mass,\n      radius: data.radius,\n      hasBody: !!body,\n      hasMesh: !!mesh\n    });\n    return result;\n  } catch (error) {\n    console.error("\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D\\u0438\\u0438 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 \\u0442\\u0438\\u043F\\u0430 ".concat(type, ":"), error);\n    // Если mesh был создан, но произошла ошибка, удаляем его из сцены\n    if (mesh) {\n      scene_scene.remove(mesh);\n    }\n    return null;\n  }\n}\nfunction createPhysicsBodyForTerrain(data) {\n  var physicsWorld = physics_getPhysicsWorld();\n  if (!physicsWorld) {\n    console.error("[Objects] Физический мир не инициализирован");\n    return null;\n  }\n  if (typeof Ammo === \'undefined\') {\n    console.error(\'Ammo.js не инициализирован\');\n    return null;\n  }\n  var w = data.heightmap_w;\n  var h = data.heightmap_h;\n  var scaleX = data.scale_x;\n  var scaleZ = data.scale_z;\n\n  // Создаем буфер в памяти Ammo для данных высот\n  var ammoHeightData = Ammo._malloc(4 * w * h);\n\n  // Копируем данные высот в память Ammo\n  var p = 0;\n  var p2 = 0;\n  for (var j = 0; j < h; j++) {\n    for (var i = 0; i < w; i++) {\n      Ammo.HEAPF32[ammoHeightData + p2 >> 2] = data.height_data[p];\n      p++;\n      p2 += 4;\n    }\n  }\n\n  // Создаем форму террейна\n  var shape = new Ammo.btHeightfieldTerrainShape(w, h, ammoHeightData, 1,\n  // heightScale\n  data.min_height, data.max_height, 1,\n  // up axis = 1 для Y\n  Ammo.PHY_FLOAT, false // flipQuadEdges\n  );\n\n  // Устанавливаем масштабирование\n  shape.setLocalScaling(new Ammo.btVector3(scaleX, data.scale_y, scaleZ));\n\n  // Устанавливаем margin для террейна (0.5 вместо 2.0, так как террейн меньше)\n  shape.setMargin(0.5);\n  console.log("[Terrain] Установлен margin террейна:", 0.5);\n\n  // Создаем трансформацию\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n  var mass = 0; // Статическое тело\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Добавляем тело в физический мир\n  var TERRAIN_GROUP = 1;\n  physicsWorld.addRigidBody(body, TERRAIN_GROUP, -1); // Террейн сталкивается со всеми\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n  console.log("[Terrain] Физическое тело создано:", {\n    размеры: {\n      w: w,\n      h: h\n    },\n    масштаб: {\n      x: data.scaleX,\n      y: data.scale_y,\n      z: data.scaleZ\n    },\n    позиция: {\n      x: data.x || 0,\n      y: (data.min_height + data.max_height) / 2,\n      z: data.z || 0\n    },\n    минВысота: data.min_height,\n    максВысота: data.max_height\n  });\n  return body;\n}\nfunction createTerrainMesh(data) {\n  var w = data.heightmap_w || 64;\n  var h = data.heightmap_h || 64;\n  var geo = new three_core/* PlaneGeometry */.bdM(w * data.scale_x, h * data.scale_z, w - 1, h - 1);\n  geo.rotateX(-Math.PI / 2);\n  if (data.height_data) {\n    var verts = geo.attributes.position.array;\n    for (var i = 0; i < verts.length; i += 3) {\n      var ix = i / 3 % w;\n      var iz = Math.floor(i / 3 / w);\n      verts[i + 1] = data.height_data[iz * w + ix] * data.scale_y;\n    }\n    geo.computeVertexNormals();\n  }\n  terrainMesh = new three_core/* Mesh */.eaF(\n  // Присваиваем mesh переменной terrainMesh\n  geo, new three_core/* MeshPhongMaterial */.tXL({\n    color: parseColor(data.color || "#0000ff"),\n    wireframe: false,\n    flatShading: true\n  }));\n\n  // Включаем тени для террейна\n  terrainMesh.receiveShadow = true;\n  gamestatemanager.setTerrainMesh(terrainMesh);\n  return terrainMesh;\n}\nfunction createSphereMesh(data) {\n  try {\n    var geo = new three_core/* SphereGeometry */.Gu$(data.radius || 1, 32, 32);\n    var mesh = new three_core/* Mesh */.eaF(geo, new three_core/* MeshPhongMaterial */.tXL({\n      color: parseColor(data.color || "#888888"),\n      shininess: 30\n    }));\n\n    // Включаем тени для сфер\n    mesh.castShadow = true;\n    mesh.receiveShadow = true;\n\n    // Проверяем, является ли этот объект игроком текущего клиента\n    var playerObjectID = gamestatemanager.getPlayerObjectID();\n    if (playerObjectID && data.id === playerObjectID) {\n      playerMesh = mesh;\n      gamestatemanager.setPlayerMesh(playerMesh);\n      console.log("[Objects] \\u0423\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D playerMesh \\u0434\\u043B\\u044F \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(data.id));\n    } else {\n      // Если player ID еще не получен, объект может быть установлен позже в network.js\n      console.log("[Objects] \\u0421\\u043E\\u0437\\u0434\\u0430\\u043D \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, ", player ID: ").concat(playerObjectID || \'не получен\'));\n    }\n    return mesh;\n  } catch (error) {\n    console.error("Ошибка при создании меша сферы:", error);\n    return null;\n  }\n}\nfunction createBoxMesh(data) {\n  var geo = new three_core/* BoxGeometry */.iNn(1, 1, 1);\n  return new three_core/* Mesh */.eaF(geo, new three_core/* MeshLambertMaterial */.G_z({\n    color: parseColor(data.color || "#888888")\n  }));\n}\nfunction createPhysicsBodyForSphere(data) {\n  var physicsWorld = physics_getPhysicsWorld();\n  if (!physicsWorld) {\n    console.error("[Objects] Физический мир не инициализирован");\n    return null;\n  }\n  try {\n    if (typeof Ammo === \'undefined\') {\n      console.error(\'Ammo.js не инициализирован\');\n      return null;\n    }\n    if (!physicsWorld) {\n      console.error(\'Физический мир не инициализирован\');\n      return null;\n    }\n\n    // Безопасная проверка window.Ammo\n    if (typeof window.Ammo === \'undefined\') {\n      console.error(\'window.Ammo не инициализирован\');\n      return null;\n    }\n    var radius = data.radius;\n    var mass = data.mass;\n\n    // Создаем все Ammo объекты через window.Ammo\n    var shape = new window.Ammo.btSphereShape(radius);\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(data.x || 0, data.y || 0, data.z || 0));\n    var localInertia = new window.Ammo.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    var motionState = new window.Ammo.btDefaultMotionState(transform);\n    var rbInfo = new window.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    var body = new window.Ammo.btRigidBody(rbInfo);\n\n    // Проверяем, что тело имеет необходимые методы\n    if (!body || typeof body.getMotionState !== \'function\') {\n      console.error(\'Ошибка: созданное физическое тело недействительно\');\n      window.Ammo.destroy(rbInfo);\n      window.Ammo.destroy(localInertia);\n      return null;\n    }\n\n    // Устанавливаем дополнительные свойства\n    body.setFriction(1.0); // Максимальное трение для контроля\n    body.setRollingFriction(0.3); // Увеличиваем сопротивление качению\n    body.setRestitution(0.0); // Полностью убираем отскок  \n    body.setDamping(0.2, 0.3); // Добавляем затухание для остановки\n\n    // Отключаем деактивацию\n    body.setActivationState(4); // DISABLE_DEACTIVATION\n\n    // Для небольших сфер включаем CCD (continuous collision detection),\n    // чтобы предотвратить проваливание сквозь поверхности при высокой скорости\n    body.setCcdMotionThreshold(radius * 0.7);\n    body.setCcdSweptSphereRadius(radius * 0.6);\n\n    // Добавляем тело в физический мир\n    var SPHERE_GROUP = 2;\n    physicsWorld.addRigidBody(body, SPHERE_GROUP, -1); // Сферы сталкиваются со всеми\n\n    console.log("[Objects] \\u0424\\u0438\\u0437\\u0438\\u0447\\u0435\\u0441\\u043A\\u043E\\u0435 \\u0442\\u0435\\u043B\\u043E \\u0441\\u0444\\u0435\\u0440\\u044B ".concat(data.id, " \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D\\u043E: radius=").concat(radius, ", mass=").concat(mass));\n\n    // Очистка памяти\n    window.Ammo.destroy(rbInfo);\n    window.Ammo.destroy(localInertia);\n    return body;\n  } catch (error) {\n    console.error(\'Ошибка при создании физического тела:\', error);\n    return null;\n  }\n}\nfunction createPhysicsBodyForBox(data) {\n  var physicsWorld = physics_getPhysicsWorld();\n  if (!physicsWorld) {\n    console.error("[Objects] Физический мир не инициализирован");\n    return null;\n  }\n  try {\n    if (typeof Ammo === \'undefined\') {\n      console.error(\'Ammo.js не инициализирован\');\n      return null;\n    }\n    if (!physicsWorld) {\n      console.error(\'Физический мир не инициализирован\');\n      return null;\n    }\n    var width = data.width || 1;\n    var height = data.height || 1;\n    var depth = data.depth || 1;\n    var mass = data.mass || 1;\n\n    // Создаем все Ammo объекты через window.Ammo\n    var shape = new window.Ammo.btBoxShape(new window.Ammo.btVector3(width / 2, height / 2, depth / 2));\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(data.x || 0, data.y || 0, data.z || 0));\n    var localInertia = new window.Ammo.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    var motionState = new window.Ammo.btDefaultMotionState(transform);\n    var rbInfo = new window.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    var body = new window.Ammo.btRigidBody(rbInfo);\n\n    // Настраиваем физические свойства\n    body.setFriction(0.5);\n    body.setRollingFriction(0.1);\n    body.setRestitution(0.2); // Немного уменьшаем упругость для стабильности\n    body.setDamping(0.01, 0.01); // Небольшое линейное и угловое затухание\n\n    // Включаем CCD для предотвращения проваливания сквозь террейн\n    var maxDimension = Math.max(width, height, depth);\n    body.setCcdMotionThreshold(maxDimension * 0.8); // Увеличиваем порог для активации CCD\n    body.setCcdSweptSphereRadius(maxDimension * 0.7); // Радиус сферы для CCD\n\n    // Отключаем деактивацию\n    body.setActivationState(4); // DISABLE_DEACTIVATION\n\n    // Добавляем тело в физический мир\n    var BOX_GROUP = 3;\n    physicsWorld.addRigidBody(body, BOX_GROUP, -1); // Коробки сталкиваются со всеми\n\n    console.log("[Box] Физическое тело создано:", {\n      dimensions: {\n        width: width,\n        height: height,\n        depth: depth\n      },\n      mass: mass,\n      position: {\n        x: data.x || 0,\n        y: data.y || 0,\n        z: data.z || 0\n      },\n      ccd: {\n        motionThreshold: maxDimension * 0.8,\n        sweptSphereRadius: maxDimension * 0.7\n      },\n      friction: 0.5,\n      restitution: 0.2\n    });\n\n    // Очистка памяти\n    window.Ammo.destroy(rbInfo);\n    window.Ammo.destroy(localInertia);\n    return body;\n  } catch (error) {\n    console.error(\'Ошибка при создании физического тела:\', error);\n    return null;\n  }\n}\nfunction parseColor(colorStr) {\n  if (!colorStr) return 0x888888;\n  if (colorStr.startsWith("#")) {\n    return parseInt(colorStr.slice(1), 16);\n  }\n  return 0x888888;\n}\nfunction createTestSphere() {\n  // Создаем визуальную сферу\n  var radius = 1;\n  var geometry = new THREE.SphereGeometry(radius, 32, 32);\n  var material = new THREE.MeshPhongMaterial({\n    color: 0xff00ff,\n    shininess: 30\n  });\n  var mesh = new THREE.Mesh(geometry, material);\n\n  // Включаем тени для тестовой сферы\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n\n  // Позиционируем сферу высоко над террейном\n  var startY = 58; // Высота над террейном\n  mesh.position.set(0, startY, 0);\n  scene.add(mesh);\n\n  // Создаем физическое тело\n  var shape = new Ammo.btSphereShape(radius);\n  var mass = 5; // Увеличиваем массу с 3 до 5\n\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n  transform.setOrigin(new Ammo.btVector3(0, startY, 0));\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  shape.calculateLocalInertia(mass, localInertia);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Важные настройки для физического тела\n  body.setActivationState(4); // DISABLE_DEACTIVATION\n  body.setFriction(1.0); // Максимальное трение для контроля\n  body.setRollingFriction(0.3); // Увеличиваем сопротивление качению\n  body.setRestitution(0.0); // Полностью убираем отскок  \n  body.setDamping(0.2, 0.3); // Добавляем затухание для остановки\n\n  // Включаем CCD для предотвращения проваливания сквозь объекты\n  body.setCcdMotionThreshold(radius * 0.6);\n  body.setCcdSweptSphereRadius(radius * 0.5);\n\n  // Добавляем тело в физический мир\n  var SPHERE_GROUP = 2;\n  var physicsWorld = getPhysicsWorld();\n  physicsWorld.addRigidBody(body, SPHERE_GROUP, -1); // Тестовая сфера сталкивается со всеми\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n\n  // Добавляем объект в наш список объектов\n  var testSphereObj = {\n    mesh: mesh,\n    body: body,\n    object_type: "test_sphere",\n    physicsBy: "ammo" // Изменено с "both" на "ammo", чтобы управлялось только локальной физикой\n  };\n  objects_objects["test_sphere"] = testSphereObj;\n  return testSphereObj;\n}\n;// ./src/physics.js\nfunction physics_typeof(o) { "@babel/helpers - typeof"; return physics_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, physics_typeof(o); }\nfunction physics_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ physics_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == physics_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(physics_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = physics_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction physics_toPropertyKey(t) { var i = physics_toPrimitive(t, "string"); return "symbol" == physics_typeof(i) ? i : i + ""; }\nfunction physics_toPrimitive(t, r) { if ("object" != physics_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != physics_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction physics_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction physics_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { physics_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { physics_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// physics.js\n\n\n\n\n// Обновляем константы для настройки физики\nvar PHYSICS_SETTINGS = {\n  PREDICTION: {\n    // Максимальная допустимая ошибка предсказания (в единицах мира)\n    // Влияет на: точность предсказания траектории при отскоках\n    // Рекомендации: 6.0-30.0 (для сферы радиусом 3.0: 12.0-24.0 = 2-4 диаметра оптимально)\n    // Меньше = точнее, но больше телепортаций; Больше = плавнее, но менее точно\n    MAX_ERROR: 18.0,\n    // Фактор сглаживания для предсказания (0.0-1.0)\n    // Влияет на: плавность перехода между предсказанной и серверной позицией\n    // Рекомендации: 0.1-0.4 (0.2 оптимально для большинства случаев)\n    // Меньше = резче коррекция; Больше = плавнее, но медленнее\n    SMOOTH_FACTOR: 0.2,\n    // Порог для телепортации (в единицах мира)\n    // Влияет на: когда объект "прыгает" к серверной позиции вместо плавного движения\n    // Рекомендации: 18.0-48.0 (для сферы радиусом 3.0: 24.0-36.0 = 4-6 диаметров)\n    // Меньше = частые телепортации, быстрая синхронизация; Больше = плавнее, но медленнее\n    TELEPORT_THRESHOLD: 30.0,\n    // Время экстраполяции в миллисекундах\n    // Влияет на: как далеко в будущее предсказываем позицию при плохой сети\n    // Рекомендации: 50-200мс (100мс = 2 серверных обновления при 50мс интервале)\n    // При скорости 80м/с за 100мс объект пролетает 8 единиц (1.3 диаметра)\n    EXTRAPOLATION_TIME: 100\n  },\n  INTERPOLATION: {\n    // Зона нечувствительности (в единицах мира)\n    // Влияет на: минимальное расстояние для применения коррекции\n    // Рекомендации: 0.3-1.2 (для сферы радиусом 3.0: 0.6 = 10% от диаметра, незаметно)\n    // Меньше = более чувствительно к мелким отклонениям; Больше = игнорирует микро-дребезг\n    DEAD_ZONE: 12.0,\n    // УВЕЛИЧЕНО: с 5.0 до 12.0 для крупных сфер (радиус 20+ = диаметр 40+, 12/40 = 30%)\n\n    // Базовая сила коррекции (множитель силы)\n    // Влияет на: скорость притягивания к серверной позиции\n    // Рекомендации: 3.0-15.0 (8.0 агрессивно, но эффективно для крупных объектов)\n    // Меньше = мягче, плавнее; Больше = быстрее коррекция, может вызвать осцилляции\n    CORRECTION_STRENGTH: 3.0,\n    // УМЕНЬШЕНО: с 8.0 до 3.0 для более мягкой коррекции\n\n    // Базовый фактор смешивания позиций (0.0-1.0)\n    // Влияет на: насколько быстро визуальная позиция следует к целевой\n    // Рекомендации: 0.2-0.6 (0.4 хороший баланс для быстрых объектов)\n    // Меньше = плавнее, медленнее; Больше = резче, быстрее\n    BLEND_FACTOR: 0.4,\n    BASE_BLEND_FACTOR: 0.4,\n    // Минимальный фактор смешивания при плохой сети (0.0-1.0)\n    // Влияет на: минимальная скорость коррекции при высоком пинге\n    // Рекомендации: 0.1-0.3 (0.2 предотвращает "заморозку" быстрых объектов)\n    // Меньше = очень плавно при плохой сети; Больше = быстрее, но может дергаться\n    MIN_BLEND_FACTOR: 0.2,\n    // Параметры Hermite интерполяции (-1.0 до 1.0)\n    // Влияют на: форму кривой сглаживания при средней сети\n    // Рекомендации: обычно 0.0 (нейтрально), экспериментировать ±0.5\n    HERMITE_TENSION: 0.0,\n    // 0 = плавно, +1 = острее, -1 = более округло\n    HERMITE_BIAS: 0.0 // 0 = симметрично, +1 = к концу, -1 = к началу\n  },\n  NETWORK: {\n    // Таймаут для переключения на локальную физику (мс)\n    // Влияет на: когда клиент перестает доверять серверу\n    // Рекомендации: 100-300мс (150мс = 3 пропущенных обновления)\n    // При скорости 80м/с за 150мс объект пролетает 12 единиц (2 диаметра)\n    TIMEOUT: 150,\n    // Интервал обновлений сервера (мс) - должен совпадать с сервером\n    // Влияет на: расчет времени интерполяции\n    // Рекомендации: синхронизировать с сервером (обычно 16-50мс)\n    // При 50мс и скорости 80м/с объект перемещается на 4 единицы за обновление\n    UPDATE_INTERVAL: 50,\n    // Окно доверия серверу (мс)\n    // Влияет на: как долго доверяем серверным данным после получения\n    // Рекомендации: 300-1000мс (500мс = 10 обновлений)\n    SERVER_TRUST_WINDOW: 500,\n    // Максимальный пинг для нормальной работы (мс)\n    // Влияет на: переключение алгоритмов интерполяции\n    // Рекомендации: 200-500мс (300мс разумный предел для быстрых игр)\n    MAX_PING: 300,\n    // Порог джиттера для переключения алгоритмов (мс)\n    // Влияет на: детекцию нестабильной сети\n    // Рекомендации: 30-100мс (50мс = заметная нестабильность для быстрых объектов)\n    JITTER_THRESHOLD: 50\n  },\n  BUFFER: {\n    // Размер буфера серверных обновлений\n    // Влияет на: качество сглаживания и потребление памяти\n    // Рекомендации: 3-10 (5 хороший баланс для быстрых объектов)\n    // Меньше = меньше памяти, хуже сглаживание; Больше = лучше сглаживание, больше памяти\n    SIZE: 5,\n    // Минимум обновлений для начала интерполяции\n    // Влияет на: когда начинаем применять сглаживание\n    // Рекомендации: 2-3 (2 минимум для вычисления скорости)\n    MIN_UPDATES: 2,\n    // Фактор сглаживания скорости (0.0-1.0)\n    // Влияет на: плавность изменения скорости\n    // Рекомендации: 0.2-0.5 (0.3 хороший баланс для скорости 80м/с)\n    VELOCITY_SMOOTHING: 0.3\n  },\n  SMOOTHING: {\n    // Альфа для экспоненциального сглаживания позиции (0.0-1.0)\n    // Влияет на: скорость адаптации визуальной позиции\n    // Рекомендации: 0.2-0.5 (0.3 быстро, но стабильно для крупных быстрых объектов)\n    // Меньше = плавнее, медленнее; Больше = быстрее, может дергаться\n    POSITION_ALPHA: 0.15,\n    // УМЕНЬШЕНО: с 0.3 до 0.15 для более плавного движения\n\n    // Альфа для экспоненциального сглаживания скорости (0.0-1.0)\n    // Влияет на: скорость адаптации физической скорости\n    // Рекомендации: 0.3-0.6 (0.4 хороший отклик для скорости 80м/с)\n    // Меньше = инерционнее; Больше = отзывчивее\n    VELOCITY_ALPHA: 0.25,\n    // УМЕНЬШЕНО: с 0.4 до 0.25 для плавности\n\n    // Максимальное ускорение для фильтрации выбросов (единиц/с²)\n    // Влияет на: фильтрацию нереалистичных ускорений\n    // Рекомендации: 200-500 (300 для скорости 80м/с, учитывая отскоки крупных объектов)\n    ACCELERATION_LIMIT: 300.0\n  },\n  ADAPTATION: {\n    // Время агрессивной коррекции после изменения сети (мс)\n    // Влияет на: как долго применяем максимально агрессивные параметры\n    // Рекомендации: 200-1000мс (500мс быстро устраняет дребезг крупных объектов)\n    // Меньше = короткий всплеск агрессии; Больше = долгая агрессивная коррекция\n    FAST_CONVERGENCE_TIME: 500,\n    // Агрессивный альфа для быстрой адаптации (0.0-1.0)\n    // Влияет на: скорость коррекции в режиме быстрой сходимости\n    // Рекомендации: 0.5-0.9 (0.7 очень быстро, но контролируемо для крупных объектов)\n    // Меньше = умеренно быстро; Больше = максимально быстро, риск осцилляций\n    AGGRESSIVE_ALPHA: 0.7,\n    // Порог стабилизации - расстояние для определения стабильности (единицы мира)\n    // Влияет на: когда считаем систему стабилизированной\n    // Рекомендации: 1.2-6.0 (3.0 = половина диаметра сферы, хорошая точность)\n    // Меньше = строже критерий стабильности; Больше = мягче критерий\n    STABILIZATION_THRESHOLD: 3.0,\n    // Порог для полного сброса состояния (единицы мира)\n    // Влияет на: когда полностью сбрасываем буферы и телепортируем\n    // Рекомендации: 48.0-120.0 (60.0 = 10 диаметров сферы, критическое расхождение)\n    // Меньше = частые сбросы; Больше = редкие сбросы, может накапливаться ошибка\n    RESET_THRESHOLD: 60.0\n  }\n};\n\n// Глобальные переменные\nvar localPhysicsWorld = null;\nvar lastServerUpdateTime = 0;\n\n// Добавляем буфер для серверных обновлений\nvar serverUpdateBuffer = {\n  positions: {},\n  // id -> массив последних позиций\n  velocities: {},\n  // id -> массив последних скоростей\n  timestamps: {} // id -> массив временных меток\n};\n\n// Система адаптивного мониторинга сетевых условий\nvar physics_networkMonitor = {\n  pingHistory: [],\n  jitterHistory: [],\n  lastPingMeasurement: 0,\n  adaptationState: {\n    currentStrategy: \'linear\',\n    lastStrategyChange: 0,\n    stabilizationTime: 3000,\n    // 3 секунды для стабилизации\n    isAdapting: false,\n    fastConvergenceMode: false,\n    // Режим быстрой сходимости\n    adaptationStartTime: 0 // Время начала адаптации\n  },\n  // Буфер для сглаживания параметров\n  smoothedParams: {\n    positionAlpha: PHYSICS_SETTINGS.SMOOTHING.POSITION_ALPHA,\n    velocityAlpha: PHYSICS_SETTINGS.SMOOTHING.VELOCITY_ALPHA,\n    correctionStrength: PHYSICS_SETTINGS.INTERPOLATION.CORRECTION_STRENGTH,\n    teleportThreshold: PHYSICS_SETTINGS.PREDICTION.TELEPORT_THRESHOLD\n  },\n  // Статистика для отслеживания стабильности\n  stabilityStats: {\n    lastPositionErrors: [],\n    averageError: 0,\n    isStable: false\n  }\n};\n\n// Инициализация физического мира\nfunction setupPhysicsWorld() {\n  if (!window.Ammo) {\n    console.error("[Physics] Ammo.js не инициализирован");\n    return;\n  }\n  var collisionConfiguration = new window.Ammo.btDefaultCollisionConfiguration();\n  var dispatcher = new window.Ammo.btCollisionDispatcher(collisionConfiguration);\n  var broadphase = new window.Ammo.btDbvtBroadphase();\n  var solver = new window.Ammo.btSequentialImpulseConstraintSolver();\n  localPhysicsWorld = new window.Ammo.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n  localPhysicsWorld.setGravity(new window.Ammo.btVector3(0, -9.81, 0));\n  console.log("[Physics] Физический мир создан");\n}\n\n// Получение физического мира\nfunction physics_getPhysicsWorld() {\n  if (!localPhysicsWorld) {\n    console.error("[Physics] Физический мир не инициализирован");\n    return null;\n  }\n  return localPhysicsWorld;\n}\n\n// Инициализация Ammo.js\nfunction initAmmo() {\n  return _initAmmo.apply(this, arguments);\n}\n\n// Функция для обновления индикатора физики\nfunction _initAmmo() {\n  _initAmmo = physics_asyncToGenerator(/*#__PURE__*/physics_regeneratorRuntime().mark(function _callee() {\n    return physics_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt("return", new Promise(function (resolve, reject) {\n            if (window.Ammo) {\n              console.log(\'[Physics] Ammo.js уже инициализирован\');\n              setupPhysicsWorld();\n              resolve();\n              return;\n            }\n            console.log(\'[Physics] Инициализация Ammo.js...\');\n            var ammoScript = document.createElement(\'script\');\n            ammoScript.src = \'/ammo/ammo.wasm.js\';\n            ammoScript.async = true;\n            ammoScript.onload = function () {\n              console.log(\'[Physics] Скрипт Ammo.js загружен, инициализация...\');\n              window.Ammo().then(function (Ammo) {\n                window.Ammo = Ammo;\n                console.log(\'[Physics] Ammo.js инициализирован успешно\');\n                setupPhysicsWorld();\n                setTimeout(startPhysicsSimulation, 1000);\n                resolve();\n              })["catch"](reject);\n            };\n            ammoScript.onerror = reject;\n            document.body.appendChild(ammoScript);\n          }));\n        case 1:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _initAmmo.apply(this, arguments);\n}\nfunction updatePhysicsModeDisplay(useServerPhysics) {\n  var physicsModeDisplay = document.getElementById(\'physics-mode-display\');\n  if (!physicsModeDisplay) {\n    return;\n  }\n  if (useServerPhysics) {\n    physicsModeDisplay.textContent = \'Физика: Серверная\';\n    physicsModeDisplay.style.backgroundColor = \'rgba(0, 128, 0, 0.5)\'; // Зеленый - серверная физика\n  } else {\n    physicsModeDisplay.textContent = \'Физика: Локальная\';\n    physicsModeDisplay.style.backgroundColor = \'rgba(255, 0, 0, 0.5)\'; // Красный - локальная физика\n  }\n}\n\n// Обновляем функцию stepPhysics для отображения режима физики\nfunction stepPhysics(deltaTime) {\n  try {\n    if (!localPhysicsWorld) {\n      console.warn("[Physics] Физический мир не инициализирован");\n      return;\n    }\n\n    // Проверяем состояние соединения\n    var useServerPhysics = checkConnectionState();\n\n    // Шаг симуляции физики\n    localPhysicsWorld.stepSimulation(deltaTime);\n\n    // Обновляем положение объектов\n    updatePhysicsObjects(useServerPhysics);\n\n    // Принудительно обновляем приборы каждые 60 кадров (~1 секунда при 60 FPS)\n    if (Date.now() % 1000 < 50) {\n      // Примерно раз в секунду\n      forceUpdateInstruments();\n    }\n  } catch (error) {\n    console.error("[Physics] Ошибка в цикле физики:", error);\n  }\n}\n\n// Функция для обновления отображения скорости игрока\nfunction updatePlayerSpeedDisplay(speed, mass, radius) {\n  var speedDisplay = document.getElementById(\'player-speed\');\n  var massDisplay = document.getElementById(\'player-mass\');\n  var radiusDisplay = document.getElementById(\'player-radius\');\n  var statusDisplay = document.getElementById(\'player-status\');\n  var objectsDisplay = document.getElementById(\'world-objects\');\n  if (!speedDisplay || !massDisplay) {\n    console.error(\'[Physics] Элементы интерфейса не найдены\');\n    return;\n  }\n\n  // Форматируем значения до 2 знаков после запятой\n  var formattedSpeed = speed.toFixed(2);\n  var formattedMass = mass.toFixed(2);\n  var formattedRadius = radius ? radius.toFixed(1) : \'--\';\n\n  // Обновляем текст\n  speedDisplay.textContent = "\\u26A1 ".concat(formattedSpeed, " \\u043C/\\u0441");\n  massDisplay.textContent = "\\u2696\\uFE0F ".concat(formattedMass, " \\u043A\\u0433");\n\n  // Обновляем радиус\n  if (radiusDisplay) {\n    radiusDisplay.textContent = "\\uD83D\\uDFE2 ".concat(formattedRadius, "\\u043C");\n\n    // Цветовая индикация радиуса\n    if (radius < 5) {\n      radiusDisplay.style.backgroundColor = \'rgba(0, 255, 0, 0.5)\'; // Зеленый - маленький\n    } else if (radius < 10) {\n      radiusDisplay.style.backgroundColor = \'rgba(0, 128, 255, 0.5)\'; // Синий - средний\n    } else if (radius < 15) {\n      radiusDisplay.style.backgroundColor = \'rgba(255, 165, 0, 0.5)\'; // Оранжевый - большой\n    } else {\n      radiusDisplay.style.backgroundColor = \'rgba(255, 0, 255, 0.5)\'; // Фиолетовый - огромный\n    }\n  }\n\n  // Обновляем статус игрока\n  if (statusDisplay) {\n    var playerObjectID = gamestatemanager.getPlayerObjectID();\n    if (playerObjectID) {\n      statusDisplay.textContent = "\\uD83C\\uDFAE ID:".concat(playerObjectID);\n      statusDisplay.style.backgroundColor = \'rgba(0, 128, 0, 0.3)\';\n    } else {\n      statusDisplay.textContent = \'🎮 Поиск...\';\n      statusDisplay.style.backgroundColor = \'rgba(128, 0, 0, 0.3)\';\n    }\n  }\n\n  // Обновляем количество объектов\n  if (objectsDisplay) {\n    var objectCount = Object.keys(objects_objects).length;\n    objectsDisplay.textContent = "\\uD83C\\uDF0D ".concat(objectCount);\n  }\n\n  // Обновляем цвет скорости в зависимости от значения\n  if (speed < 20) {\n    speedDisplay.style.backgroundColor = \'rgba(0, 128, 0, 0.5)\'; // Зеленый - низкая скорость\n  } else if (speed < 50) {\n    speedDisplay.style.backgroundColor = \'rgba(255, 165, 0, 0.5)\'; // Оранжевый - средняя скорость\n  } else {\n    speedDisplay.style.backgroundColor = \'rgba(255, 0, 0, 0.5)\'; // Красный - высокая скорость\n  }\n\n  // Обновляем цвет массы в зависимости от значения\n  if (mass < 10) {\n    massDisplay.style.backgroundColor = \'rgba(0, 255, 255, 0.5)\'; // Голубой - легкая\n  } else if (mass < 20) {\n    massDisplay.style.backgroundColor = \'rgba(128, 128, 0, 0.5)\'; // Желтый - средняя\n  } else {\n    massDisplay.style.backgroundColor = \'rgba(255, 0, 255, 0.5)\'; // Фиолетовый - тяжелая\n  }\n}\n\n// Обновляем функцию updatePhysicsObjects для отображения скорости\nfunction updatePhysicsObjects(useServerPhysics) {\n  if (!localPhysicsWorld) return;\n  var playerFound = false;\n  var debugInfo = {};\n  for (var id in objects_objects) {\n    var obj = objects_objects[id];\n    if (!obj.mesh) continue;\n    switch (obj.physicsBy) {\n      case "ammo":\n        updateAmmoPhysics(obj);\n        break;\n      case "bullet":\n        updateBulletPhysics(obj);\n        break;\n      case "both":\n        updateHybridPhysics(obj);\n        break;\n    }\n\n    // Обновляем отображение скорости для основного игрока\n    var playerObjectID = gamestatemanager.getPlayerObjectID();\n\n    // Отладочная информация\n    if (!playerFound) {\n      debugInfo = {\n        playerObjectID: playerObjectID,\n        currentId: id,\n        hasBody: !!obj.body,\n        objectType: obj.object_type,\n        totalObjects: Object.keys(objects_objects).length\n      };\n    }\n    if (playerObjectID && id === playerObjectID && obj.body) {\n      playerFound = true;\n      var velocity = obj.body.getLinearVelocity();\n      var speed = Math.sqrt(velocity.x() * velocity.x() + velocity.y() * velocity.y() + velocity.z() * velocity.z());\n\n      // Проверяем наличие массы и логируем ошибку если её нет\n      if (obj.mass === undefined || obj.mass === null) {\n        console.error("[Physics] \\u041C\\u0430\\u0441\\u0441\\u0430 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 \\u0438\\u0433\\u0440\\u043E\\u043A\\u0430 ".concat(id, " \\u043D\\u0435 \\u043E\\u043F\\u0440\\u0435\\u0434\\u0435\\u043B\\u0435\\u043D\\u0430! obj.mass:"), obj.mass);\n        window.Ammo.destroy(velocity);\n        return;\n      }\n\n      // Обновляем отображение скорости\n      updatePlayerSpeedDisplay(speed, obj.mass, obj.radius);\n\n      // Обновляем индикатор физики\n      updatePhysicsModeDisplay(useServerPhysics);\n      window.Ammo.destroy(velocity);\n    }\n  }\n\n  // Если игрока не найдено, но есть объекты - попробуем найти первый объект типа "sphere"\n  if (!playerFound && Object.keys(objects_objects).length > 0) {\n    for (var _id in objects_objects) {\n      var _obj = objects_objects[_id];\n      if (_obj.object_type === "sphere" && _obj.body) {\n        var _velocity = _obj.body.getLinearVelocity();\n        var _speed = Math.sqrt(_velocity.x() * _velocity.x() + _velocity.y() * _velocity.y() + _velocity.z() * _velocity.z());\n\n        // Проверяем наличие массы\n        if (_obj.mass === undefined || _obj.mass === null) {\n          console.error("[Physics] \\u041C\\u0430\\u0441\\u0441\\u0430 \\u0440\\u0435\\u0437\\u0435\\u0440\\u0432\\u043D\\u043E\\u0439 \\u0441\\u0444\\u0435\\u0440\\u044B ".concat(_id, " \\u043D\\u0435 \\u043E\\u043F\\u0440\\u0435\\u0434\\u0435\\u043B\\u0435\\u043D\\u0430! obj.mass:"), _obj.mass);\n          window.Ammo.destroy(_velocity);\n          continue; // Попробуем следующую сферу\n        }\n        updatePlayerSpeedDisplay(_speed, _obj.mass, _obj.radius);\n        updatePhysicsModeDisplay(useServerPhysics);\n        window.Ammo.destroy(_velocity);\n        foundPlayer = true;\n        break;\n      }\n    }\n  }\n}\n\n// Обновление объектов с чистой клиентской физикой\nfunction updateAmmoPhysics(obj) {\n  if (!obj.body || obj.object_type === "terrain") return;\n  var trans = new window.Ammo.btTransform();\n  obj.body.getMotionState().getWorldTransform(trans);\n  obj.mesh.position.set(trans.getOrigin().x(), trans.getOrigin().y(), trans.getOrigin().z());\n  obj.mesh.quaternion.set(trans.getRotation().x(), trans.getRotation().y(), trans.getRotation().z(), trans.getRotation().w());\n  window.Ammo.destroy(trans);\n}\n\n// Обновление объектов с серверной физикой\nfunction updateBulletPhysics(obj) {\n  if (!obj.serverPos || obj.object_type === "terrain") return;\n  obj.mesh.position.set(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z);\n}\n\n// Функция для добавления обновления в буфер\nfunction addUpdateToBuffer(id, position, velocity, timestamp) {\n  // Инициализируем буферы для объекта, если их ещё нет\n  if (!serverUpdateBuffer.positions[id]) {\n    serverUpdateBuffer.positions[id] = [];\n    serverUpdateBuffer.velocities[id] = [];\n    serverUpdateBuffer.timestamps[id] = [];\n  }\n\n  // Добавляем новое обновление\n  if (position) {\n    serverUpdateBuffer.positions[id].push(_objectSpread(_objectSpread({}, position), {}, {\n      time: timestamp\n    }));\n    // Ограничиваем размер буфера\n    if (serverUpdateBuffer.positions[id].length > PHYSICS_SETTINGS.BUFFER.SIZE) {\n      serverUpdateBuffer.positions[id].shift();\n    }\n  }\n  if (velocity) {\n    serverUpdateBuffer.velocities[id].push(_objectSpread(_objectSpread({}, velocity), {}, {\n      time: timestamp\n    }));\n    // Ограничиваем размер буфера\n    if (serverUpdateBuffer.velocities[id].length > PHYSICS_SETTINGS.BUFFER.SIZE) {\n      serverUpdateBuffer.velocities[id].shift();\n    }\n  }\n  serverUpdateBuffer.timestamps[id].push(timestamp);\n  // Ограничиваем размер буфера\n  if (serverUpdateBuffer.timestamps[id].length > PHYSICS_SETTINGS.BUFFER.SIZE) {\n    serverUpdateBuffer.timestamps[id].shift();\n  }\n}\n\n// Функция для получения сглаженной позиции из буфера\nfunction getSmoothPositionFromBuffer(id) {\n  var positions = serverUpdateBuffer.positions[id];\n  if (!positions || positions.length < PHYSICS_SETTINGS.BUFFER.MIN_UPDATES) {\n    return null;\n  }\n\n  // Для авторитарного сервера всегда возвращаем последнюю позицию\n  return positions[positions.length - 1];\n}\n\n// Функция для получения сглаженной скорости из буфера\nfunction getSmoothVelocityFromBuffer(id) {\n  var velocities = serverUpdateBuffer.velocities[id];\n  if (!velocities || velocities.length < PHYSICS_SETTINGS.BUFFER.MIN_UPDATES) {\n    return null;\n  }\n\n  // Для авторитарного сервера всегда возвращаем последнюю скорость\n  return velocities[velocities.length - 1];\n}\n\n// Улучшенная система интерполяции с предсказанием и сглаживанием\n\n// Hermite интерполяция для плавного движения\nfunction hermiteInterpolate(p0, p1, v0, v1, t) {\n  var tension = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  var bias = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n  var t2 = t * t;\n  var t3 = t2 * t;\n\n  // Hermite базисные функции\n  var h1 = 2 * t3 - 3 * t2 + 1;\n  var h2 = -2 * t3 + 3 * t2;\n  var h3 = t3 - 2 * t2 + t;\n  var h4 = t3 - t2;\n\n  // Применяем tension и bias к касательным векторам\n  var m0 = (1 + bias) * (1 - tension) * 0.5;\n  var m1 = (1 - bias) * (1 - tension) * 0.5;\n  var tangent0 = {\n    x: m0 * (p1.x - p0.x),\n    y: m0 * (p1.y - p0.y),\n    z: m0 * (p1.z - p0.z)\n  };\n  var tangent1 = {\n    x: m1 * (p1.x - p0.x),\n    y: m1 * (p1.y - p0.y),\n    z: m1 * (p1.z - p0.z)\n  };\n  return {\n    x: h1 * p0.x + h2 * p1.x + h3 * tangent0.x + h4 * tangent1.x,\n    y: h1 * p0.y + h2 * p1.y + h3 * tangent0.y + h4 * tangent1.y,\n    z: h1 * p0.z + h2 * p1.z + h3 * tangent0.z + h4 * tangent1.z\n  };\n}\n\n// Экстраполяция позиции на основе скорости и ускорения\nfunction extrapolatePosition(position, velocity, acceleration, deltaTime) {\n  // Ограничиваем ускорение для предотвращения выбросов\n  var accelMagnitude = Math.sqrt(acceleration.x * acceleration.x + acceleration.y * acceleration.y + acceleration.z * acceleration.z);\n  var limitedAccel = acceleration;\n  if (accelMagnitude > PHYSICS_SETTINGS.SMOOTHING.ACCELERATION_LIMIT) {\n    var scale = PHYSICS_SETTINGS.SMOOTHING.ACCELERATION_LIMIT / accelMagnitude;\n    limitedAccel = {\n      x: acceleration.x * scale,\n      y: acceleration.y * scale,\n      z: acceleration.z * scale\n    };\n  }\n\n  // Кинематическое уравнение: s = s0 + v*t + 0.5*a*t²\n  var dt2 = deltaTime * deltaTime * 0.5;\n  return {\n    x: position.x + velocity.x * deltaTime + limitedAccel.x * dt2,\n    y: position.y + velocity.y * deltaTime + limitedAccel.y * dt2,\n    z: position.z + velocity.z * deltaTime + limitedAccel.z * dt2\n  };\n}\n\n// Экспоненциальное сглаживание для уменьшения джиттера\nfunction exponentialSmoothing(current, target, alpha) {\n  return {\n    x: current.x + alpha * (target.x - current.x),\n    y: current.y + alpha * (target.y - current.y),\n    z: current.z + alpha * (target.z - current.z)\n  };\n}\n\n// Вычисление ускорения на основе изменения скорости\nfunction calculateAcceleration(obj) {\n  var velocities = serverUpdateBuffer.velocities[obj.id];\n  if (!velocities || velocities.length < 2) {\n    return {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n  }\n  var current = velocities[velocities.length - 1];\n  var previous = velocities[velocities.length - 2];\n  var deltaTime = (current.time - previous.time) / 1000.0; // в секундах\n\n  if (deltaTime <= 0) {\n    return {\n      x: 0,\n      y: 0,\n      z: 0\n    };\n  }\n  return {\n    x: (current.x - previous.x) / deltaTime,\n    y: (current.y - previous.y) / deltaTime,\n    z: (current.z - previous.z) / deltaTime\n  };\n}\n\n// Адаптивный выбор алгоритма интерполяции на основе сетевых условий\nfunction physics_getInterpolationStrategy(ping, jitter) {\n  // Используем реальный джиттер, если он не передан\n  var actualJitter = jitter !== undefined ? jitter : physics_getSmoothedJitter();\n\n  // Определяем стратегию на основе сетевых условий\n  var strategy;\n  if (ping > PHYSICS_SETTINGS.NETWORK.MAX_PING || actualJitter > PHYSICS_SETTINGS.NETWORK.JITTER_THRESHOLD) {\n    strategy = \'extrapolation\'; // При плохой сети используем экстраполяцию\n  } else if (ping > 100 || actualJitter > 25) {\n    strategy = \'hermite\'; // При среднем пинге используем Hermite\n  } else {\n    strategy = \'linear\'; // При хорошей сети используем линейную интерполяцию\n  }\n\n  // Проверяем, изменилась ли стратегия\n  if (strategy !== physics_networkMonitor.adaptationState.currentStrategy) {\n    physics_networkMonitor.adaptationState.currentStrategy = strategy;\n    physics_networkMonitor.adaptationState.lastStrategyChange = Date.now();\n    physics_networkMonitor.adaptationState.isAdapting = true;\n\n    // При смене стратегии сбрасываем состояние всех объектов для быстрой синхронизации\n    for (var id in objects_objects) {\n      var obj = objects_objects[id];\n      if (obj && obj.physicsBy === "both") {\n        resetObjectState(obj);\n      }\n    }\n  }\n  return strategy;\n}\n\n// Функция для адаптации параметров сглаживания в зависимости от пинга и джиттера\nfunction getAdaptiveInterpolationParams() {\n  var ping = getCurrentPing();\n  var jitter = physics_getSmoothedJitter();\n  var currentTime = Date.now();\n\n  // УСКОРЕННАЯ адаптация: измеряем джиттер каждые 200мс вместо 500мс\n  if (currentTime - physics_networkMonitor.lastPingMeasurement > 200) {\n    measureJitter();\n    physics_networkMonitor.lastPingMeasurement = currentTime;\n  }\n\n  // Детектируем изменения сети\n  var networkChanged = detectNetworkChange();\n\n  // Базовые параметры\n  var targetParams = {\n    blendFactor: PHYSICS_SETTINGS.INTERPOLATION.BASE_BLEND_FACTOR,\n    correctionStrength: PHYSICS_SETTINGS.INTERPOLATION.CORRECTION_STRENGTH,\n    teleportThreshold: PHYSICS_SETTINGS.PREDICTION.TELEPORT_THRESHOLD,\n    positionAlpha: PHYSICS_SETTINGS.SMOOTHING.POSITION_ALPHA,\n    velocityAlpha: PHYSICS_SETTINGS.SMOOTHING.VELOCITY_ALPHA\n  };\n\n  // В режиме быстрой сходимости используем агрессивные параметры\n  if (physics_networkMonitor.adaptationState.fastConvergenceMode) {\n    targetParams.blendFactor = 0.8; // Очень высокий фактор смешивания\n    targetParams.correctionStrength *= 2.0; // Удваиваем силу коррекции\n    targetParams.teleportThreshold *= 0.5; // Уменьшаем порог телепортации\n    targetParams.positionAlpha = PHYSICS_SETTINGS.ADAPTATION.AGGRESSIVE_ALPHA;\n    targetParams.velocityAlpha = PHYSICS_SETTINGS.ADAPTATION.AGGRESSIVE_ALPHA;\n  }\n  // Адаптируем параметры на основе пинга и джиттера\n  else if (ping > PHYSICS_SETTINGS.NETWORK.MAX_PING || jitter > PHYSICS_SETTINGS.NETWORK.JITTER_THRESHOLD) {\n    // Плохие сетевые условия - максимальное сглаживание\n    targetParams.blendFactor = PHYSICS_SETTINGS.INTERPOLATION.MIN_BLEND_FACTOR;\n    targetParams.correctionStrength *= 0.3;\n    targetParams.teleportThreshold *= 2.5;\n    targetParams.positionAlpha *= 0.4;\n    targetParams.velocityAlpha *= 0.6;\n  } else if (ping > 150 || jitter > 25) {\n    // Средние условия - умеренное сглаживание\n    var pingFactor = Math.min((ping - 50) / (PHYSICS_SETTINGS.NETWORK.MAX_PING - 50), 1.0);\n    var jitterFactor = Math.min(jitter / PHYSICS_SETTINGS.NETWORK.JITTER_THRESHOLD, 1.0);\n    var combinedFactor = Math.max(pingFactor, jitterFactor);\n    targetParams.blendFactor = lerp(PHYSICS_SETTINGS.INTERPOLATION.BASE_BLEND_FACTOR, PHYSICS_SETTINGS.INTERPOLATION.MIN_BLEND_FACTOR, combinedFactor);\n    targetParams.correctionStrength *= 1 - combinedFactor * 0.7;\n    targetParams.teleportThreshold *= 1 + combinedFactor * 1.5;\n    targetParams.positionAlpha *= 1 - combinedFactor * 0.6;\n    targetParams.velocityAlpha *= 1 - combinedFactor * 0.4;\n  }\n\n  // Если мы в процессе обычной адаптации (не быстрой), используем умеренно агрессивные параметры\n  if (physics_networkMonitor.adaptationState.isAdapting && !physics_networkMonitor.adaptationState.fastConvergenceMode) {\n    targetParams.correctionStrength *= 1.5; // Увеличиваем коррекцию\n    targetParams.positionAlpha *= 1.3; // Ускоряем сглаживание\n    targetParams.velocityAlpha *= 1.2;\n    targetParams.teleportThreshold *= 0.8; // Более частые телепортации\n  }\n\n  // УСКОРЕННАЯ адаптация параметров: плавно переходим к новым параметрам\n  var adaptationSpeed;\n  if (physics_networkMonitor.adaptationState.fastConvergenceMode) {\n    adaptationSpeed = 0.8; // Очень быстрая адаптация в первые секунды\n  } else if (physics_networkMonitor.adaptationState.isAdapting) {\n    adaptationSpeed = 0.6; // УСКОРЕНО: с 0.4 до 0.6 - быстрая адаптация\n  } else {\n    adaptationSpeed = 0.3; // УСКОРЕНО: с 0.1 до 0.3 - отзывчивый стабильный режим\n  }\n  physics_networkMonitor.smoothedParams.positionAlpha = lerp(physics_networkMonitor.smoothedParams.positionAlpha, targetParams.positionAlpha, adaptationSpeed);\n  physics_networkMonitor.smoothedParams.velocityAlpha = lerp(physics_networkMonitor.smoothedParams.velocityAlpha, targetParams.velocityAlpha, adaptationSpeed);\n  physics_networkMonitor.smoothedParams.correctionStrength = lerp(physics_networkMonitor.smoothedParams.correctionStrength, targetParams.correctionStrength, adaptationSpeed);\n  physics_networkMonitor.smoothedParams.teleportThreshold = lerp(physics_networkMonitor.smoothedParams.teleportThreshold, targetParams.teleportThreshold, adaptationSpeed);\n\n  // Возвращаем сглаженные параметры\n  return {\n    blendFactor: targetParams.blendFactor,\n    correctionStrength: physics_networkMonitor.smoothedParams.correctionStrength,\n    teleportThreshold: physics_networkMonitor.smoothedParams.teleportThreshold,\n    positionAlpha: physics_networkMonitor.smoothedParams.positionAlpha,\n    velocityAlpha: physics_networkMonitor.smoothedParams.velocityAlpha,\n    // Дополнительные флаги для отладки\n    isAdapting: physics_networkMonitor.adaptationState.isAdapting,\n    fastConvergenceMode: physics_networkMonitor.adaptationState.fastConvergenceMode,\n    ping: ping,\n    jitter: jitter\n  };\n}\n\n// Вспомогательная функция линейной интерполяции\nfunction lerp(a, b, t) {\n  return a + (b - a) * Math.max(0, Math.min(1, t));\n}\n\n// Полностью переработанная функция обновления гибридной физики\nfunction updateHybridPhysics(obj) {\n  if (!obj.body || obj.object_type === "terrain") return;\n  var useServerPhysics = checkConnectionState();\n  var currentTime = Date.now();\n  var timeSinceUpdate = obj.lastServerUpdate ? currentTime - obj.lastServerUpdate : Infinity;\n\n  // Получаем текущую локальную позицию\n  var trans = new window.Ammo.btTransform();\n  obj.body.getMotionState().getWorldTransform(trans);\n  var currentPos = {\n    x: trans.getOrigin().x(),\n    y: trans.getOrigin().y(),\n    z: trans.getOrigin().z()\n  };\n\n  // Если нет соединения или данные устарели, используем локальную физику\n  if (!useServerPhysics || !obj.serverPos || timeSinceUpdate > PHYSICS_SETTINGS.NETWORK.TIMEOUT) {\n    obj.mesh.position.set(currentPos.x, currentPos.y, currentPos.z);\n    obj.body.activate(true);\n    window.Ammo.destroy(trans);\n    return;\n  }\n  var serverPos = obj.serverPos;\n  var ping = getCurrentPing();\n  var adaptiveParams = getAdaptiveInterpolationParams();\n\n  // Вычисляем расстояние между позициями\n  var distance = Math.sqrt(Math.pow(currentPos.x - serverPos.x, 2) + Math.pow(currentPos.y - serverPos.y, 2) + Math.pow(currentPos.z - serverPos.z, 2));\n\n  // АДАПТИВНАЯ мертвая зона на основе размера объекта\n  var objectRadius = obj.radius || 3.0; // Используем радиус объекта или значение по умолчанию\n\n  // УВЕЛИЧЕННАЯ Базовая мертвая зона: 200% радиуса (100% диаметра) для крупных объектов\n  var adaptiveDeadZone = Math.max(PHYSICS_SETTINGS.INTERPOLATION.DEAD_ZONE * 0.1,\n  // Минимум 1.2 единицы\n  objectRadius * 2.0 // УВЕЛИЧЕНО: с 1.5 до 2.0 (100% от диаметра вместо 75%)\n  );\n\n  // КРИТИЧЕСКАЯ ДИАГНОСТИКА: Выводим базовые значения\n  if (Math.random() < 0.1) {\n    // 10% вероятность для отладки\n    console.log("[\\u0414\\u0418\\u0410\\u0413\\u041D\\u041E\\u0421\\u0422\\u0418\\u041A\\u0410] \\u0411\\u0430\\u0437\\u043E\\u0432\\u044B\\u0435 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u044F: radius=".concat(objectRadius.toFixed(1), ", baseDeadZone=").concat(adaptiveDeadZone.toFixed(2), ", distance=").concat(distance.toFixed(2)));\n  }\n\n  // СПЕЦИАЛЬНАЯ ОБРАБОТКА для свободного падения и вертикального движения\n  var verticalDistance = Math.abs(currentPos.y - serverPos.y);\n  var horizontalDistance = Math.sqrt(Math.pow(currentPos.x - serverPos.x, 2) + Math.pow(currentPos.z - serverPos.z, 2));\n\n  // Если вертикальная составляющая большая (падение/прыжок), увеличиваем мертвую зону\n  if (verticalDistance > objectRadius * 1.0) {\n    // Если Y-расхождение больше радиуса\n    var verticalBonus = verticalDistance * 0.5; // Добавляем 50% от вертикального расхождения\n    adaptiveDeadZone += verticalBonus;\n    if (Math.random() < 0.05) {\n      // 5% вероятность для диагностики падения\n      console.log("[\\u0414\\u0418\\u0410\\u0413\\u041D\\u041E\\u0421\\u0422\\u0418\\u041A\\u0410] \\u0421\\u0432\\u043E\\u0431\\u043E\\u0434\\u043D\\u043E\\u0435 \\u043F\\u0430\\u0434\\u0435\\u043D\\u0438\\u0435: verticalDist=".concat(verticalDistance.toFixed(2), ", bonus=+").concat(verticalBonus.toFixed(2), ", newDeadZone=").concat(adaptiveDeadZone.toFixed(2)));\n    }\n  }\n\n  // УСИЛЕННЫЙ БОНУС при плохой сети: увеличиваем мертвую зону еще на 100%\n  var jitter = physics_getSmoothedJitter();\n  if (jitter > PHYSICS_SETTINGS.NETWORK.JITTER_THRESHOLD) {\n    var oldZone = adaptiveDeadZone;\n    adaptiveDeadZone *= 2.0; // УВЕЛИЧЕНО: с 1.5 до 2.0 при джиттере >50мс\n\n    if (Math.random() < 0.05) {\n      // 5% вероятность для диагностики джиттера\n      console.log("[\\u0414\\u0418\\u0410\\u0413\\u041D\\u041E\\u0421\\u0422\\u0418\\u041A\\u0410] \\u0414\\u0436\\u0438\\u0442\\u0442\\u0435\\u0440-\\u0431\\u043E\\u043D\\u0443\\u0441: jitter=".concat(jitter.toFixed(1), "ms, oldZone=").concat(oldZone.toFixed(2), " \\u2192 newZone=").concat(adaptiveDeadZone.toFixed(2)));\n    }\n  }\n\n  // СКОРОСТНОЙ БОНУС: быстрые объекты могут иметь большие расхождения из-за экстраполяции\n  var currentVel = obj.body.getLinearVelocity();\n  var speed = Math.sqrt(currentVel.x() * currentVel.x() + currentVel.y() * currentVel.y() + currentVel.z() * currentVel.z());\n  window.Ammo.destroy(currentVel);\n\n  // При скорости >30м/с добавляем бонус: скорость/8 единиц к мертвой зоне (было /10)\n  // Например: 40м/с → +5 единиц, 80м/с → +10 единиц\n  if (speed > 30) {\n    var speedBonus = (speed - 30) / 8; // УЛУЧШЕНО: порог с 50 до 30, делитель с 10 до 8\n    adaptiveDeadZone += speedBonus;\n  }\n\n  // ОСОБАЯ ЛОГИКА для объектов с недавним изменением размера\n  var timeSinceLastUpdate = obj.lastServerUpdate ? currentTime - obj.lastServerUpdate : 0;\n  if (timeSinceLastUpdate < 1000) {\n    // Если размер менялся в последнюю секунду\n    adaptiveDeadZone *= 1.5; // Увеличиваем зону на 50% для стабилизации\n  }\n\n  // СПЕЦИАЛЬНАЯ ЛОГИКА ДЛЯ ВЗАИМОДЕЙСТВИЯ С ТЕРРЕЙНОМ\n  // Если в мире есть объекты террейна и сфера движется быстро по Y - увеличиваем зону\n  var hasTerrainNearby = Object.values(objects_objects).some(function (o) {\n    return o.object_type === "terrain";\n  });\n\n  // ИСПРАВЛЯЕМ: Получаем вертикальную скорость из правильного источника  \n  var verticalSpeed = Math.abs(obj.serverVelocity ? obj.serverVelocity.y : 0);\n  if (hasTerrainNearby && (verticalSpeed > 10 || verticalDistance > objectRadius * 0.5)) {\n    var terrainBonus = Math.max(objectRadius * 0.5, verticalSpeed * 0.3);\n    adaptiveDeadZone += terrainBonus;\n    if (Math.random() < 0.03) {\n      // 3% вероятность для диагностики террейна\n      console.log("[\\u0414\\u0418\\u0410\\u0413\\u041D\\u041E\\u0421\\u0422\\u0418\\u041A\\u0410] \\u0422\\u0435\\u0440\\u0440\\u0435\\u0439\\u043D-\\u0431\\u043E\\u043D\\u0443\\u0441: verticalSpeed=".concat(verticalSpeed.toFixed(1), "\\u043C/\\u0441, terrainBonus=+").concat(terrainBonus.toFixed(2), ", finalDeadZone=").concat(adaptiveDeadZone.toFixed(2)));\n    }\n  }\n\n  // ФИНАЛЬНАЯ ДИАГНОСТИКА: выводим итоговую мертвую зону для крупных объектов\n  if (objectRadius > 10) {\n    console.log("[\\u0414\\u0418\\u0410\\u0413\\u041D\\u041E\\u0421\\u0422\\u0418\\u041A\\u0410] \\u0418\\u0422\\u041E\\u0413\\u041E \\u0434\\u043B\\u044F radius=".concat(objectRadius.toFixed(1), ": distance=").concat(distance.toFixed(2), " vs deadZone=").concat(adaptiveDeadZone.toFixed(2), " (\\u0431\\u044B\\u043B\\u043E 18.10)"));\n  }\n\n  // Обновляем статистику стабильности\n  updateStabilityStats(distance);\n\n  // Применяем серверную скорость с сглаживанием\n  var smoothVelocityFromBuffer = getSmoothVelocityFromBuffer(obj.id) || obj.serverVelocity;\n  if (smoothVelocityFromBuffer) {\n    // Экспоненциальное сглаживание скорости для уменьшения рывков\n    var _currentVel = obj.body.getLinearVelocity();\n    var currentVelObj = {\n      x: _currentVel.x(),\n      y: _currentVel.y(),\n      z: _currentVel.z()\n    };\n    var smoothedVel = exponentialSmoothing(currentVelObj, smoothVelocityFromBuffer, adaptiveParams.velocityAlpha);\n    var velocity = new window.Ammo.btVector3(smoothedVel.x, smoothedVel.y, smoothedVel.z);\n    obj.body.setLinearVelocity(velocity);\n    obj.body.activate(true);\n    window.Ammo.destroy(velocity);\n    window.Ammo.destroy(_currentVel);\n  }\n\n  // КРИТИЧЕСКИЙ ФИКС: Понижаем пороги телепортации для больших расхождений\n  // Получаем пороги телепортации\n  var baseTeleportThreshold = Math.min(adaptiveParams.teleportThreshold, objectRadius * 5.0);\n  var emergencyTeleportThreshold = objectRadius * 10.0; // Экстренная телепортация при 10 диаметрах\n\n  // ПРИНУДИТЕЛЬНАЯ ДИАГНОСТИКА телепортации для критических случаев\n  if (distance > 50) {\n    console.log("[\\u041A\\u0420\\u0418\\u0422\\u0418\\u0427\\u041D\\u041E] \\u041E\\u0433\\u0440\\u043E\\u043C\\u043D\\u043E\\u0435 \\u0440\\u0430\\u0441\\u0445\\u043E\\u0436\\u0434\\u0435\\u043D\\u0438\\u0435: distance=".concat(distance.toFixed(2), ", baseTeleport=").concat(baseTeleportThreshold.toFixed(2), ", emergencyTeleport=").concat(emergencyTeleportThreshold.toFixed(2), ", objectRadius=").concat(objectRadius.toFixed(1)));\n  }\n\n  // Агрессивная телепортация при больших расхождениях или в режиме быстрой сходимости\n  if (distance > baseTeleportThreshold || distance > emergencyTeleportThreshold || physics_networkMonitor.adaptationState.fastConvergenceMode && distance > PHYSICS_SETTINGS.ADAPTATION.RESET_THRESHOLD) {\n    // ВСЕГДА логируем телепортации при больших расхождениях\n    console.log("[\\u0422\\u0415\\u041B\\u0415\\u041F\\u041E\\u0420\\u0422\\u0410\\u0426\\u0418\\u042F] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(obj.id, ": distance=").concat(distance.toFixed(2), ", threshold=").concat(baseTeleportThreshold.toFixed(2), ", emergency=").concat(emergencyTeleportThreshold.toFixed(2)));\n    var newTransform = new window.Ammo.btTransform();\n    newTransform.setIdentity();\n    newTransform.setOrigin(new window.Ammo.btVector3(serverPos.x, serverPos.y, serverPos.z));\n    obj.body.getMotionState().setWorldTransform(newTransform);\n    obj.mesh.position.set(serverPos.x, serverPos.y, serverPos.z);\n\n    // Сброс скорости при телепортации после долгого отсутствия обновлений\n    if (timeSinceUpdate > PHYSICS_SETTINGS.NETWORK.UPDATE_INTERVAL * 2) {\n      var zeroVelocity = new window.Ammo.btVector3(0, 0, 0);\n      obj.body.setLinearVelocity(zeroVelocity);\n      window.Ammo.destroy(zeroVelocity);\n    }\n    window.Ammo.destroy(newTransform);\n\n    // Обнуляем счетчики после телепортации\n    obj.lastCorrectionTime = currentTime;\n    return; // Выходим после телепортации\n  }\n  // Мертвая зона - минимальные корректировки\n  else if (distance < adaptiveDeadZone) {\n    // УСИЛЕННАЯ ДИАГНОСТИКА: Всегда логируем для крупных объектов\n    if (objectRadius > 10 || Math.random() < 0.01) {\n      // Всегда для радиуса >10 или 1% для остальных\n      console.log("[\\u0414\\u0418\\u0410\\u0413\\u041D\\u041E\\u0421\\u0422\\u0418\\u041A\\u0410] \\u041C\\u0435\\u0440\\u0442\\u0432\\u0430\\u044F \\u0437\\u043E\\u043D\\u0430: distance=".concat(distance.toFixed(2), ", adaptiveDeadZone=").concat(adaptiveDeadZone.toFixed(2), " (radius=").concat(objectRadius.toFixed(1), ", speed=").concat(speed.toFixed(1), "\\u043C/\\u0441, vertical=").concat(verticalDistance ? verticalDistance.toFixed(2) : \'?\', ")"));\n    }\n\n    // МЯГКАЯ коррекция в мертвой зоне\n    var timeSinceLastCorrection = currentTime - (obj.lastCorrectionTime || 0);\n    var shouldCorrect = timeSinceLastCorrection > 500; // Редкая мягкая коррекция раз в 500мс\n\n    if (shouldCorrect) {\n      // Очень мягкая коррекция\n      var smoothingFactor = 0.05;\n      var smoothedPos = exponentialSmoothing(currentPos, serverPos, smoothingFactor);\n      obj.mesh.position.set(smoothedPos.x, smoothedPos.y, smoothedPos.z);\n\n      // Очень мягкая коррекция физического тела\n      var _newTransform = new window.Ammo.btTransform();\n      obj.body.getMotionState().getWorldTransform(_newTransform);\n      _newTransform.setOrigin(new window.Ammo.btVector3(smoothedPos.x, smoothedPos.y, smoothedPos.z));\n      obj.body.getMotionState().setWorldTransform(_newTransform);\n      window.Ammo.destroy(_newTransform);\n      obj.lastCorrectionTime = currentTime;\n    } else {\n      // Просто показываем локальную позицию\n      obj.mesh.position.set(currentPos.x, currentPos.y, currentPos.z);\n    }\n  }\n  // Основная интерполяция с адаптивными алгоритмами\n  else {\n    // ДИАГНОСТИКА: Логируем попадание в зону агрессивной коррекции\n    if (Math.random() < 0.01) {\n      // 1% вероятность\n      console.log("[\\u0414\\u0418\\u0410\\u0413\\u041D\\u041E\\u0421\\u0422\\u0418\\u041A\\u0410] \\u0417\\u043E\\u043D\\u0430 \\u043A\\u043E\\u0440\\u0440\\u0435\\u043A\\u0446\\u0438\\u0438: distance=".concat(distance.toFixed(2), ", adaptiveDeadZone=").concat(adaptiveDeadZone.toFixed(2), ", teleportThreshold=").concat(adaptiveParams.teleportThreshold.toFixed(2)));\n    }\n\n    // АДАПТИВНЫЙ интервал коррекции на основе скорости объекта\n    // Используем уже вычисленную скорость из адаптивной мертвой зоны\n\n    // Быстрые объекты корректируются чаще: 100мс при 100м/с, 300мс при 20м/с  \n    var adaptiveCorrectionInterval = Math.max(100, Math.min(300, 400 - speed * 2));\n\n    // АДАПТИВНОЕ увеличение интервала при стабильно больших расхождениях\n    // Если расхождение больше 1.5 радиуса и близко к границе телепортации - делаем коррекцию реже\n    if (distance > objectRadius * 1.5 && distance < adaptiveParams.teleportThreshold * 0.8) {\n      adaptiveCorrectionInterval *= 1.5; // Увеличиваем интервал в 1.5 раза (450мс вместо 300мс)\n    }\n\n    // АГРЕССИВНАЯ КОРРЕКЦИЯ: Когда расхождение больше мертвой зоны\n    // Проверяем, не было ли недавней коррекции\n    var _timeSinceLastCorrection = currentTime - (obj.lastCorrectionTime || 0);\n    var _shouldCorrect = _timeSinceLastCorrection > adaptiveCorrectionInterval;\n    if (_shouldCorrect) {\n      // ПЛАВНАЯ коррекция вместо агрессивной телепортации\n      var timestamp = new Date().toLocaleTimeString() + \'.\' + String(Date.now() % 1000).padStart(3, \'0\');\n      console.log("[Physics] ".concat(timestamp, " \\u041F\\u043B\\u0430\\u0432\\u043D\\u0430\\u044F \\u043A\\u043E\\u0440\\u0440\\u0435\\u043A\\u0446\\u0438\\u044F \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ").concat(obj.id, ": distance=").concat(distance.toFixed(2), ", interval=").concat(adaptiveCorrectionInterval, "ms, speed=").concat(speed.toFixed(1), "\\u043C/\\u0441, radius=").concat(objectRadius.toFixed(1)));\n\n      // Плавное движение к серверной позиции\n      var _smoothingFactor = 0.2; // Более плавное сглаживание для крупных объектов\n      var _smoothedPos = exponentialSmoothing(currentPos, serverPos, _smoothingFactor);\n\n      // Обновляем визуальную позицию\n      obj.mesh.position.set(_smoothedPos.x, _smoothedPos.y, _smoothedPos.z);\n\n      // Мягкая коррекция физического тела\n      var _newTransform2 = new window.Ammo.btTransform();\n      obj.body.getMotionState().getWorldTransform(_newTransform2);\n      _newTransform2.setOrigin(new window.Ammo.btVector3(_smoothedPos.x, _smoothedPos.y, _smoothedPos.z));\n      obj.body.getMotionState().setWorldTransform(_newTransform2);\n      window.Ammo.destroy(_newTransform2);\n\n      // Применяем сглаженную скорость\n      if (smoothVelocityFromBuffer) {\n        var _velocity2 = new window.Ammo.btVector3(smoothVelocityFromBuffer.x, smoothVelocityFromBuffer.y, smoothVelocityFromBuffer.z);\n        obj.body.setLinearVelocity(_velocity2);\n        window.Ammo.destroy(_velocity2);\n      }\n      obj.lastCorrectionTime = currentTime;\n    } else {\n      // ДИАГНОСТИКА: Логируем пропуск коррекции\n      if (Math.random() < 0.01) {\n        // 1% вероятность  \n        console.log("[\\u0414\\u0418\\u0410\\u0413\\u041D\\u041E\\u0421\\u0422\\u0418\\u041A\\u0410] \\u041F\\u0440\\u043E\\u043F\\u0443\\u0441\\u043A \\u043A\\u043E\\u0440\\u0440\\u0435\\u043A\\u0446\\u0438\\u0438: timeSinceLastCorrection=".concat(_timeSinceLastCorrection, "ms < ").concat(adaptiveCorrectionInterval, "ms"));\n      }\n      // Пропускаем коррекцию, используем локальную физику\n      obj.mesh.position.set(currentPos.x, currentPos.y, currentPos.z);\n    }\n  }\n  window.Ammo.destroy(trans);\n}\n\n// Обработка обновлений с сервера\nfunction receiveObjectUpdate(data) {\n  try {\n    if (!data.id) {\n      console.error("[Physics] Получены данные без id:", data);\n      return;\n    }\n    var obj = objects_objects[data.id];\n    if (!obj) {\n      console.error("[Physics] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, " \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D"));\n      return;\n    }\n\n    // Пропускаем обработку серверных данных для объектов с physicsBy: "ammo"\n    if (obj.physicsBy === "ammo") {\n      return;\n    }\n\n    // Проверяем, есть ли какие-либо данные для обновления\n    // Поддерживаем как старый формат (data.x), так и новый (data.position)\n    var hasPosition = data.position !== undefined || data.x !== undefined;\n    var hasVelocity = data.velocity !== undefined || data.vx !== undefined;\n    if (!hasPosition && !hasVelocity) {\n      return;\n    }\n\n    // Преобразуем данные в единый формат\n    var objectData = {\n      position: data.position || (data.x !== undefined ? {\n        x: data.x,\n        y: data.y,\n        z: data.z\n      } : undefined),\n      velocity: data.velocity || (data.vx !== undefined ? {\n        x: data.vx,\n        y: data.vy,\n        z: data.vz\n      } : undefined)\n    };\n    updateObjectFromServer(obj, objectData);\n  } catch (e) {\n    console.error("[Physics] Ошибка при обработке обновления:", e);\n  }\n}\n\n// Обновление объекта данными с сервера\nfunction updateObjectFromServer(obj, data) {\n  if (!data || !obj.id) {\n    return;\n  }\n  var currentTime = Date.now();\n\n  // Добавляем обновление в буфер для всех типов данных\n  if (data.position || data.velocity) {\n    addUpdateToBuffer(obj.id, data.position, data.velocity, currentTime);\n  }\n\n  // Обновляем серверную позицию\n  if (data.position) {\n    obj.serverPos = data.position;\n    obj.lastServerUpdate = currentTime;\n\n    // Для объектов с гибридной физикой применяем умную коррекцию\n    if (obj.physicsBy === "both" && obj.body) {\n      var trans = new window.Ammo.btTransform();\n      obj.body.getMotionState().getWorldTransform(trans);\n      var currentPos = {\n        x: trans.getOrigin().x(),\n        y: trans.getOrigin().y(),\n        z: trans.getOrigin().z()\n      };\n      var distance = Math.sqrt(Math.pow(currentPos.x - data.position.x, 2) + Math.pow(currentPos.y - data.position.y, 2) + Math.pow(currentPos.z - data.position.z, 2));\n\n      // Получаем адаптивные параметры для коррекции\n      var adaptiveParams = getAdaptiveInterpolationParams();\n\n      // Если коррекция критично важна (очень большое расхождение) - используем телепортацию\n      // ДИНАМИЧЕСКИЙ порог телепортации: больше для крупных объектов\n      var baseTeleportThreshold = PHYSICS_SETTINGS.INTERPOLATION.TELEPORT_THRESHOLD;\n      var objectRadius = obj.radius || 3.0;\n      var teleportThreshold = Math.max(baseTeleportThreshold, objectRadius * 3.0 // УВЕЛИЧЕНО: телепорт при расстоянии больше 3 диаметров\n      );\n      if (distance > teleportThreshold) {\n        trans.setOrigin(new window.Ammo.btVector3(data.position.x, data.position.y, data.position.z));\n        obj.body.getMotionState().setWorldTransform(trans);\n\n        // Применяем экспоненциальное сглаживание даже при телепортации\n        var smoothedPos = exponentialSmoothing(currentPos, data.position, 0.7);\n        obj.mesh.position.set(smoothedPos.x, smoothedPos.y, smoothedPos.z);\n      }\n      // Для меньших расхождений используем мягкую коррекцию\n      else if (distance > PHYSICS_SETTINGS.INTERPOLATION.DEAD_ZONE) {\n        var _smoothedPos2 = exponentialSmoothing(currentPos, data.position, adaptiveParams.positionAlpha);\n        obj.mesh.position.set(_smoothedPos2.x, _smoothedPos2.y, _smoothedPos2.z);\n      }\n      window.Ammo.destroy(trans);\n    }\n    // Для объектов с серверной физикой используем прямое обновление с сглаживанием\n    else if (obj.physicsBy === "bullet") {\n      var currentMeshPos = {\n        x: obj.mesh.position.x,\n        y: obj.mesh.position.y,\n        z: obj.mesh.position.z\n      };\n\n      // Применяем сглаживание даже для bullet объектов\n      var _smoothedPos3 = exponentialSmoothing(currentMeshPos, data.position, PHYSICS_SETTINGS.SMOOTHING.POSITION_ALPHA);\n      obj.mesh.position.set(_smoothedPos3.x, _smoothedPos3.y, _smoothedPos3.z);\n    }\n  }\n\n  // Обновляем серверную скорость с сглаживанием\n  if (data.velocity) {\n    // Применяем экспоненциальное сглаживание к скорости\n    if (obj.serverVelocity) {\n      obj.serverVelocity = exponentialSmoothing(obj.serverVelocity, data.velocity, PHYSICS_SETTINGS.SMOOTHING.VELOCITY_ALPHA);\n    } else {\n      obj.serverVelocity = data.velocity;\n    }\n\n    // Для гибридных объектов применяем сглаженную скорость к физическому телу\n    if (obj.physicsBy === "both" && obj.body) {\n      var currentVel = obj.body.getLinearVelocity();\n      var currentVelObj = {\n        x: currentVel.x(),\n        y: currentVel.y(),\n        z: currentVel.z()\n      };\n      var _adaptiveParams = getAdaptiveInterpolationParams();\n      var smoothedVel = exponentialSmoothing(currentVelObj, obj.serverVelocity, _adaptiveParams.velocityAlpha);\n      var velocity = new window.Ammo.btVector3(smoothedVel.x, smoothedVel.y, smoothedVel.z);\n      obj.body.setLinearVelocity(velocity);\n      obj.body.activate(true);\n      window.Ammo.destroy(velocity);\n    }\n  }\n\n  // Обновляем размер объекта, если он изменился на сервере\n  if (data.radius !== undefined && Math.abs(data.radius - obj.radius) > 0.1) {\n    console.log("[Physics] \\u041E\\u0431\\u043D\\u043E\\u0432\\u043B\\u044F\\u0435\\u043C \\u0440\\u0430\\u0437\\u043C\\u0435\\u0440 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(obj.id, ": ").concat(obj.radius, " \\u2192 ").concat(data.radius));\n    obj.radius = data.radius;\n    obj.lastServerUpdate = currentTime; // ОТМЕЧАЕМ время обновления размера\n\n    // Обновляем физическую форму если необходимо\n    // (в данном случае сфера остается сферой, только с новым радиусом)\n  }\n}\n\n// Применение конфигурации физики\nfunction applyPhysicsConfig(config) {\n  if (!config) {\n    console.warn("[Physics] Получена пустая конфигурация");\n    return;\n  }\n  for (var id in objects_objects) {\n    var obj = objects_objects[id];\n    if (!obj || !obj.body) continue;\n    try {\n      if (obj.physicsBy === "ammo" || obj.physicsBy === "both") {\n        // Проверяем, что масса определена, иначе выкидываем ошибку\n        if (obj.mass === undefined || obj.mass === null) {\n          throw new Error("[Physics] \\u041C\\u0430\\u0441\\u0441\\u0430 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(id, " \\u043D\\u0435 \\u043E\\u043F\\u0440\\u0435\\u0434\\u0435\\u043B\\u0435\\u043D\\u0430! obj.mass: ").concat(obj.mass));\n        }\n        var mass = obj.mass;\n        var velocity = obj.body.getLinearVelocity();\n        var shape = obj.body.getCollisionShape();\n        var localInertia = new window.Ammo.btVector3(0, 0, 0);\n        shape.calculateLocalInertia(mass, localInertia);\n        obj.body.setMassProps(mass, localInertia);\n        obj.body.setLinearVelocity(velocity);\n        obj.body.activate(true);\n        window.Ammo.destroy(localInertia);\n        window.Ammo.destroy(velocity);\n      }\n    } catch (e) {\n      console.error("[Physics] \\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043F\\u0440\\u0438\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u0438 \\u043A\\u043E\\u043D\\u0444\\u0438\\u0433\\u0443\\u0440\\u0430\\u0446\\u0438\\u0438 \\u043A ".concat(id, ":"), e);\n    }\n  }\n  window.PHYSICS_CONFIG = config;\n  console.log("[Physics] Конфигурация применена");\n}\n\n// Применение импульса к сфере\nfunction applyImpulseToSphere(id, direction) {\n  try {\n    var obj = objects_objects[id];\n    if (!obj || !obj.body) {\n      throw new Error("[Physics] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(id, " \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D \\u0438\\u043B\\u0438 \\u043D\\u0435 \\u0438\\u043C\\u0435\\u0435\\u0442 \\u0444\\u0438\\u0437\\u0438\\u0447\\u0435\\u0441\\u043A\\u043E\\u0433\\u043E \\u0442\\u0435\\u043B\\u0430"));\n    }\n    if (!obj.mesh || !obj.mesh.geometry || obj.mesh.geometry.type !== "SphereGeometry") {\n      throw new Error("[Physics] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(id, " \\u043D\\u0435 \\u044F\\u0432\\u043B\\u044F\\u0435\\u0442\\u0441\\u044F \\u0441\\u0444\\u0435\\u0440\\u043E\\u0439"));\n    }\n\n    // Получаем текущую конфигурацию физики\n    var physicsConfig = window.PHYSICS_CONFIG;\n    if (!physicsConfig) {\n      throw new Error("[Physics] Конфигурация физики не инициализирована");\n    }\n    if (typeof physicsConfig.base_impulse !== \'number\') {\n      throw new Error("[Physics] base_impulse не определен в конфигурации физики");\n    }\n\n    // Создаем вектор импульса с точно такой же силой, как на сервере\n    var impulse = new window.Ammo.btVector3(direction.x, direction.y, direction.z);\n\n    // Применяем импульс\n    obj.body.applyCentralImpulse(impulse);\n\n    // Активируем тело, чтобы оно не "заснуло"\n    obj.body.activate(true);\n\n    // Очищаем память\n    window.Ammo.destroy(impulse);\n  } catch (e) {\n    console.error("[Physics] \\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043F\\u0440\\u0438\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u0438 \\u0438\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441\\u0430 \\u043A ".concat(id, ":"), e);\n    throw e; // Пробрасываем ошибку дальше\n  }\n}\n\n// Функция для измерения джиттера\nfunction measureJitter() {\n  var ping = getCurrentPing();\n  var currentTime = Date.now();\n\n  // Добавляем текущий пинг в историю\n  physics_networkMonitor.pingHistory.push({\n    value: ping,\n    timestamp: currentTime\n  });\n\n  // УСКОРЕННАЯ адаптация: уменьшаем буфер истории с 10 до 5 измерений\n  if (physics_networkMonitor.pingHistory.length > 5) {\n    physics_networkMonitor.pingHistory.shift();\n  }\n\n  // Вычисляем стандартное отклонение пинга (джиттер)\n  var pings = physics_networkMonitor.pingHistory.map(function (h) {\n    return h.value;\n  });\n  var avgPing = pings.reduce(function (sum, p) {\n    return sum + p;\n  }, 0) / pings.length;\n  var variance = pings.reduce(function (sum, p) {\n    return sum + Math.pow(p - avgPing, 2);\n  }, 0) / pings.length;\n  var jitter = Math.sqrt(variance);\n\n  // Добавляем джиттер в историю\n  physics_networkMonitor.jitterHistory.push({\n    value: jitter,\n    timestamp: currentTime\n  });\n\n  // УСКОРЕННАЯ адаптация: уменьшаем буфер с 5 до 3 измерений\n  if (physics_networkMonitor.jitterHistory.length > 3) {\n    physics_networkMonitor.jitterHistory.shift();\n  }\n  return jitter;\n}\n\n// Функция для получения сглаженного джиттера\nfunction physics_getSmoothedJitter() {\n  if (physics_networkMonitor.jitterHistory.length === 0) {\n    return 0;\n  }\n  var recentJitter = physics_networkMonitor.jitterHistory.slice(-3); // Последние 3 измерения\n  return recentJitter.reduce(function (sum, j) {\n    return sum + j.value;\n  }, 0) / recentJitter.length;\n}\n\n// Функция для отслеживания стабильности позиции\nfunction updateStabilityStats(positionError) {\n  var stats = physics_networkMonitor.stabilityStats;\n\n  // Добавляем новую ошибку в историю\n  stats.lastPositionErrors.push(positionError);\n\n  // Ограничиваем размер истории\n  if (stats.lastPositionErrors.length > 10) {\n    stats.lastPositionErrors.shift();\n  }\n\n  // Вычисляем среднюю ошибку\n  if (stats.lastPositionErrors.length > 0) {\n    stats.averageError = stats.lastPositionErrors.reduce(function (sum, err) {\n      return sum + err;\n    }, 0) / stats.lastPositionErrors.length;\n\n    // Определяем стабильность\n    stats.isStable = stats.averageError < PHYSICS_SETTINGS.ADAPTATION.STABILIZATION_THRESHOLD && stats.lastPositionErrors.length >= 5;\n  }\n}\n\n// Функция для детекции резких изменений сетевых условий\nfunction detectNetworkChange() {\n  var ping = getCurrentPing();\n  var jitter = physics_getSmoothedJitter();\n  var currentTime = Date.now();\n\n  // Если это первое измерение\n  if (physics_networkMonitor.pingHistory.length < 2) {\n    return false;\n  }\n\n  // ЗАЩИТА: Минимальное время между детекциями изменений (дебаунс)\n  var timeSinceLastChange = currentTime - physics_networkMonitor.adaptationState.lastStrategyChange;\n  if (timeSinceLastChange < 300) {\n    // Быстрее реагируем на изменения\n    return false;\n  }\n\n  // Получаем предыдущие значения\n  var prevPing = physics_networkMonitor.pingHistory[physics_networkMonitor.pingHistory.length - 2].value;\n  var pingChange = Math.abs(ping - prevPing);\n\n  // Детектируем резкие изменения (более чувствительно)\n  var significantPingChange = pingChange > 30; // Уменьшаем порог с 50 до 30мс\n  var highJitter = jitter > PHYSICS_SETTINGS.NETWORK.JITTER_THRESHOLD;\n  var veryHighJitter = jitter > 25; // Дополнительный порог для джиттера\n\n  // ДИАГНОСТИКА: Логируем условия для анализа дрожания\n  if (significantPingChange || highJitter || veryHighJitter) {\n    console.log("[\\u0414\\u0418\\u0410\\u0413\\u041D\\u041E\\u0421\\u0422\\u0418\\u041A\\u0410] \\u0421\\u0435\\u0442\\u0435\\u0432\\u043E\\u0435 \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u0435: ping=".concat(ping, "\\u2192").concat(prevPing, " (\\u0394").concat(pingChange.toFixed(1), "), jitter=").concat(jitter.toFixed(1), ", \\u043F\\u0440\\u0438\\u0447\\u0438\\u043D\\u044B: ").concat(significantPingChange ? \'pingChange\' : \'\').concat(highJitter ? \' highJitter\' : \'\').concat(veryHighJitter ? \' veryHighJitter\' : \'\'));\n  }\n\n  // Если обнаружено значительное изменение\n  if (significantPingChange || highJitter || veryHighJitter) {\n    // Помечаем, что мы в процессе адаптации\n    physics_networkMonitor.adaptationState.isAdapting = true;\n    physics_networkMonitor.adaptationState.fastConvergenceMode = true;\n    physics_networkMonitor.adaptationState.lastStrategyChange = currentTime;\n    physics_networkMonitor.adaptationState.adaptationStartTime = currentTime;\n\n    // Сбрасываем статистику стабильности\n    physics_networkMonitor.stabilityStats.lastPositionErrors = [];\n    physics_networkMonitor.stabilityStats.averageError = 0;\n    physics_networkMonitor.stabilityStats.isStable = false;\n    return true;\n  }\n\n  // Проверяем, завершилась ли адаптация\n  if (physics_networkMonitor.adaptationState.isAdapting) {\n    var timeSinceChange = currentTime - physics_networkMonitor.adaptationState.lastStrategyChange;\n    var timeSinceStart = currentTime - physics_networkMonitor.adaptationState.adaptationStartTime;\n\n    // УСКОРЕННАЯ адаптация: завершаем адаптацию если система стабильна или прошло достаточно времени\n    if (physics_networkMonitor.stabilityStats.isStable && timeSinceStart > 500 || timeSinceChange > 1500) {\n      // УСКОРЕНО: с 3000мс до 1500мс\n      physics_networkMonitor.adaptationState.isAdapting = false;\n      physics_networkMonitor.adaptationState.fastConvergenceMode = false;\n    }\n  }\n  return false;\n}\n\n// Функция для сброса состояния объекта при резких изменениях\nfunction resetObjectState(obj) {\n  if (!obj || !obj.body) return;\n\n  // Очищаем буферы для этого объекта\n  if (serverUpdateBuffer.positions[obj.id]) {\n    serverUpdateBuffer.positions[obj.id] = [];\n  }\n  if (serverUpdateBuffer.velocities[obj.id]) {\n    serverUpdateBuffer.velocities[obj.id] = [];\n  }\n  if (serverUpdateBuffer.timestamps[obj.id]) {\n    serverUpdateBuffer.timestamps[obj.id] = [];\n  }\n\n  // Если есть серверная позиция, телепортируем к ней\n  if (obj.serverPos) {\n    var trans = new window.Ammo.btTransform();\n    trans.setIdentity();\n    trans.setOrigin(new window.Ammo.btVector3(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z));\n    obj.body.getMotionState().setWorldTransform(trans);\n    obj.mesh.position.set(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z);\n    window.Ammo.destroy(trans);\n  }\n\n  // Сбрасываем скорость\n  var zeroVelocity = new window.Ammo.btVector3(0, 0, 0);\n  obj.body.setLinearVelocity(zeroVelocity);\n  obj.body.activate(true);\n  window.Ammo.destroy(zeroVelocity);\n}\n\n// Экспортируем функции для использования в других модулях\nwindow.getSmoothedJitter = physics_getSmoothedJitter;\nwindow.getInterpolationStrategy = physics_getInterpolationStrategy;\nwindow.networkMonitor = physics_networkMonitor;\n\n// Функция для принудительного обновления приборов\nfunction forceUpdateInstruments() {\n  var playerObjectID = gamestatemanager.getPlayerObjectID();\n  var foundPlayer = false;\n\n  // Пытаемся найти игрока\n  if (playerObjectID && objects_objects[playerObjectID] && objects_objects[playerObjectID].body) {\n    var obj = objects_objects[playerObjectID];\n    var velocity = obj.body.getLinearVelocity();\n    var speed = Math.sqrt(velocity.x() * velocity.x() + velocity.y() * velocity.y() + velocity.z() * velocity.z());\n\n    // Проверяем наличие массы\n    if (obj.mass === undefined || obj.mass === null) {\n      console.error("[Physics] \\u041C\\u0430\\u0441\\u0441\\u0430 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 \\u0438\\u0433\\u0440\\u043E\\u043A\\u0430 ".concat(playerObjectID, " \\u043D\\u0435 \\u043E\\u043F\\u0440\\u0435\\u0434\\u0435\\u043B\\u0435\\u043D\\u0430 \\u0432 forceUpdateInstruments! obj.mass:"), obj.mass);\n      window.Ammo.destroy(velocity);\n      // Не устанавливаем foundPlayer = true, чтобы попробовать найти другую сферу\n    } else {\n      updatePlayerSpeedDisplay(speed, obj.mass, obj.radius);\n      window.Ammo.destroy(velocity);\n      foundPlayer = true;\n    }\n  }\n\n  // Если игрока не найдено, ищем любую сферу\n  if (!foundPlayer) {\n    for (var id in objects_objects) {\n      var _obj2 = objects_objects[id];\n      if (_obj2.object_type === "sphere" && _obj2.body) {\n        var _velocity3 = _obj2.body.getLinearVelocity();\n        var _speed2 = Math.sqrt(_velocity3.x() * _velocity3.x() + _velocity3.y() * _velocity3.y() + _velocity3.z() * _velocity3.z());\n\n        // Проверяем наличие массы\n        if (_obj2.mass === undefined || _obj2.mass === null) {\n          console.error("[Physics] \\u041C\\u0430\\u0441\\u0441\\u0430 \\u0440\\u0435\\u0437\\u0435\\u0440\\u0432\\u043D\\u043E\\u0439 \\u0441\\u0444\\u0435\\u0440\\u044B ".concat(id, " \\u043D\\u0435 \\u043E\\u043F\\u0440\\u0435\\u0434\\u0435\\u043B\\u0435\\u043D\\u0430 \\u0432 forceUpdateInstruments! obj.mass:"), _obj2.mass);\n          window.Ammo.destroy(_velocity3);\n          continue; // Попробуем следующую сферу\n        }\n        updatePlayerSpeedDisplay(_speed2, _obj2.mass, _obj2.radius);\n        window.Ammo.destroy(_velocity3);\n        foundPlayer = true;\n        break;\n      }\n    }\n  }\n\n  // Если ничего не найдено, показываем базовую информацию\n  if (!foundPlayer) {\n    var statusDisplay = document.getElementById(\'player-status\');\n    var objectsDisplay = document.getElementById(\'world-objects\');\n    if (statusDisplay) {\n      statusDisplay.textContent = \'🎮 Статус: Нет объектов\';\n      statusDisplay.style.backgroundColor = \'rgba(128, 0, 0, 0.3)\';\n    }\n    if (objectsDisplay) {\n      var objectCount = Object.keys(objects_objects).length;\n      objectsDisplay.textContent = "\\uD83C\\uDF0D ".concat(objectCount);\n    }\n  }\n}\n\n// РЕКОМЕНДАЦИИ ДЛЯ ЭКСПЕРИМЕНТОВ И НАСТРОЙКИ\n// ==========================================\n\n/* \nЗАДАЧА 1: УБРАТЬ МИКРО-ДРЕБЕЗГ (для сферы радиусом 3.0, скорость 80м/с)\n- Увеличить DEAD_ZONE до 0.9-1.2 (игнорировать мелкие колебания, 15-20% диаметра)\n- Уменьшить POSITION_ALPHA до 0.2-0.25 (плавнее движение крупных объектов)\n- Увеличить VELOCITY_SMOOTHING до 0.4-0.5 (сглаживание высокой скорости)\n- Уменьшить CORRECTION_STRENGTH до 5.0-6.0 (мягче коррекция для крупных объектов)\n\nЗАДАЧА 2: СОКРАТИТЬ ВРЕМЯ АДАПТАЦИИ ПРИ ПЛОХОЙ СЕТИ\n- Уменьшить FAST_CONVERGENCE_TIME до 300-400мс (быстрее переход)\n- Уменьшить JITTER_THRESHOLD до 30-40мс (раньше детектировать проблемы)\n- Улучшить алгоритм детекции изменений сети\n\nЗАДАЧА 3: ТОЧНОСТЬ ПРЕДСКАЗАНИЯ ОТСКОКОВ (скорость 80м/с)\n- Уменьшить MAX_ERROR до 12.0-15.0 (точнее предсказание, 2-2.5 диаметра)\n- Увеличить BUFFER.SIZE до 7-8 (больше данных для анализа быстрых объектов)\n- Уменьшить EXTRAPOLATION_TIME до 75-80мс (консервативнее для высокой скорости)\n- Увеличить ACCELERATION_LIMIT до 300-400 (учесть резкие отскоки при 80м/с)\n\nЗАДАЧА 4: ВИЗУАЛЬНАЯ ТОЧНОСТЬ ±3.0 ЕДИНИЦЫ (половина диаметра сферы)\n- TELEPORT_THRESHOLD = 24.0-30.0 (4-5 диаметров = приемлемо)\n- STABILIZATION_THRESHOLD = 1.8-2.4 (30-40% диаметра = хорошо)\n- DEAD_ZONE = 0.3-0.6 (5-10% диаметра = незаметно)\n- MAX_ERROR = 12.0-18.0 (2-3 диаметра = допустимо)\n\nКРИТИЧЕСКИЕ КОМБИНАЦИИ (ИЗБЕГАТЬ):\n- AGGRESSIVE_ALPHA > 0.9 + CORRECTION_STRENGTH > 10 = осцилляции крупных объектов\n- DEAD_ZONE < 0.3 + высокий джиттер = постоянные микро-коррекции больших сфер\n- FAST_CONVERGENCE_TIME < 200мс = слишком резкие переходы для скорости 80м/с\n- TELEPORT_THRESHOLD < 12.0 = слишком частые телепортации (менее 2 диаметров)\n\nОПТИМАЛЬНЫЕ НАБОРЫ ДЛЯ РАЗНЫХ СЦЕНАРИЕВ:\n\nНАБОР "ПЛАВНОСТЬ" (приоритет - отсутствие дребезга крупных быстрых объектов):\n- DEAD_ZONE: 1.2, POSITION_ALPHA: 0.2, CORRECTION_STRENGTH: 5.0\n- VELOCITY_SMOOTHING: 0.5, AGGRESSIVE_ALPHA: 0.6, ACCELERATION_LIMIT: 250\n\nНАБОР "ОТЗЫВЧИВОСТЬ" (приоритет - быстрая реакция при скорости 80м/с):\n- DEAD_ZONE: 0.3, POSITION_ALPHA: 0.4, CORRECTION_STRENGTH: 10.0\n- FAST_CONVERGENCE_TIME: 300, AGGRESSIVE_ALPHA: 0.8, TELEPORT_THRESHOLD: 18.0\n\nНАБОР "ТОЧНОСТЬ" (приоритет - предсказание отскоков при высокой скорости):\n- MAX_ERROR: 12.0, BUFFER.SIZE: 8, EXTRAPOLATION_TIME: 75\n- ACCELERATION_LIMIT: 350, TELEPORT_THRESHOLD: 24.0, STABILIZATION_THRESHOLD: 2.0\n\nРЕКОМЕНДУЕМЫЕ ЗНАЧЕНИЯ ДЛЯ ТЕКУЩИХ ПАРАМЕТРОВ:\n- MAX_ERROR: 18.0 (вместо 3.0) - 3 диаметра\n- TELEPORT_THRESHOLD: 30.0 (вместо 5.0) - 5 диаметров  \n- DEAD_ZONE: 0.6 (вместо 0.01) - 10% диаметра\n- STABILIZATION_THRESHOLD: 3.0 (вместо 0.5) - половина диаметра\n- RESET_THRESHOLD: 60.0 (вместо 10.0) - 10 диаметров\n- ACCELERATION_LIMIT: 300.0 (вместо 50.0) - для скорости 80м/с\n*/\n// EXTERNAL MODULE: ./node_modules/stats.js/build/stats.min.js\nvar stats_min = __webpack_require__(571);\nvar stats_min_default = /*#__PURE__*/__webpack_require__.n(stats_min);\n;// ./src/index.js\nfunction src_typeof(o) { "@babel/helpers - typeof"; return src_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, src_typeof(o); }\nfunction src_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ src_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == src_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(src_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction src_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction src_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// index.js\n\n\n\n\n\n\n\n\nvar stats = new (stats_min_default())();\nstats.showPanel(0); // 0: FPS, 1: ms, 2: memory\ndocument.body.appendChild(stats.dom);\nfunction animate() {\n  stats.begin();\n  var deltaTime = 1 / 60; // Примерно 60 FPS\n\n  stepPhysics(deltaTime);\n  updatePhysicsObjects(objects_objects);\n\n  // === НОВОЕ: Обновляем систему еды ===\n  updateFoodSystem(deltaTime);\n\n  // Обновляем камеру из нового модуля\n  updateCamera();\n\n  // Обновляем положение источника света относительно камеры, как солнце\n  updateShadowCamera(camera);\n\n  // Обновляем ArrowHelper\n  if (gamestatemanager_gameStateManager.playerMesh) {\n    updateArrowHelper(gamestatemanager_gameStateManager.playerMesh);\n  }\n  renderer.render(scene_scene, camera);\n  stats.end(); // Завершаем замер\n\n  requestAnimationFrame(animate);\n}\nfunction start() {\n  return _start.apply(this, arguments);\n}\nfunction _start() {\n  _start = src_asyncToGenerator(/*#__PURE__*/src_regeneratorRuntime().mark(function _callee() {\n    var playerInfo, playerInfoDiv, playerInfoElement, titleDiv, speedDiv, massDiv, radiusDiv, statusDiv, objectsDiv, ws;\n    return src_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          console.log("Start");\n          initScene();\n\n          // Инициализируем камеру из нового модуля\n          initCamera();\n\n          // Инициализируем элементы интерфейса для отображения скорости и других параметров\n          console.log("Инициализация элементов интерфейса...");\n          // Проверяем, существуют ли уже элементы\n          if (!document.getElementById(\'player-speed\')) {\n            console.log("Элементы интерфейса игрока не найдены, создаем...");\n            playerInfo = document.getElementById(\'player-info\');\n            if (!playerInfo) {\n              console.error("Элемент player-info не найден! Создаем его...");\n              playerInfoDiv = document.createElement(\'div\');\n              playerInfoDiv.id = \'player-info\';\n              playerInfoDiv.style.position = \'absolute\';\n              playerInfoDiv.style.bottom = \'10px\';\n              playerInfoDiv.style.right = \'10px\';\n              playerInfoDiv.style.backgroundColor = \'rgba(0, 0, 0, 0.7)\';\n              playerInfoDiv.style.color = \'white\';\n              playerInfoDiv.style.padding = \'8px 12px\';\n              playerInfoDiv.style.borderRadius = \'6px\';\n              playerInfoDiv.style.fontFamily = \'monospace\';\n              playerInfoDiv.style.fontSize = \'12px\';\n              playerInfoDiv.style.zIndex = \'1000\';\n              playerInfoDiv.style.display = \'flex\';\n              playerInfoDiv.style.flexDirection = \'column\';\n              playerInfoDiv.style.gap = \'4px\';\n              playerInfoDiv.style.minWidth = \'160px\';\n              playerInfoDiv.style.border = \'1px solid #00ff00\';\n              playerInfoDiv.style.opacity = \'0.85\';\n              document.body.appendChild(playerInfoDiv);\n            }\n            playerInfoElement = document.getElementById(\'player-info\') || playerInfo; // Заголовок приборной панели\n            titleDiv = document.createElement(\'div\');\n            titleDiv.id = \'instruments-title\';\n            titleDiv.textContent = \'🚀 ПРИБОРЫ\';\n            titleDiv.style.fontWeight = \'bold\';\n            titleDiv.style.textAlign = \'center\';\n            titleDiv.style.color = \'#00ff00\';\n            titleDiv.style.marginBottom = \'3px\';\n            titleDiv.style.fontSize = \'11px\';\n            playerInfoElement.appendChild(titleDiv);\n\n            // Скорость\n            speedDiv = document.createElement(\'div\');\n            speedDiv.id = \'player-speed\';\n            speedDiv.textContent = \'⚡ --\';\n            speedDiv.style.padding = \'3px\';\n            speedDiv.style.backgroundColor = \'rgba(0, 128, 0, 0.3)\';\n            speedDiv.style.borderRadius = \'3px\';\n            speedDiv.style.fontSize = \'11px\';\n            playerInfoElement.appendChild(speedDiv);\n\n            // Масса\n            massDiv = document.createElement(\'div\');\n            massDiv.id = \'player-mass\';\n            massDiv.textContent = \'⚖️ --\';\n            massDiv.style.padding = \'3px\';\n            massDiv.style.backgroundColor = \'rgba(128, 128, 0, 0.3)\';\n            massDiv.style.borderRadius = \'3px\';\n            massDiv.style.fontSize = \'11px\';\n            playerInfoElement.appendChild(massDiv);\n\n            // Радиус сферы\n            radiusDiv = document.createElement(\'div\');\n            radiusDiv.id = \'player-radius\';\n            radiusDiv.textContent = \'🟢 --\';\n            radiusDiv.style.padding = \'3px\';\n            radiusDiv.style.backgroundColor = \'rgba(0, 128, 255, 0.3)\';\n            radiusDiv.style.borderRadius = \'3px\';\n            radiusDiv.style.fontSize = \'11px\';\n            playerInfoElement.appendChild(radiusDiv);\n\n            // Статус игрока\n            statusDiv = document.createElement(\'div\');\n            statusDiv.id = \'player-status\';\n            statusDiv.textContent = \'🎮 Поиск...\';\n            statusDiv.style.padding = \'3px\';\n            statusDiv.style.backgroundColor = \'rgba(128, 0, 128, 0.3)\';\n            statusDiv.style.borderRadius = \'3px\';\n            statusDiv.style.fontSize = \'11px\';\n            playerInfoElement.appendChild(statusDiv);\n\n            // Объекты в мире\n            objectsDiv = document.createElement(\'div\');\n            objectsDiv.id = \'world-objects\';\n            objectsDiv.textContent = \'🌍 0\';\n            objectsDiv.style.padding = \'3px\';\n            objectsDiv.style.backgroundColor = \'rgba(0, 128, 128, 0.3)\';\n            objectsDiv.style.borderRadius = \'3px\';\n            objectsDiv.style.fontSize = \'11px\';\n            playerInfoElement.appendChild(objectsDiv);\n            console.log("Улучшенные элементы интерфейса игрока созданы");\n          } else {\n            console.log("Элементы интерфейса игрока уже существуют");\n          }\n          _context.prev = 5;\n          _context.next = 8;\n          return new Promise(function (resolve) {\n            return setTimeout(resolve, 500);\n          });\n        case 8:\n          _context.next = 10;\n          return initAmmo();\n        case 10:\n          _context.next = 12;\n          return initNetwork();\n        case 12:\n          ws = _context.sent;\n          // === НОВОЕ: Инициализируем систему еды ===\n          initFoodSystem(scene_scene, null); // Передаем scene, world пока не нужен\n\n          initGameStateManager(ws, scene_scene);\n          gamestatemanager_gameStateManager.on(\'gameInitialized\', function () {\n            console.warn(\'game initialized\');\n            animate();\n          });\n          _context.next = 21;\n          break;\n        case 18:\n          _context.prev = 18;\n          _context.t0 = _context["catch"](5);\n          console.error("Ошибка при инициализации Ammo.js:", _context.t0);\n        case 21:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[5, 18]]);\n  }));\n  return _start.apply(this, arguments);\n}\nstart();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///470\n')},7:module=>{"use strict";eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n")},571:function(module){eval('// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){ true?module.exports=e():0})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?"block":"none";l=a}var l=0,c=document.createElement("div");c.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";c.addEventListener("click",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel("FPS","#0ff","#002")),h=e(new f.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var t=e(new f.Panel("MB","#f08","#201"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement("canvas");q.width=r;q.height=h;q.style.cssText="width:80px;height:48px";var b=q.getContext("2d");b.font="bold "+9*a+"px Helvetica,Arial,sans-serif";b.textBaseline="top";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+" "+e+" ("+g(c)+"-"+g(k)+")",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTcxLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZUFBZSxLQUFzRCxvQkFBb0IsQ0FBNEQsQ0FBQyxrQkFBa0IsaUJBQWlCLGNBQWMscUJBQXFCLFNBQVMsY0FBYyxZQUFZLG9CQUFvQixxREFBcUQsSUFBSSx3Q0FBd0MsZ0NBQWdDLE1BQU0sT0FBTyxlQUFlLFlBQVksZUFBZSx1Q0FBdUM7QUFDbGYseUJBQXlCLEtBQUssbUhBQW1ILHNGQUFzRixLQUFLLE9BQU8sMERBQTBELDRCQUE0QixnQkFBZ0IsSUFBSSxnQ0FBZ0Msa0JBQWtCLG1EQUFtRCx5QkFBeUI7QUFDM2QsbUNBQW1DLFNBQVMsbUJBQW1CLGFBQWEsMEJBQTBCLHdCQUF3Qix3SkFBd0osVUFBVSxXQUFXLDRCQUE0QixhQUFhLHlCQUF5QixtREFBbUQscUJBQXFCLGNBQWMsb0JBQW9CLGNBQWM7QUFDcmUsb0JBQW9CLGNBQWMsaUJBQWlCLG9CQUFvQixPQUFPLDJCQUEyQixnQkFBZ0IsZ0JBQWdCLGNBQWMsZ0JBQWdCLG9CQUFvQixjQUFjLGtEQUFrRCxxQ0FBcUMsd0JBQXdCLGNBQWMsaUJBQWlCLHNDQUFzQyxTQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4vbm9kZV9tb2R1bGVzL3N0YXRzLmpzL2J1aWxkL3N0YXRzLm1pbi5qcz8zMTkxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0YXRzLmpzIC0gaHR0cDovL2dpdGh1Yi5jb20vbXJkb29iL3N0YXRzLmpzXG4oZnVuY3Rpb24oZixlKXtcIm9iamVjdFwiPT09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKTpmLlN0YXRzPWUoKX0pKHRoaXMsZnVuY3Rpb24oKXt2YXIgZj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoYSl7Yy5hcHBlbmRDaGlsZChhLmRvbSk7cmV0dXJuIGF9ZnVuY3Rpb24gdShhKXtmb3IodmFyIGQ9MDtkPGMuY2hpbGRyZW4ubGVuZ3RoO2QrKyljLmNoaWxkcmVuW2RdLnN0eWxlLmRpc3BsYXk9ZD09PWE/XCJibG9ja1wiOlwibm9uZVwiO2w9YX12YXIgbD0wLGM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtjLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjpmaXhlZDt0b3A6MDtsZWZ0OjA7Y3Vyc29yOnBvaW50ZXI7b3BhY2l0eTowLjk7ei1pbmRleDoxMDAwMFwiO2MuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsZnVuY3Rpb24oYSl7YS5wcmV2ZW50RGVmYXVsdCgpO1xudSgrK2wlYy5jaGlsZHJlbi5sZW5ndGgpfSwhMSk7dmFyIGs9KHBlcmZvcm1hbmNlfHxEYXRlKS5ub3coKSxnPWssYT0wLHI9ZShuZXcgZi5QYW5lbChcIkZQU1wiLFwiIzBmZlwiLFwiIzAwMlwiKSksaD1lKG5ldyBmLlBhbmVsKFwiTVNcIixcIiMwZjBcIixcIiMwMjBcIikpO2lmKHNlbGYucGVyZm9ybWFuY2UmJnNlbGYucGVyZm9ybWFuY2UubWVtb3J5KXZhciB0PWUobmV3IGYuUGFuZWwoXCJNQlwiLFwiI2YwOFwiLFwiIzIwMVwiKSk7dSgwKTtyZXR1cm57UkVWSVNJT046MTYsZG9tOmMsYWRkUGFuZWw6ZSxzaG93UGFuZWw6dSxiZWdpbjpmdW5jdGlvbigpe2s9KHBlcmZvcm1hbmNlfHxEYXRlKS5ub3coKX0sZW5kOmZ1bmN0aW9uKCl7YSsrO3ZhciBjPShwZXJmb3JtYW5jZXx8RGF0ZSkubm93KCk7aC51cGRhdGUoYy1rLDIwMCk7aWYoYz5nKzFFMyYmKHIudXBkYXRlKDFFMyphLyhjLWcpLDEwMCksZz1jLGE9MCx0KSl7dmFyIGQ9cGVyZm9ybWFuY2UubWVtb3J5O3QudXBkYXRlKGQudXNlZEpTSGVhcFNpemUvXG4xMDQ4NTc2LGQuanNIZWFwU2l6ZUxpbWl0LzEwNDg1NzYpfXJldHVybiBjfSx1cGRhdGU6ZnVuY3Rpb24oKXtrPXRoaXMuZW5kKCl9LGRvbUVsZW1lbnQ6YyxzZXRNb2RlOnV9fTtmLlBhbmVsPWZ1bmN0aW9uKGUsZixsKXt2YXIgYz1JbmZpbml0eSxrPTAsZz1NYXRoLnJvdW5kLGE9Zyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb3x8MSkscj04MCphLGg9NDgqYSx0PTMqYSx2PTIqYSxkPTMqYSxtPTE1KmEsbj03NCphLHA9MzAqYSxxPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7cS53aWR0aD1yO3EuaGVpZ2h0PWg7cS5zdHlsZS5jc3NUZXh0PVwid2lkdGg6ODBweDtoZWlnaHQ6NDhweFwiO3ZhciBiPXEuZ2V0Q29udGV4dChcIjJkXCIpO2IuZm9udD1cImJvbGQgXCIrOSphK1wicHggSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWZcIjtiLnRleHRCYXNlbGluZT1cInRvcFwiO2IuZmlsbFN0eWxlPWw7Yi5maWxsUmVjdCgwLDAscixoKTtiLmZpbGxTdHlsZT1mO2IuZmlsbFRleHQoZSx0LHYpO1xuYi5maWxsUmVjdChkLG0sbixwKTtiLmZpbGxTdHlsZT1sO2IuZ2xvYmFsQWxwaGE9Ljk7Yi5maWxsUmVjdChkLG0sbixwKTtyZXR1cm57ZG9tOnEsdXBkYXRlOmZ1bmN0aW9uKGgsdyl7Yz1NYXRoLm1pbihjLGgpO2s9TWF0aC5tYXgoayxoKTtiLmZpbGxTdHlsZT1sO2IuZ2xvYmFsQWxwaGE9MTtiLmZpbGxSZWN0KDAsMCxyLG0pO2IuZmlsbFN0eWxlPWY7Yi5maWxsVGV4dChnKGgpK1wiIFwiK2UrXCIgKFwiK2coYykrXCItXCIrZyhrKStcIilcIix0LHYpO2IuZHJhd0ltYWdlKHEsZCthLG0sbi1hLHAsZCxtLG4tYSxwKTtiLmZpbGxSZWN0KGQrbi1hLG0sYSxwKTtiLmZpbGxTdHlsZT1sO2IuZ2xvYmFsQWxwaGE9Ljk7Yi5maWxsUmVjdChkK24tYSxtLGEsZygoMS1oL3cpKnApKX19fTtyZXR1cm4gZn0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///571\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var C=1/0;for(t=0;t<deferred.length;t++){for(var[U,F,B]=deferred[t],L=!0,I=0;I<U.length;I++)(!1&B||C>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[I])))?U.splice(I--,1):(L=!1,B<C&&(C=B));if(L){deferred.splice(t--,1);var g=F();void 0!==g&&(Q=g)}}return Q}B=B||0;for(var t=deferred.length;t>0&&deferred[t-1][2]>B;t--)deferred[t]=deferred[t-1];deferred[t]=[U,F,B]},__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),(()=>{var Q={792:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,C,[L,I,g]=F,t=0;if(L.some((U=>0!==Q[U]))){for(B in I)__webpack_require__.o(I,B)&&(__webpack_require__.m[B]=I[B]);if(g)var s=g(__webpack_require__)}for(U&&U(F);t<L.length;t++)C=L[t],__webpack_require__.o(Q,C)&&Q[C]&&Q[C][0](),Q[C]=0;return __webpack_require__.O(s)},F=self.webpackChunkweb=self.webpackChunkweb||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[233],(()=>__webpack_require__(470)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();