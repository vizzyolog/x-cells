(()=>{var __webpack_modules__={617:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.core.js\nvar three_core = __webpack_require__(922);\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(437);\n;// ./src/scene.js\n// scene.js\n\nvar scene_scene, renderer;\nvar directionalLight; // Экспортируем свет для доступности в других модулях\n\nfunction initScene() {\n  console.log("try to initScene");\n  scene_scene = new three_core/* Scene */.Z58();\n  scene_scene.background = new three_core/* Color */.Q1f(0x88ccff);\n  renderer = new three_module/* WebGLRenderer */.JeP({\n    antialias: true\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  // Включаем поддержку теней\n  renderer.shadowMap.enabled = true;\n  renderer.shadowMap.type = three_core/* PCFSoftShadowMap */.Wk7;\n  document.body.appendChild(renderer.domElement);\n  window.addEventListener(\'resize\', onWindowResize);\n\n  // Настраиваем освещение\n  var ambient = new three_core/* AmbientLight */.$p8(0xffffff, 0.8);\n  scene_scene.add(ambient);\n\n  // Основной направленный свет с тенями\n  directionalLight = new three_core/* DirectionalLight */.ZyN(0xffffff, 1);\n  directionalLight.position.set(50, 100, 50);\n  directionalLight.castShadow = true;\n\n  // Настраиваем параметры теней для охвата большой области\n  directionalLight.shadow.camera.near = 0.1;\n  directionalLight.shadow.camera.far = 500;\n  directionalLight.shadow.camera.left = -100;\n  directionalLight.shadow.camera.right = 100;\n  directionalLight.shadow.camera.top = 100;\n  directionalLight.shadow.camera.bottom = -100;\n  directionalLight.shadow.mapSize.width = 512; // Большее разрешение для лучшего качества\n  directionalLight.shadow.mapSize.height = 512;\n  // directionalLight.shadow.bias = -0.0001; // Уменьшаем артефакты тени\n  scene_scene.add(directionalLight);\n\n  // Добавляем вспомогательный свет для подсветки теней\n  var fillLight = new three_core/* DirectionalLight */.ZyN(0xffffff, 1);\n  fillLight.position.set(-50, 50, -50);\n  scene_scene.add(fillLight);\n\n  // Можно добавить помощник для отладки теней (раскомментируйте при необходимости)\n  // const helper = new THREE.CameraHelper(directionalLight.shadow.camera);\n  // scene.add(helper);\n}\nfunction onWindowResize() {\n  // Обработка изменения размера окна только для рендерера\n  // (камера обрабатывается в camera.js)\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\n// Добавляем функцию для обновления положения источника света относительно камеры, как солнце\nfunction updateShadowCamera(camera) {\n  if (!directionalLight || !camera) return;\n\n  // Получаем направление взгляда камеры\n  var cameraDirection = new three_core/* Vector3 */.Pq0();\n  camera.getWorldDirection(cameraDirection);\n\n  // Создаем позицию "солнца" относительно камеры\n  // Поднимаем "солнце" на 200 единиц вверх от позиции камеры и смещаем немного в сторону и назад\n  var sunOffset = new three_core/* Vector3 */.Pq0(100, 200, -50);\n  var sunPosition = camera.position.clone().add(sunOffset);\n\n  // Обновляем позицию света\n  directionalLight.position.copy(sunPosition);\n\n  // Определяем точку, куда направлен свет - перед камерой на расстоянии 100 единиц\n  var targetOffset = cameraDirection.clone().multiplyScalar(100);\n  var targetPosition = camera.position.clone().add(targetOffset);\n  directionalLight.target.position.copy(targetPosition);\n\n  // Обновляем матрицу трансформации цели света\n  directionalLight.target.updateMatrixWorld();\n\n  // Обновляем матрицу камеры теней\n  directionalLight.shadow.camera.updateProjectionMatrix();\n}\n\n// EXTERNAL MODULE: ./node_modules/events/events.js\nvar events = __webpack_require__(7);\n;// ./src/network.js\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// network.js\n\n\nvar ws = null;\nvar physicsStarted = false;\nvar pendingObjects = [];\n\n// Добавляем переменные для работы с временными метками\nvar serverTimeOffset = 0; // Разница между серверным и клиентским временем\nvar serverTimeOffsetSamples = []; // Хранение образцов для вычисления среднего значения\nvar MAX_OFFSET_SAMPLES = 10; // Максимальное количество образцов\nvar pingHistory = []; // История пингов для анализа\nvar MAX_PING_SAMPLES = 10; // Максимальное количество образцов пинга\n\n// Глобальная конфигурация физики\nvar physicsConfig = null;\n\n// Функция для получения текущей конфигурации физики\nfunction getPhysicsConfig() {\n  return physicsConfig;\n}\n\n// Вычисляем текущее серверное время на основе смещения\nfunction estimateServerTime() {\n  return Date.now() + serverTimeOffset;\n}\n\n// Обновление смещения времени сервера\nfunction updateServerTimeOffset(serverTime) {\n  var now = Date.now();\n  var currentOffset = serverTime - now;\n\n  // Добавляем новый образец\n  serverTimeOffsetSamples.push(currentOffset);\n\n  // Ограничиваем количество образцов\n  if (serverTimeOffsetSamples.length > MAX_OFFSET_SAMPLES) {\n    serverTimeOffsetSamples.shift();\n  }\n\n  // Используем медиану вместо среднего для устойчивости к выбросам\n  var sortedOffsets = [].concat(serverTimeOffsetSamples).sort(function (a, b) {\n    return a - b;\n  });\n  var medianOffset = sortedOffsets[Math.floor(sortedOffsets.length / 2)];\n  serverTimeOffset = medianOffset;\n\n  // Обновляем отображение времени\n  updateTimeDisplay();\n  console.log("[Time] \\u0421\\u0438\\u043D\\u0445\\u0440\\u043E\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F \\u0432\\u0440\\u0435\\u043C\\u0435\\u043D\\u0438: \\u0441\\u043C\\u0435\\u0449\\u0435\\u043D\\u0438\\u0435 = ".concat(medianOffset, " \\u043C\\u0441"));\n}\n\n// Добавляем функцию для обновления отображения пинга на экране\nfunction updatePingDisplay(pingValue) {\n  var pingDisplay = document.getElementById(\'ping-display\');\n  if (pingDisplay) {\n    pingDisplay.textContent = "\\u041F\\u0438\\u043D\\u0433: ".concat(pingValue.toFixed(0), " \\u043C\\u0441");\n\n    // Меняем цвет в зависимости от качества соединения\n    if (pingValue < 50) {\n      pingDisplay.style.backgroundColor = \'rgba(0, 128, 0, 0.5)\'; // Зеленый - хороший пинг\n    } else if (pingValue < 100) {\n      pingDisplay.style.backgroundColor = \'rgba(255, 165, 0, 0.5)\'; // Оранжевый - средний пинг\n    } else {\n      pingDisplay.style.backgroundColor = \'rgba(255, 0, 0, 0.5)\'; // Красный - плохой пинг\n    }\n  }\n}\n\n// Функция для обновления серверного времени на экране\nfunction updateTimeDisplay() {\n  var serverTimeElem = document.getElementById(\'server-time\');\n  var timeOffsetElem = document.getElementById(\'time-offset\');\n  if (serverTimeElem && timeOffsetElem) {\n    var estServerTime = estimateServerTime();\n    var serverDate = new Date(estServerTime);\n    serverTimeElem.textContent = "\\u0412\\u0440\\u0435\\u043C\\u044F \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430: ".concat(serverDate.toLocaleTimeString());\n    timeOffsetElem.textContent = "\\u0421\\u043C\\u0435\\u0449\\u0435\\u043D\\u0438\\u0435: ".concat(serverTimeOffset.toFixed(0), " \\u043C\\u0441");\n  }\n}\n\n// Создаем интервал для периодического обновления времени\nvar timeDisplayInterval;\nvar serverDelay = 0;\nfunction updateServerDelayDisplay(delay) {\n  var delayDisplay = document.getElementById(\'server-delay-display\');\n  if (delayDisplay) {\n    delayDisplay.textContent = "\\u0417\\u0430\\u0434\\u0435\\u0440\\u0436\\u043A\\u0430 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430: ".concat(delay.toFixed(0), " \\u043C\\u0441");\n  }\n}\nfunction handleMessage(data) {\n  try {\n    // Если сообщение содержит временную метку сервера, обновляем смещение\n    if (data.server_time) {\n      console.log("data.server_time: ", data.server_time);\n      updateServerTimeOffset(data.server_time);\n    }\n\n    // Обрабатываем конфигурацию физики\n    if (data.type === "physics_config") {\n      console.log("[Network] Получена конфигурация физики:", data.config);\n      physicsConfig = data.config;\n\n      // Применяем конфигурацию к физике на клиенте\n      applyPhysicsConfig(physicsConfig);\n      return; // Прекращаем обработку этого сообщения\n    }\n\n    // Обрабатываем pong-сообщения для синхронизации времени\n    if (data.type === "pong") {\n      var now = Date.now();\n      var roundTripTime = now - data.client_time;\n\n      // Добавляем измерение пинга в историю\n      pingHistory.push(roundTripTime);\n      if (pingHistory.length > MAX_PING_SAMPLES) {\n        pingHistory.shift();\n      }\n\n      // Вычисляем средний пинг\n      var avgPing = pingHistory.reduce(function (sum, ping) {\n        return sum + ping;\n      }, 0) / pingHistory.length;\n\n      // Обновляем отображение пинга на экране\n      updatePingDisplay(avgPing);\n      console.log("[WS] \\u041F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D pong, RTT: ".concat(roundTripTime, "ms, \\u0421\\u0440\\u0435\\u0434\\u043D\\u0438\\u0439 RTT: ").concat(avgPing.toFixed(2), "ms"));\n\n      // Обновляем смещение серверного времени с учетом RTT/2 (предполагаем симметричную задержку)\n      updateServerTimeOffset(data.server_time + roundTripTime / 2);\n      return; // Прекращаем обработку этого сообщения\n    }\n    if (data.type === "update") {\n      // Проверяем, содержит ли update сообщение данные объекта\n      if (data.objects || data.id) {\n        // Отладочная информация\n        console.log(\'[WS] Получено update сообщение:\', data.id ? "id: ".concat(data.id) : "\\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u043E\\u0432: ".concat(Object.keys(data.objects).length));\n\n        // Передаем данные в функцию обработки обновлений\n        receiveObjectUpdate(data);\n      } else {\n        console.warn(\'[WS] Получено update сообщение без объектов:\', data);\n      }\n    } else if (data.type === "create" && data.id) {\n      console.log("[WS] Получено сообщение о создании объекта:", data.id, "в координатах:", {\n        x: data.x || 0,\n        y: data.y || 0,\n        z: data.z || 0\n      }, "время сервера:", data.server_time);\n\n      // Создаем объект и добавляем его в список объектов\n      var obj = createMeshAndBodyForObject(data);\n\n      // Проверяем, что объект был успешно создан\n      if (obj) {\n        obj.physicsBy = data.physics_by || "both";\n        obj.serverPos = {\n          x: data.x || 0,\n          y: data.y || 0,\n          z: data.z || 0\n        };\n        // Добавляем временную метку сервера\n        obj.serverCreationTime = data.server_time;\n        obj.clientCreationTime = Date.now();\n        objects_objects[data.id] = obj;\n\n        // Запоминаем точное время создания объекта для дальнейшей синхронизации\n        obj.createdAt = Date.now();\n        console.log("[WS] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, " \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D \\u0441 physicsBy: ").concat(obj.physicsBy));\n\n        // Если физический мир активен, активируем тело\n        if (obj.body && physics_localPhysicsWorld) {\n          if (!physicsStarted) {\n            // Добавляем в список ожидающих, если физика еще не запущена\n            pendingObjects.push(data.id);\n            console.log("[WS] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, " \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D \\u0432 \\u0441\\u043F\\u0438\\u0441\\u043E\\u043A \\u043E\\u0436\\u0438\\u0434\\u0430\\u043D\\u0438\\u044F - \\u0444\\u0438\\u0437\\u0438\\u043A\\u0430 \\u0435\\u0449\\u0435 \\u043D\\u0435 \\u0430\\u043A\\u0442\\u0438\\u0432\\u043D\\u0430"));\n          } else {\n            // Активируем тело сразу\n            obj.body.activate(true);\n            // Устанавливаем начальную позицию точно по серверным координатам\n            if (obj.serverPos) {\n              try {\n                // Проверяем наличие Ammo\n                if (typeof window.Ammo === \'undefined\') {\n                  console.error(\'[WS] window.Ammo не определен при попытке телепортации объекта\');\n                  return;\n                }\n                var transform = new window.Ammo.btTransform();\n                obj.body.getMotionState().getWorldTransform(transform);\n                transform.setOrigin(new window.Ammo.btVector3(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z));\n                obj.body.getMotionState().setWorldTransform(transform);\n                obj.mesh.position.set(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z);\n                console.log("[WS] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, " \\u0442\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D \\u0432 \\u0438\\u0441\\u0445\\u043E\\u0434\\u043D\\u044B\\u0435 \\u043A\\u043E\\u043E\\u0440\\u0434\\u0438\\u043D\\u0430\\u0442\\u044B:"), {\n                  x: obj.serverPos.x,\n                  y: obj.serverPos.y,\n                  z: obj.serverPos.z\n                });\n\n                // Очищаем память\n                window.Ammo.destroy(transform);\n              } catch (error) {\n                console.error("[WS] \\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0442\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0430\\u0446\\u0438\\u0438 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(data.id, ":"), error);\n              }\n            }\n          }\n        }\n      } else {\n        console.error("[WS] \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0441\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, ", \\u0442\\u0438\\u043F: ").concat(data.object_type));\n      }\n    } else if (data.type === "cmd_ack") {\n      // Обрабатываем подтверждение команды с временной меткой\n      if (data.client_time && data.server_time) {\n        var _roundTripTime = Date.now() - data.client_time;\n\n        // Добавляем измерение пинга в историю\n        pingHistory.push(_roundTripTime);\n        if (pingHistory.length > MAX_PING_SAMPLES) {\n          pingHistory.shift();\n        }\n\n        // Вычисляем средний пинг\n        var _avgPing = pingHistory.reduce(function (sum, ping) {\n          return sum + ping;\n        }, 0) / pingHistory.length;\n\n        // Обновляем отображение пинга на экране\n        updatePingDisplay(_avgPing);\n        console.log("[WS] \\u041F\\u043E\\u0434\\u0442\\u0432\\u0435\\u0440\\u0436\\u0434\\u0435\\u043D\\u0438\\u0435 \\u043A\\u043E\\u043C\\u0430\\u043D\\u0434\\u044B: ".concat(data.cmd, ", RTT: ").concat(_roundTripTime, "ms, \\u0421\\u0440\\u0435\\u0434\\u043D\\u0438\\u0439 RTT: ").concat(_avgPing.toFixed(2), "ms"));\n\n        // Обновляем смещение серверного времени с учетом RTT/2 (предполагаем симметричную задержку)\n        updateServerTimeOffset(data.server_time + _roundTripTime / 2);\n      }\n    }\n  } catch (error) {\n    console.error("[WS] Ошибка при обработке сообщения:", error);\n    console.error("[WS] Стек вызовов:", error.stack);\n  }\n}\nfunction handleKeyDown(e) {\n  if (!ws || ws.readyState !== WebSocket.OPEN) return;\n  var cmd = "";\n  var forceX = 0,\n    forceY = 0,\n    forceZ = 0;\n  switch (e.key) {\n    case "ArrowLeft":\n      cmd = "LEFT";\n      forceX = -5;\n      break;\n    case "ArrowRight":\n      cmd = "RIGHT";\n      forceX = 5;\n      break;\n    case "ArrowUp":\n      cmd = "UP";\n      forceZ = -5;\n      break;\n    case "ArrowDown":\n      cmd = "DOWN";\n      forceZ = 5;\n      break;\n    case " ":\n      cmd = "SPACE";\n      forceY = 10;\n      break;\n    default:\n      return;\n  }\n  try {\n    // Добавляем временную метку клиента к команде\n    var clientTime = Date.now();\n    var commandObj = {\n      type: "cmd",\n      cmd: cmd,\n      client_time: clientTime // Добавляем временную метку клиента\n    };\n    console.log("[WS] \\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430 \\u043A\\u043E\\u043C\\u0430\\u043D\\u0434\\u044B: ".concat(cmd, ", \\u0432\\u0440\\u0435\\u043C\\u044F \\u043A\\u043B\\u0438\\u0435\\u043D\\u0442\\u0430: ").concat(clientTime));\n    ws.send(JSON.stringify(commandObj));\n\n    // Применяем импульс локально ко всем объектам сфер\n    for (var id in objects_objects) {\n      var obj = objects_objects[id];\n      if (obj && obj.body && obj.mesh && obj.mesh.geometry && obj.mesh.geometry.type === "SphereGeometry") {\n        console.log("[WS] \\u041F\\u0440\\u0438\\u043C\\u0435\\u043D\\u044F\\u0435\\u043C \\u0438\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441 \\u043A \\u0441\\u0444\\u0435\\u0440\\u0435 ".concat(id, " \\u0441 physicsBy=").concat(obj.physicsBy));\n\n        // Вызываем функцию применения импульса с обновленными параметрами\n        applyImpulseToSphere(id, {\n          x: forceX,\n          y: forceY,\n          z: forceZ\n        }, 1.0);\n        // applyImpulseToSphere(cmd, forceX, forceY, forceZ, objects, clientTime);\n      }\n    }\n  } catch (error) {\n    console.error("[WS] Ошибка отправки:", error);\n  }\n}\nfunction initNetwork() {\n  return _initNetwork.apply(this, arguments);\n}\n\n// Функция для отправки ping-сообщения с временной меткой клиента\nfunction _initNetwork() {\n  _initNetwork = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log("[WS] Начало инициализации WebSocket");\n          ws = new WebSocket("ws://localhost:8080/ws");\n          ws.onopen = function () {\n            console.log("[WS] connected");\n            // Инициализируем индикатор пинга\n            updatePingDisplay(0);\n            // Обновляем информацию о времени\n            updateTimeDisplay();\n            // Запускаем интервал обновления времени\n            if (timeDisplayInterval) clearInterval(timeDisplayInterval);\n            timeDisplayInterval = setInterval(updateTimeDisplay, 1000);\n            // Отправим тестовое сообщение для синхронизации времени\n            sendPing();\n          };\n          ws.onmessage = function (evt) {\n            try {\n              var data = JSON.parse(evt.data);\n              if (!data || _typeof(data) !== \'object\') {\n                throw new Error(\'Неверный формат данных\');\n              }\n\n              // Если приходит сообщение с id и object_type, но без type - это объект создания\n              if (!data.type && data.id && data.object_type) {\n                console.log(\'[WS] Получен объект без type, считаем это create:\', data);\n                // Добавляем тип для совместимости с существующим кодом\n                data.type = "create";\n                // Обрабатываем как create\n                handleMessage(data);\n              }\n              // Обрабатываем update сообщения через нашу новую функцию\n              else if (data.type === "update" && data.id) {\n                receiveObjectUpdate(data);\n              } else if (data.type === "create" && data.id) {\n                // Оставляем существующую логику создания объектов\n                handleMessage(data);\n              } else if (data.type === "pong") {\n                // Обрабатываем pong сообщения для синхронизации времени\n                handleMessage(data);\n              } else {\n                // Обрабатываем другие типы сообщений, например "cmd_ack"\n                handleMessage(data);\n              }\n            } catch (error) {\n              console.error("[WS] Ошибка при обработке сообщения:", error);\n            }\n          };\n          ws.onerror = function (error) {\n            console.error("[WS] WebSocket error:", error);\n            console.error("[WS] Детали ошибки:", {\n              message: error.message,\n              type: error.type,\n              eventPhase: error.eventPhase\n            });\n          };\n          ws.onclose = function (event) {\n            console.log("[WS] Соединение закрыто:", {\n              code: event.code,\n              reason: event.reason,\n              wasClean: event.wasClean\n            });\n\n            // Останавливаем обновление времени при закрытии соединения\n            if (timeDisplayInterval) {\n              clearInterval(timeDisplayInterval);\n              timeDisplayInterval = null;\n            }\n          };\n          document.addEventListener("keydown", handleKeyDown);\n\n          // Запускаем периодическую синхронизацию времени\n          setInterval(sendPing, 10000); // Каждые 10 секунд\n          return _context.abrupt("return", ws);\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context["catch"](0);\n          console.error("[WS] Ошибка при создании WebSocket:", _context.t0);\n          console.error("[WS] Стек вызовов:", _context.t0.stack);\n        case 16:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 12]]);\n  }));\n  return _initNetwork.apply(this, arguments);\n}\nfunction sendPing() {\n  if (!ws || ws.readyState !== WebSocket.OPEN) return;\n  var clientTime = Date.now();\n  var pingObj = {\n    type: "ping",\n    client_time: clientTime\n  };\n  try {\n    ws.send(JSON.stringify(pingObj));\n    console.log("[WS] \\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D ping \\u0434\\u043B\\u044F \\u0441\\u0438\\u043D\\u0445\\u0440\\u043E\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u0438 \\u0432\\u0440\\u0435\\u043C\\u0435\\u043D\\u0438, \\u0432\\u0440\\u0435\\u043C\\u044F \\u043A\\u043B\\u0438\\u0435\\u043D\\u0442\\u0430: ".concat(clientTime));\n  } catch (error) {\n    console.error("[WS] Ошибка отправки ping:", error);\n  }\n}\n\n// Новая функция для запуска физики с задержкой\nfunction startPhysicsSimulation() {\n  physicsStarted = true;\n\n  // Активируем все ожидающие объекты\n  var _iterator = _createForOfIteratorHelper(pendingObjects),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var id = _step.value;\n      var obj = objects_objects[id];\n      if (obj && obj.body) {\n        // Активируем тело\n        obj.body.activate(true);\n\n        // Телепортируем к последним известным серверным координатам\n        if (obj.serverPos) {\n          var transform = new Ammo.btTransform();\n          obj.body.getMotionState().getWorldTransform(transform);\n          transform.setOrigin(new Ammo.btVector3(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z));\n          obj.body.getMotionState().setWorldTransform(transform);\n          obj.mesh.position.set(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z);\n          console.log("[Physics] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(id, " \\u0430\\u043A\\u0442\\u0438\\u0432\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D \\u0438 \\u0442\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D \\u0432 \\u043A\\u043E\\u043E\\u0440\\u0434\\u0438\\u043D\\u0430\\u0442\\u044B:"), {\n            x: obj.serverPos.x,\n            y: obj.serverPos.y,\n            z: obj.serverPos.z\n          });\n        }\n      }\n    }\n\n    // Очищаем список ожидающих\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  pendingObjects = [];\n  console.log("[Physics] Физика активирована, все ожидающие объекты обработаны");\n}\n\n// Экспортируем функции для доступа из других модулей\n\n;// ./src/gamepad.js\n\n\n\n// Константы для настройки поведения\nvar DEBUG_MODE = true; // Включает/выключает отладочные элементы (arrowHelper)\nvar MIN_ARROW_LENGTH = 10;\nvar MAX_ARROW_LENGTH = 50;\nvar SEND_INTERVAL = 50; // Уменьшаем интервал отправки до 50 мс для лучшей отзывчивости\nvar ARROW_HEIGHT_OFFSET = 2; // Смещение стрелки по высоте над игроком\nvar RAY_UPDATE_INTERVAL = 50; // Интервал обновления луча при движении камеры (мс)\nvar KEY_FORCE = 2.0; // Значительно увеличиваем силу импульса для клавиатурного управления\n\nvar arrowHelper;\nvar lastSentPosition = new three_core/* Vector3 */.Pq0();\nvar lastSendTime = 0;\nvar raycaster = new three_core/* Raycaster */.tBo();\nvar mouse = new three_core/* Vector2 */.I9Y();\nvar cameraLastPosition = new three_core/* Vector3 */.Pq0();\nvar lastRayUpdateTime = 0;\nvar lastIntersectPoint = new three_core/* Vector3 */.Pq0();\nvar isMouseActive = false; // Флаг активности мыши над игровой областью\n\n// Флаги для клавиатурного управления\nvar keys = {\n  w: false,\n  a: false,\n  s: false,\n  d: false\n};\n\n// Переменные для хранения направления\nvar currentDirection = new three_core/* Vector3 */.Pq0();\nvar directionNeedsUpdate = false;\nvar terrainMeshRef = null;\nvar playerMeshRef = null;\nvar cameraRef = null;\nvar socketRef = null;\nfunction getArrowDirection() {\n  return lastSentPosition.clone();\n}\nfunction initGamepad(camera, terrainMesh, playerMesh, socket, scene) {\n  // Сохраняем ссылки на объекты для использования в других функциях\n  terrainMeshRef = terrainMesh;\n  playerMeshRef = playerMesh;\n  cameraRef = camera;\n  socketRef = socket;\n  cameraLastPosition.copy(camera.position);\n\n  // Создаем и добавляем arrowHelper в сцену\n  arrowHelper = new three_core/* ArrowHelper */.E0M(new three_core/* Vector3 */.Pq0(0, 0, 1),\n  // Начальное направление\n  playerMesh.position,\n  // Начальная позиция\n  MIN_ARROW_LENGTH,\n  // Длина стрелки (начальная)\n  0xffff00 // Цвет стрелки\n  );\n\n  // Добавляем arrowHelper в сцену только если DEBUG_MODE включен\n  if (DEBUG_MODE) {\n    scene.add(arrowHelper);\n    console.log("ArrowHelper initialized and added to scene");\n  } else {\n    console.log("ArrowHelper initialized but hidden (DEBUG_MODE is off)");\n  }\n\n  // Добавляем обработчики событий мыши и клавиатуры\n  window.addEventListener(\'mousemove\', onMouseMove);\n  window.addEventListener(\'keydown\', onKeyDown);\n  window.addEventListener(\'keyup\', onKeyUp);\n\n  // Запускаем анимацию для обновления стрелки и обработки клавиатурного ввода\n  animate();\n  function animate() {\n    requestAnimationFrame(animate);\n\n    // Обновляем стрелку если нужно и если она видима\n    if (directionNeedsUpdate && DEBUG_MODE) {\n      updateArrowHelper(playerMesh);\n      directionNeedsUpdate = false;\n    }\n\n    // Проверяем, двигалась ли камера и нужно ли обновить луч\n    var now = Date.now();\n    if (isMouseActive && cameraRef && now - lastRayUpdateTime > RAY_UPDATE_INTERVAL) {\n      // Если камера движется и мышь активна над игровой областью\n      if (!cameraRef.position.equals(cameraLastPosition)) {\n        // Обновляем луч с последних координат мыши\n        updateRayFromLastMouse();\n        cameraLastPosition.copy(cameraRef.position);\n        lastRayUpdateTime = now;\n      }\n    }\n\n    // Обрабатываем клавиатурное управление\n    processKeyboardInput();\n  }\n  function processKeyboardInput() {\n    if (!playerMeshRef || !socketRef) return;\n\n    // Проверяем, если хотя бы одна клавиша нажата\n    if (keys.w || keys.a || keys.s || keys.d) {\n      // Создаем вектор направления на основе нажатых клавиш\n      var direction = new three_core/* Vector3 */.Pq0(0, 0, 0);\n      if (keys.w) direction.z -= 1;\n      if (keys.s) direction.z += 1;\n      if (keys.a) direction.x -= 1;\n      if (keys.d) direction.x += 1;\n\n      // Нормализуем направление, если оно не нулевое\n      if (direction.length() > 0) {\n        direction.normalize();\n\n        // Отправляем направление на сервер\n        if (Date.now() - lastSendTime > SEND_INTERVAL) {\n          // Получаем текущую конфигурацию физики\n          var physicsConfig = getPhysicsConfig();\n\n          // Используем множитель импульса из конфигурации, если она доступна\n          var keyForce = KEY_FORCE;\n          if (physicsConfig && physicsConfig.impulse_multiplier) {\n            keyForce = (physicsConfig.base_impulse || 0.5) * 8.0; // Увеличиваем в 8 раз базовый импульс\n          } else {\n            keyForce = KEY_FORCE * 4.0; // Или увеличиваем в 4 раза значение по умолчанию\n          }\n\n          // Логируем для отладки\n          console.log("[Gamepad] \\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430 \\u0438\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441\\u0430 \\u0441 \\u043A\\u043B\\u0430\\u0432\\u0438\\u0430\\u0442\\u0443\\u0440\\u044B: \\u043D\\u0430\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 (".concat(direction.x.toFixed(2), ", ").concat(direction.y.toFixed(2), ", ").concat(direction.z.toFixed(2), "), \\u0441\\u0438\\u043B\\u0430 ").concat(keyForce));\n\n          // Отправляем импульс на сервер\n          sendDirectionToServer(direction, keyForce, socketRef);\n          lastSendTime = Date.now();\n\n          // Обновляем lastSentPosition для отображения стрелки\n          lastSentPosition.copy(direction);\n          lastSentPosition.userData = {\n            distance: keyForce\n          };\n          directionNeedsUpdate = true;\n        }\n      }\n    }\n  }\n  function onKeyDown(event) {\n    // Обновляем состояние клавиш\n    switch (event.key.toLowerCase()) {\n      case \'w\':\n        keys.w = true;\n        break;\n      case \'a\':\n        keys.a = true;\n        break;\n      case \'s\':\n        keys.s = true;\n        break;\n      case \'d\':\n        keys.d = true;\n        break;\n    }\n  }\n  function onKeyUp(event) {\n    // Обновляем состояние клавиш\n    switch (event.key.toLowerCase()) {\n      case \'w\':\n        keys.w = false;\n        break;\n      case \'a\':\n        keys.a = false;\n        break;\n      case \'s\':\n        keys.s = false;\n        break;\n      case \'d\':\n        keys.d = false;\n        break;\n    }\n  }\n  function onMouseMove(event) {\n    // Обновляем координаты мыши\n    mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n    // Устанавливаем флаг активности мыши\n    isMouseActive = true;\n\n    // Вызываем функцию обновления направления\n    castRayAndUpdateDirection();\n  }\n  function updateRayFromLastMouse() {\n    // Обновляем луч с текущими координатами мыши и новой позицией камеры\n    castRayAndUpdateDirection();\n  }\n  function castRayAndUpdateDirection() {\n    if (!cameraRef || !terrainMeshRef || !playerMeshRef || !socketRef) return;\n\n    // Устанавливаем луч от камеры через координаты мыши\n    raycaster.setFromCamera(mouse, cameraRef);\n\n    // Находим пересечения с террейном\n    var intersects = raycaster.intersectObjects([terrainMeshRef]);\n    if (intersects.length > 0) {\n      var targetPosition = intersects[0].point;\n      lastIntersectPoint.copy(targetPosition);\n\n      // Вычисляем направление в 3D пространстве (с учетом оси Y)\n      currentDirection.set(targetPosition.x - playerMeshRef.position.x, targetPosition.y - playerMeshRef.position.y,\n      // Учитываем высоту\n      targetPosition.z - playerMeshRef.position.z);\n\n      // Сохраняем длину до нормализации (расстояние от игрока до точки пересечения)\n      var distance = currentDirection.length();\n\n      // Нормализуем для получения направления\n      currentDirection.normalize();\n\n      // Запоминаем направление и расстояние\n      lastSentPosition.copy(currentDirection);\n\n      // Сохраняем исходное расстояние для использования в updateArrowHelper\n      lastSentPosition.userData = {\n        distance: distance\n      };\n\n      // Помечаем, что направление нужно обновить\n      directionNeedsUpdate = true;\n\n      // Проверяем, нужно ли отправлять данные на сервер\n      if (Date.now() - lastSendTime > SEND_INTERVAL) {\n        sendDirectionToServer(currentDirection, distance, socketRef);\n        lastSendTime = Date.now();\n      }\n    }\n  }\n  function sendDirectionToServer(direction, distance, socket) {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      // Для мышиного управления увеличиваем дистанцию, которая используется как сила импульса\n      var enhancedDistance = Math.min(distance * 1.5, 100); // Увеличиваем на 50%, но не больше 100\n\n      socket.send(JSON.stringify({\n        type: \'cmd\',\n        cmd: \'MOUSE_VECTOR\',\n        data: {\n          x: direction.x,\n          y: direction.y,\n          // Теперь отправляем реальное значение Y\n          z: direction.z,\n          distance: enhancedDistance // Используем увеличенное значение дистанции\n        },\n        client_time: Date.now(),\n        object_id: \'mainPlayer1\'\n      }));\n    } else {\n      console.error(\'WebSocket не подключен\');\n    }\n  }\n}\n\n// Функция для включения/выключения отображения arrowHelper\nfunction setDebugMode(enabled) {\n  if (arrowHelper) {\n    arrowHelper.visible = enabled;\n    console.log("ArrowHelper visibility set to ".concat(enabled));\n  }\n}\n\n// Функция для получения текущего статуса отладочного режима\nfunction getDebugMode() {\n  return DEBUG_MODE;\n}\n\n// Обновляем позицию и направление arrowHelper\nfunction updateArrowHelper(playerMesh) {\n  if (arrowHelper) {\n    // Позиция стрелки с учетом смещения по высоте\n    var arrowPosition = new three_core/* Vector3 */.Pq0(playerMesh.position.x, playerMesh.position.y + ARROW_HEIGHT_OFFSET,\n    // Поднимаем стрелку над игроком\n    playerMesh.position.z);\n\n    // Обновляем позицию стрелки\n    arrowHelper.position.copy(arrowPosition);\n\n    // Устанавливаем направление стрелки (теперь с учетом оси Y)\n    arrowHelper.setDirection(lastSentPosition);\n\n    // Используем сохраненное расстояние до точки пересечения\n    var distance = lastSentPosition.userData ? lastSentPosition.userData.distance : MIN_ARROW_LENGTH;\n\n    // Ограничиваем длину стрелки, чтобы она не была слишком большой или маленькой\n    var arrowLength = Math.min(MAX_ARROW_LENGTH, Math.max(MIN_ARROW_LENGTH, distance));\n\n    // Устанавливаем длину стрелки пропорционально расстоянию\n    arrowHelper.setLength(arrowLength);\n  } else {\n    console.error("arrowHelper не инициализирован");\n  }\n}\n\n// Экспортируем функции для использования в других модулях\n\n;// ./src/camera.js\n// camera.js\n\n\n\n\n// Объявляем камеру\nvar camera;\n\n// Настройки камеры - оставляем оригинальные значения\nvar CAMERA_HEIGHT = 100;\nvar CAMERA_DISTANCE = 100;\nvar SMOOTH_FACTOR = 0.05;\nvar ROTATION_SMOOTH_FACTOR = 0.03;\nvar DEAD_ZONE_ANGLE = 0.3;\nvar MIN_Y_ANGLE = -0.5;\nvar MAX_Y_ANGLE = 0.5;\n\n// Дополнительные настройки для адаптивного доворота\nvar MIN_ADAPTIVE_FACTOR = 0.01; // Минимальный фактор доворота\nvar MAX_ADAPTIVE_FACTOR = 0.12; // Максимальный фактор для быстрых поворотов\nvar QUADRATIC_FACTOR = 0.9; // Коэффициент квадратичной зависимости (0-1)\n\n// Внутренняя переменная для хранения текущего значения коэффициента\nvar currentQuadraticFactor = QUADRATIC_FACTOR;\nvar PLAYER_ID = "mainPlayer1"; // Жестко закрепляем ID игрока\n\n// Сохраняем последнюю известную позицию и направление игрока\nvar lastKnownPosition = new three_core/* Vector3 */.Pq0(0, 0, 0);\nvar lastCameraPosition = new three_core/* Vector3 */.Pq0(0, CAMERA_HEIGHT, CAMERA_DISTANCE);\nvar lastCameraDirection = new three_core/* Vector3 */.Pq0(0, 0, -1); // Начальное направление камеры\nvar targetCameraDirection = new three_core/* Vector3 */.Pq0(0, 0, -1);\nvar cameraTarget = new three_core/* Vector3 */.Pq0(); // Промежуточная точка для сглаживания\nvar lastArrowDirection = new three_core/* Vector3 */.Pq0(0, 0, 1); // Последнее направление стрелки\nvar lastMeasuredAngle = 0; // Последний измеренный угол для логирования\nvar lastMeasuredDistance = 0; // Последнее измеренное расстояние для логирования\nvar turningActive = false; // Флаг активного поворота для логирования\n\n// Добавим новую переменную для сглаживания точки, на которую смотрит камера\nvar smoothLookAtTarget = new three_core/* Vector3 */.Pq0();\nfunction initCamera() {\n  // Создаем камеру\n  camera = new three_core/* PerspectiveCamera */.ubm(60, window.innerWidth / window.innerHeight, 0.2, 2000);\n\n  // Устанавливаем начальную позицию\n  camera.position.set(0, CAMERA_HEIGHT, CAMERA_DISTANCE);\n  camera.lookAt(0, 0, 0);\n\n  // Добавляем обработчик изменения размера окна\n  window.addEventListener(\'resize\', camera_onWindowResize);\n\n  // Инициализируем значение currentQuadraticFactor\n  currentQuadraticFactor = QUADRATIC_FACTOR;\n  console.log("[Camera] Камера инициализирована");\n  return camera;\n}\nfunction camera_onWindowResize() {\n  if (!camera) return;\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n}\n\n// Функция для вычисления угла между двумя направлениями в 3D\nfunction angleBetweenDirections(dir1, dir2) {\n  // Нормализуем векторы для корректного вычисления угла\n  var v1 = dir1.clone().normalize();\n  var v2 = dir2.clone().normalize();\n\n  // Вычисляем угол между векторами\n  return Math.acos(Math.min(1, Math.max(-1, v1.dot(v2))));\n}\n\n// Функция для вычисления адаптивного фактора доворота с квадратичной зависимостью\nfunction calculateAdaptiveRotationFactor(angle, distance) {\n  // Нормализуем расстояние (предполагаем, что максимальное значимое расстояние - 100)\n  var normalizedDistance = Math.min(distance, 100) / 100;\n\n  // Вычисляем относительную скорость поворота с учетом угла\n  var angleRatio = angle / DEAD_ZONE_ANGLE;\n\n  // Применяем квадратичную зависимость от расстояния с настраиваемым коэффициентом\n  // Когда currentQuadraticFactor = 0, зависимость линейная\n  // Когда currentQuadraticFactor = 1, зависимость полностью квадратичная\n  var distanceFactor = normalizedDistance * (1 - currentQuadraticFactor) + Math.pow(normalizedDistance, 2) * currentQuadraticFactor;\n\n  // Комбинируем факторы угла и расстояния\n  var combinedFactor = angleRatio * distanceFactor;\n\n  // Интерполируем между минимальным и максимальным факторами доворота\n  var adaptiveFactor = MIN_ADAPTIVE_FACTOR + (MAX_ADAPTIVE_FACTOR - MIN_ADAPTIVE_FACTOR) * Math.min(1.0, combinedFactor);\n  return adaptiveFactor;\n}\nfunction updateCamera() {\n  if (!camera) return;\n  var player = objects_objects[PLAYER_ID];\n  if (player && player.mesh) {\n    var currentPlayerPosition = player.mesh.position.clone();\n    var arrowDirection = getArrowDirection();\n\n    // Плавно обновляем точку, на которую смотрит камера\n    smoothLookAtTarget.lerp(currentPlayerPosition, SMOOTH_FACTOR);\n    if (arrowDirection.length() > 0) {\n      var angle = angleBetweenDirections(arrowDirection, lastArrowDirection);\n      if (angle > DEAD_ZONE_ANGLE) {\n        var yComponent = Math.max(MIN_Y_ANGLE, Math.min(MAX_Y_ANGLE, -arrowDirection.y));\n        targetCameraDirection.set(-arrowDirection.x, yComponent, -arrowDirection.z).normalize();\n        lastArrowDirection.copy(arrowDirection);\n        turningActive = true;\n      }\n    }\n    var adaptiveRotationFactor = calculateAdaptiveRotationFactor(lastMeasuredAngle, lastMeasuredDistance);\n    lastCameraDirection.lerp(targetCameraDirection, adaptiveRotationFactor);\n    lastCameraDirection.normalize();\n    var horizontalDistance = CAMERA_DISTANCE * Math.cos(lastCameraDirection.y);\n    var cameraOffset = new three_core/* Vector3 */.Pq0(lastCameraDirection.x * horizontalDistance, CAMERA_HEIGHT + lastCameraDirection.y * CAMERA_DISTANCE, lastCameraDirection.z * horizontalDistance);\n    var targetPosition = currentPlayerPosition.clone().add(cameraOffset);\n    cameraTarget.lerp(targetPosition, SMOOTH_FACTOR);\n    camera.position.copy(cameraTarget);\n\n    // Камера теперь смотрит на сглаженную позицию\n    camera.lookAt(smoothLookAtTarget);\n    lastKnownPosition.copy(currentPlayerPosition);\n  }\n}\n\n// Функция для изменения коэффициента квадратичной зависимости\nfunction setQuadraticFactor(value) {\n  // Ограничиваем значение от 0 до 1\n  var newValue = Math.max(0, Math.min(1, value));\n  console.log("[Camera] \\u0418\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u0435 \\u043A\\u043E\\u044D\\u0444\\u0444\\u0438\\u0446\\u0438\\u0435\\u043D\\u0442\\u0430 \\u043A\\u0432\\u0430\\u0434\\u0440\\u0430\\u0442\\u0438\\u0447\\u043D\\u043E\\u0439 \\u0437\\u0430\\u0432\\u0438\\u0441\\u0438\\u043C\\u043E\\u0441\\u0442\\u0438: ".concat(currentQuadraticFactor.toFixed(2), " -> ").concat(newValue.toFixed(2)));\n  currentQuadraticFactor = newValue;\n  return newValue;\n}\n\n// Функция для получения текущего коэффициента квадратичной зависимости\nfunction getQuadraticFactor() {\n  return currentQuadraticFactor;\n}\n\n// Debug-функция для вывода расширенной информации о камере\nfunction logCameraStatus() {\n  if (!camera) return;\n  console.log("[Camera] Position: (".concat(camera.position.x.toFixed(2), ", ").concat(camera.position.y.toFixed(2), ", ").concat(camera.position.z.toFixed(2), ")"));\n  console.log("[Camera] Direction: (".concat(lastCameraDirection.x.toFixed(2), ", ").concat(lastCameraDirection.y.toFixed(2), ", ").concat(lastCameraDirection.z.toFixed(2), ")"));\n  console.log("[Camera] Target Direction: (".concat(targetCameraDirection.x.toFixed(2), ", ").concat(targetCameraDirection.y.toFixed(2), ", ").concat(targetCameraDirection.z.toFixed(2), ")"));\n  console.log("[Camera] Arrow Direction: (".concat(lastArrowDirection.x.toFixed(2), ", ").concat(lastArrowDirection.y.toFixed(2), ", ").concat(lastArrowDirection.z.toFixed(2), ")"));\n  console.log("[Camera] Looking at: (".concat(lastKnownPosition.x.toFixed(2), ", ").concat(lastKnownPosition.y.toFixed(2), ", ").concat(lastKnownPosition.z.toFixed(2), ")"));\n  console.log("[Camera] Turning Active: ".concat(turningActive, ", Last Angle: ").concat(lastMeasuredAngle.toFixed(3), " \\u0440\\u0430\\u0434 (").concat((lastMeasuredAngle * 180 / Math.PI).toFixed(1), "\\xB0)"));\n  console.log("[Camera] Last Distance: ".concat(lastMeasuredDistance.toFixed(1), ", Quadratic Factor: ").concat(currentQuadraticFactor.toFixed(2), ", Default: ").concat(QUADRATIC_FACTOR.toFixed(2)));\n  console.log("[Camera] Adaptive Factor: ".concat(calculateAdaptiveRotationFactor(lastMeasuredAngle, lastMeasuredDistance).toFixed(3)));\n\n  // Проверяем наличие игрока\n  var player = objects[PLAYER_ID];\n  if (player && player.mesh) {\n    console.log("[Camera] Player found at: (".concat(player.mesh.position.x.toFixed(2), ", ").concat(player.mesh.position.y.toFixed(2), ", ").concat(player.mesh.position.z.toFixed(2), ")"));\n  } else {\n    console.log("[Camera] Player with ID \\"".concat(PLAYER_ID, "\\" not found!"));\n  }\n}\n;// ./src/gamestatemanager.js\nfunction gamestatemanager_typeof(o) { "@babel/helpers - typeof"; return gamestatemanager_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, gamestatemanager_typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == gamestatemanager_typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != gamestatemanager_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != gamestatemanager_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && ("object" == gamestatemanager_typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\n// gamestatemanager.js\n\n\n\n\n\nvar GameStateManager = /*#__PURE__*/function (_EventEmitter) {\n  function GameStateManager(ws) {\n    var _this;\n    _classCallCheck(this, GameStateManager);\n    _this = _callSuper(this, GameStateManager);\n    _this.terrainMeshCreated = false;\n    _this.playerMeshCreated = false;\n    _this.terrainMesh = null;\n    _this.playerMesh = null;\n    _this.ws = ws;\n    _this.scene = scene_scene;\n    return _this;\n  }\n  _inherits(GameStateManager, _EventEmitter);\n  return _createClass(GameStateManager, [{\n    key: "setTerrainMesh",\n    value: function setTerrainMesh(mesh) {\n      this.terrainMesh = mesh;\n      this.terrainMeshCreated = true;\n      this.checkGameState();\n    }\n  }, {\n    key: "setPlayerMesh",\n    value: function setPlayerMesh(mesh) {\n      this.playerMesh = mesh;\n      this.playerMeshCreated = true;\n      this.checkGameState();\n    }\n  }, {\n    key: "checkGameState",\n    value: function checkGameState() {\n      if (this.terrainMeshCreated && this.playerMeshCreated) {\n        initGamepad(camera, this.terrainMesh, this.playerMesh, this.ws, this.scene);\n        this.emit(\'gameInitialized\');\n        console.warn("[Game State Manager] game initialized!!!");\n      }\n    }\n  }]);\n}(events.EventEmitter); // Создаем экземпляр GameStateManager с ws\nvar gameStateManager;\nfunction initGameStateManager(ws, scene) {\n  gameStateManager = new GameStateManager(ws, scene);\n}\n;// ./src/objects.js\n// objects.js\n\n\n\n\n\nvar terrainCreated = new events.EventEmitter();\nvar playerCreated = new events.EventEmitter();\nvar objects_objects = {}; // Словарь объектов: id -> { mesh, body, serverPos, ... }\nvar terrainMesh; // Экспортируем terrainMesh\nvar playerMesh; // Экспортируем playerMesh\n\nfunction createMeshAndBodyForObject(data) {\n  if (!data || !data.object_type) {\n    console.error("Invalid data received for object creation:", data);\n    return null;\n  }\n  var type = data.object_type;\n  var mesh = null,\n    body = null;\n  try {\n    // Создаем меш в любом случае\n    switch (type) {\n      case "terrain":\n        mesh = createTerrainMesh(data);\n        body = createPhysicsBodyForTerrain(data);\n        break;\n      case "sphere":\n        mesh = createSphereMesh(data);\n        // Создаем физическое тело только если physics_by равен "ammo"\n        if (data.physics_by === "ammo") {\n          body = createPhysicsBodyForSphere(data);\n        }\n        break;\n      case "tree":\n        mesh = createTreeMesh(data);\n        break;\n      case "box":\n        mesh = createBoxMesh(data);\n        // Создаем физическое тело только если physics_by равен "ammo"\n        if (data.physics_by === "ammo") {\n          body = createPhysicsBodyForBox(data);\n        }\n        break;\n      default:\n        console.warn("Unknown object type: ".concat(type));\n        return null;\n    }\n\n    // Проверяем, что mesh был успешно создан\n    if (!mesh) {\n      console.error("Failed to create mesh for object type: ".concat(type));\n      return null;\n    }\n    scene_scene.add(mesh);\n\n    // Сохраняем в объекте исходные данные, включая массу\n    var result = {\n      mesh: mesh,\n      body: body,\n      object_type: type,\n      mass: data.mass || 0,\n      // Сохраняем массу из данных сервера\n      physicsBy: data.physics_by || "both" // Сохраняем тип физики\n    };\n    return result;\n  } catch (error) {\n    console.error("\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D\\u0438\\u0438 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 \\u0442\\u0438\\u043F\\u0430 ".concat(type, ":"), error);\n    // Если mesh был создан, но произошла ошибка, удаляем его из сцены\n    if (mesh) {\n      scene_scene.remove(mesh);\n    }\n    return null;\n  }\n}\nfunction createPhysicsBodyForTerrain(data) {\n  if (typeof Ammo === \'undefined\') {\n    console.error(\'Ammo.js не инициализирован\');\n    return null;\n  }\n  if (!physics_localPhysicsWorld) {\n    console.error(\'Физический мир не инициализирован\');\n    return null;\n  }\n  var w = data.heightmap_w;\n  var h = data.heightmap_h;\n  var scaleX = data.scale_x;\n  var scaleZ = data.scale_z;\n\n  // Создаем буфер в памяти Ammo для данных высот\n  var ammoHeightData = Ammo._malloc(4 * w * h);\n\n  // Копируем данные высот в память Ammo\n  var p = 0;\n  var p2 = 0;\n  for (var j = 0; j < h; j++) {\n    for (var i = 0; i < w; i++) {\n      Ammo.HEAPF32[ammoHeightData + p2 >> 2] = data.height_data[p];\n      p++;\n      p2 += 4;\n    }\n  }\n\n  // Создаем форму террейна\n  var shape = new Ammo.btHeightfieldTerrainShape(w, h, ammoHeightData, 1,\n  // heightScale\n  data.min_height, data.max_height, 1,\n  // up axis = 1 для Y\n  Ammo.PHY_FLOAT, false // flipQuadEdges\n  );\n\n  // Устанавливаем масштабирование\n  shape.setLocalScaling(new Ammo.btVector3(scaleX, data.scale_y, scaleZ));\n\n  // Устанавливаем margin для террейна (0.5 вместо 2.0, так как террейн меньше)\n  shape.setMargin(0.5);\n  console.log("[Terrain] Установлен margin террейна:", 0.5);\n\n  // Создаем трансформацию\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n  var mass = 0; // Статическое тело\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Добавляем тело в физический мир\n  var TERRAIN_GROUP = 1;\n  physics_localPhysicsWorld.addRigidBody(body, TERRAIN_GROUP, -1); // Террейн сталкивается со всеми\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n  console.log("[Terrain] Физическое тело создано:", {\n    размеры: {\n      w: w,\n      h: h\n    },\n    масштаб: {\n      x: data.scaleX,\n      y: data.scale_y,\n      z: data.scaleZ\n    },\n    позиция: {\n      x: data.x || 0,\n      y: (data.min_height + data.max_height) / 2,\n      z: data.z || 0\n    },\n    минВысота: data.min_height,\n    максВысота: data.max_height\n  });\n  return body;\n}\nfunction createTerrainMesh(data) {\n  var w = data.heightmap_w || 64;\n  var h = data.heightmap_h || 64;\n  var geo = new three_core/* PlaneGeometry */.bdM(w * data.scale_x, h * data.scale_z, w - 1, h - 1);\n  geo.rotateX(-Math.PI / 2);\n  if (data.height_data) {\n    var verts = geo.attributes.position.array;\n    for (var i = 0; i < verts.length; i += 3) {\n      var ix = i / 3 % w;\n      var iz = Math.floor(i / 3 / w);\n      verts[i + 1] = data.height_data[iz * w + ix] * data.scale_y;\n    }\n    geo.computeVertexNormals();\n  }\n  terrainMesh = new three_core/* Mesh */.eaF(\n  // Присваиваем mesh переменной terrainMesh\n  geo, new three_core/* MeshPhongMaterial */.tXL({\n    color: parseColor(data.color || "#0000ff"),\n    wireframe: false,\n    flatShading: true\n  }));\n\n  // Включаем тени для террейна\n  terrainMesh.receiveShadow = true;\n  gameStateManager.setTerrainMesh(terrainMesh);\n  return terrainMesh;\n}\nfunction createSphereMesh(data) {\n  try {\n    var geo = new three_core/* SphereGeometry */.Gu$(data.radius || 1, 32, 32);\n    var mesh = new three_core/* Mesh */.eaF(geo, new three_core/* MeshPhongMaterial */.tXL({\n      color: parseColor(data.color || "#888888"),\n      shininess: 30\n    }));\n\n    // Включаем тени для сфер\n    mesh.castShadow = true;\n    mesh.receiveShadow = true;\n    if (data.id === "mainPlayer1") {\n      playerMesh = mesh;\n      gameStateManager.setPlayerMesh(playerMesh);\n    }\n    return mesh;\n  } catch (error) {\n    console.error("Ошибка при создании меша сферы:", error);\n    return null;\n  }\n}\nfunction createBoxMesh(data) {\n  var geo = new three_core/* BoxGeometry */.iNn(1, 1, 1);\n  return new three_core/* Mesh */.eaF(geo, new three_core/* MeshLambertMaterial */.G_z({\n    color: parseColor(data.color || "#888888")\n  }));\n}\nfunction createPhysicsBodyForSphere(data) {\n  try {\n    if (typeof Ammo === \'undefined\') {\n      console.error(\'Ammo.js не инициализирован\');\n      return null;\n    }\n    if (!physics_localPhysicsWorld) {\n      console.error(\'Физический мир не инициализирован\');\n      return null;\n    }\n\n    // Безопасная проверка window.Ammo\n    if (typeof window.Ammo === \'undefined\') {\n      console.error(\'window.Ammo не инициализирован\');\n      return null;\n    }\n    var radius = data.radius || 1;\n    // Увеличиваем массу в три раза для лучшей физики\n    var mass = data.mass || 15.0; // Увеличиваем с 5.0 до 15.0\n\n    // Создаем все Ammo объекты через window.Ammo\n    var shape = new window.Ammo.btSphereShape(radius);\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(data.x || 0, data.y || 0, data.z || 0));\n    var localInertia = new window.Ammo.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    var motionState = new window.Ammo.btDefaultMotionState(transform);\n    var rbInfo = new window.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    var body = new window.Ammo.btRigidBody(rbInfo);\n\n    // Проверяем, что тело имеет необходимые методы\n    if (!body || typeof body.getMotionState !== \'function\') {\n      console.error(\'Ошибка: созданное физическое тело недействительно\');\n      window.Ammo.destroy(rbInfo);\n      window.Ammo.destroy(localInertia);\n      return null;\n    }\n\n    // Устанавливаем дополнительные свойства\n    body.setFriction(0.02); // Уменьшаем трение для лучшего скольжения\n    body.setRestitution(1.0); // Максимальная упругость для мощного отскока\n    body.setRollingFriction(0.01); // Очень низкое сопротивление качению\n    body.setDamping(0.0, 0.0); // Убираем затухание для сохранения энергии\n\n    // Отключаем деактивацию\n    body.setActivationState(4); // DISABLE_DEACTIVATION\n\n    // Для небольших сфер включаем CCD (continuous collision detection),\n    // чтобы предотвратить проваливание сквозь поверхности при высокой скорости\n    body.setCcdMotionThreshold(radius * 0.7);\n    body.setCcdSweptSphereRadius(radius * 0.6);\n\n    // Добавляем тело в физический мир\n    var SPHERE_GROUP = 2;\n    physics_localPhysicsWorld.addRigidBody(body, SPHERE_GROUP, -1); // Сферы сталкиваются со всеми\n\n    console.log("[Sphere] Физическое тело создано:", {\n      radius: radius,\n      mass: mass,\n      position: {\n        x: data.x || 0,\n        y: data.y || 0,\n        z: data.z || 0\n      },\n      ccd: {\n        motionThreshold: radius * 0.7,\n        sweptSphereRadius: radius * 0.6\n      },\n      friction: 0.02,\n      restitution: 1.0\n    });\n\n    // Очистка памяти\n    window.Ammo.destroy(rbInfo);\n    window.Ammo.destroy(localInertia);\n    return body;\n  } catch (error) {\n    console.error(\'Ошибка при создании физического тела:\', error);\n    return null;\n  }\n}\nfunction createPhysicsBodyForBox(data) {\n  try {\n    if (typeof Ammo === \'undefined\') {\n      console.error(\'Ammo.js не инициализирован\');\n      return null;\n    }\n    if (!physics_localPhysicsWorld) {\n      console.error(\'Физический мир не инициализирован\');\n      return null;\n    }\n    var width = data.width || 1;\n    var height = data.height || 1;\n    var depth = data.depth || 1;\n    var mass = data.mass || 1;\n\n    // Создаем все Ammo объекты через window.Ammo\n    var shape = new window.Ammo.btBoxShape(new window.Ammo.btVector3(width / 2, height / 2, depth / 2));\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(data.x || 0, data.y || 0, data.z || 0));\n    var localInertia = new window.Ammo.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    var motionState = new window.Ammo.btDefaultMotionState(transform);\n    var rbInfo = new window.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    var body = new window.Ammo.btRigidBody(rbInfo);\n\n    // Настраиваем физические свойства\n    body.setFriction(0.5);\n    body.setRollingFriction(0.1);\n    body.setRestitution(0.2); // Немного уменьшаем упругость для стабильности\n    body.setDamping(0.01, 0.01); // Небольшое линейное и угловое затухание\n\n    // Включаем CCD для предотвращения проваливания сквозь террейн\n    var maxDimension = Math.max(width, height, depth);\n    body.setCcdMotionThreshold(maxDimension * 0.8); // Увеличиваем порог для активации CCD\n    body.setCcdSweptSphereRadius(maxDimension * 0.7); // Радиус сферы для CCD\n\n    // Отключаем деактивацию\n    body.setActivationState(4); // DISABLE_DEACTIVATION\n\n    // Добавляем тело в физический мир\n    var BOX_GROUP = 3;\n    physics_localPhysicsWorld.addRigidBody(body, BOX_GROUP, -1); // Коробки сталкиваются со всеми\n\n    console.log("[Box] Физическое тело создано:", {\n      dimensions: {\n        width: width,\n        height: height,\n        depth: depth\n      },\n      mass: mass,\n      position: {\n        x: data.x || 0,\n        y: data.y || 0,\n        z: data.z || 0\n      },\n      ccd: {\n        motionThreshold: maxDimension * 0.8,\n        sweptSphereRadius: maxDimension * 0.7\n      },\n      friction: 0.5,\n      restitution: 0.2\n    });\n\n    // Очистка памяти\n    window.Ammo.destroy(rbInfo);\n    window.Ammo.destroy(localInertia);\n    return body;\n  } catch (error) {\n    console.error(\'Ошибка при создании физического тела:\', error);\n    return null;\n  }\n}\nfunction parseColor(colorStr) {\n  if (!colorStr) return 0x888888;\n  if (colorStr.startsWith("#")) {\n    return parseInt(colorStr.slice(1), 16);\n  }\n  return 0x888888;\n}\nfunction createTestSphere() {\n  // Создаем визуальную сферу\n  var radius = 1;\n  var geometry = new THREE.SphereGeometry(radius, 32, 32);\n  var material = new THREE.MeshPhongMaterial({\n    color: 0xff00ff,\n    shininess: 30\n  });\n  var mesh = new THREE.Mesh(geometry, material);\n\n  // Включаем тени для тестовой сферы\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n\n  // Позиционируем сферу высоко над террейном\n  var startY = 58; // Высота над террейном\n  mesh.position.set(0, startY, 0);\n  scene.add(mesh);\n\n  // Создаем физическое тело\n  var shape = new Ammo.btSphereShape(radius);\n  var mass = 5; // Увеличиваем массу с 3 до 5\n\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n  transform.setOrigin(new Ammo.btVector3(0, startY, 0));\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  shape.calculateLocalInertia(mass, localInertia);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Важные настройки для физического тела\n  body.setActivationState(4); // DISABLE_DEACTIVATION\n  body.setFriction(0.2); // Уменьшаем с 0.3 до 0.2\n  body.setRollingFriction(0.03); // Уменьшаем с 0.05 до 0.03\n  body.setRestitution(0.99); // Увеличиваем до максимума\n  body.setDamping(0.0, 0.0); // Отключаем затухание полностью\n\n  // Включаем CCD для предотвращения проваливания сквозь объекты\n  body.setCcdMotionThreshold(radius * 0.6);\n  body.setCcdSweptSphereRadius(radius * 0.5);\n\n  // Добавляем тело в физический мир\n  var SPHERE_GROUP = 2;\n  localPhysicsWorld.addRigidBody(body, SPHERE_GROUP, -1); // Тестовая сфера сталкивается со всеми\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n\n  // Добавляем объект в наш список объектов\n  var testSphereObj = {\n    mesh: mesh,\n    body: body,\n    object_type: "test_sphere",\n    physicsBy: "ammo" // Изменено с "both" на "ammo", чтобы управлялось только локальной физикой\n  };\n  objects_objects["test_sphere"] = testSphereObj;\n  return testSphereObj;\n}\n;// ./src/throttledlog.js\n//throttledlog.js\n\n// Система логирования с ограничением частоты\nvar LOG_INTERVAL = 5000; // 1 секунда между логами\nvar logTimers = {};\nfunction throttledLog(category, message) {\n  var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var now = Date.now();\n\n  // Проверяем, прошло ли достаточно времени с последнего лога для этой категории\n  if (!logTimers[category] || now - logTimers[category] >= LOG_INTERVAL) {\n    // Обновляем таймер для этой категории\n    logTimers[category] = now;\n\n    // Форматируем и выводим сообщение\n    if (data) {\n      console.log("[".concat(category, "] ").concat(message), data);\n    } else {\n      console.log("[".concat(category, "] ").concat(message));\n    }\n    return true; // Лог был выведен\n  }\n  return false; // Лог был пропущен из-за ограничения частоты\n}\n\n// Функция для логирования данных о главном игроке\nfunction logMainPlayerInfo() {\n  var mainPlayer = objects["mainPlayer1"];\n  if (!mainPlayer || !mainPlayer.mesh) {\n    return;\n  }\n  var pos = mainPlayer.mesh.position;\n\n  // Получаем скорость, если доступна физика\n  var vel = {\n    x: 0,\n    y: 0,\n    z: 0\n  };\n  if (mainPlayer.body) {\n    var velocity = mainPlayer.body.getLinearVelocity();\n    vel = {\n      x: velocity.x(),\n      y: velocity.y(),\n      z: velocity.z()\n    };\n    window.Ammo.destroy(velocity);\n  }\n\n  // Выводим в формате, напоминающем C++ вывод\n  throttledLog("MainPlayer", "Position: (".concat(pos.x.toFixed(2), ", ").concat(pos.y.toFixed(2), ", ").concat(pos.z.toFixed(2), "), ") + "Velocity: (".concat(vel.x.toFixed(2), ", ").concat(vel.y.toFixed(2), ", ").concat(vel.z.toFixed(2), ")"));\n}\n;// ./src/physics.js\nfunction physics_typeof(o) { "@babel/helpers - typeof"; return physics_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, physics_typeof(o); }\nfunction physics_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ physics_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == physics_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(physics_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction physics_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction physics_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { physics_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { physics_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// physics.js\n\n\n\n\nvar physics_localPhysicsWorld = null;\nvar ammoPromise = null;\n\n// Настройки для коррекции позиции\nvar DEAD_ZONE = 10;\nvar CORRECTION_STRENGTH = 50.0;\nvar TELEPORT_THRESHOLD = 5.0;\n\n// Добавляем настройки для client-side prediction\nvar PREDICTION_SMOOTH_FACTOR = 10;\nvar PREDICTION_MAX_ERROR = 10.0;\nvar DISTANCE_BASED_SMOOTH_FACTOR = true; // Использовать динамический коэффициент сглаживания\nvar NEW_OBJECT_TIMEOUT = 2000; // 2 секунды для "новых" объектов\n\n// История команд для предсказания\nvar inputHistory = (/* unused pure expression or super */ null && ([]));\nvar lastSequenceNumber = 0; // Счетчик последовательности для команд\nvar lastServerUpdateTime = 0; // Время последнего серверного обновления\n\n// Добавляем маркер времени создания объектов\nvar objectCreationTimes = new Map();\n\n// Функция для настройки физического мира\nfunction setupPhysicsWorld() {\n  if (!window.Ammo) {\n    console.error("[Physics] Ammo.js не инициализирован");\n    return;\n  }\n\n  // Создаем физический мир\n  var collisionConfiguration = new window.Ammo.btDefaultCollisionConfiguration();\n  var dispatcher = new window.Ammo.btCollisionDispatcher(collisionConfiguration);\n  var broadphase = new window.Ammo.btDbvtBroadphase();\n  var solver = new window.Ammo.btSequentialImpulseConstraintSolver();\n  physics_localPhysicsWorld = new window.Ammo.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n\n  // Устанавливаем гравитацию\n  physics_localPhysicsWorld.setGravity(new window.Ammo.btVector3(0, -9.81, 0));\n  console.log("[Physics] Физический мир успешно создан");\n\n  // Добавляем эффект отскока после создания мира\n  // TODO: Реализация отскока отложена на будущее\n  // addCollisionBounceEffect();\n}\nfunction initAmmo() {\n  return _initAmmo.apply(this, arguments);\n}\n\n// Обработка шага физики\nfunction _initAmmo() {\n  _initAmmo = physics_asyncToGenerator(/*#__PURE__*/physics_regeneratorRuntime().mark(function _callee() {\n    return physics_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt("return", new Promise(function (resolve, reject) {\n            if (typeof Ammo !== \'undefined\') {\n              console.log(\'Ammo.js уже инициализирован\');\n              setupPhysicsWorld();\n              resolve();\n              return;\n            }\n            console.log(\'Инициализация Ammo.js...\');\n            var ammoScript = document.createElement(\'script\');\n            ammoScript.src = \'/ammo/ammo.wasm.js\';\n            ammoScript.async = true;\n            ammoScript.onload = function () {\n              console.log(\'Скрипт Ammo.js загружен, инициализация...\');\n              window.Ammo().then(function (Ammo) {\n                window.Ammo = Ammo;\n                console.log(\'Ammo.js инициализирован успешно\');\n                setupPhysicsWorld();\n\n                // Запускаем физическую симуляцию с задержкой в 1 секунду,\n                // чтобы гарантировать получение координат от сервера\n                console.log("[Physics] Задерживаем запуск физики на 1 секунду для получения серверных координат...");\n                setTimeout(function () {\n                  startPhysicsSimulation();\n                }, 1000);\n                resolve();\n              })["catch"](function (err) {\n                console.error(\'Ошибка инициализации Ammo.js:\', err);\n                reject(err);\n              });\n            };\n            ammoScript.onerror = function (err) {\n              console.error(\'Ошибка загрузки Ammo.js:\', err);\n              reject(err);\n            };\n            document.body.appendChild(ammoScript);\n          }));\n        case 1:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _initAmmo.apply(this, arguments);\n}\nfunction stepPhysics(deltaTime) {\n  if (!physics_localPhysicsWorld) return;\n  try {\n    // Проверяем корректность deltaTime\n    if (!deltaTime || isNaN(deltaTime) || deltaTime <= 0 || deltaTime > 1) {\n      deltaTime = 1 / 60; // Значение по умолчанию\n    }\n\n    // Ограничиваем максимальный шаг для стабильности\n    var maxStep = 1 / 60; // Не больше 30мс для одного шага\n    var effectiveStep = Math.min(deltaTime, maxStep);\n\n    // Используем фиксированный шаг и переменное количество подшагов для точности\n    var fixedStep = 1 / 120; // 120 Гц внутренние шаги\n    var maxSubSteps = Math.ceil(effectiveStep / fixedStep);\n\n    // Выполняем шаг симуляции с заданными параметрами\n    physics_localPhysicsWorld.stepSimulation(effectiveStep, maxSubSteps, fixedStep);\n\n    // Обновляем физические объекты\n    updatePhysicsObjects(objects_objects, deltaTime);\n  } catch (error) {\n    console.error(\'Ошибка при обновлении физики:\', error);\n  }\n}\n\n// Функция для обновления отображения скорости игрока\nfunction updatePlayerSpeedDisplay(speed, maxSpeed, mass) {\n  var speedDisplay = document.getElementById(\'player-speed\');\n  var maxSpeedDisplay = document.getElementById(\'player-max-speed\');\n  var massDisplay = document.getElementById(\'player-mass\');\n  if (speedDisplay) {\n    // Форматируем до 2 знаков после запятой для большей точности при малых скоростях\n    speedDisplay.textContent = "\\u0421\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C: ".concat(speed.toFixed(2), " \\u043C/\\u0441");\n\n    // Меняем цвет в зависимости от скорости\n    var speedRatio = speed / maxSpeed;\n    if (speedRatio < 0.5) {\n      speedDisplay.style.color = \'white\'; // Обычная скорость\n    } else if (speedRatio < 0.8) {\n      speedDisplay.style.color = \'yellow\'; // Высокая скорость\n    } else {\n      speedDisplay.style.color = \'orange\'; // Приближение к максимуму\n      if (speedRatio > 0.95) {\n        speedDisplay.style.color = \'red\'; // Почти максимальная\n      }\n    }\n  }\n  if (maxSpeedDisplay) {\n    maxSpeedDisplay.textContent = "\\u041C\\u0430\\u043A\\u0441. \\u0441\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C: ".concat(maxSpeed.toFixed(1), " \\u043C/\\u0441");\n  }\n  if (massDisplay) {\n    massDisplay.textContent = "\\u041C\\u0430\\u0441\\u0441\\u0430: ".concat(mass.toFixed(1), " \\u043A\\u0433");\n  }\n\n  // Добавляем отладку для отслеживания значений\n  console.log("[Speed] Current: ".concat(speed.toFixed(2), " m/s, Max: ").concat(maxSpeed, " m/s, Mass: ").concat(mass, " kg"));\n}\nfunction updatePhysicsObjects(objects, deltaTime) {\n  // Переменные для диагностики\n  var mainSpherePos = null;\n  var ammoShadowPos = null;\n  var bulletShadowPos = null;\n\n  // Обновляем все объекты\n  for (var id in objects) {\n    var obj = objects[id];\n    if (!obj.mesh) continue;\n\n    // Проверяем, новый ли это объект\n    var isNewObject = objectCreationTimes.has(id) && Date.now() - objectCreationTimes.get(id) < NEW_OBJECT_TIMEOUT;\n\n    // Пропускаем обработку террейна (он статичен)\n    if (obj.object_type === "terrain_1") continue;\n    var currentTime = Date.now();\n\n    // Пропускаем обработку, если данные слишком старые\n    if (!obj.hasNewServerData && (!obj.lastServerUpdate || currentTime - obj.lastServerUpdate > 1000)) {\n      continue; // Переходим к следующему объекту\n    }\n\n    // Если серверная позиция не изменилась с прошлого обновления, пропускаем коррекцию\n    if (obj.prevServerPos && obj.serverPos && Math.abs(obj.prevServerPos.x - obj.serverPos.x) < 0.001 && Math.abs(obj.prevServerPos.y - obj.serverPos.y) < 0.001 && Math.abs(obj.prevServerPos.z - obj.serverPos.z) < 0.001) {\n      // console.log(`Серверная позиция не изменилась для ${id}, пропускаем коррекцию`);\n      continue;\n    }\n    switch (obj.physicsBy) {\n      case "ammo":\n        // Обновление только по физике Ammo.js, без учета серверных данных\n        if (obj.body && obj.object_type !== "terrain") {\n          var trans = new window.Ammo.btTransform();\n          obj.body.getMotionState().getWorldTransform(trans);\n\n          // Получаем позицию из физического тела\n          var locX = trans.getOrigin().x();\n          var locY = trans.getOrigin().y();\n          var locZ = trans.getOrigin().z();\n\n          // Получаем вращение из физического тела\n          var qx = trans.getRotation().x();\n          var qy = trans.getRotation().y();\n          var qz = trans.getRotation().z();\n          var qw = trans.getRotation().w();\n\n          // Применяем позицию и вращение к мешу\n          obj.mesh.position.set(locX, locY, locZ);\n          obj.mesh.quaternion.set(qx, qy, qz, qw);\n\n          // Освобождаем ресурсы\n          window.Ammo.destroy(trans);\n        } else if (obj.serverPos) {\n          // Если нет физического тела, но есть серверные данные,\n          // просто обновляем позицию меша\n          obj.mesh.position.set(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z);\n        }\n        break;\n      case "bullet":\n        // Обновление по серверным данным без интерполяции\n        if (obj.serverPos && obj.object_type !== "terrain") {\n          // Устанавливаем точную позицию меша из серверных данных\n          obj.mesh.position.set(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z);\n\n          // Обновляем физическое тело\n          if (obj.body) {\n            var transform = new window.Ammo.btTransform();\n            transform.setIdentity();\n            transform.setOrigin(new window.Ammo.btVector3(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z));\n\n            // Применяем трансформацию к физическому телу\n            obj.body.getMotionState().setWorldTransform(transform);\n\n            // Если есть серверная скорость, применяем её\n            if (obj.serverVelocity) {\n              var velocity = new window.Ammo.btVector3(obj.serverVelocity.x, obj.serverVelocity.y, obj.serverVelocity.z);\n              obj.body.setLinearVelocity(velocity);\n              window.Ammo.destroy(velocity);\n            }\n            window.Ammo.destroy(transform);\n          }\n        }\n        break;\n      case "both":\n        console.warn("both physics");\n        // Гибридный подход для объектов, управляемых обоими источниками\n        if (obj.serverPos && obj.object_type !== "terrain" && obj.body) {\n          // Сохраняем позицию основной сферы для диагностики\n          if (id === "mainPlayer1") {\n            mainSpherePos = {\n              x: obj.mesh.position.x,\n              y: obj.mesh.position.y,\n              z: obj.mesh.position.z,\n              serverX: obj.serverPos.x,\n              serverY: obj.serverPos.y,\n              serverZ: obj.serverPos.z\n            };\n          }\n\n          // Получаем текущую позицию из физического тела\n          var _transform = new window.Ammo.btTransform();\n          obj.body.getMotionState().getWorldTransform(_transform);\n\n          // Вычисляем разницу между серверной и текущей позицией физического тела\n          var currentX = _transform.getOrigin().x();\n          var currentY = _transform.getOrigin().y();\n          var currentZ = _transform.getOrigin().z();\n\n          // Нам важно знать скорость объекта для выбора оптимальной стратегии коррекции\n          var _velocity = obj.body.getLinearVelocity();\n          var speedSq = _velocity.x() * _velocity.x() + _velocity.y() * _velocity.y() + _velocity.z() * _velocity.z();\n          var speed = Math.sqrt(speedSq);\n          var isMovingFast = speedSq > 4.0; // Если скорость больше 2 м/с\n\n          var targetX = obj.serverPos.x;\n          var targetY = obj.serverPos.y;\n          var targetZ = obj.serverPos.z;\n          if (obj.serverVelocity) {\n            // Вычисляем прогнозируемую позицию на основе серверной скорости\n            var predictedX = obj.serverPos.x + obj.serverVelocity.x * deltaTime;\n            var predictedY = obj.serverPos.y + obj.serverVelocity.y * deltaTime;\n            var predictedZ = obj.serverPos.z + obj.serverVelocity.z * deltaTime;\n\n            // Вычисляем разницу между прогнозируемой и текущей позициями\n            var dxPredicted = predictedX - currentX;\n            var dyPredicted = predictedY - currentY;\n            var dzPredicted = predictedZ - currentZ;\n\n            // Вычисляем расстояние\n            var distancePredicted = Math.sqrt(dxPredicted * dxPredicted + dyPredicted * dyPredicted + dzPredicted * dzPredicted);\n\n            // Используем прогнозируемую позицию, если она ближе к текущей\n            if (distancePredicted < distance) {\n              targetX = predictedX;\n              targetY = predictedY;\n              targetZ = predictedZ;\n            }\n          }\n\n          // Теперь разницу считаем от целевой позиции, а не от серверной\n          var dx = targetX - currentX;\n          var dy = targetY - currentY;\n          var dz = targetZ - currentZ;\n\n          // Вычисляем расстояние\n          var distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\n\n          // Логируем только при значительных расхождениях\n          if (distance > DEAD_ZONE || isMovingFast) {\n            throttledLog("Physics", "\\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(id, ": \\u0420\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435: ").concat(distance.toFixed(3), ", \\u0421\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C: ").concat(speed.toFixed(3), ", \\u0411\\u044B\\u0441\\u0442\\u0440\\u043E: ").concat(isMovingFast, ", \\u041A\\u043B\\u0438\\u0435\\u043D\\u0442: {x: ").concat(currentX.toFixed(2), ", y: ").concat(currentY.toFixed(2), ", z: ").concat(currentZ.toFixed(2), "}, \\u0421\\u0435\\u0440\\u0432\\u0435\\u0440: {x: ").concat(obj.serverPos.x.toFixed(2), ", y: ").concat(obj.serverPos.y.toFixed(2), ", z: ").concat(obj.serverPos.z.toFixed(2), "}"));\n          }\n\n          // Применяем client-side prediction\n          if (distance > Math.max(PREDICTION_MAX_ERROR * 2, speed * 0.2) || isNewObject && distance > 10.0) {\n            // Добавляем учет скорости при определении необходимости сброса\n            var speedBasedError = Math.max(PREDICTION_MAX_ERROR * 2, speed * 0.3); // Увеличиваем допуск ошибки\n\n            // Определяем коэффициент сглаживания на основе состояния объекта\n            var smoothFactor = PREDICTION_SMOOTH_FACTOR;\n\n            // Для новых объектов используем более жесткую коррекцию\n            if (isNewObject) {\n              smoothFactor = 0.5; // Уменьшаем с 0.8 до 0.5\n            } else if (DISTANCE_BASED_SMOOTH_FACTOR) {\n              // Чем больше расхождение, тем больше коэффициент\n              smoothFactor = Math.min(distance / 30.0, 0.3); // Увеличиваем делитель и уменьшаем максимум\n            }\n\n            // Для больших расхождений или новых объектов применяем телепортацию\n            if (distance > speedBasedError || isNewObject && distance > 10.0) {\n              console.warn("apply teleportation :", distance);\n\n              // Телепортируем объект\n              _transform.setOrigin(new window.Ammo.btVector3(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z));\n              obj.body.getMotionState().setWorldTransform(_transform);\n\n              // Проверим, была ли применена телепортация\n              var afterTeleport = new window.Ammo.btTransform();\n              obj.body.getMotionState().getWorldTransform(afterTeleport);\n              var teleportX = afterTeleport.getOrigin().x();\n              var teleportY = afterTeleport.getOrigin().y();\n              var teleportZ = afterTeleport.getOrigin().z();\n\n              // Проверим, насколько телепортация была успешной\n              var teleportSuccess = Math.abs(teleportX - obj.serverPos.x) < 0.1 && Math.abs(teleportY - obj.serverPos.y) < 0.1 && Math.abs(teleportZ - obj.serverPos.z) < 0.1;\n              console.log("[Physics] \\u0422\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0430\\u0446\\u0438\\u044F ".concat(teleportSuccess ? \'успешна\' : \'неудачна\', " - \\u0426\\u0435\\u043B\\u044C: {x: ").concat(obj.serverPos.x.toFixed(2), ", y: ").concat(obj.serverPos.y.toFixed(2), ", z: ").concat(obj.serverPos.z.toFixed(2), "}, \\u0424\\u0430\\u043A\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u0438: {x: ").concat(teleportX.toFixed(2), ", y: ").concat(teleportY.toFixed(2), ", z: ").concat(teleportZ.toFixed(2), "}"));\n              window.Ammo.destroy(afterTeleport);\n\n              // Сбрасываем скорость только при существенных расхождениях\n              if (distance > speedBasedError * 1.5) {\n                var timeSinceLastUpdate = Date.now() - obj.lastServerUpdate;\n                //console.warn(`[Reset Velocity] Объект ${id}: distance=${distance.toFixed(2)}, threshold=${speedBasedError.toFixed(2)}, timeSinceUpdate=${timeSinceLastUpdate}ms`);\n\n                // При очень больших расхождениях полностью сбрасываем скорость\n                var zero = new window.Ammo.btVector3(0, 0, 0);\n                obj.body.setLinearVelocity(zero);\n                obj.body.setAngularVelocity(zero);\n                window.Ammo.destroy(zero);\n              } else if (obj.serverVelocity) {\n                // Если есть рассчитанная серверная скорость, применяем её\n                //console.warn("apply server velocity :", obj.serverVelocity)\n                var serverVel = new window.Ammo.btVector3(obj.serverVelocity.x, obj.serverVelocity.y, obj.serverVelocity.z);\n                obj.body.setLinearVelocity(serverVel);\n                window.Ammo.destroy(serverVel);\n              } else {\n                // Иначе уменьшаем текущую скорость\n                //console.warn("apply damped velocity :", velocity)\n                var dampedVelocity = new window.Ammo.btVector3(_velocity.x() * 0.5, _velocity.y() * 0.5, _velocity.z() * 0.5);\n                obj.body.setLinearVelocity(dampedVelocity);\n                window.Ammo.destroy(dampedVelocity);\n              }\n\n              // Немедленно синхронизируем меш с физическим телом\n              var updatedTransform = new window.Ammo.btTransform();\n              obj.body.getMotionState().getWorldTransform(updatedTransform);\n              var px = updatedTransform.getOrigin().x();\n              var py = updatedTransform.getOrigin().y();\n              var pz = updatedTransform.getOrigin().z();\n              obj.mesh.position.set(px, py, pz);\n              window.Ammo.destroy(updatedTransform);\n            } else if (distance > TELEPORT_THRESHOLD) {\n              // Мягкая коррекция для средних расхождений\n              // Смешиваем текущую позицию с серверной\n              console.warn("smooth correction", smoothFactor);\n              var correctionX = obj.serverPos.x * smoothFactor + currentX * (1 - smoothFactor);\n              var correctionY = obj.serverPos.y * smoothFactor + currentY * (1 - smoothFactor);\n              var correctionZ = obj.serverPos.z * smoothFactor + currentZ * (1 - smoothFactor);\n              var correctionVector = new window.Ammo.btVector3(correctionX, correctionY, correctionZ);\n              //console.warn("smooth correction", correctionVector)\n\n              _transform.setOrigin(new window.Ammo.btVector3(correctionX, correctionY, correctionZ));\n              obj.body.getMotionState().setWorldTransform(_transform);\n\n              // Если мы перемещаем объект, обновляем mesh непосредственно для большей плавности\n              obj.mesh.position.set(correctionX, correctionY, correctionZ);\n\n              // Обновляем скорость, чтобы она учитывала направление серверного движения\n              if (obj.serverVelocity) {\n                var blendedVelocity = new window.Ammo.btVector3(_velocity.x() * (1 - smoothFactor) + obj.serverVelocity.x * smoothFactor, _velocity.y() * (1 - smoothFactor) + obj.serverVelocity.y * smoothFactor, _velocity.z() * (1 - smoothFactor) + obj.serverVelocity.z * smoothFactor);\n                obj.body.setLinearVelocity(blendedVelocity);\n                window.Ammo.destroy(blendedVelocity);\n              }\n            } else {\n              // Для небольших расхождений - корректирующая сила\n              // Более плавная коррекция для медленно движущихся объектов\n              var adaptiveStrength = isMovingFast ? CORRECTION_STRENGTH : CORRECTION_STRENGTH * 0.7;\n              var magnitude = distance * adaptiveStrength;\n\n              // Для объектов на земле не применяем вертикальную коррекцию,\n              // если они находятся на поверхности с небольшой разницей по высоте\n              var correctY = true;\n              if (Math.abs(dy) < DEAD_ZONE && Math.abs(_velocity.y()) < 0.5) {\n                correctY = false;\n              }\n              var force = new window.Ammo.btVector3(dx * magnitude, correctY ? dy * magnitude : 0, dz * magnitude);\n\n              // Активируем тело и применяем силу\n              obj.body.activate(true);\n              obj.body.applyCentralForce(force);\n              window.Ammo.destroy(force);\n            }\n          }\n\n          // Добавляем подробную диагностику для основного игрока\n          if (id === "mainPlayer1") {\n            console.debug("[Physics Debug] ".concat(id, ": distance=").concat(distance.toFixed(2), ", speed=").concat(speed.toFixed(2), ", threshold=").concat(Math.max(PREDICTION_MAX_ERROR, speed * 0.1).toFixed(2), ", isNewObject=").concat(isNewObject));\n          }\n          window.Ammo.destroy(_velocity);\n          window.Ammo.destroy(_transform);\n        }\n        break;\n      default:\n        //throttledLog("Error", `Неизвестный тип physicsBy для объекта ${id}: ${obj.physicsBy}`);\n        break;\n    }\n\n    // В конце обработки объекта\n    obj.hasNewServerData = false; // Сбрасываем флаг, показывая что мы обработали новые данные\n  }\n\n  // Выводим диагностическую информацию о расхождениях\n  if (mainSpherePos && ammoShadowPos && bulletShadowPos) {\n    // Вычисляем расхождения между диагностическими сферами\n    var mainToAmmoDistance = Math.sqrt(Math.pow(mainSpherePos.x - ammoShadowPos.x, 2) + Math.pow(mainSpherePos.y - ammoShadowPos.y, 2) + Math.pow(mainSpherePos.z - ammoShadowPos.z, 2));\n    var mainToBulletDistance = Math.sqrt(Math.pow(mainSpherePos.x - bulletShadowPos.x, 2) + Math.pow(mainSpherePos.y - bulletShadowPos.y, 2) + Math.pow(mainSpherePos.z - bulletShadowPos.z, 2));\n    var serverToMainDistance = Math.sqrt(Math.pow(mainSpherePos.serverX - mainSpherePos.x, 2) + Math.pow(mainSpherePos.serverY - mainSpherePos.y, 2) + Math.pow(mainSpherePos.serverZ - mainSpherePos.z, 2));\n\n    // Выводим статистику только примерно раз в секунду (чтобы не спамить консоль)\n    if (Math.random() < 0.016) {\n      // примерно при 60 FPS будет выводить раз в секунду\n      throttledLog("Physics", "Диагностика расхождений:", {\n        "Основная сфера -> Ammo-тень": mainToAmmoDistance.toFixed(3),\n        "Основная сфера -> Bullet-тень": mainToBulletDistance.toFixed(3),\n        "Серверная позиция -> Основная сфера": serverToMainDistance.toFixed(3)\n      });\n    }\n  }\n}\n\n// Функция для применения импульса\nfunction applyImpulseToSphere(id, direction, strength) {\n  var object = objects_objects[id];\n  if (!object || !object.body) return;\n  try {\n    if (typeof Ammo === \'undefined\') {\n      console.error(\'Ammo.js не инициализирован\');\n      return;\n    }\n\n    // Нормализуем направление и применяем силу\n    var impulseVec = new Ammo.btVector3(direction.x * strength, direction.y * strength, direction.z * strength);\n\n    // Применяем импульс к телу\n    object.body.applyCentralImpulse(impulseVec);\n\n    // Выводим информацию о примененном импульсе\n    console.log("[Physics] \\u0418\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441 \\u043F\\u0440\\u0438\\u043C\\u0435\\u043D\\u0435\\u043D \\u043A ".concat(id, ": \\n            \\u041D\\u0430\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435: (").concat(direction.x.toFixed(2), ", ").concat(direction.y.toFixed(2), ", ").concat(direction.z.toFixed(2), ")\\n            \\u0421\\u0438\\u043B\\u0430: ").concat(strength.toFixed(2)));\n\n    // Освобождаем память\n    Ammo.destroy(impulseVec);\n  } catch (error) {\n    console.error(\'Ошибка при применении импульса:\', error);\n  }\n}\n\n// Функция для получения обновлений с сервера\nfunction receiveObjectUpdate(data) {\n  try {\n    // Проверяем, в каком формате пришли данные\n    if (data.objects) {\n      // Стандартный формат с полем objects\n      var objectIds = Object.keys(data.objects);\n      if (objectIds.length === 0) {\n        console.error("[Physics] Получен пустой список объектов");\n        return;\n      }\n\n      // Обрабатываем каждый объект\n      for (var _i = 0, _objectIds = objectIds; _i < _objectIds.length; _i++) {\n        var id = _objectIds[_i];\n        var objectData = data.objects[id];\n        updateSingleObject(id, objectData);\n      }\n    } else if (data.id) {\n      // Альтернативный формат, где данные напрямую в корне объекта\n      // Создаем временную структуру для совместимости\n      var _id = data.id;\n\n      // console.log(`[Physics] Исходные данные с сервера для ${id}:`, {\n      //     id: data.id,\n      //     position: data.x !== undefined ? { x: data.x, y: data.y, z: data.z } : "не указана",\n      //     velocity: data.vx !== undefined ? { vx: data.vx, vy: data.vy, vz: data.vz } : "не указана",\n      //     raw: { ...data } // Копируем все поля объекта для диагностики\n      // });\n\n      // Преобразуем данные в формат, ожидаемый функцией updateSingleObject\n      var _objectData = {\n        velocity: data.vx !== undefined ? {\n          x: data.vx,\n          y: data.vy,\n          z: data.vz\n        } : undefined,\n        position: data.x !== undefined ? {\n          x: data.x,\n          y: data.y,\n          z: data.z\n        } : undefined\n      };\n\n      // Добавляем отладочную информацию\n      //console.warn(`[Physics] Обработка данных в альтернативном формате для ${id}:`, data);\n\n      // Обрабатываем объект\n      updateSingleObject(_id, _objectData);\n    } else {\n      console.error("[Physics] Получены данные в неизвестном формате:", data);\n    }\n  } catch (e) {\n    console.error("[Physics] Ошибка при обработке обновления объектов:", e);\n  }\n}\n\n// Вспомогательная функция для обновления одного объекта\nfunction updateSingleObject(id, objectData) {\n  var obj = objects_objects[id];\n\n  // Если объект еще не создан, пропускаем его\n  if (!obj) {\n    console.error("[Physics] \\u041F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u043E \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0434\\u043B\\u044F \\u043D\\u0435\\u0441\\u0443\\u0449\\u0435\\u0441\\u0442\\u0432\\u0443\\u044E\\u0449\\u0435\\u0433\\u043E \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430: ".concat(id));\n    return;\n  }\n\n  // Проверяем наличие данных о скорости\n  if (objectData.velocity) {\n    var vel = objectData.velocity;\n\n    // Выводим подробную информацию о полученной скорости\n    console.log("[Physics] \\u041F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u0430 \\u0441\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C \\u0434\\u043B\\u044F ".concat(id, ": ") + "x=".concat(vel.x.toFixed(2), ", y=").concat(vel.y.toFixed(2), ", z=").concat(vel.z.toFixed(2)));\n\n    // Вычисляем величину скорости\n    var speed = Math.sqrt(vel.x * vel.x + vel.y * vel.y + vel.z * vel.z);\n    console.log("[Physics] \\u0422\\u0435\\u043A\\u0443\\u0449\\u0430\\u044F \\u0441\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C ".concat(id, ": ").concat(speed.toFixed(2), " \\u043C/\\u0441"));\n\n    // Сохраняем скорость в объекте\n    obj.serverVelocity = {\n      x: vel.x,\n      y: vel.y,\n      z: vel.z\n    };\n\n    // Обновляем отображение скорости, если это игрок\n    if (id.startsWith(\'mainPlayer\')) {\n      // Используем значение массы из объекта\n      var maxDisplaySpeed = 1000.0; // Большое значение для снятия ограничений\n      var mass = obj.mass || 5.0; // Используем массу из объекта или стандартное значение\n\n      // Обновляем отображение\n      //updatePlayerSpeedDisplay(speed, maxDisplaySpeed, mass);\n\n      // Логируем очень высокие скорости, но не ограничиваем\n      if (speed > 500) {\n        console.log("[Physics] \\u0412\\u044B\\u0441\\u043E\\u043A\\u0430\\u044F \\u0441\\u043A\\u043E\\u0440\\u043E\\u0441\\u0442\\u044C ".concat(id, ": ").concat(speed.toFixed(2), " \\u043C/\\u0441"));\n      }\n    }\n  }\n\n  // Обрабатываем данные о позиции\n  if (objectData.position) {\n    // Сохраняем предыдущую серверную позицию для сравнения\n    if (obj.serverPos) {\n      obj.prevServerPos = {\n        x: obj.serverPos.x,\n        y: obj.serverPos.y,\n        z: obj.serverPos.z\n      };\n    }\n    obj.serverPos = {\n      x: objectData.position.x,\n      y: objectData.position.y,\n      z: objectData.position.z\n    };\n    obj.lastServerUpdate = Date.now();\n    obj.hasNewServerData = true; // Флаг, указывающий на новые данные\n  }\n\n  // Добавить после обработки position\n  if (objectData.quaternion) {\n    // Сохраняем ориентацию\n    obj.serverQuaternion = {\n      w: objectData.quaternion.w,\n      x: objectData.quaternion.x,\n      y: objectData.quaternion.y,\n      z: objectData.quaternion.z\n    };\n\n    // Применяем к меше, если она существует\n    if (obj.mesh) {\n      obj.mesh.quaternion.set(objectData.quaternion.x, objectData.quaternion.y, objectData.quaternion.z, objectData.quaternion.w);\n    }\n\n    // Применяем к физическому телу, если оно существует\n    if (obj.body) {\n      var transform = new window.Ammo.btTransform();\n      obj.body.getMotionState().getWorldTransform(transform);\n      var quaternion = new window.Ammo.btQuaternion(objectData.quaternion.x, objectData.quaternion.y, objectData.quaternion.z, objectData.quaternion.w);\n      transform.setRotation(quaternion);\n      obj.body.getMotionState().setWorldTransform(transform);\n      window.Ammo.destroy(quaternion);\n      window.Ammo.destroy(transform);\n    }\n  }\n\n  // Получаем текущую позицию объекта\n  if (obj.body) {\n    var _objectData$position, _objectData$position2, _objectData$position3;\n    var _transform2 = new window.Ammo.btTransform();\n    obj.body.getMotionState().getWorldTransform(_transform2);\n    var posX = _transform2.getOrigin().x();\n    var posY = _transform2.getOrigin().y();\n    var posZ = _transform2.getOrigin().z();\n    console.log("[Physics] \\u041F\\u043E\\u0437\\u0438\\u0446\\u0438\\u044F \\u0434\\u043B\\u044F ".concat(id, " \\u0441\\u0440\\u0430\\u0432\\u043D\\u0435\\u043D\\u0438\\u0435 - \\u041A\\u043B\\u0438\\u0435\\u043D\\u0442: {x: ").concat(posX.toFixed(2), ", y: ").concat(posY.toFixed(2), ", z: ").concat(posZ.toFixed(2), "}, \\u0421\\u0435\\u0440\\u0432\\u0435\\u0440: {x: ").concat(((_objectData$position = objectData.position) === null || _objectData$position === void 0 ? void 0 : _objectData$position.x.toFixed(2)) || "н/д", ", y: ").concat(((_objectData$position2 = objectData.position) === null || _objectData$position2 === void 0 ? void 0 : _objectData$position2.y.toFixed(2)) || "н/д", ", z: ").concat(((_objectData$position3 = objectData.position) === null || _objectData$position3 === void 0 ? void 0 : _objectData$position3.z.toFixed(2)) || "н/д", "}"));\n\n    // Если позиционные данные существуют, проверим расхождение\n    if (objectData.position) {\n      var dx = objectData.position.x - posX;\n      var dy = objectData.position.y - posY;\n      var dz = objectData.position.z - posZ;\n      var distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\n      console.log("[Physics] \\u0420\\u0430\\u0441\\u0445\\u043E\\u0436\\u0434\\u0435\\u043D\\u0438\\u0435 \\u043C\\u0435\\u0436\\u0434\\u0443 \\u043A\\u043B\\u0438\\u0435\\u043D\\u0442\\u043E\\u043C \\u0438 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u043E\\u043C \\u0434\\u043B\\u044F ".concat(id, ": ").concat(distance.toFixed(2), " \\u0435\\u0434\\u0438\\u043D\\u0438\\u0446"));\n    }\n    window.Ammo.destroy(_transform2);\n  }\n\n  // Если мы обновляем позицию\n  if (objectData.position && obj.body) {\n    // Запомним исходную позицию перед обновлением\n    var oldTransform = new window.Ammo.btTransform();\n    obj.body.getMotionState().getWorldTransform(oldTransform);\n    var oldX = oldTransform.getOrigin().x();\n    var oldY = oldTransform.getOrigin().y();\n    var oldZ = oldTransform.getOrigin().z();\n\n    // Применяем новую позицию\n    var newTransform = new window.Ammo.btTransform();\n    newTransform.setIdentity();\n    newTransform.setOrigin(new window.Ammo.btVector3(objectData.position.x, objectData.position.y, objectData.position.z));\n    obj.body.getMotionState().setWorldTransform(newTransform);\n\n    // Проверяем, изменилась ли позиция\n    var checkTransform = new window.Ammo.btTransform();\n    obj.body.getMotionState().getWorldTransform(checkTransform);\n    var newX = checkTransform.getOrigin().x();\n    var newY = checkTransform.getOrigin().y();\n    var newZ = checkTransform.getOrigin().z();\n    console.log("[Physics] \\u0422\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0430\\u0446\\u0438\\u044F ".concat(id, " - \\u0414\\u043E: {x: ").concat(oldX.toFixed(2), ", y: ").concat(oldY.toFixed(2), ", z: ").concat(oldZ.toFixed(2), "}, \\u041F\\u043E\\u0441\\u043B\\u0435: {x: ").concat(newX.toFixed(2), ", y: ").concat(newY.toFixed(2), ", z: ").concat(newZ.toFixed(2), "}, \\u0426\\u0435\\u043B\\u044C: {x: ").concat(objectData.position.x.toFixed(2), ", y: ").concat(objectData.position.y.toFixed(2), ", z: ").concat(objectData.position.z.toFixed(2), "}"));\n\n    // Проверяем успешность\n    var success = Math.abs(newX - objectData.position.x) < 0.1 && Math.abs(newY - objectData.position.y) < 0.1 && Math.abs(newZ - objectData.position.z) < 0.1;\n    console.log("[Physics] \\u0422\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0430\\u0446\\u0438\\u044F ".concat(id, " ").concat(success ? \'успешна\' : \'неудачна\'));\n\n    // Очищаем ресурсы\n    window.Ammo.destroy(oldTransform);\n    window.Ammo.destroy(newTransform);\n    window.Ammo.destroy(checkTransform);\n  }\n}\n\n// В файле physics.js добавляем функцию для создания случайной силы при столкновении\n// TODO: Реализация отложена на будущее\n/*\nexport function addCollisionBounceEffect() {\n    try {\n        if (typeof Ammo === \'undefined\') return;\n        \n        // Добавляем обработчик столкновений, который будет добавлять случайную силу\n        // Эта функция может быть вызвана в начале симуляции\n        window.addEventListener(\'collisions\', (e) => {\n            const { body1, body2 } = e.detail;\n            \n            // Добавляем случайный импульс при столкновении\n            if (body1 && body1.getType() === Ammo.btRigidBody) {\n                const randomImpulse = new Ammo.btVector3(\n                    (Math.random() - 0.5) * 15, // Увеличиваем с 10 до 15\n                    Math.random() * 8,          // Увеличиваем с 5 до 8\n                    (Math.random() - 0.5) * 15  // Увеличиваем с 10 до 15\n                );\n                body1.applyCentralImpulse(randomImpulse);\n                Ammo.destroy(randomImpulse);\n            }\n            \n            if (body2 && body2.getType() === Ammo.btRigidBody) {\n                const randomImpulse = new Ammo.btVector3(\n                    (Math.random() - 0.5) * 15, // Увеличиваем с 10 до 15\n                    Math.random() * 8,          // Увеличиваем с 5 до 8\n                    (Math.random() - 0.5) * 15  // Увеличиваем с 10 до 15\n                );\n                body2.applyCentralImpulse(randomImpulse);\n                Ammo.destroy(randomImpulse);\n            }\n        });\n        \n        console.log("Добавлен эффект отскока при столкновениях");\n    } catch (error) {\n        console.error(\'Ошибка при добавлении эффекта отскока:\', error);\n    }\n}\n*/\n\n// Функция для применения конфигурации физики\nfunction applyPhysicsConfig(config) {\n  if (!config) {\n    console.warn("[Physics] Получена пустая конфигурация физики");\n    return;\n  }\n  console.log("[Physics] Применяем конфигурацию физики:", config);\n\n  // Применяем настройки ко всем объектам\n  for (var id in objects_objects) {\n    var obj = objects_objects[id];\n    if (!obj || !obj.body) continue;\n    try {\n      // Обновляем массу объекта\n      if (id.startsWith(\'mainPlayer\')) {\n        // Игроки получают массу из конфигурации\n        var mass = config.player_mass;\n        obj.mass = mass;\n        if (obj.body) {\n          // Сохраняем текущее состояние движения\n          var velocity = obj.body.getLinearVelocity();\n\n          // // Создаем новую информацию о инерции\n          var shape = obj.body.getCollisionShape();\n          var localInertia = new Ammo.btVector3(0, 0, 0);\n          shape.calculateLocalInertia(mass, localInertia);\n\n          // // Устанавливаем новую массу\n          obj.body.setMassProps(mass, localInertia);\n\n          // // Восстанавливаем скорость\n          obj.body.setLinearVelocity(velocity);\n\n          // Активируем объект для обновления физики\n          obj.body.activate(true);\n          console.log("[Physics] \\u0423\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0430 \\u043C\\u0430\\u0441\\u0441\\u0430 ".concat(id, ": ").concat(mass, " \\u043A\\u0433"));\n\n          // Освобождаем ресурсы\n          Ammo.destroy(localInertia);\n          Ammo.destroy(velocity);\n        }\n      } else if (id.includes(\'box\')) {\n        // Боксы получают свою массу из конфигурации\n        var _mass = config.default_box_mass || 5.0;\n        obj.mass = _mass;\n        if (obj.body) {\n          // Аналогично для коробок\n          var _velocity2 = obj.body.getLinearVelocity();\n          var _shape = obj.body.getCollisionShape();\n          var _localInertia = new Ammo.btVector3(0, 0, 0);\n          _shape.calculateLocalInertia(_mass, _localInertia);\n          obj.body.setMassProps(_mass, _localInertia);\n          obj.body.setLinearVelocity(_velocity2);\n          obj.body.activate(true);\n          console.log("[Physics] \\u0423\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0430 \\u043C\\u0430\\u0441\\u0441\\u0430 ".concat(id, ": ").concat(_mass, " \\u043A\\u0433"));\n          Ammo.destroy(_localInertia);\n          Ammo.destroy(_velocity2);\n        }\n      }\n\n      // Можно также обновить другие свойства (трение, отскок и т.д.)\n      if (obj.body) {\n        // Устанавливаем отскок (restitution)\n        obj.body.setRestitution(config.restitution || 0.9);\n\n        // Устанавливаем трение (friction)\n        obj.body.setFriction(config.friction || 0.5);\n      }\n    } catch (e) {\n      console.error("[Physics] \\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043F\\u0440\\u0438\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u0438 \\u043A\\u043E\\u043D\\u0444\\u0438\\u0433\\u0443\\u0440\\u0430\\u0446\\u0438\\u0438 \\u043A ".concat(id, ":"), e);\n    }\n  }\n\n  // Сохраняем глобальные параметры для использования при создании новых объектов\n  window.PHYSICS_CONFIG = config;\n  console.log("[Physics] Конфигурация физики успешно применена");\n}\n// EXTERNAL MODULE: ./node_modules/stats.js/build/stats.min.js\nvar stats_min = __webpack_require__(571);\nvar stats_min_default = /*#__PURE__*/__webpack_require__.n(stats_min);\n;// ./src/index.js\nfunction src_typeof(o) { "@babel/helpers - typeof"; return src_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, src_typeof(o); }\nfunction src_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ src_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == src_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(src_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction src_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction src_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// index.js\n\n\n\n\n\n\n\n\nvar stats = new (stats_min_default())();\nstats.showPanel(0); // 0: FPS, 1: ms, 2: memory\ndocument.body.appendChild(stats.dom);\nfunction animate() {\n  stats.begin();\n  stepPhysics(1 / 60);\n  updatePhysicsObjects(objects_objects);\n\n  // Обновляем камеру из нового модуля\n  updateCamera();\n\n  // Обновляем положение источника света относительно камеры, как солнце\n  updateShadowCamera(camera);\n\n  // Обновляем ArrowHelper\n  if (gameStateManager.playerMesh) {\n    updateArrowHelper(gameStateManager.playerMesh);\n  }\n  renderer.render(scene_scene, camera);\n  stats.end(); // Завершаем замер\n\n  requestAnimationFrame(animate);\n}\nfunction start() {\n  return _start.apply(this, arguments);\n}\nfunction _start() {\n  _start = src_asyncToGenerator(/*#__PURE__*/src_regeneratorRuntime().mark(function _callee() {\n    var playerInfo, playerInfoDiv, playerInfoElement, speedDiv, maxSpeedDiv, massDiv, ws;\n    return src_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          console.log("Start");\n          initScene();\n\n          // Инициализируем камеру из нового модуля\n          initCamera();\n\n          // Инициализируем элементы интерфейса для отображения скорости и других параметров\n          console.log("Инициализация элементов интерфейса...");\n          // Проверяем, существуют ли уже элементы\n          if (!document.getElementById(\'player-speed\')) {\n            console.log("Элементы интерфейса игрока не найдены, создаем...");\n            playerInfo = document.getElementById(\'player-info\');\n            if (!playerInfo) {\n              console.error("Элемент player-info не найден! Создаем его...");\n              playerInfoDiv = document.createElement(\'div\');\n              playerInfoDiv.id = \'player-info\';\n              playerInfoDiv.style.position = \'absolute\';\n              playerInfoDiv.style.top = \'0px\';\n              playerInfoDiv.style.left = \'290px\';\n              playerInfoDiv.style.backgroundColor = \'rgba(0, 0, 0, 0.5)\';\n              playerInfoDiv.style.color = \'white\';\n              playerInfoDiv.style.padding = \'5px 10px\';\n              playerInfoDiv.style.borderRadius = \'5px\';\n              playerInfoDiv.style.fontFamily = \'Arial, sans-serif\';\n              playerInfoDiv.style.fontSize = \'14px\';\n              playerInfoDiv.style.zIndex = \'1000\';\n              playerInfoDiv.style.display = \'flex\';\n              playerInfoDiv.style.flexDirection = \'column\';\n              playerInfoDiv.style.gap = \'5px\';\n              document.body.appendChild(playerInfoDiv);\n            }\n            playerInfoElement = document.getElementById(\'player-info\') || playerInfo;\n            speedDiv = document.createElement(\'div\');\n            speedDiv.id = \'player-speed\';\n            speedDiv.textContent = \'Скорость: -- м/с\';\n            playerInfoElement.appendChild(speedDiv);\n            maxSpeedDiv = document.createElement(\'div\');\n            maxSpeedDiv.id = \'player-max-speed\';\n            maxSpeedDiv.textContent = \'Макс. скорость: -- м/с\';\n            playerInfoElement.appendChild(maxSpeedDiv);\n            massDiv = document.createElement(\'div\');\n            massDiv.id = \'player-mass\';\n            massDiv.textContent = \'Масса: -- кг\';\n            playerInfoElement.appendChild(massDiv);\n            console.log("Элементы интерфейса игрока созданы");\n          } else {\n            console.log("Элементы интерфейса игрока уже существуют");\n          }\n          _context.prev = 5;\n          _context.next = 8;\n          return new Promise(function (resolve) {\n            return setTimeout(resolve, 500);\n          });\n        case 8:\n          _context.next = 10;\n          return initAmmo();\n        case 10:\n          _context.next = 12;\n          return initNetwork();\n        case 12:\n          ws = _context.sent;\n          initGameStateManager(ws, scene_scene);\n          gameStateManager.on(\'gameInitialized\', function () {\n            console.warn(\'game initialized\');\n            animate();\n          });\n          _context.next = 20;\n          break;\n        case 17:\n          _context.prev = 17;\n          _context.t0 = _context["catch"](5);\n          console.error("Ошибка при инициализации Ammo.js:", _context.t0);\n        case 20:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[5, 17]]);\n  }));\n  return _start.apply(this, arguments);\n}\nstart();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///617\n')},7:module=>{"use strict";eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n")},571:function(module){eval('// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){ true?module.exports=e():0})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?"block":"none";l=a}var l=0,c=document.createElement("div");c.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";c.addEventListener("click",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel("FPS","#0ff","#002")),h=e(new f.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var t=e(new f.Panel("MB","#f08","#201"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement("canvas");q.width=r;q.height=h;q.style.cssText="width:80px;height:48px";var b=q.getContext("2d");b.font="bold "+9*a+"px Helvetica,Arial,sans-serif";b.textBaseline="top";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+" "+e+" ("+g(c)+"-"+g(k)+")",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTcxLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZUFBZSxLQUFzRCxvQkFBb0IsQ0FBNEQsQ0FBQyxrQkFBa0IsaUJBQWlCLGNBQWMscUJBQXFCLFNBQVMsY0FBYyxZQUFZLG9CQUFvQixxREFBcUQsSUFBSSx3Q0FBd0MsZ0NBQWdDLE1BQU0sT0FBTyxlQUFlLFlBQVksZUFBZSx1Q0FBdUM7QUFDbGYseUJBQXlCLEtBQUssbUhBQW1ILHNGQUFzRixLQUFLLE9BQU8sMERBQTBELDRCQUE0QixnQkFBZ0IsSUFBSSxnQ0FBZ0Msa0JBQWtCLG1EQUFtRCx5QkFBeUI7QUFDM2QsbUNBQW1DLFNBQVMsbUJBQW1CLGFBQWEsMEJBQTBCLHdCQUF3Qix3SkFBd0osVUFBVSxXQUFXLDRCQUE0QixhQUFhLHlCQUF5QixtREFBbUQscUJBQXFCLGNBQWMsb0JBQW9CLGNBQWM7QUFDcmUsb0JBQW9CLGNBQWMsaUJBQWlCLG9CQUFvQixPQUFPLDJCQUEyQixnQkFBZ0IsZ0JBQWdCLGNBQWMsZ0JBQWdCLG9CQUFvQixjQUFjLGtEQUFrRCxxQ0FBcUMsd0JBQXdCLGNBQWMsaUJBQWlCLHNDQUFzQyxTQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4vbm9kZV9tb2R1bGVzL3N0YXRzLmpzL2J1aWxkL3N0YXRzLm1pbi5qcz8zMTkxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0YXRzLmpzIC0gaHR0cDovL2dpdGh1Yi5jb20vbXJkb29iL3N0YXRzLmpzXG4oZnVuY3Rpb24oZixlKXtcIm9iamVjdFwiPT09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKTpmLlN0YXRzPWUoKX0pKHRoaXMsZnVuY3Rpb24oKXt2YXIgZj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoYSl7Yy5hcHBlbmRDaGlsZChhLmRvbSk7cmV0dXJuIGF9ZnVuY3Rpb24gdShhKXtmb3IodmFyIGQ9MDtkPGMuY2hpbGRyZW4ubGVuZ3RoO2QrKyljLmNoaWxkcmVuW2RdLnN0eWxlLmRpc3BsYXk9ZD09PWE/XCJibG9ja1wiOlwibm9uZVwiO2w9YX12YXIgbD0wLGM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtjLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjpmaXhlZDt0b3A6MDtsZWZ0OjA7Y3Vyc29yOnBvaW50ZXI7b3BhY2l0eTowLjk7ei1pbmRleDoxMDAwMFwiO2MuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsZnVuY3Rpb24oYSl7YS5wcmV2ZW50RGVmYXVsdCgpO1xudSgrK2wlYy5jaGlsZHJlbi5sZW5ndGgpfSwhMSk7dmFyIGs9KHBlcmZvcm1hbmNlfHxEYXRlKS5ub3coKSxnPWssYT0wLHI9ZShuZXcgZi5QYW5lbChcIkZQU1wiLFwiIzBmZlwiLFwiIzAwMlwiKSksaD1lKG5ldyBmLlBhbmVsKFwiTVNcIixcIiMwZjBcIixcIiMwMjBcIikpO2lmKHNlbGYucGVyZm9ybWFuY2UmJnNlbGYucGVyZm9ybWFuY2UubWVtb3J5KXZhciB0PWUobmV3IGYuUGFuZWwoXCJNQlwiLFwiI2YwOFwiLFwiIzIwMVwiKSk7dSgwKTtyZXR1cm57UkVWSVNJT046MTYsZG9tOmMsYWRkUGFuZWw6ZSxzaG93UGFuZWw6dSxiZWdpbjpmdW5jdGlvbigpe2s9KHBlcmZvcm1hbmNlfHxEYXRlKS5ub3coKX0sZW5kOmZ1bmN0aW9uKCl7YSsrO3ZhciBjPShwZXJmb3JtYW5jZXx8RGF0ZSkubm93KCk7aC51cGRhdGUoYy1rLDIwMCk7aWYoYz5nKzFFMyYmKHIudXBkYXRlKDFFMyphLyhjLWcpLDEwMCksZz1jLGE9MCx0KSl7dmFyIGQ9cGVyZm9ybWFuY2UubWVtb3J5O3QudXBkYXRlKGQudXNlZEpTSGVhcFNpemUvXG4xMDQ4NTc2LGQuanNIZWFwU2l6ZUxpbWl0LzEwNDg1NzYpfXJldHVybiBjfSx1cGRhdGU6ZnVuY3Rpb24oKXtrPXRoaXMuZW5kKCl9LGRvbUVsZW1lbnQ6YyxzZXRNb2RlOnV9fTtmLlBhbmVsPWZ1bmN0aW9uKGUsZixsKXt2YXIgYz1JbmZpbml0eSxrPTAsZz1NYXRoLnJvdW5kLGE9Zyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb3x8MSkscj04MCphLGg9NDgqYSx0PTMqYSx2PTIqYSxkPTMqYSxtPTE1KmEsbj03NCphLHA9MzAqYSxxPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7cS53aWR0aD1yO3EuaGVpZ2h0PWg7cS5zdHlsZS5jc3NUZXh0PVwid2lkdGg6ODBweDtoZWlnaHQ6NDhweFwiO3ZhciBiPXEuZ2V0Q29udGV4dChcIjJkXCIpO2IuZm9udD1cImJvbGQgXCIrOSphK1wicHggSGVsdmV0aWNhLEFyaWFsLHNhbnMtc2VyaWZcIjtiLnRleHRCYXNlbGluZT1cInRvcFwiO2IuZmlsbFN0eWxlPWw7Yi5maWxsUmVjdCgwLDAscixoKTtiLmZpbGxTdHlsZT1mO2IuZmlsbFRleHQoZSx0LHYpO1xuYi5maWxsUmVjdChkLG0sbixwKTtiLmZpbGxTdHlsZT1sO2IuZ2xvYmFsQWxwaGE9Ljk7Yi5maWxsUmVjdChkLG0sbixwKTtyZXR1cm57ZG9tOnEsdXBkYXRlOmZ1bmN0aW9uKGgsdyl7Yz1NYXRoLm1pbihjLGgpO2s9TWF0aC5tYXgoayxoKTtiLmZpbGxTdHlsZT1sO2IuZ2xvYmFsQWxwaGE9MTtiLmZpbGxSZWN0KDAsMCxyLG0pO2IuZmlsbFN0eWxlPWY7Yi5maWxsVGV4dChnKGgpK1wiIFwiK2UrXCIgKFwiK2coYykrXCItXCIrZyhrKStcIilcIix0LHYpO2IuZHJhd0ltYWdlKHEsZCthLG0sbi1hLHAsZCxtLG4tYSxwKTtiLmZpbGxSZWN0KGQrbi1hLG0sYSxwKTtiLmZpbGxTdHlsZT1sO2IuZ2xvYmFsQWxwaGE9Ljk7Yi5maWxsUmVjdChkK24tYSxtLGEsZygoMS1oL3cpKnApKX19fTtyZXR1cm4gZn0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///571\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(B.exports,B,B.exports,__webpack_require__),B.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,F,B,U)=>{if(!F){var C=1/0;for(t=0;t<deferred.length;t++){for(var[F,B,U]=deferred[t],g=!0,I=0;I<F.length;I++)(!1&U||C>=U)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](F[I])))?F.splice(I--,1):(g=!1,U<C&&(C=U));if(g){deferred.splice(t--,1);var L=B();void 0!==L&&(Q=L)}}return Q}U=U||0;for(var t=deferred.length;t>0&&deferred[t-1][2]>U;t--)deferred[t]=deferred[t-1];deferred[t]=[F,B,U]},__webpack_require__.n=Q=>{var F=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(F,{a:F}),F},__webpack_require__.d=(Q,F)=>{for(var B in F)__webpack_require__.o(F,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),(()=>{var Q={792:0};__webpack_require__.O.j=F=>0===Q[F];var F=(F,B)=>{var U,C,[g,I,L]=B,t=0;if(g.some((F=>0!==Q[F]))){for(U in I)__webpack_require__.o(I,U)&&(__webpack_require__.m[U]=I[U]);if(L)var s=L(__webpack_require__)}for(F&&F(B);t<g.length;t++)C=g[t],__webpack_require__.o(Q,C)&&Q[C]&&Q[C][0](),Q[C]=0;return __webpack_require__.O(s)},B=self.webpackChunkweb=self.webpackChunkweb||[];B.forEach(F.bind(null,0)),B.push=F.bind(null,B.push.bind(B))})();var __webpack_exports__=__webpack_require__.O(void 0,[233],(()=>__webpack_require__(617)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();