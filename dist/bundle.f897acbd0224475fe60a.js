(()=>{"use strict";var __webpack_modules__={251:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.core.js\nvar three_core = __webpack_require__(922);\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(437);\n;// ./src/scene.js\n// scene.js\n\nvar scene_scene, scene_camera, renderer;\nfunction initScene() {\n  console.log("try to initScene");\n  scene_scene = new three_core/* Scene */.Z58();\n  scene_scene.background = new three_core/* Color */.Q1f(0x88ccff);\n  scene_camera = new three_core/* PerspectiveCamera */.ubm(60, window.innerWidth / window.innerHeight, 0.2, 2000);\n  scene_camera.position.set(0, 50, 100);\n  scene_camera.lookAt(0, 0, 0);\n  renderer = new three_module/* WebGLRenderer */.JeP({\n    antialias: true\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  // Включаем поддержку теней\n  renderer.shadowMap.enabled = true;\n  renderer.shadowMap.type = three_core/* PCFSoftShadowMap */.Wk7;\n  document.body.appendChild(renderer.domElement);\n  window.addEventListener(\'resize\', onWindowResize);\n\n  // Настраиваем освещение\n  var ambient = new three_core/* AmbientLight */.$p8(0xffffff, 0.5);\n  scene_scene.add(ambient);\n\n  // Основной направленный свет с тенями\n  var directional = new three_core/* DirectionalLight */.ZyN(0xffffff, 1);\n  directional.position.set(50, 100, 50);\n  directional.castShadow = true;\n  // Настраиваем параметры теней\n  directional.shadow.camera.near = 0.1;\n  directional.shadow.camera.far = 500;\n  directional.shadow.camera.left = -100;\n  directional.shadow.camera.right = 100;\n  directional.shadow.camera.top = 100;\n  directional.shadow.camera.bottom = -100;\n  directional.shadow.mapSize.width = 2048;\n  directional.shadow.mapSize.height = 2048;\n  scene_scene.add(directional);\n\n  // Добавляем вспомогательный свет для подсветки теней\n  var fillLight = new three_core/* DirectionalLight */.ZyN(0xffffff, 0.3);\n  fillLight.position.set(-50, 50, -50);\n  scene_scene.add(fillLight);\n}\nfunction onWindowResize() {\n  scene_camera.aspect = window.innerWidth / window.innerHeight;\n  scene_camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\n;// ./src/objects.js\n// objects.js\n\n\n\nvar objects = {}; // Словарь объектов: id -> { mesh, body, serverPos, ... }\n\nfunction createMeshAndBodyForObject(data) {\n  console.log("[Objects] Вызов createMeshAndBodyForObject с данными:", data);\n  if (!data || !data.object_type) {\n    console.error("[Objects] Invalid data received for object creation:", data);\n    return null;\n  }\n  var type = data.object_type;\n  var mesh,\n    body = null;\n  try {\n    switch (type) {\n      case "terrain":\n        console.log("[Objects] Создание terrainMesh");\n        mesh = createTerrainMesh(data);\n        body = createPhysicsBodyForTerrain(data);\n        break;\n      case "sphere":\n        console.log("[Objects] Создание sphereMesh с параметрами:", {\n          id: data.id,\n          radius: data.radius,\n          position: {\n            x: data.x,\n            y: data.y,\n            z: data.z\n          },\n          color: data.color\n        });\n        mesh = createSphereMesh(data);\n        body = createPhysicsBodyForSphere(data);\n        break;\n      case "tree":\n        console.log("[Objects] Создание treeMesh");\n        mesh = createTreeMesh(data);\n        break;\n      default:\n        console.warn("[Objects] Unknown object type: ".concat(type));\n        mesh = createDefaultMesh(data);\n        break;\n    }\n    if (!mesh) {\n      console.error("[Objects] \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0441\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043C\\u0435\\u0448 \\u0434\\u043B\\u044F ".concat(type));\n      return null;\n    }\n\n    // Устанавливаем позицию для меша\n    if (data.x !== undefined || data.y !== undefined || data.z !== undefined) {\n      mesh.position.set(data.x !== undefined ? data.x : 0, data.y !== undefined ? data.y : 0, data.z !== undefined ? data.z : 0);\n      console.log("[Objects] \\u0423\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0430 \\u043F\\u043E\\u0437\\u0438\\u0446\\u0438\\u044F \\u0434\\u043B\\u044F ".concat(type, ":"), mesh.position);\n    }\n\n    // Убедимся, что сцена доступна\n    if (!scene_scene) {\n      console.error("[Objects] Сцена не инициализирована!");\n      return {\n        mesh: mesh,\n        body: body\n      }; // Возвращаем объект без добавления в сцену\n    }\n    scene_scene.add(mesh);\n    console.log("[Objects] ".concat(type, " \\u0434\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D \\u043D\\u0430 \\u0441\\u0446\\u0435\\u043D\\u0443"));\n    return {\n      mesh: mesh,\n      body: body\n    };\n  } catch (error) {\n    console.error("[Objects] \\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D\\u0438\\u0438 \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(type, ":"), error);\n    return null;\n  }\n}\nfunction createPhysicsBodyForTerrain(data) {\n  if (typeof Ammo === \'undefined\') {\n    console.error(\'Ammo.js не инициализирован\');\n    return null;\n  }\n  if (!physics_localPhysicsWorld) {\n    console.error(\'Физический мир не инициализирован\');\n    return null;\n  }\n  var w = data.heightmap_w;\n  var h = data.heightmap_h;\n  var scaleX = data.scale_x;\n  var scaleZ = data.scale_z;\n\n  // Создаем буфер в памяти Ammo для данных высот\n  var ammoHeightData = Ammo._malloc(4 * w * h);\n\n  // Копируем данные высот в память Ammo\n  var p = 0;\n  var p2 = 0;\n  for (var j = 0; j < h; j++) {\n    for (var i = 0; i < w; i++) {\n      Ammo.HEAPF32[ammoHeightData + p2 >> 2] = data.height_data[p];\n      p++;\n      p2 += 4;\n    }\n  }\n\n  // Создаем форму террейна\n  var shape = new Ammo.btHeightfieldTerrainShape(w, h, ammoHeightData, 1,\n  // heightScale\n  data.min_height, data.max_height, 1,\n  // up axis = 1 для Y\n  Ammo.PHY_FLOAT, false // flipQuadEdges\n  );\n\n  // Устанавливаем масштабирование\n  shape.setLocalScaling(new Ammo.btVector3(scaleX, data.scale_y, scaleZ));\n  shape.setMargin(0.5);\n\n  // Создаем трансформацию\n  var transform = new Ammo.btTransform();\n  transform.setIdentity();\n\n  // Важно! Смещаем террейн, так как Bullet центрирует его по ограничивающему боксу\n  transform.setOrigin(new Ammo.btVector3(data.x || 0, (data.min_height + data.max_height) / 2, data.z || 0));\n  var mass = 0; // Статическое тело\n  var localInertia = new Ammo.btVector3(0, 0, 0);\n  var motionState = new Ammo.btDefaultMotionState(transform);\n  var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n  var body = new Ammo.btRigidBody(rbInfo);\n\n  // Добавляем тело в физический мир\n  var TERRAIN_GROUP = 1;\n  physics_localPhysicsWorld.addRigidBody(body, TERRAIN_GROUP, -1); // Террейн сталкивается со всеми\n\n  // Очистка памяти\n  Ammo.destroy(rbInfo);\n  Ammo.destroy(localInertia);\n  console.log("[Terrain] Физическое тело создано:", {\n    размеры: {\n      w: w,\n      h: h\n    },\n    масштаб: {\n      x: scaleX,\n      y: data.scale_y,\n      z: scaleZ\n    },\n    позиция: {\n      x: data.x || 0,\n      y: (data.min_height + data.max_height) / 2,\n      z: data.z || 0\n    },\n    минВысота: data.min_height,\n    максВысота: data.max_height\n  });\n  return body;\n}\nfunction createTerrainMesh(data) {\n  var w = data.heightmap_w || 64;\n  var h = data.heightmap_h || 64;\n  var geo = new three_core/* PlaneGeometry */.bdM(w * data.scale_x, h * data.scale_z, w - 1, h - 1);\n  geo.rotateX(-Math.PI / 2);\n  if (data.height_data) {\n    var verts = geo.attributes.position.array;\n    for (var i = 0; i < verts.length; i += 3) {\n      var ix = i / 3 % w;\n      var iz = Math.floor(i / 3 / w);\n      verts[i + 1] = data.height_data[iz * w + ix] * data.scale_y;\n    }\n    geo.computeVertexNormals();\n  }\n  var mesh = new three_core/* Mesh */.eaF(geo, new three_core/* MeshPhongMaterial */.tXL({\n    color: parseColor(data.color || "#888888"),\n    wireframe: false,\n    flatShading: true\n  }));\n\n  // Включаем тени для террейна\n  mesh.receiveShadow = true;\n  return mesh;\n}\nfunction createSphereMesh(data) {\n  var geo = new three_core/* SphereGeometry */.Gu$(data.radius || 1, 32, 32);\n  var mesh = new three_core/* Mesh */.eaF(geo, new three_core/* MeshPhongMaterial */.tXL({\n    color: parseColor(data.color || "#888888"),\n    shininess: 30\n  }));\n\n  // Включаем тени для сфер\n  mesh.castShadow = true;\n  mesh.receiveShadow = true;\n  return mesh;\n}\nfunction createTreeMesh(data) {\n  var group = new three_core/* Group */.YJl();\n  if (data.branches && Array.isArray(data.branches)) {\n    data.branches.forEach(function (branch, index) {\n      if (branch.startX === undefined || branch.startY === undefined || branch.startZ === undefined || branch.endX === undefined || branch.endY === undefined || branch.endZ === undefined) {\n        console.warn("Branch coordinates are missing or invalid at index ".concat(index, ":"), branch);\n        return;\n      }\n      var branchGeo = new three_core/* CylinderGeometry */.Ho_(branch.radiusTop || branch.radius || 0.1,\n      // верхний радиус\n      branch.radiusBottom || branch.radius || 0.2,\n      // нижний радиус\n      1, 8);\n      var branchMat = new three_core/* MeshPhongMaterial */.tXL({\n        color: parseColor(branch.color || "#654321"),\n        shininess: 10\n      });\n      var branchMesh = new three_core/* Mesh */.eaF(branchGeo, branchMat);\n\n      // Включаем тени для веток\n      branchMesh.castShadow = true;\n      branchMesh.receiveShadow = true;\n      var midX = (branch.startX + branch.endX) / 2;\n      var midY = (branch.startY + branch.endY) / 2;\n      var midZ = (branch.startZ + branch.endZ) / 2;\n      branchMesh.position.set(midX, midY, midZ);\n      branchMesh.lookAt(new three_core/* Vector3 */.Pq0(branch.endX, branch.endY, branch.endZ));\n      var length = new three_core/* Vector3 */.Pq0(branch.endX - branch.startX, branch.endY - branch.startY, branch.endZ - branch.startZ).length();\n      branchMesh.scale.set(1, length, 1);\n      group.add(branchMesh);\n    });\n  }\n  return group;\n}\nfunction createDefaultMesh(data) {\n  var geo = new three_core/* BoxGeometry */.iNn(1, 1, 1);\n  return new three_core/* Mesh */.eaF(geo, new three_core/* MeshLambertMaterial */.G_z({\n    color: parseColor(data.color || "#888888")\n  }));\n}\nfunction createPhysicsBodyForSphere(data) {\n  try {\n    if (typeof Ammo === \'undefined\') {\n      console.error(\'Ammo.js не инициализирован\');\n      return null;\n    }\n    if (!physics_localPhysicsWorld) {\n      console.error(\'Физический мир не инициализирован\');\n      return null;\n    }\n    var radius = data.radius || 1;\n    var mass = data.mass || 1;\n\n    // Создаем все Ammo объекты через window.Ammo\n    var shape = new window.Ammo.btSphereShape(radius);\n    var transform = new window.Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new window.Ammo.btVector3(data.x || 0, data.y || 0, data.z || 0));\n    var localInertia = new window.Ammo.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    var motionState = new window.Ammo.btDefaultMotionState(transform);\n    var rbInfo = new window.Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    var body = new window.Ammo.btRigidBody(rbInfo);\n\n    // Добавляем тело в физический мир\n    var SPHERE_GROUP = 2;\n    physics_localPhysicsWorld.addRigidBody(body, SPHERE_GROUP, -1); // Сферы сталкиваются со всеми\n\n    // Очистка памяти\n    window.Ammo.destroy(rbInfo);\n    window.Ammo.destroy(localInertia);\n    return body;\n  } catch (error) {\n    console.error(\'Ошибка при создании физического тела:\', error);\n    return null;\n  }\n}\nfunction parseColor(colorStr) {\n  if (!colorStr) return 0x888888;\n  if (colorStr.startsWith("#")) {\n    return parseInt(colorStr.slice(1), 16);\n  }\n  return 0x888888;\n}\nfunction createTestSphere() {\n  console.log("[Objects] Начинаю создание тестовой сферы...");\n  try {\n    // Создаем визуальную сферу\n    var radius = 1;\n    var geometry = new THREE.SphereGeometry(radius, 32, 32);\n    var material = new THREE.MeshPhongMaterial({\n      color: 0xff00ff,\n      shininess: 30\n    });\n    var mesh = new THREE.Mesh(geometry, material);\n    console.log("[Objects] Созданы геометрия и материал для сферы");\n\n    // Включаем тени для тестовой сферы\n    mesh.castShadow = true;\n    mesh.receiveShadow = true;\n\n    // Позиционируем сферу высоко над террейном\n    var startY = 58; // Высота над террейном\n    mesh.position.set(0, startY, 0);\n    console.log("[Objects] Установлена позиция сферы:", mesh.position);\n    if (!scene) {\n      console.error("[Objects] Сцена не инициализирована!");\n      return null;\n    }\n    scene.add(mesh);\n    console.log("[Objects] Сфера добавлена на сцену");\n\n    // Проверяем, инициализирован ли Ammo\n    if (typeof Ammo === \'undefined\' || !Ammo) {\n      console.error("[Objects] Ammo.js не инициализирован!");\n\n      // Возвращаем объект без физического тела в крайнем случае\n      var _testSphereObj = {\n        mesh: mesh,\n        body: null,\n        object_type: "test_sphere",\n        physicsBy: "none" // Без физики\n      };\n      objects["test_sphere"] = _testSphereObj;\n      console.log("[Objects] Создан объект сферы без физики:", _testSphereObj);\n      return _testSphereObj;\n    }\n    console.log("[Objects] Создаем физическое тело для сферы...");\n    // Создаем физическое тело\n    var shape = new Ammo.btSphereShape(radius);\n    var mass = 1;\n    var transform = new Ammo.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new Ammo.btVector3(0, startY, 0));\n    var localInertia = new Ammo.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    var motionState = new Ammo.btDefaultMotionState(transform);\n    var rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    var body = new Ammo.btRigidBody(rbInfo);\n\n    // Важные настройки для физического тела\n    body.setActivationState(4); // DISABLE_DEACTIVATION\n    body.setFriction(0.5);\n    body.setRollingFriction(0.1);\n    body.setRestitution(0.5); // Упругость\n\n    console.log("[Objects] Физическое тело создано и настроено");\n\n    // Проверяем, инициализирован ли физический мир\n    if (!localPhysicsWorld) {\n      console.error("[Objects] Физический мир не инициализирован!");\n\n      // Очистка памяти\n      Ammo.destroy(rbInfo);\n      Ammo.destroy(localInertia);\n      var _testSphereObj2 = {\n        mesh: mesh,\n        body: null,\n        object_type: "test_sphere",\n        physicsBy: "none" // Без физики\n      };\n      objects["test_sphere"] = _testSphereObj2;\n      console.log("[Objects] Создан объект сферы без физики (нет мира):", _testSphereObj2);\n      return _testSphereObj2;\n    }\n\n    // Добавляем тело в физический мир\n    var SPHERE_GROUP = 2;\n    localPhysicsWorld.addRigidBody(body, SPHERE_GROUP, -1); // Тестовая сфера сталкивается со всеми\n    console.log("[Objects] Тело добавлено в физический мир");\n\n    // Очистка памяти\n    Ammo.destroy(rbInfo);\n    Ammo.destroy(localInertia);\n\n    // Добавляем объект в наш список объектов\n    var testSphereObj = {\n      mesh: mesh,\n      body: body,\n      object_type: "test_sphere",\n      physicsBy: "ammo" // Изменено с "both" на "ammo", чтобы управлялось только локальной физикой\n    };\n    objects["test_sphere"] = testSphereObj;\n    console.log("[Objects] Тестовая сфера успешно создана и добавлена в список объектов:", testSphereObj);\n    return testSphereObj;\n  } catch (error) {\n    console.error("[Objects] Ошибка при создании тестовой сферы:", error);\n    return null;\n  }\n}\nfunction createDebugObjects() {\n  console.log("[Debug] Создание отладочных объектов...");\n  try {\n    // Создаем сетку координат для визуализации\n    var gridHelper = new THREE.GridHelper(100, 10);\n    scene.add(gridHelper);\n    console.log("[Debug] Добавлена координатная сетка");\n\n    // Создаем отладочную сферу красного цвета\n    var debugSphere = new THREE.Mesh(new THREE.SphereGeometry(1, 16, 16), new THREE.MeshBasicMaterial({\n      color: 0xff0000,\n      wireframe: true\n    }));\n    debugSphere.position.set(0, 10, 0); // Позиционируем ее в удобном месте\n    scene.add(debugSphere);\n    console.log("[Debug] Добавлена отладочная сфера, позиция:", debugSphere.position);\n\n    // Создаем направляющую для камеры\n    var cameraHelper = new THREE.CameraHelper(camera);\n    scene.add(cameraHelper);\n    console.log("[Debug] Добавлен помощник камеры");\n\n    // Сохраняем отладочные объекты\n    window.debugObjects = {\n      gridHelper: gridHelper,\n      debugSphere: debugSphere,\n      cameraHelper: cameraHelper\n    };\n    return window.debugObjects;\n  } catch (error) {\n    console.error("[Debug] Ошибка при создании отладочных объектов:", error);\n    return null;\n  }\n}\n;// ./src/physics.js\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// physics.js\n\n\nvar physics_localPhysicsWorld = null;\nvar ammoPromise = null;\n\n// Настройки для коррекции позиции\nvar DEAD_ZONE = 0.01; // "Мертвая зона" в единицах мира - уменьшаем для более точной синхронизации\nvar CORRECTION_STRENGTH = 10.0; // Сила корректировки - увеличиваем для более быстрой коррекции\nvar TELEPORT_THRESHOLD = 0.5; // Порог для телепортации - уменьшаем для более частых телепортаций\n\nfunction initAmmo() {\n  return _initAmmo.apply(this, arguments);\n}\nfunction _initAmmo() {\n  _initAmmo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!ammoPromise) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt("return", ammoPromise);\n        case 2:\n          ammoPromise = new Promise(function (resolve, reject) {\n            var script = document.createElement(\'script\');\n            script.src = \'/ammo/ammo.wasm.js\'; // путь от корня веб-сервера\n            script.async = true;\n            script.onload = function () {\n              console.log("[Ammo] Скрипт загружен, инициализация...");\n              Ammo().then(function (AmmoLib) {\n                window.Ammo = AmmoLib;\n\n                // Инициализируем физический мир после загрузки Ammo\n                var collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n                var dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n                var broadphase = new AmmoLib.btDbvtBroadphase();\n                var solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n                physics_localPhysicsWorld = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n                physics_localPhysicsWorld.setGravity(new AmmoLib.btVector3(0, -9.81, 0));\n                console.log("[Ammo] Инициализация успешна");\n                resolve(AmmoLib);\n              })["catch"](reject);\n            };\n            script.onerror = function (error) {\n              console.error("[Ammo] Ошибка загрузки скрипта:", error);\n              reject(error);\n            };\n            document.body.appendChild(script);\n          });\n          return _context.abrupt("return", ammoPromise);\n        case 4:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _initAmmo.apply(this, arguments);\n}\nfunction stepPhysics(deltaTime) {\n  if (physics_localPhysicsWorld) {\n    // Проверяем, что deltaTime имеет разумное значение\n    if (deltaTime <= 0 || deltaTime > 1) {\n      console.warn("[Physics] Подозрительное значение deltaTime:", deltaTime);\n      deltaTime = 1 / 60; // используем фиксированный шаг если что-то не так\n    }\n\n    // if (Math.random() < 0.016) { // примерно раз в секунду при 60 FPS\n    //     console.log("[Physics] Шаг симуляции:", {\n    //         deltaTime: deltaTime,\n    //     });\n    // }\n\n    physics_localPhysicsWorld.stepSimulation(deltaTime, 10);\n  } else {\n    console.warn("[Physics] Физический мир не инициализирован");\n  }\n}\nfunction updatePhysicsObjects(objects) {\n  for (var id in objects) {\n    var obj = objects[id];\n    if (!obj.mesh) continue;\n    switch (obj.physicsBy) {\n      case "ammo":\n        // Обновление только по физике Ammo.js\n        if (obj.body && obj.object_type !== "terrain") {\n          var trans = new window.Ammo.btTransform();\n          obj.body.getMotionState().getWorldTransform(trans);\n          var locX = trans.getOrigin().x();\n          var locY = trans.getOrigin().y();\n          var locZ = trans.getOrigin().z();\n          var qx = trans.getRotation().x();\n          var qy = trans.getRotation().y();\n          var qz = trans.getRotation().z();\n          var qw = trans.getRotation().w();\n          obj.mesh.position.set(locX, locY, locZ);\n          obj.mesh.quaternion.set(qx, qy, qz, qw);\n        }\n        break;\n      case "bullet":\n        // Обновление по серверным данным с простой интерполяцией\n        if (obj.serverPos && obj.object_type !== "terrain") {\n          // Простая линейная интерполяция\n          var interpolationFactor = 0.2; // Можно настроить под ваши нужды\n\n          obj.mesh.position.x += (obj.serverPos.x - obj.mesh.position.x) * interpolationFactor;\n          obj.mesh.position.y += (obj.serverPos.y - obj.mesh.position.y) * interpolationFactor;\n          obj.mesh.position.z += (obj.serverPos.z - obj.mesh.position.z) * interpolationFactor;\n        }\n        break;\n      case "both":\n        // Гибридный подход для объектов, управляемых обоими источниками\n        if (obj.serverPos && obj.object_type !== "terrain" && obj.body) {\n          // ЭКСПЕРИМЕНТАЛЬНО: Прямое обновление позиции меша для немедленной визуализации\n          // Это поможет увидеть изменения сразу, не дожидаясь физической синхронизации\n          console.log("[Physics] \\u041F\\u0440\\u044F\\u043C\\u043E\\u0435 \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u043F\\u043E\\u0437\\u0438\\u0446\\u0438\\u0438 \\u043C\\u0435\\u0448\\u0430 \\u0434\\u043B\\u044F ".concat(id, ":"), {\n            старая: {\n              x: obj.mesh.position.x,\n              y: obj.mesh.position.y,\n              z: obj.mesh.position.z\n            },\n            серверная: {\n              x: obj.serverPos.x,\n              y: obj.serverPos.y,\n              z: obj.serverPos.z\n            }\n          });\n\n          // Обновляем только если разница существенна\n          var dxMesh = obj.serverPos.x - obj.mesh.position.x;\n          var dyMesh = obj.serverPos.y - obj.mesh.position.y;\n          var dzMesh = obj.serverPos.z - obj.mesh.position.z;\n          var meshDistance = Math.sqrt(dxMesh * dxMesh + dyMesh * dyMesh + dzMesh * dzMesh);\n          if (meshDistance > DEAD_ZONE * 10) {\n            obj.mesh.position.lerp(new THREE.Vector3(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z), 0.3);\n            console.log("[Physics] \\u041E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0430 \\u043F\\u043E\\u0437\\u0438\\u0446\\u0438\\u044F \\u043C\\u0435\\u0448\\u0430 \\u0434\\u043B\\u044F ".concat(id, ":"), obj.mesh.position);\n          }\n\n          // Получаем текущую позицию из физического тела\n          var transform = new window.Ammo.btTransform();\n          obj.body.getMotionState().getWorldTransform(transform);\n\n          // Вычисляем разницу между серверной и текущей позицией физического тела\n          var currentX = transform.getOrigin().x();\n          var currentY = transform.getOrigin().y();\n          var currentZ = transform.getOrigin().z();\n          var dx = obj.serverPos.x - currentX;\n          var dy = obj.serverPos.y - currentY;\n          var dz = obj.serverPos.z - currentZ;\n\n          // Вычисляем расстояние\n          var distance = Math.sqrt(dx * dx + dy * dy + dz * dz);\n\n          // Применяем гибридный подход\n          if (distance > DEAD_ZONE) {\n            if (distance > TELEPORT_THRESHOLD) {\n              // Телепортация для больших расхождений\n              console.log("[Physics] \\u0422\\u0435\\u043B\\u0435\\u043F\\u043E\\u0440\\u0442\\u0430\\u0446\\u0438\\u044F \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(id, ", \\u0440\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435: ").concat(distance));\n              transform.setOrigin(new window.Ammo.btVector3(obj.serverPos.x, obj.serverPos.y, obj.serverPos.z));\n              obj.body.getMotionState().setWorldTransform(transform);\n\n              // Сбрасываем скорость\n              var zero = new window.Ammo.btVector3(0, 0, 0);\n              obj.body.setLinearVelocity(zero);\n              obj.body.setAngularVelocity(zero);\n              window.Ammo.destroy(zero);\n\n              // Немедленно синхронизируем меш с физическим телом\n              var updatedTransform = new window.Ammo.btTransform();\n              obj.body.getMotionState().getWorldTransform(updatedTransform);\n              var px = updatedTransform.getOrigin().x();\n              var py = updatedTransform.getOrigin().y();\n              var pz = updatedTransform.getOrigin().z();\n              obj.mesh.position.set(px, py, pz);\n              console.log("[Physics] \\u0421\\u0438\\u043D\\u0445\\u0440\\u043E\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F \\u043F\\u043E\\u0437\\u0438\\u0446\\u0438\\u0438 \\u043C\\u0435\\u0448\\u0430 ".concat(id, ":"), {\n                x: px,\n                y: py,\n                z: pz\n              });\n              window.Ammo.destroy(updatedTransform);\n            } else {\n              // Корректирующая сила для средних расхождений\n              console.log("[Physics] \\u041A\\u043E\\u0440\\u0440\\u0435\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u043A\\u0430 \\u0441\\u0438\\u043B\\u043E\\u0439 \\u0434\\u043B\\u044F \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(id, ", \\u0440\\u0430\\u0441\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435: ").concat(distance));\n\n              // Нормализуем направление\n              var magnitude = distance * CORRECTION_STRENGTH;\n              var force = new window.Ammo.btVector3(dx * magnitude, dy * magnitude, dz * magnitude);\n\n              // Активируем тело и применяем силу\n              obj.body.activate(true);\n              obj.body.applyCentralForce(force);\n              window.Ammo.destroy(force);\n            }\n          }\n          window.Ammo.destroy(transform);\n        }\n        break;\n      default:\n        console.warn("[Physics] \\u041D\\u0435\\u0438\\u0437\\u0432\\u0435\\u0441\\u0442\\u043D\\u044B\\u0439 \\u0442\\u0438\\u043F physicsBy \\u0434\\u043B\\u044F \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(id, ": ").concat(obj.physicsBy));\n        break;\n    }\n  }\n}\nfunction applyImpulseToSphere(cmd, objects) {\n  console.log("[Debug] Переданные объекты в applyImpulseToSphere:", objects);\n  // Проверяем, что objects передан и является объектом\n  if (!objects || _typeof(objects) !== \'object\') {\n    console.warn("[Physics] Некорректные объекты переданы в applyImpulseToSphere");\n    return;\n  }\n\n  // Создаем импульс заранее, чтобы не создавать его для каждого шара\n  var impulse = new window.Ammo.btVector3(0, 0, 0);\n  if (cmd === "LEFT") impulse.setValue(-5, 0, 0);\n  if (cmd === "RIGHT") impulse.setValue(5, 0, 0);\n  if (cmd === "UP") impulse.setValue(0, 0, -5);\n  if (cmd === "DOWN") impulse.setValue(0, 0, 5);\n  if (cmd === "SPACE") impulse.setValue(0, 10, 0);\n\n  // Проходим по всем объектам и применяем импульс только к шарам с physicsBy: "ammo"\n  for (var id in objects) {\n    var obj = objects[id];\n    if (obj && obj.mesh && obj.mesh.geometry && obj.mesh.geometry.type === "SphereGeometry" && obj.body && obj.physicsBy === "ammo" // Только для локально управляемых объектов\n    ) {\n      obj.body.activate(true);\n      obj.body.applyCentralImpulse(impulse);\n\n      // Добавляем диагностику для каждого шара\n      var velocity = obj.body.getLinearVelocity();\n      console.log("[Physics] Состояние шара:", {\n        id: id,\n        physicsBy: obj.physicsBy,\n        команда: cmd,\n        позиция: obj.mesh.position,\n        скорость: {\n          x: velocity.x(),\n          y: velocity.y(),\n          z: velocity.z()\n        }\n      });\n    }\n  }\n\n  // Очищаем память\n  Ammo.destroy(impulse);\n}\nfunction receiveObjectUpdate(data) {\n  // Извлекаем id из данных обновления\n  var id = data.id;\n\n  // Проверяем, существует ли объект\n  var obj = objects[id];\n  if (!obj) {\n    console.warn("[Physics] \\u041F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u043E \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0434\\u043B\\u044F \\u043D\\u0435\\u0441\\u0443\\u0449\\u0435\\u0441\\u0442\\u0432\\u0443\\u044E\\u0449\\u0435\\u0433\\u043E \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430: ".concat(id));\n    return;\n  }\n  console.log("[Physics] \\u041E\\u0431\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0430 \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u044F \\u0434\\u043B\\u044F \\u043E\\u0431\\u044A\\u0435\\u043A\\u0442\\u0430 ".concat(id, ", \\u0442\\u0438\\u043F: ").concat(obj.physicsBy));\n\n  // Обновляем серверную позицию\n  obj.serverPos = {\n    x: data.x !== undefined ? data.x : obj.mesh.position.x,\n    y: data.y !== undefined ? data.y : obj.mesh.position.y,\n    z: data.z !== undefined ? data.z : obj.mesh.position.z\n  };\n\n  // На этом этапе только сохраняем позицию, не применяем коррекцию\n  // Коррекция будет применяться в updatePhysicsObjects\n}\n;// ./src/network.js\nfunction network_typeof(o) { "@babel/helpers - typeof"; return network_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, network_typeof(o); }\n// network.js\n\n\nvar ws = null;\nfunction handleMessage(data) {\n  try {\n    if (data.type === "create" && data.id) {\n      console.log("[WS] Обработка create сообщения для id:", data.id);\n\n      // Создаем объект и добавляем его в список объектов\n      var obj = createMeshAndBodyForObject(data);\n      obj.physicsBy = data.physics_by || "both"; // Убедитесь, что свойство устанавливается\n      objects[data.id] = obj;\n      console.log("[WS] \\u041E\\u0431\\u044A\\u0435\\u043A\\u0442 ".concat(data.id, " \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D \\u0441 physicsBy: ").concat(obj.physicsBy)); // Логирование установленного свойства\n    } else if (data.type === "update" && data.id && objects[data.id]) {\n      console.log("[WS] Обработка update сообщения для id:", data.id);\n      var _obj = objects[data.id];\n      _obj.serverPos = {\n        x: data.x || 0,\n        y: data.y || 0,\n        z: data.z || 0\n      };\n    }\n  } catch (error) {\n    console.error("[WS] Ошибка при обработке сообщения:", error);\n    console.error("[WS] Стек вызовов:", error.stack);\n  }\n}\nfunction handleKeyDown(e) {\n  if (!ws || ws.readyState !== WebSocket.OPEN) return;\n  var cmd = "";\n  switch (e.key) {\n    case "ArrowLeft":\n      cmd = "LEFT";\n      break;\n    case "ArrowRight":\n      cmd = "RIGHT";\n      break;\n    case "ArrowUp":\n      cmd = "UP";\n      break;\n    case "ArrowDown":\n      cmd = "DOWN";\n      break;\n    case " ":\n      cmd = "SPACE";\n      break;\n    default:\n      return;\n  }\n  try {\n    console.log("[WS] \\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430 \\u043A\\u043E\\u043C\\u0430\\u043D\\u0434\\u044B: ".concat(cmd));\n    ws.send(JSON.stringify({\n      type: "cmd",\n      cmd: cmd\n    }));\n\n    // Применяем импульс локально для всех объектов, включая serverPlayer\n    for (var id in objects) {\n      var obj = objects[id];\n      if (obj && obj.body && obj.mesh && obj.mesh.geometry && obj.mesh.geometry.type === "SphereGeometry") {\n        console.log("[WS] \\u041F\\u0440\\u0438\\u043C\\u0435\\u043D\\u044F\\u0435\\u043C \\u0438\\u043C\\u043F\\u0443\\u043B\\u044C\\u0441 \\u043A \\u0441\\u0444\\u0435\\u0440\\u0435 ".concat(id, " \\u0441 physicsBy=").concat(obj.physicsBy));\n\n        // Создаем импульс\n        var impulse = new window.Ammo.btVector3(0, 0, 0);\n        if (cmd === "LEFT") impulse.setValue(-5, 0, 0);\n        if (cmd === "RIGHT") impulse.setValue(5, 0, 0);\n        if (cmd === "UP") impulse.setValue(0, 0, -5);\n        if (cmd === "DOWN") impulse.setValue(0, 0, 5);\n        if (cmd === "SPACE") impulse.setValue(0, 10, 0);\n\n        // Активируем тело и применяем импульс\n        obj.body.activate(true);\n        obj.body.applyCentralImpulse(impulse);\n\n        // Очищаем память\n        window.Ammo.destroy(impulse);\n      }\n    }\n  } catch (error) {\n    console.error("[WS] Ошибка отправки:", error);\n  }\n}\nfunction initNetwork() {\n  try {\n    console.log("[WS] Начало инициализации WebSocket");\n    ws = new WebSocket("ws://localhost:8080/ws");\n    ws.onopen = function () {\n      console.log("[WS] connected");\n      // Отправим тестовое сообщение\n      try {\n        ws.send(JSON.stringify({\n          type: "ping"\n        }));\n        console.log("[WS] Отправлено тестовое сообщение");\n      } catch (e) {\n        console.error("[WS] Ошибка отправки тестового сообщения:", e);\n      }\n    };\n    ws.onmessage = function (evt) {\n      try {\n        var data = JSON.parse(evt.data);\n        if (!data || network_typeof(data) !== \'object\') {\n          throw new Error(\'Неверный формат данных\');\n        }\n\n        // Если приходит сообщение с id и object_type, но без type - это объект создания\n        if (!data.type && data.id && data.object_type) {\n          console.log(\'[WS] Получен объект без type, считаем это create:\', data);\n          // Добавляем тип для совместимости с существующим кодом\n          data.type = "create";\n          // Обрабатываем как create\n          handleMessage(data);\n        }\n        // Обрабатываем update сообщения через нашу новую функцию\n        else if (data.type === "update" && data.id) {\n          console.log("[WS] \\u041F\\u043E\\u043B\\u0443\\u0447\\u0435\\u043D\\u043E \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0434\\u043B\\u044F ".concat(data.id, ":"), {\n            x: data.x,\n            y: data.y,\n            z: data.z\n          });\n          receiveObjectUpdate(data);\n        } else if (data.type === "create" && data.id) {\n          // Оставляем существующую логику создания объектов\n          handleMessage(data);\n        }\n      } catch (error) {\n        console.error("[WS] Ошибка при обработке сообщения:", error);\n      }\n    };\n    ws.onerror = function (error) {\n      console.error("[WS] WebSocket error:", error);\n      console.error("[WS] Детали ошибки:", {\n        message: error.message,\n        type: error.type,\n        eventPhase: error.eventPhase\n      });\n    };\n    ws.onclose = function (event) {\n      console.log("[WS] Соединение закрыто:", {\n        code: event.code,\n        reason: event.reason,\n        wasClean: event.wasClean\n      });\n    };\n    document.addEventListener("keydown", handleKeyDown);\n  } catch (error) {\n    console.error("[WS] Ошибка при создании WebSocket:", error);\n    console.error("[WS] Стек вызовов:", error.stack);\n  }\n}\n;// ./src/index.js\nfunction src_typeof(o) { "@babel/helpers - typeof"; return src_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, src_typeof(o); }\nfunction src_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ src_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == src_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(src_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction src_asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction src_asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { src_asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\n// index.js\n\n\n\n\n\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  // Выполняем шаг физической симуляции (например, 1/60 секунды)\n  stepPhysics(1 / 60);\n  updatePhysicsObjects(objects);\n\n  // Пример обновления камеры: следим за первым найденным шаром\n  var targetObject = null;\n  for (var id in objects) {\n    var obj = objects[id];\n    if (obj && obj.mesh && obj.mesh.geometry && obj.mesh.geometry.type === "SphereGeometry") {\n      targetObject = obj;\n      break;\n    }\n  }\n  if (targetObject) {\n    var targetPos = targetObject.mesh.position;\n    var offset = new three_core/* Vector3 */.Pq0(0, 50, 100);\n    var cameraTarget = targetPos.clone().add(offset);\n    scene_camera.position.lerp(cameraTarget, 0.1);\n    scene_camera.lookAt(targetPos);\n  }\n  renderer.render(scene_scene, scene_camera);\n}\nfunction start() {\n  return _start.apply(this, arguments);\n}\nfunction _start() {\n  _start = src_asyncToGenerator(/*#__PURE__*/src_regeneratorRuntime().mark(function _callee() {\n    return src_regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          console.log("Start");\n          initScene();\n          _context.prev = 2;\n          _context.next = 5;\n          return new Promise(function (resolve) {\n            return setTimeout(resolve, 500);\n          });\n        case 5:\n          _context.next = 7;\n          return initAmmo();\n        case 7:\n          // Инициализируем сетевое соединение\n          initNetwork();\n          animate();\n          _context.next = 14;\n          break;\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context["catch"](2);\n          console.error("Ошибка при инициализации Ammo.js:", _context.t0);\n        case 14:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee, null, [[2, 11]]);\n  }));\n  return _start.apply(this, arguments);\n}\nstart();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///251\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var C=1/0;for(g=0;g<deferred.length;g++){for(var[U,F,B]=deferred[g],I=!0,L=0;L<U.length;L++)(!1&B||C>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[L])))?U.splice(L--,1):(I=!1,B<C&&(C=B));if(I){deferred.splice(g--,1);var s=F();void 0!==s&&(Q=s)}}return Q}B=B||0;for(var g=deferred.length;g>0&&deferred[g-1][2]>B;g--)deferred[g]=deferred[g-1];deferred[g]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),(()=>{var Q={792:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,C,[I,L,s]=F,g=0;if(I.some((U=>0!==Q[U]))){for(B in L)__webpack_require__.o(L,B)&&(__webpack_require__.m[B]=L[B]);if(s)var t=s(__webpack_require__)}for(U&&U(F);g<I.length;g++)C=I[g],__webpack_require__.o(Q,C)&&Q[C]&&Q[C][0](),Q[C]=0;return __webpack_require__.O(t)},F=self.webpackChunkweb=self.webpackChunkweb||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[233],(()=>__webpack_require__(251)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();