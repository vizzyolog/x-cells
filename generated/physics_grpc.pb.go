// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: bullet-server/physics.proto

package generated

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Physics_CreateObject_FullMethodName = "/physics.Physics/CreateObject"
	Physics_ApplyImpulse_FullMethodName = "/physics.Physics/ApplyImpulse"
	Physics_GetState_FullMethodName     = "/physics.Physics/GetState"
	Physics_Step_FullMethodName         = "/physics.Physics/Step"
)

// PhysicsClient is the client API for Physics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Универсальный сервис для управления объектами
type PhysicsClient interface {
	CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*CreateObjectResponse, error)
	ApplyImpulse(ctx context.Context, in *ApplyImpulseRequest, opts ...grpc.CallOption) (*ApplyImpulseResponse, error)
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	Step(ctx context.Context, in *StepRequest, opts ...grpc.CallOption) (*StepResponse, error)
}

type physicsClient struct {
	cc grpc.ClientConnInterface
}

func NewPhysicsClient(cc grpc.ClientConnInterface) PhysicsClient {
	return &physicsClient{cc}
}

func (c *physicsClient) CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*CreateObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateObjectResponse)
	err := c.cc.Invoke(ctx, Physics_CreateObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicsClient) ApplyImpulse(ctx context.Context, in *ApplyImpulseRequest, opts ...grpc.CallOption) (*ApplyImpulseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyImpulseResponse)
	err := c.cc.Invoke(ctx, Physics_ApplyImpulse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicsClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, Physics_GetState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicsClient) Step(ctx context.Context, in *StepRequest, opts ...grpc.CallOption) (*StepResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StepResponse)
	err := c.cc.Invoke(ctx, Physics_Step_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhysicsServer is the server API for Physics service.
// All implementations must embed UnimplementedPhysicsServer
// for forward compatibility.
//
// Универсальный сервис для управления объектами
type PhysicsServer interface {
	CreateObject(context.Context, *CreateObjectRequest) (*CreateObjectResponse, error)
	ApplyImpulse(context.Context, *ApplyImpulseRequest) (*ApplyImpulseResponse, error)
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	Step(context.Context, *StepRequest) (*StepResponse, error)
	mustEmbedUnimplementedPhysicsServer()
}

// UnimplementedPhysicsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPhysicsServer struct{}

func (UnimplementedPhysicsServer) CreateObject(context.Context, *CreateObjectRequest) (*CreateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObject not implemented")
}
func (UnimplementedPhysicsServer) ApplyImpulse(context.Context, *ApplyImpulseRequest) (*ApplyImpulseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyImpulse not implemented")
}
func (UnimplementedPhysicsServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedPhysicsServer) Step(context.Context, *StepRequest) (*StepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Step not implemented")
}
func (UnimplementedPhysicsServer) mustEmbedUnimplementedPhysicsServer() {}
func (UnimplementedPhysicsServer) testEmbeddedByValue()                 {}

// UnsafePhysicsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhysicsServer will
// result in compilation errors.
type UnsafePhysicsServer interface {
	mustEmbedUnimplementedPhysicsServer()
}

func RegisterPhysicsServer(s grpc.ServiceRegistrar, srv PhysicsServer) {
	// If the following call pancis, it indicates UnimplementedPhysicsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Physics_ServiceDesc, srv)
}

func _Physics_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicsServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Physics_CreateObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicsServer).CreateObject(ctx, req.(*CreateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Physics_ApplyImpulse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyImpulseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicsServer).ApplyImpulse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Physics_ApplyImpulse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicsServer).ApplyImpulse(ctx, req.(*ApplyImpulseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Physics_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicsServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Physics_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicsServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Physics_Step_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicsServer).Step(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Physics_Step_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicsServer).Step(ctx, req.(*StepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Physics_ServiceDesc is the grpc.ServiceDesc for Physics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Physics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "physics.Physics",
	HandlerType: (*PhysicsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateObject",
			Handler:    _Physics_CreateObject_Handler,
		},
		{
			MethodName: "ApplyImpulse",
			Handler:    _Physics_ApplyImpulse_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _Physics_GetState_Handler,
		},
		{
			MethodName: "Step",
			Handler:    _Physics_Step_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bullet-server/physics.proto",
}
