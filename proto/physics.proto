syntax = "proto3";

package physics;

option go_package = "x-cells/backend/internal/physics/generated";

// Описание векторов и кватернионов
message Vector3 {
  float x = 1;
  float y = 2;
  float z = 3;
}

message Quaternion {
  float x = 1;
  float y = 2;
  float z = 3;
  float w = 4;
}

// Описание форм
message ShapeDescriptor {
  enum ShapeType {
    UNKNOWN = 0;
    SPHERE = 1;
    BOX = 2;
    TERRAIN = 3;
  }
  ShapeType type = 1;

  // Параметры для разных типов форм
  oneof shape {
    SphereData sphere = 10;
    BoxData box = 11;
    TerrainData terrain = 12;
  }
}

message SphereData {
  float radius = 1;
  float mass = 2;
  string color = 3;
  // Физические свойства объекта
  float restitution = 4;     // Упругость (отскок)
  float friction = 5;        // Трение
  float rolling_friction = 6; // Сопротивление качению
  float linear_damping = 7;   // Линейное затухание
  float angular_damping = 8;  // Угловое затухание
}

message BoxData {
  float width = 1;
  float height = 2;
  float depth = 3;
  float mass = 4;
  string color = 5;
  // Физические свойства объекта
  float restitution = 6;     // Упругость (отскок)
  float friction = 7;        // Трение
  float rolling_friction = 8; // Сопротивление качению
  float linear_damping = 9;   // Линейное затухание
  float angular_damping = 10; // Угловое затухание
}

message TerrainData {
  int32 width = 1;
  int32 depth = 2;
  repeated float heightmap = 3;
  float scale_x = 4;
  float scale_y = 5;
  float scale_z = 6;
  float min_height = 7;
  float max_height = 8;
}

// Сервисные сообщения
message CreateObjectRequest {
  string id = 1;
  Vector3 position = 2;
  Quaternion rotation = 3;
  ShapeDescriptor shape = 4;
  PhysicsConfig physics_config = 5;
}

message CreateObjectResponse {
  string status = 1;
}

message ApplyImpulseRequest {
  string id = 1;
  Vector3 impulse = 2;
}

message ApplyImpulseResponse {
  string status = 1;
}

message ApplyTorqueRequest {
  string id = 1;
  Vector3 torque = 2;
}

message ApplyTorqueResponse {
  string status = 1;
}

message GetObjectStateRequest {
  string id = 1;
}

message ObjectState {
  Vector3 position = 1;
  Quaternion rotation = 2;
  Vector3 linear_velocity = 3;
  Vector3 angular_velocity = 4;
}

message GetObjectStateResponse {
  string status = 1;
  ObjectState state = 2;
}

// Сервис физики
service Physics {
  rpc CreateObject(CreateObjectRequest) returns (CreateObjectResponse);
  rpc ApplyImpulse(ApplyImpulseRequest) returns (ApplyImpulseResponse);
  rpc ApplyTorque(ApplyTorqueRequest) returns (ApplyTorqueResponse);
  rpc GetObjectState(GetObjectStateRequest) returns (GetObjectStateResponse);
  rpc UpdateObjectMass(UpdateObjectMassRequest) returns (UpdateObjectMassResponse);
  rpc UpdateObjectRadius(UpdateObjectRadiusRequest) returns (UpdateObjectRadiusResponse);
  rpc UpdateObjectMassAndRadius(UpdateObjectMassAndRadiusRequest) returns (UpdateObjectMassAndRadiusResponse);
  rpc SetPhysicsConfig(SetPhysicsConfigRequest) returns (SetPhysicsConfigResponse);
}

// Запрос для обновления массы объекта
message UpdateObjectMassRequest {
  string id = 1;
  float mass = 2;
}

// Ответ на запрос обновления массы
message UpdateObjectMassResponse {
  string status = 1;
}

// Запрос для обновления радиуса объекта
message UpdateObjectRadiusRequest {
  string id = 1;
  float radius = 2;
}

// Ответ на запрос обновления радиуса
message UpdateObjectRadiusResponse {
  string status = 1;
}

// Запрос для обновления массы и радиуса объекта одновременно
message UpdateObjectMassAndRadiusRequest {
  string id = 1;
  float mass = 2;
  float radius = 3;
}

// Ответ на запрос обновления массы и радиуса
message UpdateObjectMassAndRadiusResponse {
  string status = 1;
}

// Глобальные настройки физики мира
message WorldPhysicsConfig {
  // Настройки гравитации
  float gravity_x = 1;
  float gravity_y = 2;
  float gravity_z = 3;
  
  // Глобальные параметры затухания
  float linear_damping = 4;
  float angular_damping = 5;
  
  // Глобальные параметры трения
  float friction = 6;
  float rolling_friction = 7;
}

// Настройки игрока
message PlayerConfig {
  // Физические характеристики игрока
  float player_mass = 1;        // Масса игрока
  float restitution = 2;        // Способность к отскоку (скилл прыгучести)
}

// Настройки управления
message ControlConfig {
  // Настройки импульсов и движения
  float base_impulse = 1;
  float max_impulse = 2;
  float distance_multiplier = 3;
  float impulse_multiplier = 4;
}

// Обновленная конфигурация физики
message PhysicsConfig {
  WorldPhysicsConfig world = 1;
  PlayerConfig player = 2;
  ControlConfig control = 3;
}

// Запрос для установки конфигурации физики
message SetPhysicsConfigRequest {
  PhysicsConfig config = 1;
}

// Ответ на запрос установки конфигурации физики
message SetPhysicsConfigResponse {
  string status = 1;
}