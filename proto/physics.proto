syntax = "proto3";

package physics;

option go_package = "x-cells/backend/internal/physics/generated";

// Описание векторов и кватернионов
message Vector3 {
  float x = 1;
  float y = 2;
  float z = 3;
}

message Quaternion {
  float x = 1;
  float y = 2;
  float z = 3;
  float w = 4;
}

// Описание форм
message ShapeDescriptor {
  enum ShapeType {
    UNKNOWN = 0;
    SPHERE = 1;
    BOX = 2;
    TERRAIN = 3;
  }
  ShapeType type = 1;

  // Параметры для разных типов форм
  oneof shape {
    SphereData sphere = 10;
    BoxData box = 11;
    TerrainData terrain = 12;
  }
}

message SphereData {
  float radius = 1;
  float mass = 2;
  string color = 3;
}

message BoxData {
  float width = 1;
  float height = 2;
  float depth = 3;
  float mass = 4;
  string color = 5;
}

message TerrainData {
  int32 width = 1;
  int32 depth = 2;
  repeated float heightmap = 3;
  float scale_x = 4;
  float scale_y = 5;
  float scale_z = 6;
}

// Сервисные сообщения
message CreateObjectRequest {
  string id = 1;
  Vector3 position = 2;
  Quaternion rotation = 3;
  ShapeDescriptor shape = 4;
}

message CreateObjectResponse {
  string status = 1;
}

message ApplyImpulseRequest {
  string id = 1;
  Vector3 impulse = 2;
}

message ApplyImpulseResponse {
  string status = 1;
}

message ApplyTorqueRequest {
  string id = 1;
  Vector3 torque = 2;
}

message ApplyTorqueResponse {
  string status = 1;
}

message GetObjectStateRequest {
  string id = 1;
}

message ObjectState {
  Vector3 position = 1;
  Quaternion rotation = 2;
  Vector3 linear_velocity = 3;
  Vector3 angular_velocity = 4;
}

message GetObjectStateResponse {
  string status = 1;
  ObjectState state = 2;
}

// Сервис физики
service Physics {
  rpc CreateObject(CreateObjectRequest) returns (CreateObjectResponse);
  rpc ApplyImpulse(ApplyImpulseRequest) returns (ApplyImpulseResponse);
  rpc ApplyTorque(ApplyTorqueRequest) returns (ApplyTorqueResponse);
  rpc GetObjectState(GetObjectStateRequest) returns (GetObjectStateResponse);
}