// –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è
export class ClientTelemetry {
    constructor() {
        this.enabled = true;
        this.verboseMode = false; // –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω
        this.data = [];
        this.maxEntries = 200; // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 –∑–∞–ø–∏—Å–µ–π
        this.counters = {};
        this.lastPrint = Date.now();
        this.printInterval = 5000; // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ (–±—ã–ª–æ 2)
        
        // –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        this.lastStates = new Map();
        
        // console.log('üî¨ [ClientTelemetry] –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (—Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º)');
        // console.log('üí° –ö–æ–º–∞–Ω–¥—ã: enableVerboseTelemetry() / disableVerboseTelemetry()');
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    logObjectState(objectId, objectType, physicsType, position, velocity, mass, radius, source = 'client') {
        if (!this.enabled) return;

        const speed = this.calculateSpeed(velocity);
        
        const entry = {
            timestamp: Date.now(),
            objectId,
            objectType,
            physicsType,
            position: { ...position },
            velocity: { ...velocity },
            mass,
            radius,
            speed,
            source
        };

        this.data.push(entry);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
        if (this.data.length > this.maxEntries) {
            this.data.shift();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        const key = `${objectType}_${physicsType}`;
        this.counters[key] = (this.counters[key] || 0) + 1;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—á–∞—Ç–∞—Ç—å —Å–≤–æ–¥–∫—É
        this.checkPrintSummary();
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–º–ø—É–ª—å—Å–∞
    logImpulse(objectId, objectType, physicsType, position, velocity, mass, radius, impulse, source = 'client') {
        if (!this.enabled) return;

        const speed = this.calculateSpeed(velocity);
        
        const entry = {
            timestamp: Date.now(),
            objectId,
            objectType,
            physicsType,
            position: { ...position },
            velocity: { ...velocity },
            mass,
            radius,
            speed,
            appliedImpulse: { ...impulse },
            source
        };

        this.data.push(entry);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
        if (this.data.length > this.maxEntries) {
            this.data.shift();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        this.counters[`impulse_${objectType}`] = (this.counters[`impulse_${objectType}`] || 0) + 1;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—á–∞—Ç–∞—Ç—å —Å–≤–æ–¥–∫—É
        this.checkPrintSummary();
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
    logCorrection(objectId, currentPos, targetPos, correctionType, distance) {
        if (!this.enabled) return;

        const entry = {
            timestamp: Date.now(),
            objectId,
            objectType: 'player', // –ö–æ—Ä—Ä–µ–∫—Ü–∏–∏ –æ–±—ã—á–Ω–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
            eventType: 'correction',
            currentPos: { ...currentPos },
            targetPos: { ...targetPos },
            correctionType, // 'smooth', 'hard', 'teleport'
            distance,
            source: 'client'
        };

        this.data.push(entry);
        
        if (this.data.length > this.maxEntries) {
            this.data.shift();
        }

        this.counters[`correction_${correctionType}`] = (this.counters[`correction_${correctionType}`] || 0) + 1;
        this.checkPrintSummary();
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∫–ª–∏–µ–Ω—Ç–∞
    logClientCommand(direction, distance, force) {
        if (!this.enabled) return;

        const entry = {
            timestamp: Date.now(),
            eventType: 'client_command',
            direction: { ...direction },
            distance,
            force: force ? { ...force } : null,
            source: 'client'
        };

        this.data.push(entry);
        
        if (this.data.length > this.maxEntries) {
            this.data.shift();
        }

        this.counters['client_commands'] = (this.counters['client_commands'] || 0) + 1;
        this.checkPrintSummary();
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
    logServerUpdate(objectId, position, velocity, hasGarbageData = false) {
        if (!this.enabled) return;

        const entry = {
            timestamp: Date.now(),
            objectId,
            eventType: 'server_update',
            position: position ? { ...position } : null,
            velocity: velocity ? { ...velocity } : null,
            hasGarbageData,
            source: 'server'
        };

        this.data.push(entry);
        
        if (this.data.length > this.maxEntries) {
            this.data.shift();
        }

        const key = hasGarbageData ? 'server_updates_garbage' : 'server_updates_valid';
        this.counters[key] = (this.counters[key] || 0) + 1;
        this.checkPrintSummary();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—á–∞—Ç–∞—Ç—å —Å–≤–æ–¥–∫—É
    checkPrintSummary() {
        const now = Date.now();
        if (now - this.lastPrint >= this.printInterval) {
            this.printSummary();
            this.lastPrint = now;
        }
    }

    // –ü–µ—á–∞—Ç—å —Å–≤–æ–¥–∫–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
    printSummary() {
        if (!this.enabled) return;

        if (this.verboseMode) {
            // –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º
            // console.log('üî¨ [ClientTelemetry] ===== –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –¢–ï–õ–ï–ú–ï–¢–†–ò–Ø =====');
            // console.log(`üìä [ClientTelemetry] –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${this.data.length}`);

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—á–µ—Ç—á–∏–∫–∞–º
            // for (const [key, count] of Object.entries(this.counters)) {
            //     console.log(`üìà [ClientTelemetry] ${key}: ${count}`);
            // }

            // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–≥—Ä–æ–∫–∞–º
            this.printRecentPlayerData();

            // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
            this.analyzeIssues();
            
            // console.log('üî¨ [ClientTelemetry] ===================================');
        } else {
            // –ö—Ä–∞—Ç–∫–∏–π —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º—ã
            this.printCompactSummary();
        }

        // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤
        this.counters = {};
    }

    // –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º—ã)
    printCompactSummary() {
        const recentTime = Date.now() - this.printInterval;
        const recentData = this.data.filter(entry => entry.timestamp > recentTime);
        
        // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        const corrections = recentData.filter(entry => entry.eventType === 'correction').length;
        const garbageUpdates = recentData.filter(entry => 
            entry.eventType === 'server_update' && entry.hasGarbageData
        ).length;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
        if (corrections > 10 || garbageUpdates > 0) {
            // console.warn(`üî¨ [ClientTelemetry] –ü—Ä–æ–±–ª–µ–º—ã: –∫–æ—Ä—Ä–µ–∫—Ü–∏–π ${corrections}, –º—É—Å–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ${garbageUpdates}`);
            
            // –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
            this.analyzeIssues();
        } else {
            // –ü—Ä–æ—Å—Ç–æ —Ç–∏—Ö–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á—Ç–æ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
            // console.log(`üî¨ [ClientTelemetry] –û–ö (–∑–∞–ø–∏—Å–µ–π: ${this.data.length})`);
        }
    }

    // –ü–µ—á–∞—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –∏–≥—Ä–æ–∫–æ–≤
    printRecentPlayerData() {
        // –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
        const playerData = new Map();
        
        for (let i = this.data.length - 1; i >= 0; i--) {
            const entry = this.data[i];
            if (entry.objectType === 'player' && entry.position && !playerData.has(entry.objectId)) {
                playerData.set(entry.objectId, entry);
            }
        }

        for (const [playerId, data] of playerData) {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ —á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è
            const timestamp = new Date(data.timestamp);
            const timeStr = timestamp.toLocaleTimeString('ru-RU', { 
                hour12: false, 
                hour: '2-digit', 
                minute: '2-digit', 
                second: '2-digit',
                fractionalSecondDigits: 3 
            });
            
            // console.log(`üéÆ [ClientTelemetry] –ò–≥—Ä–æ–∫ ${playerId} [${timeStr}]:`);
            // console.log(`   üìç –ü–æ–∑–∏—Ü–∏—è: (${data.position.x.toFixed(2)}, ${data.position.y.toFixed(2)}, ${data.position.z.toFixed(2)})`);
            
            if (data.velocity) {
                // console.log(`   üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: (${data.velocity.x.toFixed(2)}, ${data.velocity.y.toFixed(2)}, ${data.velocity.z.toFixed(2)}) |${data.speed.toFixed(2)}|`);
            }
            
            if (data.mass !== undefined) {
                // console.log(`   ‚öñÔ∏è  –ú–∞—Å—Å–∞: ${data.mass.toFixed(2)} –∫–≥, –†–∞–¥–∏—É—Å: ${data.radius.toFixed(2)}`);
            }
            
            // console.log(`   üîß –§–∏–∑–∏–∫–∞: ${data.physicsType}, –ò—Å—Ç–æ—á–Ω–∏–∫: ${data.source}`);
            // console.log(`   ‚è∞ –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞: ${data.timestamp}`);
            
            if (data.appliedImpulse) {
                // console.log(`   üí• –ò–º–ø—É–ª—å—Å: (${data.appliedImpulse.x.toFixed(2)}, ${data.appliedImpulse.y.toFixed(2)}, ${data.appliedImpulse.z.toFixed(2)})`);
            }
        }
    }

    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
    analyzeIssues() {
        const recentTime = Date.now() - this.printInterval;
        const recentData = this.data.filter(entry => entry.timestamp > recentTime);

        // –ê–Ω–∞–ª–∏–∑ –º—É—Å–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
        const garbageUpdates = recentData.filter(entry => 
            entry.eventType === 'server_update' && entry.hasGarbageData
        );
        
        if (garbageUpdates.length > 0) {
            // console.warn(`‚ö†Ô∏è  [ClientTelemetry] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${garbageUpdates.length} –º—É—Å–æ—Ä–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞`);
        }

        // –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–∫—Ü–∏–π
        const corrections = recentData.filter(entry => entry.eventType === 'correction');
        if (corrections.length > 0) {
            const avgDistance = corrections.reduce((sum, c) => sum + c.distance, 0) / corrections.length;
            // console.warn(`üîß [ClientTelemetry] ${corrections.length} –∫–æ—Ä—Ä–µ–∫—Ü–∏–π, —Å—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: ${avgDistance.toFixed(2)}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
            const bigCorrections = corrections.filter(c => c.distance > 5.0);
            if (bigCorrections.length > 0) {
                // console.warn(`üö® [ClientTelemetry] ${bigCorrections.length} –±–æ–ª—å—à–∏—Ö –∫–æ—Ä—Ä–µ–∫—Ü–∏–π (>5.0 –µ–¥–∏–Ω–∏—Ü)`);
            }
        }

        // –ê–Ω–∞–ª–∏–∑ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        const serverUpdates = recentData.filter(entry => entry.eventType === 'server_update');
        const clientCommands = recentData.filter(entry => entry.eventType === 'client_command');
        
        if (serverUpdates.length > 100) {
            // console.warn(`üìà [ClientTelemetry] –í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${serverUpdates.length}/2—Å–µ–∫`);
        }
        
        if (clientCommands.length > 50) {
            // console.warn(`üìà [ClientTelemetry] –í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥: ${clientCommands.length}/2—Å–µ–∫`);
        }

        // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
        this.analyzeTimeDiscrepancies(recentData);
    }

    // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º
    analyzeTimeDiscrepancies(recentData) {
        const clientStates = recentData.filter(entry => 
            entry.objectType === 'player' && entry.source === 'client'
        );
        const serverStates = recentData.filter(entry => 
            entry.objectType === 'player' && entry.source === 'server'
        );

        if (clientStates.length > 0 && serverStates.length > 0) {
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            const latestClient = clientStates[clientStates.length - 1];
            const latestServer = serverStates[serverStates.length - 1];
            
            const timeDiff = Math.abs(latestClient.timestamp - latestServer.timestamp);
            
            if (timeDiff > 1000) { // –ë–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
                // console.warn(`‚è∞ [ClientTelemetry] –ë–æ–ª—å—à–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: ${timeDiff}–º—Å`);
            }

            // –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–π
            if (latestClient.position && latestServer.position) {
                const posDiff = Math.sqrt(
                    Math.pow(latestClient.position.x - latestServer.position.x, 2) +
                    Math.pow(latestClient.position.y - latestServer.position.y, 2) +
                    Math.pow(latestClient.position.z - latestServer.position.z, 2)
                );
                
                if (posDiff > 2.0) {
                    // console.warn(`üìç [ClientTelemetry] –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∫–ª–∏–µ–Ω—Ç-—Å–µ—Ä–≤–µ—Ä: ${posDiff.toFixed(2)} –µ–¥–∏–Ω–∏—Ü`);
                    // console.log(`   –ö–ª–∏–µ–Ω—Ç: (${latestClient.position.x.toFixed(2)}, ${latestClient.position.y.toFixed(2)}, ${latestClient.position.z.toFixed(2)})`);
                    // console.log(`   –°–µ—Ä–≤–µ—Ä: (${latestServer.position.x.toFixed(2)}, ${latestServer.position.y.toFixed(2)}, ${latestServer.position.z.toFixed(2)})`);
                }
            }
        }
    }

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    calculateSpeed(velocity) {
        if (!velocity) return 0;
        return Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z);
    }

    // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
    setEnabled(enabled) {
        this.enabled = enabled;
        // console.log(`üî¨ [ClientTelemetry] –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è ${enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
    }

    // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    setVerboseMode(verbose) {
        this.verboseMode = verbose;
        // console.log(`üî¨ [ClientTelemetry] ${verbose ? '–ü–æ–¥—Ä–æ–±–Ω—ã–π' : '–¢–∏—Ö–∏–π'} —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω`);
    }

    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    clear() {
        this.data = [];
        this.counters = {};
        this.lastStates.clear();
        // console.log('üî¨ [ClientTelemetry] –î–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –æ—á–∏—â–µ–Ω—ã');
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON
    exportJSON() {
        return JSON.stringify(this.data, null, 2);
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–µ–π
    exportForComparison() {
        const compatibleData = this.data.map(entry => ({
            timestamp: entry.timestamp,
            object_id: entry.objectId,
            object_type: entry.objectType,
            physics_type: entry.physicsType,
            position: entry.position,
            velocity: entry.velocity,
            mass: entry.mass,
            radius: entry.radius,
            speed: entry.speed,
            applied_impulse: entry.appliedImpulse,
            source: entry.source,
            event_type: entry.eventType,
            correction_type: entry.correctionType,
            distance: entry.distance
        }));
        
        return JSON.stringify(compatibleData, null, 2);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getStats() {
        const now = Date.now();
        const last5sec = this.data.filter(entry => now - entry.timestamp < 5000);
        
        return {
            totalEntries: this.data.length,
            entriesLast5sec: last5sec.length,
            counters: { ...this.counters },
            enabled: this.enabled
        };
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
export const clientTelemetry = new ClientTelemetry();

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
let telemetryUI = null;

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å UI, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
function integrateWithUI() {
    if (window.telemetryUI && !telemetryUI) {
        telemetryUI = window.telemetryUI;
        // console.log('üñ•Ô∏è [ClientTelemetry] –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –≤–∫–ª—é—á–µ–Ω–∞');
    }
}

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å UI
const originalLogCorrection = clientTelemetry.logCorrection.bind(clientTelemetry);
clientTelemetry.logCorrection = function(objectId, currentPos, targetPos, correctionType, distance) {
    originalLogCorrection(objectId, currentPos, targetPos, correctionType, distance);
    
    if (telemetryUI) {
        telemetryUI.logCorrection(objectId, currentPos, targetPos, correctionType, distance);
    }
};

const originalLogServerUpdate = clientTelemetry.logServerUpdate.bind(clientTelemetry);
clientTelemetry.logServerUpdate = function(objectId, position, velocity, hasGarbageData = false) {
    originalLogServerUpdate(objectId, position, velocity, hasGarbageData);
    
    if (telemetryUI) {
        telemetryUI.logServerUpdate(objectId, position, velocity, hasGarbageData);
    }
};

const originalLogClientCommand = clientTelemetry.logClientCommand.bind(clientTelemetry);
clientTelemetry.logClientCommand = function(direction, distance, force) {
    originalLogClientCommand(direction, distance, force);
    
    if (telemetryUI) {
        telemetryUI.logClientCommand(direction, distance, force);
    }
};

const originalLogObjectState = clientTelemetry.logObjectState.bind(clientTelemetry);
clientTelemetry.logObjectState = function(objectId, objectType, physicsType, position, velocity, mass, radius, source = 'client') {
    originalLogObjectState(objectId, objectType, physicsType, position, velocity, mass, radius, source);
    
    if (telemetryUI) {
        const speed = this.calculateSpeed(velocity);
        telemetryUI.addDetailedEntry('object-state', {
            objectId,
            objectType,
            physicsType,
            position,
            velocity,
            mass,
            radius,
            speed,
            source
        });
    }
};

const originalLogImpulse = clientTelemetry.logImpulse.bind(clientTelemetry);
clientTelemetry.logImpulse = function(objectId, objectType, physicsType, position, velocity, mass, radius, impulse, source = 'client') {
    originalLogImpulse(objectId, objectType, physicsType, position, velocity, mass, radius, impulse, source);
    
    if (telemetryUI) {
        telemetryUI.addDetailedEntry('object-state', {
            objectId,
            objectType,
            physicsType,
            position,
            velocity,
            mass,
            radius,
            speed: this.calculateSpeed(velocity),
            appliedImpulse: impulse,
            source
        });
    }
};

const originalPrintSummary = clientTelemetry.printSummary.bind(clientTelemetry);
clientTelemetry.printSummary = function() {
    originalPrintSummary();
    
    if (telemetryUI) {
        const stats = clientTelemetry.getStats();
        telemetryUI.logSummary(stats);
    }
};

// –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å UI –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ —á–µ—Ä–µ–∑ —Ç–∞–π–º–µ—Ä
setTimeout(integrateWithUI, 100);
setInterval(() => {
    if (!telemetryUI) integrateWithUI();
}, 1000);

// –ö–æ–Ω—Å–æ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
window.enableClientTelemetry = () => clientTelemetry.setEnabled(true);
window.disableClientTelemetry = () => clientTelemetry.setEnabled(false);
window.enableVerboseTelemetry = () => clientTelemetry.setVerboseMode(true);
window.disableVerboseTelemetry = () => clientTelemetry.setVerboseMode(false);
window.clearClientTelemetry = () => clientTelemetry.clear();
window.exportClientTelemetry = () => {
    // console.log(clientTelemetry.exportJSON());
    return clientTelemetry.exportJSON();
};
window.clientTelemetryStats = () => {
    // console.log(clientTelemetry.getStats());
    return clientTelemetry.getStats();
};
window.exportClientTelemetryForComparison = () => {
    // console.log(clientTelemetry.exportForComparison());
    return clientTelemetry.exportForComparison();
}; 