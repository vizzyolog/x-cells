// ui.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏–≥—Ä—ã

// === –°–û–ó–î–ê–ù–ò–ï –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï UI –ü–ê–ù–ï–õ–Ø–ú–ò ===

export function createGameUI() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ —É–∂–µ –ø–∞–Ω–µ–ª—å
    if (document.getElementById('unifiedGameUI')) {
        console.log('[UI] –ü–∞–Ω–µ–ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã');
        return;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const uiContainer = document.createElement('div');
    uiContainer.id = 'unifiedGameUI';
    uiContainer.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1000;
        pointer-events: none;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    `;
    document.body.appendChild(uiContainer);
    
    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏
    createNetworkInfoPanel(uiContainer);
    createPlayerInfoPanel(uiContainer);
    createGameStatsPanel(uiContainer);
    createFoodStatsPanel(uiContainer);
    
    console.log('[UI] –ï–¥–∏–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ (4 –ø–∞–Ω–µ–ª–∏)');
}

function createNetworkInfoPanel(container) {
    const panel = document.createElement('div');
    panel.style.cssText = `
        position: absolute;
        top: 120px;
        left: 10px;
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 12px;
        border-radius: 8px;
        border: 2px solid #9370DB;
        min-width: 250px;
        font-size: 12px;
        z-index: 999;
    `;
    
    panel.innerHTML = `
        <div style="font-weight: bold; margin-bottom: 8px; color: #9370DB;">üì° –°–ï–¢–¨</div>
        <div id="ping-display">–ü–∏–Ω–≥: -- –º—Å</div>
        <div id="jitter-display">–î–∂–∏—Ç—Ç–µ—Ä: -- –º—Å</div>
        <div id="strategy-display">–°—Ç—Ä–∞—Ç–µ–≥–∏—è: --</div>
        <div id="adaptation-display">–ê–¥–∞–ø—Ç–∞—Ü–∏—è: --</div>
        <div id="server-time">–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: --</div>
        <div id="time-offset">–°–º–µ—â–µ–Ω–∏–µ: -- –º—Å</div>
        <div id="server-delay-display">–ó–∞–¥–µ—Ä–∂–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: -- –º—Å</div>
    `;
    
    container.appendChild(panel);
    console.log('[UI] –°–µ—Ç–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞');
}

function createPlayerInfoPanel(container) {
    const panel = document.createElement('div');
    panel.id = 'player-info-panel';
    panel.style.cssText = `
        position: absolute;
        bottom: 10px;
        left: 10px;
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 12px;
        border-radius: 8px;
        border: 2px solid #00ff00;
        min-width: 200px;
        font-size: 12px;
        z-index: 999;
    `;
    
    panel.innerHTML = `
        <div style="font-weight: bold; margin-bottom: 8px; color: #00ff00;">üöÄ –ò–ì–†–û–ö</div>
        <div>–°–∫–æ—Ä–æ—Å—Ç—å: <span id="player-speed">0.0 –º/—Å</span></div>
        <div>–ú–∞—Å—Å–∞: <span id="player-mass">0.0 –∫–≥</span></div>
        <div>–ü–æ–∑–∏—Ü–∏—è: <span id="player-position">(0, 0, 0)</span></div>
        <div>–°—Ç–∞—Ç—É—Å: <span id="player-status">–ü–æ–∏—Å–∫...</span></div>
        <div style="margin-top: 8px; font-size: 10px; opacity: 0.7;">
            ‚Üê ‚Üë ‚Üì ‚Üí –¥–≤–∏–∂–µ–Ω–∏–µ | SPACE –ø—Ä—ã–∂–æ–∫
        </div>
    `;
    
    container.appendChild(panel);
    console.log('[UI] –ü–∞–Ω–µ–ª—å –∏–≥—Ä–æ–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
}

function createGameStatsPanel(container) {
    const panel = document.createElement('div');
    panel.style.cssText = `
        position: absolute;
        bottom: 10px;
        right: 10px;
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 12px;
        border-radius: 8px;
        border: 2px solid #00ffff;
        min-width: 200px;
        font-size: 12px;
        z-index: 999;
    `;
    
    panel.innerHTML = `
        <div style="font-weight: bold; margin-bottom: 8px; color: #00ffff;">üéÆ –°–ï–†–í–ï–†</div>
        <div>–¢–∏–∫–æ–≤: <span id="tickCount">0</span></div>
        <div>–ò–≥—Ä–æ–∫–æ–≤: <span id="playersCount">0</span></div>
        <div>–û–±—ä–µ–∫—Ç–æ–≤: <span id="objectsCount">0</span></div>
        <div>–ü–∏–Ω–≥: <span id="ping-display-server">-- –º—Å</span></div>
    `;
    
    container.appendChild(panel);
    console.log('[UI] –ü–∞–Ω–µ–ª—å —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞');
}

function createFoodStatsPanel(container) {
    const panel = document.createElement('div');
    panel.style.cssText = `
        position: absolute;
        top: 10px;
        right: 270px;
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 12px;
        border-radius: 8px;
        border: 2px solid #FFD700;
        min-width: 250px;
        font-size: 12px;
        z-index: 999;
    `;
    
    panel.innerHTML = `
        <div style="font-weight: bold; margin-bottom: 8px; color: #FFD700;">üçé –ï–î–ê –í –ú–ò–†–ï</div>
        <div>–í—Å–µ–≥–æ: <span id="totalFood">0</span></div>
        <div style="margin-top: 8px;">
            <div style="display: flex; justify-content: space-between; margin: 3px 0;">
                <span style="color: #90EE90;">‚óè –û–±—ã—á–Ω–∞—è:</span>
                <span id="basicFood">0</span>
            </div>
            <div style="display: flex; justify-content: space-between; margin: 3px 0;">
                <span style="color: #FFD700;">‚óè –°—Ä–µ–¥–Ω—è—è:</span>
                <span id="mediumFood">0</span>
            </div>
            <div style="display: flex; justify-content: space-between; margin: 3px 0;">
                <span style="color: #FF6347;">‚óè –ë–æ–ª—å—à–∞—è:</span>
                <span id="largeFood">0</span>
            </div>
            <div style="display: flex; justify-content: space-between; margin: 3px 0;">
                <span style="color: #9370DB; text-shadow: 0 0 4px #9370DB;">‚óè –†–µ–¥–∫–∞—è:</span>
                <span id="rareFood" style="font-weight: bold;">0</span>
            </div>
        </div>
    `;
    
    container.appendChild(panel);
    console.log('[UI] –ü–∞–Ω–µ–ª—å –µ–¥—ã —Å–æ–∑–¥–∞–Ω–∞');
}

// === –§–£–ù–ö–¶–ò–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø UI ===

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–æ–∫–µ
export function updatePlayerInfo(playerData) {
    console.log('[UI] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–æ–∫–µ:', playerData);
    updatePlayerSpeed(playerData.speed || 0);
    updatePlayerMass(playerData.mass || 0);
    updatePlayerPosition(playerData.position || { x: 0, y: 0, z: 0 });
    updatePlayerStatus(playerData.status || '–í –∏–≥—Ä–µ');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
export function updatePlayerSpeed(speed) {
    const element = document.getElementById('player-speed');
    if (element) {
        element.textContent = `${speed.toFixed(1)} –º/—Å`;
        
        // –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        if (speed < 5) {
            element.style.color = '#90EE90'; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –Ω–∏–∑–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        } else if (speed < 15) {
            element.style.color = '#FFD700'; // –ñ–µ–ª—Ç—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        } else {
            element.style.color = '#FF6347'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        }
        console.log(`[UI] –°–∫–æ—Ä–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${speed.toFixed(1)} –º/—Å`);
    } else {
        console.warn('[UI] –≠–ª–µ–º–µ–Ω—Ç player-speed –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å—ã –∏–≥—Ä–æ–∫–∞
export function updatePlayerMass(mass) {
    const element = document.getElementById('player-mass');
    if (element) {
        element.textContent = `${mass.toFixed(1)} –∫–≥`;
        
        // –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –º–∞—Å—Å—ã
        if (mass < 10) {
            element.style.color = '#90EE90'; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –º–∞–ª–æ–π –º–∞—Å—Å—ã
        } else if (mass < 50) {
            element.style.color = '#FFD700'; // –ñ–µ–ª—Ç—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π –º–∞—Å—Å—ã
        } else {
            element.style.color = '#FF6347'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –±–æ–ª—å—à–æ–π –º–∞—Å—Å—ã
        }
        console.log(`[UI] –ú–∞—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${mass.toFixed(1)} –∫–≥`);
    } else {
        console.warn('[UI] –≠–ª–µ–º–µ–Ω—Ç player-mass –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
export function updatePlayerPosition(position) {
    const element = document.getElementById('player-position');
    if (element) {
        element.textContent = `(${position.x.toFixed(1)}, ${position.y.toFixed(1)}, ${position.z.toFixed(1)})`;
        console.log(`[UI] –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: (${position.x.toFixed(1)}, ${position.y.toFixed(1)}, ${position.z.toFixed(1)})`);
    } else {
        console.warn('[UI] –≠–ª–µ–º–µ–Ω—Ç player-position –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä–æ–∫–∞
export function updatePlayerStatus(status) {
    const element = document.getElementById('player-status');
    if (element) {
        element.textContent = status;
        
        // –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
        switch (status) {
            case '–í –∏–≥—Ä–µ':
                element.style.color = '#00ff00';
                break;
            case '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...':
                element.style.color = '#FFD700';
                break;
            case '–û—Ç–∫–ª—é—á–µ–Ω':
                element.style.color = '#ff0000';
                break;
            default:
                element.style.color = '#ffffff';
        }
        console.log(`[UI] –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${status}`);
    } else {
        console.warn('[UI] –≠–ª–µ–º–µ–Ω—Ç player-status –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
}

// === –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ï–¢–ï–í–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò ===

export function updatePingDisplay(pingValue) {
    const pingElement = document.getElementById('ping-display');
    const pingServerElement = document.getElementById('ping-display-server');
    const jitterElement = document.getElementById('jitter-display');
    const strategyElement = document.getElementById('strategy-display');
    const adaptationElement = document.getElementById('adaptation-display');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç –ø–∏–Ω–≥–∞ –≤ —Å–µ—Ç–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    if (pingElement) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏–Ω–≥–∞ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
        if (pingValue < 50) {
            pingElement.style.color = '#4CAF50'; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –ø–∏–Ω–≥–∞
        } else if (pingValue < 150) {
            pingElement.style.color = '#FF9800'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–∏–Ω–≥–∞
        } else {
            pingElement.style.color = '#F44336'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –ø–∏–Ω–≥–∞
            // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–≥–∞–Ω–∏–µ –¥–ª—è –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–≥–æ –ø–∏–Ω–≥–∞
            if (pingValue > 300) {
                pingElement.style.animation = 'blink 1s infinite';
            } else {
                pingElement.style.animation = 'none';
            }
        }
        pingElement.textContent = `–ü–∏–Ω–≥: ${Math.round(pingValue)} –º—Å`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–∏–Ω–≥–∞ –≤ –ø–∞–Ω–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞
    if (pingServerElement) {
        pingServerElement.textContent = `${Math.round(pingValue)} –º—Å`;
        pingServerElement.style.color = pingValue < 50 ? '#4CAF50' : 
                                       pingValue < 150 ? '#FF9800' : '#F44336';
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∂–∏—Ç—Ç–µ—Ä–µ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∏–∑ —Ñ–∏–∑–∏–∫–∏
    if (typeof getSmoothedJitter === 'function') {
        const jitter = getSmoothedJitter();
        if (jitterElement) {
            if (jitter < 10) {
                jitterElement.style.color = '#4CAF50';
            } else if (jitter < 30) {
                jitterElement.style.color = '#FF9800';
            } else {
                jitterElement.style.color = '#F44336';
            }
            jitterElement.textContent = `–î–∂–∏—Ç—Ç–µ—Ä: ${jitter.toFixed(1)} –º—Å`;
        }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
    if (typeof getInterpolationStrategy === 'function') {
        const strategy = getInterpolationStrategy(pingValue);
        if (strategyElement) {
            let strategyText = '';
            let strategyColor = '';
            
            switch (strategy) {
                case 'linear':
                    strategyText = '–õ–∏–Ω–µ–π–Ω–∞—è';
                    strategyColor = '#4CAF50';
                    break;
                case 'hermite':
                    strategyText = 'Hermite';
                    strategyColor = '#FF9800';
                    break;
                case 'extrapolation':
                    strategyText = '–≠–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è';
                    strategyColor = '#F44336';
                    break;
                default:
                    strategyText = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                    strategyColor = '#9E9E9E';
            }
            
            strategyElement.style.color = strategyColor;
            strategyElement.textContent = `–°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${strategyText}`;
        }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
    if (typeof networkMonitor !== 'undefined' && adaptationElement) {
        const isAdapting = networkMonitor.adaptationState.isAdapting;
        if (isAdapting) {
            adaptationElement.style.color = '#FF9800';
            adaptationElement.textContent = '–ê–¥–∞–ø—Ç–∞—Ü–∏—è: ‚ö° –ê–∫—Ç–∏–≤–Ω–∞';
            adaptationElement.style.animation = 'blink 0.5s infinite';
        } else {
            adaptationElement.style.color = '#4CAF50';
            adaptationElement.textContent = '–ê–¥–∞–ø—Ç–∞—Ü–∏—è: ‚úì –°—Ç–∞–±–∏–ª—å–Ω–æ';
            adaptationElement.style.animation = 'none';
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
export function updateTimeDisplay(serverTime, timeOffset) {
    const serverTimeElem = document.getElementById('server-time');
    const timeOffsetElem = document.getElementById('time-offset');
    
    if (serverTimeElem && timeOffsetElem) {
        const serverDate = new Date(serverTime);
        serverTimeElem.textContent = `–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${serverDate.toLocaleTimeString()}`;
        timeOffsetElem.textContent = `–°–º–µ—â–µ–Ω–∏–µ: ${timeOffset.toFixed(0)} –º—Å`;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
export function updateServerDelayDisplay(delay) {
    const delayDisplay = document.getElementById('server-delay-display');
    if (delayDisplay) {
        delayDisplay.textContent = `–ó–∞–¥–µ—Ä–∂–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${delay.toFixed(0)} –º—Å`;
    }
}

// === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ì–†–û–í–û–ô –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ–¥—ã
export function updateFoodStatsDisplay(foodStats) {
    const elements = {
        totalFood: document.getElementById('totalFood'),
        basicFood: document.getElementById('basicFood'), 
        mediumFood: document.getElementById('mediumFood'),
        largeFood: document.getElementById('largeFood'),
        rareFood: document.getElementById('rareFood')
    };
    
    if (elements.totalFood) {
        elements.totalFood.textContent = foodStats.total || 0;
    }
    if (elements.basicFood) {
        elements.basicFood.textContent = foodStats.basic || 0;
    }
    if (elements.mediumFood) {
        elements.mediumFood.textContent = foodStats.medium || 0;
    }
    if (elements.largeFood) {
        elements.largeFood.textContent = foodStats.large || 0;
    }
    if (elements.rareFood) {
        elements.rareFood.textContent = foodStats.rare || 0;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤
export function updateObjectsCount(count) {
    const element = document.getElementById('objectsCount');
    if (element) {
        element.textContent = count;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ç–∏–∫–æ–≤
export function updateTickCountDisplay(count) {
    const element = document.getElementById('tickCount');
    if (element) {
        element.textContent = count;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
export function updatePlayersCountDisplay(count) {
    const element = document.getElementById('playersCount');
    if (element) {
        element.textContent = count;
    }
}

// === –ü–†–û–í–ï–†–ö–ê –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï UI ===

export function ensureUIExists() {
    const container = document.getElementById('unifiedGameUI');
    if (!container) {
        console.log('[UI] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ');
        createGameUI();
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const checks = [
        { id: 'player-speed', panel: '–∏–≥—Ä–æ–∫–∞' },
        { id: 'ping-display', panel: '—Å–µ—Ç–∏' },
        { id: 'totalFood', panel: '–µ–¥—ã' },
        { id: 'tickCount', panel: '—Å–µ—Ä–≤–µ—Ä–∞' }
    ];
    
    let missingElements = [];
    checks.forEach(check => {
        if (!document.getElementById(check.id)) {
            missingElements.push(check.panel);
        }
    });
    
    if (missingElements.length > 0) {
        console.log(`[UI] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–Ω–µ–ª–∏: ${missingElements.join(', ')}, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º UI`);
        container.remove();
        createGameUI();
    } else {
        console.log('[UI] –í—Å–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞ –º–µ—Å—Ç–µ');
    }
} 